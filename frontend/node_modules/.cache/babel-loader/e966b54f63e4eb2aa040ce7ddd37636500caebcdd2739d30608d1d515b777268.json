{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport { DateUtils } from './Util';\nimport { presignUrl, signRequest, TOKEN_QUERY_PARAM } from './clients/middleware/signing/signer/signatureV4';\nvar IOT_SERVICE_NAME = 'iotdevicegateway';\n// Best practice regex to parse the service and region from an AWS endpoint\nvar AWS_ENDPOINT_REGEX = /([^\\.]+)\\.(?:([^\\.]*)\\.)?amazonaws\\.com(.cn)?$/;\nvar Signer = /** @class */function () {\n  function Signer() {}\n  /**\n  * Sign a HTTP request, add 'Authorization' header to request param\n  * @method sign\n  * @memberof Signer\n  * @static\n  *\n  * @param {object} request - HTTP request object\n  <pre>\n  request: {\n      method: GET | POST | PUT ...\n      url: ...,\n      headers: {\n          header1: ...\n      },\n      data: data\n  }\n  </pre>\n  * @param {object} access_info - AWS access credential info\n  <pre>\n  access_info: {\n      access_key: ...,\n      secret_key: ...,\n      session_token: ...\n  }\n  </pre>\n  * @param {object} [service_info] - AWS service type and region, optional,\n  *                                  if not provided then parse out from url\n  <pre>\n  service_info: {\n      service: ...,\n      region: ...\n  }\n  </pre>\n  *\n  * @returns {object} Signed HTTP request\n  */\n  Signer.sign = function (request, accessInfo, serviceInfo) {\n    request.headers = request.headers || {};\n    if (request.body && !request.data) {\n      throw new Error('The attribute \"body\" was found on the request object. Please use the attribute \"data\" instead.');\n    }\n    var requestToSign = __assign(__assign({}, request), {\n      body: request.data,\n      url: new URL(request.url)\n    });\n    var options = getOptions(requestToSign, accessInfo, serviceInfo);\n    var signedRequest = signRequest(requestToSign, options);\n    // Prior to using `signRequest`, Signer accepted urls as strings and outputted urls as string. Coerce the property\n    // back to a string so as not to disrupt consumers of Signer.\n    signedRequest.url = signedRequest.url.toString();\n    // HTTP headers should be case insensitive but, to maintain parity with the previous Signer implementation and\n    // limit the impact of this implementation swap, replace lowercased headers with title cased ones.\n    signedRequest.headers.Authorization = signedRequest.headers.authorization;\n    signedRequest.headers['X-Amz-Security-Token'] = signedRequest.headers['x-amz-security-token'];\n    delete signedRequest.headers.authorization;\n    delete signedRequest.headers['x-amz-security-token'];\n    return signedRequest;\n  };\n  Signer.signUrl = function (urlOrRequest, accessInfo, serviceInfo, expiration) {\n    var urlToSign = typeof urlOrRequest === 'object' ? urlOrRequest.url : urlOrRequest;\n    var method = typeof urlOrRequest === 'object' ? urlOrRequest.method : 'GET';\n    var body = typeof urlOrRequest === 'object' ? urlOrRequest.body : undefined;\n    var presignable = {\n      body: body,\n      method: method,\n      url: new URL(urlToSign)\n    };\n    var options = getOptions(presignable, accessInfo, serviceInfo, expiration);\n    var signedUrl = presignUrl(presignable, options);\n    if (accessInfo.session_token && !sessionTokenRequiredInSigning(options.signingService)) {\n      signedUrl.searchParams.append(TOKEN_QUERY_PARAM, accessInfo.session_token);\n    }\n    return signedUrl.toString();\n  };\n  return Signer;\n}();\nexport { Signer };\nvar getOptions = function (request, accessInfo, serviceInfo, expiration) {\n  var _a = accessInfo !== null && accessInfo !== void 0 ? accessInfo : {},\n    access_key = _a.access_key,\n    secret_key = _a.secret_key,\n    session_token = _a.session_token;\n  var _b = parseServiceInfo(request.url),\n    urlRegion = _b.region,\n    urlService = _b.service;\n  var _c = serviceInfo !== null && serviceInfo !== void 0 ? serviceInfo : {},\n    _d = _c.region,\n    region = _d === void 0 ? urlRegion : _d,\n    _e = _c.service,\n    service = _e === void 0 ? urlService : _e;\n  var credentials = __assign({\n    accessKeyId: access_key,\n    secretAccessKey: secret_key\n  }, sessionTokenRequiredInSigning(service) ? {\n    sessionToken: session_token\n  } : {});\n  return __assign({\n    credentials: credentials,\n    signingDate: DateUtils.getDateWithClockOffset(),\n    signingRegion: region,\n    signingService: service\n  }, expiration && {\n    expiration: expiration\n  });\n};\n// TODO: V6 investigate whether add to custom clients' general signer implementation.\nvar parseServiceInfo = function (url) {\n  var _a;\n  var host = url.host;\n  var matched = (_a = host.match(AWS_ENDPOINT_REGEX)) !== null && _a !== void 0 ? _a : [];\n  var parsed = matched.slice(1, 3);\n  if (parsed[1] === 'es') {\n    // Elastic Search\n    parsed = parsed.reverse();\n  }\n  return {\n    service: parsed[0],\n    region: parsed[1]\n  };\n};\n// IoT service does not allow the session token in the canonical request\n// https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n// TODO: V6 investigate whether add to custom clients' general signer implementation.\nvar sessionTokenRequiredInSigning = function (service) {\n  return service !== IOT_SERVICE_NAME;\n};","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","DateUtils","presignUrl","signRequest","TOKEN_QUERY_PARAM","IOT_SERVICE_NAME","AWS_ENDPOINT_REGEX","Signer","sign","request","accessInfo","serviceInfo","headers","body","data","Error","requestToSign","url","URL","options","getOptions","signedRequest","toString","Authorization","authorization","signUrl","urlOrRequest","expiration","urlToSign","method","undefined","presignable","signedUrl","session_token","sessionTokenRequiredInSigning","signingService","searchParams","append","_a","access_key","secret_key","_b","parseServiceInfo","urlRegion","region","urlService","service","_c","_d","_e","credentials","accessKeyId","secretAccessKey","sessionToken","signingDate","getDateWithClockOffset","signingRegion","host","matched","match","parsed","slice","reverse"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-amplify/core/lib-esm/Signer.js"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { DateUtils } from './Util';\nimport { presignUrl, signRequest, TOKEN_QUERY_PARAM, } from './clients/middleware/signing/signer/signatureV4';\nvar IOT_SERVICE_NAME = 'iotdevicegateway';\n// Best practice regex to parse the service and region from an AWS endpoint\nvar AWS_ENDPOINT_REGEX = /([^\\.]+)\\.(?:([^\\.]*)\\.)?amazonaws\\.com(.cn)?$/;\nvar Signer = /** @class */ (function () {\n    function Signer() {\n    }\n    /**\n    * Sign a HTTP request, add 'Authorization' header to request param\n    * @method sign\n    * @memberof Signer\n    * @static\n    *\n    * @param {object} request - HTTP request object\n    <pre>\n    request: {\n        method: GET | POST | PUT ...\n        url: ...,\n        headers: {\n            header1: ...\n        },\n        data: data\n    }\n    </pre>\n    * @param {object} access_info - AWS access credential info\n    <pre>\n    access_info: {\n        access_key: ...,\n        secret_key: ...,\n        session_token: ...\n    }\n    </pre>\n    * @param {object} [service_info] - AWS service type and region, optional,\n    *                                  if not provided then parse out from url\n    <pre>\n    service_info: {\n        service: ...,\n        region: ...\n    }\n    </pre>\n    *\n    * @returns {object} Signed HTTP request\n    */\n    Signer.sign = function (request, accessInfo, serviceInfo) {\n        request.headers = request.headers || {};\n        if (request.body && !request.data) {\n            throw new Error('The attribute \"body\" was found on the request object. Please use the attribute \"data\" instead.');\n        }\n        var requestToSign = __assign(__assign({}, request), { body: request.data, url: new URL(request.url) });\n        var options = getOptions(requestToSign, accessInfo, serviceInfo);\n        var signedRequest = signRequest(requestToSign, options);\n        // Prior to using `signRequest`, Signer accepted urls as strings and outputted urls as string. Coerce the property\n        // back to a string so as not to disrupt consumers of Signer.\n        signedRequest.url = signedRequest.url.toString();\n        // HTTP headers should be case insensitive but, to maintain parity with the previous Signer implementation and\n        // limit the impact of this implementation swap, replace lowercased headers with title cased ones.\n        signedRequest.headers.Authorization = signedRequest.headers.authorization;\n        signedRequest.headers['X-Amz-Security-Token'] =\n            signedRequest.headers['x-amz-security-token'];\n        delete signedRequest.headers.authorization;\n        delete signedRequest.headers['x-amz-security-token'];\n        return signedRequest;\n    };\n    Signer.signUrl = function (urlOrRequest, accessInfo, serviceInfo, expiration) {\n        var urlToSign = typeof urlOrRequest === 'object' ? urlOrRequest.url : urlOrRequest;\n        var method = typeof urlOrRequest === 'object' ? urlOrRequest.method : 'GET';\n        var body = typeof urlOrRequest === 'object' ? urlOrRequest.body : undefined;\n        var presignable = {\n            body: body,\n            method: method,\n            url: new URL(urlToSign),\n        };\n        var options = getOptions(presignable, accessInfo, serviceInfo, expiration);\n        var signedUrl = presignUrl(presignable, options);\n        if (accessInfo.session_token &&\n            !sessionTokenRequiredInSigning(options.signingService)) {\n            signedUrl.searchParams.append(TOKEN_QUERY_PARAM, accessInfo.session_token);\n        }\n        return signedUrl.toString();\n    };\n    return Signer;\n}());\nexport { Signer };\nvar getOptions = function (request, accessInfo, serviceInfo, expiration) {\n    var _a = accessInfo !== null && accessInfo !== void 0 ? accessInfo : {}, access_key = _a.access_key, secret_key = _a.secret_key, session_token = _a.session_token;\n    var _b = parseServiceInfo(request.url), urlRegion = _b.region, urlService = _b.service;\n    var _c = serviceInfo !== null && serviceInfo !== void 0 ? serviceInfo : {}, _d = _c.region, region = _d === void 0 ? urlRegion : _d, _e = _c.service, service = _e === void 0 ? urlService : _e;\n    var credentials = __assign({ accessKeyId: access_key, secretAccessKey: secret_key }, (sessionTokenRequiredInSigning(service)\n        ? { sessionToken: session_token }\n        : {}));\n    return __assign({ credentials: credentials, signingDate: DateUtils.getDateWithClockOffset(), signingRegion: region, signingService: service }, (expiration && { expiration: expiration }));\n};\n// TODO: V6 investigate whether add to custom clients' general signer implementation.\nvar parseServiceInfo = function (url) {\n    var _a;\n    var host = url.host;\n    var matched = (_a = host.match(AWS_ENDPOINT_REGEX)) !== null && _a !== void 0 ? _a : [];\n    var parsed = matched.slice(1, 3);\n    if (parsed[1] === 'es') {\n        // Elastic Search\n        parsed = parsed.reverse();\n    }\n    return {\n        service: parsed[0],\n        region: parsed[1],\n    };\n};\n// IoT service does not allow the session token in the canonical request\n// https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n// TODO: V6 investigate whether add to custom clients' general signer implementation.\nvar sessionTokenRequiredInSigning = function (service) {\n    return service !== IOT_SERVICE_NAME;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}