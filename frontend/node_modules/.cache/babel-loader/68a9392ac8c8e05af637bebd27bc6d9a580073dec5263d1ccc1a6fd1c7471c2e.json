{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { TextractClient } from \"./TextractClient\";\nimport { AnalyzeDocumentCommand } from \"./commands/AnalyzeDocumentCommand\";\nimport { DetectDocumentTextCommand } from \"./commands/DetectDocumentTextCommand\";\nimport { GetDocumentAnalysisCommand } from \"./commands/GetDocumentAnalysisCommand\";\nimport { GetDocumentTextDetectionCommand } from \"./commands/GetDocumentTextDetectionCommand\";\nimport { StartDocumentAnalysisCommand } from \"./commands/StartDocumentAnalysisCommand\";\nimport { StartDocumentTextDetectionCommand } from \"./commands/StartDocumentTextDetectionCommand\";\n/**\n * <p>Amazon Textract detects and analyzes text in documents and converts it\n *          into machine-readable text. This is the API reference documentation for\n *          Amazon Textract.</p>\n */\nvar Textract = /** @class */function (_super) {\n  __extends(Textract, _super);\n  function Textract() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Textract.prototype.analyzeDocument = function (args, optionsOrCb, cb) {\n    var command = new AnalyzeDocumentCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Textract.prototype.detectDocumentText = function (args, optionsOrCb, cb) {\n    var command = new DetectDocumentTextCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Textract.prototype.getDocumentAnalysis = function (args, optionsOrCb, cb) {\n    var command = new GetDocumentAnalysisCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Textract.prototype.getDocumentTextDetection = function (args, optionsOrCb, cb) {\n    var command = new GetDocumentTextDetectionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Textract.prototype.startDocumentAnalysis = function (args, optionsOrCb, cb) {\n    var command = new StartDocumentAnalysisCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Textract.prototype.startDocumentTextDetection = function (args, optionsOrCb, cb) {\n    var command = new StartDocumentTextDetectionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  return Textract;\n}(TextractClient);\nexport { Textract };","map":{"version":3,"names":["TextractClient","AnalyzeDocumentCommand","DetectDocumentTextCommand","GetDocumentAnalysisCommand","GetDocumentTextDetectionCommand","StartDocumentAnalysisCommand","StartDocumentTextDetectionCommand","Textract","_super","__extends","prototype","analyzeDocument","args","optionsOrCb","cb","command","send","Error","detectDocumentText","getDocumentAnalysis","getDocumentTextDetection","startDocumentAnalysis","startDocumentTextDetection"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-sdk/client-textract/Textract.ts"],"sourcesContent":["import { TextractClient } from \"./TextractClient\";\nimport {\n  AnalyzeDocumentCommand,\n  AnalyzeDocumentCommandInput,\n  AnalyzeDocumentCommandOutput,\n} from \"./commands/AnalyzeDocumentCommand\";\nimport {\n  DetectDocumentTextCommand,\n  DetectDocumentTextCommandInput,\n  DetectDocumentTextCommandOutput,\n} from \"./commands/DetectDocumentTextCommand\";\nimport {\n  GetDocumentAnalysisCommand,\n  GetDocumentAnalysisCommandInput,\n  GetDocumentAnalysisCommandOutput,\n} from \"./commands/GetDocumentAnalysisCommand\";\nimport {\n  GetDocumentTextDetectionCommand,\n  GetDocumentTextDetectionCommandInput,\n  GetDocumentTextDetectionCommandOutput,\n} from \"./commands/GetDocumentTextDetectionCommand\";\nimport {\n  StartDocumentAnalysisCommand,\n  StartDocumentAnalysisCommandInput,\n  StartDocumentAnalysisCommandOutput,\n} from \"./commands/StartDocumentAnalysisCommand\";\nimport {\n  StartDocumentTextDetectionCommand,\n  StartDocumentTextDetectionCommandInput,\n  StartDocumentTextDetectionCommandOutput,\n} from \"./commands/StartDocumentTextDetectionCommand\";\nimport { HttpHandlerOptions as __HttpHandlerOptions } from \"@aws-sdk/types\";\n\n/**\n * <p>Amazon Textract detects and analyzes text in documents and converts it\n *          into machine-readable text. This is the API reference documentation for\n *          Amazon Textract.</p>\n */\nexport class Textract extends TextractClient {\n  /**\n   * <p>Analyzes an input document for relationships between detected items.  </p>\n   *          <p>The types of information returned are as follows: </p>\n   *          <ul>\n   *             <li>\n   *                <p>Form data (key-value pairs). The related information is returned in two <a>Block</a> objects, each of type <code>KEY_VALUE_SET</code>: a KEY\n   *                   <code>Block</code> object and a VALUE <code>Block</code> object. For example,\n   *                   <i>Name: Ana Silva Carolina</i> contains a key and value.\n   *                   <i>Name:</i> is the key. <i>Ana Silva Carolina</i> is\n   *                the value.</p>\n   *             </li>\n   *             <li>\n   *                <p>Table and table cell data. A TABLE <code>Block</code> object contains information about a detected table. A CELL\n   *                <code>Block</code> object is returned for each cell in a table.</p>\n   *             </li>\n   *             <li>\n   *                <p>Lines and words of text. A LINE <code>Block</code> object contains one or more WORD <code>Block</code> objects.\n   *         All lines and words that are detected in the document are returned (including text that doesn't have a\n   *                relationship with the value of <code>FeatureTypes</code>). </p>\n   *             </li>\n   *          </ul>\n   *\n   *          <p>Selection elements such as check boxes and option buttons (radio buttons) can be detected in form data and in tables.\n   *          A SELECTION_ELEMENT <code>Block</code> object contains information about a selection element,\n   *          including the selection status.</p>\n   *          <p>You can choose which type of analysis to perform by specifying the <code>FeatureTypes</code> list.\n   *       </p>\n   *          <p>The output is returned in a list of <code>Block</code> objects.</p>\n   *          <p>\n   *             <code>AnalyzeDocument</code> is a synchronous operation. To analyze documents\n   *       asynchronously, use <a>StartDocumentAnalysis</a>.</p>\n   *          <p>For more information, see <a href=\"https://docs.aws.amazon.com/textract/latest/dg/how-it-works-analyzing.html\">Document Text Analysis</a>.</p>\n   */\n  public analyzeDocument(\n    args: AnalyzeDocumentCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<AnalyzeDocumentCommandOutput>;\n  public analyzeDocument(\n    args: AnalyzeDocumentCommandInput,\n    cb: (err: any, data?: AnalyzeDocumentCommandOutput) => void\n  ): void;\n  public analyzeDocument(\n    args: AnalyzeDocumentCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: AnalyzeDocumentCommandOutput) => void\n  ): void;\n  public analyzeDocument(\n    args: AnalyzeDocumentCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: AnalyzeDocumentCommandOutput) => void),\n    cb?: (err: any, data?: AnalyzeDocumentCommandOutput) => void\n  ): Promise<AnalyzeDocumentCommandOutput> | void {\n    const command = new AnalyzeDocumentCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Detects text in the input document. Amazon Textract can detect lines of text and the\n   *          words that make up a line of text. The input document must be an image in JPEG or PNG\n   *          format. <code>DetectDocumentText</code> returns the detected text in an array of <a>Block</a> objects. </p>\n   *          <p>Each document page has as an associated <code>Block</code> of type PAGE. Each PAGE <code>Block</code> object\n   *          is the parent of LINE <code>Block</code> objects that represent the lines of detected text on a page. A LINE <code>Block</code> object is\n   *          a parent for each word that makes up the line. Words are represented by <code>Block</code> objects of type WORD.</p>\n   *\n   *          <p>\n   *             <code>DetectDocumentText</code> is a synchronous operation. To analyze documents\n   *          asynchronously, use <a>StartDocumentTextDetection</a>.</p>\n   *          <p>For more information, see <a href=\"https://docs.aws.amazon.com/textract/latest/dg/how-it-works-detecting.html\">Document Text Detection</a>.</p>\n   */\n  public detectDocumentText(\n    args: DetectDocumentTextCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DetectDocumentTextCommandOutput>;\n  public detectDocumentText(\n    args: DetectDocumentTextCommandInput,\n    cb: (err: any, data?: DetectDocumentTextCommandOutput) => void\n  ): void;\n  public detectDocumentText(\n    args: DetectDocumentTextCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DetectDocumentTextCommandOutput) => void\n  ): void;\n  public detectDocumentText(\n    args: DetectDocumentTextCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DetectDocumentTextCommandOutput) => void),\n    cb?: (err: any, data?: DetectDocumentTextCommandOutput) => void\n  ): Promise<DetectDocumentTextCommandOutput> | void {\n    const command = new DetectDocumentTextCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets the results for an Amazon Textract asynchronous operation that analyzes text in a document.</p>\n   *          <p>You start asynchronous text analysis by calling <a>StartDocumentAnalysis</a>, which returns a job identifier\n   *             (<code>JobId</code>). When the text analysis operation finishes, Amazon Textract publishes a\n   *          completion status to the Amazon Simple Notification Service (Amazon SNS) topic that's registered in the initial call to\n   *             <code>StartDocumentAnalysis</code>. To get the results of the text-detection operation,\n   *          first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>.\n   *          If so, call <code>GetDocumentAnalysis</code>, and pass the job identifier\n   *             (<code>JobId</code>) from the initial call to <code>StartDocumentAnalysis</code>.</p>\n   *          <p>\n   *             <code>GetDocumentAnalysis</code> returns an array of <a>Block</a> objects. The following\n   *          types of information are returned: </p>\n   *          <ul>\n   *             <li>\n   *                <p>Form data (key-value pairs). The related information is returned in two <a>Block</a> objects, each of type <code>KEY_VALUE_SET</code>: a KEY\n   *             <code>Block</code> object and a VALUE <code>Block</code> object. For example,\n   *             <i>Name: Ana Silva Carolina</i> contains a key and value.\n   *             <i>Name:</i> is the key. <i>Ana Silva Carolina</i> is\n   *             the value.</p>\n   *             </li>\n   *             <li>\n   *                <p>Table and table cell data. A TABLE <code>Block</code> object contains information about a detected table. A CELL\n   *             <code>Block</code> object is returned for each cell in a table.</p>\n   *             </li>\n   *             <li>\n   *                <p>Lines and words of text. A LINE <code>Block</code> object contains one or more WORD <code>Block</code> objects.\n   *             All lines and words that are detected in the document are returned (including text that doesn't have a\n   *             relationship with the value of the <code>StartDocumentAnalysis</code>\n   *                   <code>FeatureTypes</code> input parameter). </p>\n   *             </li>\n   *          </ul>\n   *\n   *          <p>Selection elements such as check boxes and option buttons (radio buttons) can be detected in form data and in tables.\n   *          A SELECTION_ELEMENT <code>Block</code> object contains information about a selection element,\n   *          including the selection status.</p>\n   *\n   *\n   *\n   *          <p>Use the <code>MaxResults</code> parameter to limit the number of blocks that are\n   *          returned. If there are more results than specified in <code>MaxResults</code>, the value of\n   *             <code>NextToken</code> in the operation response contains a pagination token for getting\n   *          the next set of results. To get the next page of results, call\n   *             <code>GetDocumentAnalysis</code>, and populate the <code>NextToken</code> request\n   *          parameter with the token value that's returned from the previous call to\n   *             <code>GetDocumentAnalysis</code>.</p>\n   *          <p>For more information, see <a href=\"https://docs.aws.amazon.com/textract/latest/dg/how-it-works-analyzing.html\">Document Text Analysis</a>.</p>\n   */\n  public getDocumentAnalysis(\n    args: GetDocumentAnalysisCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<GetDocumentAnalysisCommandOutput>;\n  public getDocumentAnalysis(\n    args: GetDocumentAnalysisCommandInput,\n    cb: (err: any, data?: GetDocumentAnalysisCommandOutput) => void\n  ): void;\n  public getDocumentAnalysis(\n    args: GetDocumentAnalysisCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: GetDocumentAnalysisCommandOutput) => void\n  ): void;\n  public getDocumentAnalysis(\n    args: GetDocumentAnalysisCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: GetDocumentAnalysisCommandOutput) => void),\n    cb?: (err: any, data?: GetDocumentAnalysisCommandOutput) => void\n  ): Promise<GetDocumentAnalysisCommandOutput> | void {\n    const command = new GetDocumentAnalysisCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets the results for an Amazon Textract asynchronous operation that detects text in a document.\n   *      Amazon Textract can detect lines of text and the words that make up a line of text.</p>\n   *          <p>You start asynchronous text detection by calling <a>StartDocumentTextDetection</a>, which returns a job identifier\n   *             (<code>JobId</code>). When the text detection operation finishes, Amazon Textract publishes a\n   *          completion status to the Amazon Simple Notification Service (Amazon SNS) topic that's registered in the initial call to\n   *             <code>StartDocumentTextDetection</code>. To get the results of the text-detection\n   *          operation, first check that the status value published to the Amazon SNS topic is\n   *             <code>SUCCEEDED</code>. If so, call <code>GetDocumentTextDetection</code>, and pass the\n   *          job identifier (<code>JobId</code>) from the initial call to\n   *             <code>StartDocumentTextDetection</code>.</p>\n   *          <p>\n   *             <code>GetDocumentTextDetection</code> returns an array of <a>Block</a>\n   *          objects. </p>\n   *          <p>Each document page has as an associated <code>Block</code> of type PAGE. Each PAGE <code>Block</code> object\n   *         is the parent of LINE <code>Block</code> objects that represent the lines of detected text on a page. A LINE <code>Block</code> object is\n   *         a parent for each word that makes up the line. Words are represented by <code>Block</code> objects of type WORD.</p>\n   *\n   *          <p>Use the MaxResults parameter to limit the number of blocks that are returned. If there\n   *          are more results than specified in <code>MaxResults</code>, the value of\n   *             <code>NextToken</code> in the operation response contains a pagination token for getting\n   *          the next set of results. To get the next page of results, call\n   *             <code>GetDocumentTextDetection</code>, and populate the <code>NextToken</code> request\n   *          parameter with the token value that's returned from the previous call to\n   *             <code>GetDocumentTextDetection</code>.</p>\n   *          <p>For more information, see <a href=\"https://docs.aws.amazon.com/textract/latest/dg/how-it-works-detecting.html\">Document Text Detection</a>.</p>\n   */\n  public getDocumentTextDetection(\n    args: GetDocumentTextDetectionCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<GetDocumentTextDetectionCommandOutput>;\n  public getDocumentTextDetection(\n    args: GetDocumentTextDetectionCommandInput,\n    cb: (err: any, data?: GetDocumentTextDetectionCommandOutput) => void\n  ): void;\n  public getDocumentTextDetection(\n    args: GetDocumentTextDetectionCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: GetDocumentTextDetectionCommandOutput) => void\n  ): void;\n  public getDocumentTextDetection(\n    args: GetDocumentTextDetectionCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: GetDocumentTextDetectionCommandOutput) => void),\n    cb?: (err: any, data?: GetDocumentTextDetectionCommandOutput) => void\n  ): Promise<GetDocumentTextDetectionCommandOutput> | void {\n    const command = new GetDocumentTextDetectionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Starts the asynchronous analysis of an input document for relationships between detected\n   *          items such as key-value pairs, tables, and selection elements.</p>\n   *\n   *          <p>\n   *             <code>StartDocumentAnalysis</code> can analyze text in documents that are in JPEG, PNG, and PDF format. The\n   *          documents are stored in an Amazon S3 bucket. Use <a>DocumentLocation</a> to specify the bucket name and file name\n   *          of the document.\n   *          </p>\n   *          <p>\n   *             <code>StartDocumentAnalysis</code> returns a job identifier\n   *             (<code>JobId</code>) that you use to get the results of the operation. When text\n   *          analysis is finished, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS)\n   *          topic that you specify in <code>NotificationChannel</code>. To get the results of the text\n   *          analysis operation, first check that the status value published to the Amazon SNS topic is\n   *             <code>SUCCEEDED</code>. If so, call <a>GetDocumentAnalysis</a>, and pass\n   *          the job identifier (<code>JobId</code>) from the initial call to\n   *             <code>StartDocumentAnalysis</code>.</p>\n   *          <p>For more information, see <a href=\"https://docs.aws.amazon.com/textract/latest/dg/how-it-works-analyzing.html\">Document Text Analysis</a>.</p>\n   */\n  public startDocumentAnalysis(\n    args: StartDocumentAnalysisCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StartDocumentAnalysisCommandOutput>;\n  public startDocumentAnalysis(\n    args: StartDocumentAnalysisCommandInput,\n    cb: (err: any, data?: StartDocumentAnalysisCommandOutput) => void\n  ): void;\n  public startDocumentAnalysis(\n    args: StartDocumentAnalysisCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StartDocumentAnalysisCommandOutput) => void\n  ): void;\n  public startDocumentAnalysis(\n    args: StartDocumentAnalysisCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StartDocumentAnalysisCommandOutput) => void),\n    cb?: (err: any, data?: StartDocumentAnalysisCommandOutput) => void\n  ): Promise<StartDocumentAnalysisCommandOutput> | void {\n    const command = new StartDocumentAnalysisCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Starts the asynchronous detection of text in a document. Amazon Textract can detect lines of\n   *          text and the words that make up a line of text.</p>\n   *          <p>\n   *             <code>StartDocumentTextDetection</code> can analyze text in documents that are in JPEG, PNG, and PDF format. The\n   *         documents are stored in an Amazon S3 bucket. Use <a>DocumentLocation</a> to specify the bucket name and file name\n   *         of the document.\n   *      </p>\n   *          <p>\n   *             <code>StartTextDetection</code> returns a job identifier\n   *             (<code>JobId</code>) that you use to get the results of the operation. When text\n   *          detection is finished, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS)\n   *          topic that you specify in <code>NotificationChannel</code>. To get the results of the text\n   *          detection operation, first check that the status value published to the Amazon SNS topic is\n   *             <code>SUCCEEDED</code>. If so, call <a>GetDocumentTextDetection</a>, and\n   *          pass the job identifier (<code>JobId</code>) from the initial call to\n   *             <code>StartDocumentTextDetection</code>.</p>\n   *          <p>For more information, see <a href=\"https://docs.aws.amazon.com/textract/latest/dg/how-it-works-detecting.html\">Document Text Detection</a>.</p>\n   */\n  public startDocumentTextDetection(\n    args: StartDocumentTextDetectionCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StartDocumentTextDetectionCommandOutput>;\n  public startDocumentTextDetection(\n    args: StartDocumentTextDetectionCommandInput,\n    cb: (err: any, data?: StartDocumentTextDetectionCommandOutput) => void\n  ): void;\n  public startDocumentTextDetection(\n    args: StartDocumentTextDetectionCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StartDocumentTextDetectionCommandOutput) => void\n  ): void;\n  public startDocumentTextDetection(\n    args: StartDocumentTextDetectionCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StartDocumentTextDetectionCommandOutput) => void),\n    cb?: (err: any, data?: StartDocumentTextDetectionCommandOutput) => void\n  ): Promise<StartDocumentTextDetectionCommandOutput> | void {\n    const command = new StartDocumentTextDetectionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}