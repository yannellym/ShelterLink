{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport Observable from 'zen-observable-ts';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { ReachabilityMonitor } from './datastoreReachability';\nvar logger = new Logger('DataStore');\nvar RECONNECTING_IN = 5000; // 5s this may be configurable in the future\nvar DataStoreConnectivity = /** @class */function () {\n  function DataStoreConnectivity() {\n    this.connectionStatus = {\n      online: false\n    };\n  }\n  DataStoreConnectivity.prototype.status = function () {\n    var _this = this;\n    if (this.observer) {\n      throw new Error('Subscriber already exists');\n    }\n    return new Observable(function (observer) {\n      _this.observer = observer;\n      // Will be used to forward socket connection changes, enhancing Reachability\n      _this.subscription = ReachabilityMonitor.subscribe(function (_a) {\n        var online = _a.online;\n        _this.connectionStatus.online = online;\n        var observerResult = __assign({}, _this.connectionStatus); // copyOf status\n        observer.next(observerResult);\n      });\n      return function () {\n        clearTimeout(_this.timeout);\n        _this.unsubscribe();\n      };\n    });\n  };\n  DataStoreConnectivity.prototype.unsubscribe = function () {\n    if (this.subscription) {\n      clearTimeout(this.timeout);\n      this.subscription.unsubscribe();\n    }\n  };\n  // for consistency with other background processors.\n  DataStoreConnectivity.prototype.stop = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        this.unsubscribe();\n        return [2 /*return*/];\n      });\n    });\n  };\n\n  DataStoreConnectivity.prototype.socketDisconnected = function () {\n    var _this = this;\n    if (this.observer && typeof this.observer.next === 'function') {\n      this.observer.next({\n        online: false\n      }); // Notify network issue from the socket\n      this.timeout = setTimeout(function () {\n        var observerResult = __assign({}, _this.connectionStatus); // copyOf status\n        _this.observer.next(observerResult);\n      }, RECONNECTING_IN); // giving time for socket cleanup and network status stabilization\n    }\n  };\n\n  return DataStoreConnectivity;\n}();\nexport default DataStoreConnectivity;","map":{"version":3,"names":["Observable","ConsoleLogger","Logger","ReachabilityMonitor","logger","RECONNECTING_IN","DataStoreConnectivity","connectionStatus","online","prototype","status","_this","observer","Error","subscription","subscribe","_a","observerResult","__assign","next","clearTimeout","timeout","unsubscribe","stop","socketDisconnected","setTimeout"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-amplify/datastore/src/sync/datastoreConnectivity.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport Observable, { ZenObservable } from 'zen-observable-ts';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { ReachabilityMonitor } from './datastoreReachability';\n\nconst logger = new Logger('DataStore');\n\nconst RECONNECTING_IN = 5000; // 5s this may be configurable in the future\n\ntype ConnectionStatus = {\n\t// Might add other params in the future\n\tonline: boolean;\n};\n\nexport default class DataStoreConnectivity {\n\tprivate connectionStatus: ConnectionStatus;\n\tprivate observer!: ZenObservable.SubscriptionObserver<ConnectionStatus>;\n\tprivate subscription!: ZenObservable.Subscription;\n\tprivate timeout!: ReturnType<typeof setTimeout>;\n\tconstructor() {\n\t\tthis.connectionStatus = {\n\t\t\tonline: false,\n\t\t};\n\t}\n\n\tstatus(): Observable<ConnectionStatus> {\n\t\tif (this.observer) {\n\t\t\tthrow new Error('Subscriber already exists');\n\t\t}\n\t\treturn new Observable((observer) => {\n\t\t\tthis.observer = observer;\n\t\t\t// Will be used to forward socket connection changes, enhancing Reachability\n\n\t\t\tthis.subscription = ReachabilityMonitor.subscribe(({ online }) => {\n\t\t\t\tthis.connectionStatus.online = online;\n\n\t\t\t\tconst observerResult = { ...this.connectionStatus }; // copyOf status\n\n\t\t\t\tobserver.next(observerResult);\n\t\t\t});\n\n\t\t\treturn () => {\n\t\t\t\tclearTimeout(this.timeout);\n\t\t\t\tthis.unsubscribe();\n\t\t\t};\n\t\t});\n\t}\n\n\tunsubscribe() {\n\t\tif (this.subscription) {\n\t\t\tclearTimeout(this.timeout);\n\t\t\tthis.subscription.unsubscribe();\n\t\t}\n\t}\n\n\t// for consistency with other background processors.\n\tasync stop() {\n\t\tthis.unsubscribe();\n\t\treturn;\n\t}\n\n\tsocketDisconnected() {\n\t\tif (this.observer && typeof this.observer.next === 'function') {\n\t\t\tthis.observer.next({ online: false }); // Notify network issue from the socket\n\n\t\t\tthis.timeout = setTimeout(() => {\n\t\t\t\tconst observerResult = { ...this.connectionStatus }; // copyOf status\n\t\t\t\tthis.observer.next(observerResult);\n\t\t\t}, RECONNECTING_IN); // giving time for socket cleanup and network status stabilization\n\t\t}\n\t}\n}\n"],"mappings":";AAAA;AACA;AACA,OAAOA,UAA6B,MAAM,mBAAmB;AAC7D,SAASC,aAAa,IAAIC,MAAM,QAAQ,mBAAmB;AAC3D,SAASC,mBAAmB,QAAQ,yBAAyB;AAE7D,IAAMC,MAAM,GAAG,IAAIF,MAAM,CAAC,WAAW,CAAC;AAEtC,IAAMG,eAAe,GAAG,IAAI,CAAC,CAAC;AAO9B,IAAAC,qBAAA;EAKC,SAAAA,sBAAA;IACC,IAAI,CAACC,gBAAgB,GAAG;MACvBC,MAAM,EAAE;KACR;EACF;EAEAF,qBAAA,CAAAG,SAAA,CAAAC,MAAM,GAAN;IAAA,IAAAC,KAAA;IACC,IAAI,IAAI,CAACC,QAAQ,EAAE;MAClB,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;;IAE7C,OAAO,IAAIb,UAAU,CAAC,UAACY,QAAQ;MAC9BD,KAAI,CAACC,QAAQ,GAAGA,QAAQ;MACxB;MAEAD,KAAI,CAACG,YAAY,GAAGX,mBAAmB,CAACY,SAAS,CAAC,UAACC,EAAU;YAARR,MAAA,GAAAQ,EAAA,CAAAR,MAAM;QAC1DG,KAAI,CAACJ,gBAAgB,CAACC,MAAM,GAAGA,MAAM;QAErC,IAAMS,cAAc,GAAAC,QAAA,KAAQP,KAAI,CAACJ,gBAAgB,CAAE,CAAC,CAAC;QAErDK,QAAQ,CAACO,IAAI,CAACF,cAAc,CAAC;MAC9B,CAAC,CAAC;MAEF,OAAO;QACNG,YAAY,CAACT,KAAI,CAACU,OAAO,CAAC;QAC1BV,KAAI,CAACW,WAAW,EAAE;MACnB,CAAC;IACF,CAAC,CAAC;EACH,CAAC;EAEDhB,qBAAA,CAAAG,SAAA,CAAAa,WAAW,GAAX;IACC,IAAI,IAAI,CAACR,YAAY,EAAE;MACtBM,YAAY,CAAC,IAAI,CAACC,OAAO,CAAC;MAC1B,IAAI,CAACP,YAAY,CAACQ,WAAW,EAAE;;EAEjC,CAAC;EAED;EACMhB,qBAAA,CAAAG,SAAA,CAAAc,IAAI,GAAV;;;QACC,IAAI,CAACD,WAAW,EAAE;QAClB;;;GACA;;EAEDhB,qBAAA,CAAAG,SAAA,CAAAe,kBAAkB,GAAlB;IAAA,IAAAb,KAAA;IACC,IAAI,IAAI,CAACC,QAAQ,IAAI,OAAO,IAAI,CAACA,QAAQ,CAACO,IAAI,KAAK,UAAU,EAAE;MAC9D,IAAI,CAACP,QAAQ,CAACO,IAAI,CAAC;QAAEX,MAAM,EAAE;MAAK,CAAE,CAAC,CAAC,CAAC;MAEvC,IAAI,CAACa,OAAO,GAAGI,UAAU,CAAC;QACzB,IAAMR,cAAc,GAAAC,QAAA,KAAQP,KAAI,CAACJ,gBAAgB,CAAE,CAAC,CAAC;QACrDI,KAAI,CAACC,QAAQ,CAACO,IAAI,CAACF,cAAc,CAAC;MACnC,CAAC,EAAEZ,eAAe,CAAC,CAAC,CAAC;;EAEvB,CAAC;;EACF,OAAAC,qBAAC;AAAD,CAAC,CAzDD"},"metadata":{},"sourceType":"module","externalDependencies":[]}