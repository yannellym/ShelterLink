{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { CreateStreamInput } from \"../models/models_0\";\nimport { deserializeAws_json1_1CreateStreamCommand, serializeAws_json1_1CreateStreamCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Creates a Kinesis data stream. A stream captures and transports data records that\n *             are continuously emitted from different data sources or <i>producers</i>.\n *             Scale-out within a stream is explicitly supported by means of shards, which are uniquely\n *             identified groups of data records in a stream.</p>\n *         <p>You specify and control the number of shards that a stream is composed of. Each\n *             shard can support reads up to five transactions per second, up to a maximum data read\n *             total of 2 MiB per second. Each shard can support writes up to 1,000 records per second,\n *             up to a maximum data write total of 1 MiB per second. If the amount of data input\n *             increases or decreases, you can add or remove shards.</p>\n *         <p>The stream name identifies the stream. The name is scoped to the AWS account used\n *             by the application. It is also scoped by AWS Region. That is, two streams in two\n *             different accounts can have the same name, and two streams in the same account, but in\n *             two different Regions, can have the same name.</p>\n *         <p>\n *             <code>CreateStream</code> is an asynchronous operation. Upon receiving a\n *                 <code>CreateStream</code> request, Kinesis Data Streams immediately returns and sets\n *             the stream status to <code>CREATING</code>. After the stream is created, Kinesis Data\n *             Streams sets the stream status to <code>ACTIVE</code>. You should perform read and write\n *             operations only on an <code>ACTIVE</code> stream. </p>\n *         <p>You receive a <code>LimitExceededException</code> when making a\n *                 <code>CreateStream</code> request when you try to do one of the following:</p>\n *         <ul>\n *             <li>\n *\n *                 <p>Have more than five streams in the <code>CREATING</code> state at any point\n *                     in time.</p>\n *             </li>\n *             <li>\n *\n *                 <p>Create more shards than are authorized for your account.</p>\n *             </li>\n *          </ul>\n *         <p>For the default shard limit for an AWS account, see <a href=\"https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html\">Amazon Kinesis Data Streams\n *                 Limits</a> in the <i>Amazon Kinesis Data Streams Developer\n *                 Guide</i>. To increase this limit, <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html\">contact AWS\n *             Support</a>.</p>\n *         <p>You can use <code>DescribeStream</code> to check the stream status, which is\n *             returned in <code>StreamStatus</code>.</p>\n *         <p>\n *             <a>CreateStream</a> has a limit of five transactions per second per\n *             account.</p>\n */\nvar CreateStreamCommand = /** @class */function (_super) {\n  __extends(CreateStreamCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function CreateStreamCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  CreateStreamCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"KinesisClient\";\n    var commandName = \"CreateStreamCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: CreateStreamInput.filterSensitiveLog,\n      outputFilterSensitiveLog: function (output) {\n        return output;\n      }\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  CreateStreamCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1CreateStreamCommand(input, context);\n  };\n  CreateStreamCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1CreateStreamCommand(output, context);\n  };\n  return CreateStreamCommand;\n}($Command);\nexport { CreateStreamCommand };","map":{"version":3,"names":["CreateStreamInput","deserializeAws_json1_1CreateStreamCommand","serializeAws_json1_1CreateStreamCommand","getSerdePlugin","Command","$Command","CreateStreamCommand","_super","__extends","input","_this","call","prototype","resolveMiddleware","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","logger","clientName","commandName","handlerExecutionContext","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","output","requestHandler","resolve","request","handle","context"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-sdk/client-kinesis/commands/CreateStreamCommand.ts"],"sourcesContent":["import { KinesisClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../KinesisClient\";\nimport { CreateStreamInput } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1CreateStreamCommand,\n  serializeAws_json1_1CreateStreamCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type CreateStreamCommandInput = CreateStreamInput;\nexport type CreateStreamCommandOutput = __MetadataBearer;\n\n/**\n * <p>Creates a Kinesis data stream. A stream captures and transports data records that\n *             are continuously emitted from different data sources or <i>producers</i>.\n *             Scale-out within a stream is explicitly supported by means of shards, which are uniquely\n *             identified groups of data records in a stream.</p>\n *         <p>You specify and control the number of shards that a stream is composed of. Each\n *             shard can support reads up to five transactions per second, up to a maximum data read\n *             total of 2 MiB per second. Each shard can support writes up to 1,000 records per second,\n *             up to a maximum data write total of 1 MiB per second. If the amount of data input\n *             increases or decreases, you can add or remove shards.</p>\n *         <p>The stream name identifies the stream. The name is scoped to the AWS account used\n *             by the application. It is also scoped by AWS Region. That is, two streams in two\n *             different accounts can have the same name, and two streams in the same account, but in\n *             two different Regions, can have the same name.</p>\n *         <p>\n *             <code>CreateStream</code> is an asynchronous operation. Upon receiving a\n *                 <code>CreateStream</code> request, Kinesis Data Streams immediately returns and sets\n *             the stream status to <code>CREATING</code>. After the stream is created, Kinesis Data\n *             Streams sets the stream status to <code>ACTIVE</code>. You should perform read and write\n *             operations only on an <code>ACTIVE</code> stream. </p>\n *         <p>You receive a <code>LimitExceededException</code> when making a\n *                 <code>CreateStream</code> request when you try to do one of the following:</p>\n *         <ul>\n *             <li>\n *\n *                 <p>Have more than five streams in the <code>CREATING</code> state at any point\n *                     in time.</p>\n *             </li>\n *             <li>\n *\n *                 <p>Create more shards than are authorized for your account.</p>\n *             </li>\n *          </ul>\n *         <p>For the default shard limit for an AWS account, see <a href=\"https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html\">Amazon Kinesis Data Streams\n *                 Limits</a> in the <i>Amazon Kinesis Data Streams Developer\n *                 Guide</i>. To increase this limit, <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html\">contact AWS\n *             Support</a>.</p>\n *         <p>You can use <code>DescribeStream</code> to check the stream status, which is\n *             returned in <code>StreamStatus</code>.</p>\n *         <p>\n *             <a>CreateStream</a> has a limit of five transactions per second per\n *             account.</p>\n */\nexport class CreateStreamCommand extends $Command<\n  CreateStreamCommandInput,\n  CreateStreamCommandOutput,\n  KinesisClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: CreateStreamCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: KinesisClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<CreateStreamCommandInput, CreateStreamCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"KinesisClient\";\n    const commandName = \"CreateStreamCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: CreateStreamInput.filterSensitiveLog,\n      outputFilterSensitiveLog: (output: any) => output,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: CreateStreamCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1CreateStreamCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<CreateStreamCommandOutput> {\n    return deserializeAws_json1_1CreateStreamCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"],"mappings":";AACA,SAASA,iBAAiB,QAAQ,oBAAoB;AACtD,SACEC,yCAAyC,EACzCC,uCAAuC,QAClC,0BAA0B;AACjC,SAASC,cAAc,QAAQ,2BAA2B;AAE1D,SAASC,OAAO,IAAIC,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA,IAAAC,mBAAA,0BAAAC,MAAA;EAAyCC,SAAA,CAAAF,mBAAA,EAAAC,MAAA;EAKvC;EACA;EAEA,SAAAD,oBAAqBG,KAA+B;IAApD,IAAAC,KAAA;IACE;IACAH,MAAA,CAAAI,IAAA,MAAO;IAFYD,KAAA,CAAAD,KAAK,GAALA,KAAK;;IAGxB;EACF;EAEA;;;EAGAH,mBAAA,CAAAM,SAAA,CAAAC,iBAAiB,GAAjB,UACEC,WAAmE,EACnEC,aAA0C,EAC1CC,OAA8B;IAE9B,IAAI,CAACC,eAAe,CAACC,GAAG,CAACf,cAAc,CAACY,aAAa,EAAE,IAAI,CAACI,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CAAC;IAEzF,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAM,CAAC,IAAI,CAACL,eAAe,CAAC;IAE9C,IAAAM,MAAM,GAAKR,aAAa,CAAAQ,MAAlB;IACd,IAAMC,UAAU,GAAG,eAAe;IAClC,IAAMC,WAAW,GAAG,qBAAqB;IACzC,IAAMC,uBAAuB,GAA4B;MACvDH,MAAM,EAAAA,MAAA;MACNC,UAAU,EAAAA,UAAA;MACVC,WAAW,EAAAA,WAAA;MACXE,uBAAuB,EAAE3B,iBAAiB,CAAC4B,kBAAkB;MAC7DC,wBAAwB,EAAE,SAAAA,CAACC,MAAW;QAAK,OAAAA,MAAM;MAAN;KAC5C;IACO,IAAAC,cAAc,GAAKhB,aAAa,CAAAgB,cAAlB;IACtB,OAAOV,KAAK,CAACW,OAAO,CAClB,UAACC,OAAsC;MACrC,OAAAF,cAAc,CAACG,MAAM,CAACD,OAAO,CAACA,OAAwB,EAAEjB,OAAO,IAAI,EAAE,CAAC;IAAtE,CAAsE,EACxEU,uBAAuB,CACxB;EACH,CAAC;EAEOpB,mBAAA,CAAAM,SAAA,CAAAO,SAAS,GAAjB,UAAkBV,KAA+B,EAAE0B,OAAuB;IACxE,OAAOjC,uCAAuC,CAACO,KAAK,EAAE0B,OAAO,CAAC;EAChE,CAAC;EAEO7B,mBAAA,CAAAM,SAAA,CAAAQ,WAAW,GAAnB,UAAoBU,MAAsB,EAAEK,OAAuB;IACjE,OAAOlC,yCAAyC,CAAC6B,MAAM,EAAEK,OAAO,CAAC;EACnE,CAAC;EAIH,OAAA7B,mBAAC;AAAD,CAAC,CAtDwCD,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}