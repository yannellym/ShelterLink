{"ast":null,"code":"import { __assign, __awaiter, __extends, __generator, __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport * as Paho from '../vendor/paho-mqtt';\nimport { v4 as uuid } from 'uuid';\nimport Observable from 'zen-observable-ts';\nimport { AbstractPubSubProvider } from './PubSubProvider';\nimport { ConnectionState } from '../types/PubSub';\nimport { ConsoleLogger as Logger, Hub } from '@aws-amplify/core';\nimport { ConnectionStateMonitor, CONNECTION_CHANGE } from '../utils/ConnectionStateMonitor';\nimport { ReconnectEvent, ReconnectionMonitor } from '../utils/ReconnectionMonitor';\nimport { AMPLIFY_SYMBOL, CONNECTION_STATE_CHANGE } from './constants';\nvar logger = new Logger('MqttOverWSProvider');\nexport function mqttTopicMatch(filter, topic) {\n  var filterArray = filter.split('/');\n  var length = filterArray.length;\n  var topicArray = topic.split('/');\n  for (var i = 0; i < length; ++i) {\n    var left = filterArray[i];\n    var right = topicArray[i];\n    if (left === '#') return topicArray.length >= length;\n    if (left !== '+' && left !== right) return false;\n  }\n  return length === topicArray.length;\n}\nvar ClientsQueue = /** @class */function () {\n  function ClientsQueue() {\n    this.promises = new Map();\n  }\n  ClientsQueue.prototype.get = function (clientId, clientFactory) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedPromise, newPromise;\n      var _this = this;\n      return __generator(this, function (_a) {\n        cachedPromise = this.promises.get(clientId);\n        if (cachedPromise) return [2 /*return*/, cachedPromise];\n        if (clientFactory) {\n          newPromise = clientFactory(clientId);\n          this.promises.set(clientId, newPromise);\n          newPromise.catch(function () {\n            return _this.promises.delete(clientId);\n          });\n          return [2 /*return*/, newPromise];\n        }\n        return [2 /*return*/, undefined];\n      });\n    });\n  };\n  Object.defineProperty(ClientsQueue.prototype, \"allClients\", {\n    get: function () {\n      return Array.from(this.promises.keys());\n    },\n    enumerable: true,\n    configurable: true\n  });\n  ClientsQueue.prototype.remove = function (clientId) {\n    this.promises.delete(clientId);\n  };\n  return ClientsQueue;\n}();\nvar dispatchPubSubEvent = function (event, data, message) {\n  Hub.dispatch('pubsub', {\n    event: event,\n    data: data,\n    message: message\n  }, 'PubSub', AMPLIFY_SYMBOL);\n};\nvar topicSymbol = typeof Symbol !== 'undefined' ? Symbol('topic') : '@@topic';\nvar MqttOverWSProvider = /** @class */function (_super) {\n  __extends(MqttOverWSProvider, _super);\n  function MqttOverWSProvider(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var _this = _super.call(this, __assign(__assign({}, options), {\n      clientId: options.clientId || uuid()\n    })) || this;\n    _this._clientsQueue = new ClientsQueue();\n    _this.connectionStateMonitor = new ConnectionStateMonitor();\n    _this.reconnectionMonitor = new ReconnectionMonitor();\n    _this._topicObservers = new Map();\n    _this._clientIdObservers = new Map();\n    // Monitor the connection health state and pass changes along to Hub\n    _this.connectionStateMonitor.connectionStateObservable.subscribe(function (connectionStateChange) {\n      dispatchPubSubEvent(CONNECTION_STATE_CHANGE, {\n        provider: _this,\n        connectionState: connectionStateChange\n      }, \"Connection state is \" + connectionStateChange);\n      _this.connectionState = connectionStateChange;\n      // Trigger reconnection when the connection is disrupted\n      if (connectionStateChange === ConnectionState.ConnectionDisrupted) {\n        _this.reconnectionMonitor.record(ReconnectEvent.START_RECONNECT);\n      } else if (connectionStateChange !== ConnectionState.Connecting) {\n        // Trigger connected to halt reconnection attempts\n        _this.reconnectionMonitor.record(ReconnectEvent.HALT_RECONNECT);\n      }\n    });\n    return _this;\n  }\n  Object.defineProperty(MqttOverWSProvider.prototype, \"clientId\", {\n    get: function () {\n      return this.options.clientId;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MqttOverWSProvider.prototype, \"endpoint\", {\n    get: function () {\n      return Promise.resolve(this.options.aws_pubsub_endpoint);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MqttOverWSProvider.prototype, \"clientsQueue\", {\n    get: function () {\n      return this._clientsQueue;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MqttOverWSProvider.prototype, \"isSSLEnabled\", {\n    get: function () {\n      return !this.options['aws_appsync_dangerously_connect_to_http_endpoint_for_testing'];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  MqttOverWSProvider.prototype.getProviderName = function () {\n    return 'MqttOverWSProvider';\n  };\n  MqttOverWSProvider.prototype.onDisconnect = function (_a) {\n    var clientId = _a.clientId,\n      errorCode = _a.errorCode,\n      args = __rest(_a, [\"clientId\", \"errorCode\"]);\n    if (errorCode !== 0) {\n      logger.warn(clientId, JSON.stringify(__assign({\n        errorCode: errorCode\n      }, args), null, 2));\n      if (!clientId) {\n        return;\n      }\n      var clientIdObservers = this._clientIdObservers.get(clientId);\n      if (!clientIdObservers) {\n        return;\n      }\n      this.disconnect(clientId);\n    }\n  };\n  MqttOverWSProvider.prototype.newClient = function (_a) {\n    var url = _a.url,\n      clientId = _a.clientId;\n    return __awaiter(this, void 0, void 0, function () {\n      var client, connected;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            logger.debug('Creating new MQTT client', clientId);\n            this.connectionStateMonitor.record(CONNECTION_CHANGE.OPENING_CONNECTION);\n            client = new Paho.Client(url, clientId);\n            client.onMessageArrived = function (_a) {\n              var topic = _a.destinationName,\n                msg = _a.payloadString;\n              _this._onMessage(topic, msg);\n            };\n            client.onConnectionLost = function (_a) {\n              var errorCode = _a.errorCode,\n                args = __rest(_a, [\"errorCode\"]);\n              _this.onDisconnect(__assign({\n                clientId: clientId,\n                errorCode: errorCode\n              }, args));\n              _this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n            };\n            return [4 /*yield*/, new Promise(function (resolve, reject) {\n              client.connect({\n                useSSL: _this.isSSLEnabled,\n                mqttVersion: 3,\n                onSuccess: function () {\n                  return resolve(true);\n                },\n                onFailure: function () {\n                  if (clientId) _this._clientsQueue.remove(clientId);\n                  _this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n                  resolve(false);\n                }\n              });\n            })];\n          case 1:\n            connected = _b.sent();\n            if (connected) {\n              this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_ESTABLISHED);\n            }\n            return [2 /*return*/, client];\n        }\n      });\n    });\n  };\n  MqttOverWSProvider.prototype.connect = function (clientId, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.clientsQueue.get(clientId, function (clientId) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var client;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      return [4 /*yield*/, this.newClient(__assign(__assign({}, options), {\n                        clientId: clientId\n                      }))];\n                    case 1:\n                      client = _a.sent();\n                      if (client) {\n                        // Once connected, subscribe to all topics registered observers\n                        this._topicObservers.forEach(function (_value, key) {\n                          client.subscribe(key);\n                        });\n                      }\n                      return [2 /*return*/, client];\n                  }\n                });\n              });\n            })];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  MqttOverWSProvider.prototype.disconnect = function (clientId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var client;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.clientsQueue.get(clientId)];\n          case 1:\n            client = _a.sent();\n            if (client && client.isConnected()) {\n              client.disconnect();\n            }\n            this.clientsQueue.remove(clientId);\n            this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  MqttOverWSProvider.prototype.publish = function (topics, msg) {\n    return __awaiter(this, void 0, void 0, function () {\n      var targetTopics, message, client;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            targetTopics = [].concat(topics);\n            message = JSON.stringify(msg);\n            return [4 /*yield*/, this.clientsQueue.get(this.clientId)];\n          case 1:\n            client = _a.sent();\n            if (client) {\n              logger.debug('Publishing to topic(s)', targetTopics.join(','), message);\n              targetTopics.forEach(function (topic) {\n                return client.send(topic, message);\n              });\n            } else {\n              logger.debug('Publishing to topic(s) failed', targetTopics.join(','), message);\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  MqttOverWSProvider.prototype._onMessage = function (topic, msg) {\n    try {\n      var matchedTopicObservers_1 = [];\n      this._topicObservers.forEach(function (observerForTopic, observerTopic) {\n        if (mqttTopicMatch(observerTopic, topic)) {\n          matchedTopicObservers_1.push(observerForTopic);\n        }\n      });\n      var parsedMessage_1 = JSON.parse(msg);\n      if (typeof parsedMessage_1 === 'object') {\n        // @ts-ignore\n        parsedMessage_1[topicSymbol] = topic;\n      }\n      matchedTopicObservers_1.forEach(function (observersForTopic) {\n        observersForTopic.forEach(function (observer) {\n          return observer.next(parsedMessage_1);\n        });\n      });\n    } catch (error) {\n      logger.warn('Error handling message', error, msg);\n    }\n  };\n  MqttOverWSProvider.prototype.subscribe = function (topics, options) {\n    var _this = this;\n    if (options === void 0) {\n      options = {};\n    }\n    var targetTopics = [].concat(topics);\n    logger.debug('Subscribing to topic(s)', targetTopics.join(','));\n    var reconnectSubscription;\n    return new Observable(function (observer) {\n      targetTopics.forEach(function (topic) {\n        // this._topicObservers is used to notify the observers according to the topic received on the message\n        var observersForTopic = _this._topicObservers.get(topic);\n        if (!observersForTopic) {\n          observersForTopic = new Set();\n          _this._topicObservers.set(topic, observersForTopic);\n        }\n        observersForTopic.add(observer);\n      });\n      var _a = options.clientId,\n        clientId = _a === void 0 ? _this.clientId : _a;\n      // this._clientIdObservers is used to close observers when client gets disconnected\n      var observersForClientId = _this._clientIdObservers.get(clientId);\n      if (!observersForClientId) {\n        observersForClientId = new Set();\n      }\n      if (observersForClientId) {\n        observersForClientId.add(observer);\n        _this._clientIdObservers.set(clientId, observersForClientId);\n      }\n      (function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var getClient;\n          var _this = this;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                getClient = function () {\n                  return __awaiter(_this, void 0, void 0, function () {\n                    var _a, url, _b, client_1, e_1;\n                    return __generator(this, function (_c) {\n                      switch (_c.label) {\n                        case 0:\n                          _c.trys.push([0, 5,, 6]);\n                          _a = options.url;\n                          if (!(_a === void 0)) return [3 /*break*/, 2];\n                          return [4 /*yield*/, this.endpoint];\n                        case 1:\n                          _b = _c.sent();\n                          return [3 /*break*/, 3];\n                        case 2:\n                          _b = _a;\n                          _c.label = 3;\n                        case 3:\n                          url = _b;\n                          return [4 /*yield*/, this.connect(clientId, {\n                            url: url\n                          })];\n                        case 4:\n                          client_1 = _c.sent();\n                          if (client_1 !== undefined) {\n                            targetTopics.forEach(function (topic) {\n                              client_1.subscribe(topic);\n                            });\n                          }\n                          return [3 /*break*/, 6];\n                        case 5:\n                          e_1 = _c.sent();\n                          logger.debug('Error forming connection', e_1);\n                          return [3 /*break*/, 6];\n                        case 6:\n                          return [2 /*return*/];\n                      }\n                    });\n                  });\n                };\n                // Establish the initial connection\n                return [4 /*yield*/, getClient()];\n              case 1:\n                // Establish the initial connection\n                _a.sent();\n                // Add an observable to the reconnection list to manage reconnection for this subscription\n                reconnectSubscription = new Observable(function (observer) {\n                  _this.reconnectionMonitor.addObserver(observer);\n                }).subscribe(function () {\n                  getClient();\n                });\n                return [2 /*return*/];\n            }\n          });\n        });\n      })();\n\n      return function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var client;\n          var _this = this;\n          var _a, _b;\n          return __generator(this, function (_c) {\n            switch (_c.label) {\n              case 0:\n                return [4 /*yield*/, this.clientsQueue.get(clientId)];\n              case 1:\n                client = _c.sent();\n                reconnectSubscription === null || reconnectSubscription === void 0 ? void 0 : reconnectSubscription.unsubscribe();\n                if (client) {\n                  (_a = this._clientIdObservers.get(clientId)) === null || _a === void 0 ? void 0 : _a.delete(observer);\n                  // No more observers per client => client not needed anymore\n                  if (((_b = this._clientIdObservers.get(clientId)) === null || _b === void 0 ? void 0 : _b.size) === 0) {\n                    this.disconnect(clientId);\n                    this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSING_CONNECTION);\n                    this._clientIdObservers.delete(clientId);\n                  }\n                  targetTopics.forEach(function (topic) {\n                    var observersForTopic = _this._topicObservers.get(topic) || new Set();\n                    observersForTopic.delete(observer);\n                    // if no observers exists for the topic, topic should be removed\n                    if (observersForTopic.size === 0) {\n                      _this._topicObservers.delete(topic);\n                      if (client.isConnected()) {\n                        client.unsubscribe(topic);\n                      }\n                    }\n                  });\n                }\n                return [2 /*return*/, null];\n            }\n          });\n        });\n      };\n    });\n  };\n  return MqttOverWSProvider;\n}(AbstractPubSubProvider);\nexport { MqttOverWSProvider };","map":{"version":3,"names":["Paho","v4","uuid","Observable","AbstractPubSubProvider","ConnectionState","ConsoleLogger","Logger","Hub","ConnectionStateMonitor","CONNECTION_CHANGE","ReconnectEvent","ReconnectionMonitor","AMPLIFY_SYMBOL","CONNECTION_STATE_CHANGE","logger","mqttTopicMatch","filter","topic","filterArray","split","length","topicArray","i","left","right","ClientsQueue","promises","Map","prototype","get","clientId","clientFactory","cachedPromise","newPromise","set","catch","_this","delete","undefined","Object","defineProperty","Array","from","keys","remove","dispatchPubSubEvent","event","data","message","dispatch","topicSymbol","Symbol","MqttOverWSProvider","_super","__extends","options","call","__assign","_clientsQueue","connectionStateMonitor","reconnectionMonitor","_topicObservers","_clientIdObservers","connectionStateObservable","subscribe","connectionStateChange","provider","connectionState","ConnectionDisrupted","record","START_RECONNECT","Connecting","HALT_RECONNECT","Promise","resolve","aws_pubsub_endpoint","getProviderName","onDisconnect","_a","errorCode","args","__rest","warn","JSON","stringify","clientIdObservers","disconnect","newClient","url","debug","OPENING_CONNECTION","client","Client","onMessageArrived","destinationName","msg","payloadString","_onMessage","onConnectionLost","CLOSED","reject","connect","useSSL","isSSLEnabled","mqttVersion","onSuccess","onFailure","connected","_b","sent","CONNECTION_ESTABLISHED","clientsQueue","__awaiter","forEach","_value","key","isConnected","publish","topics","targetTopics","concat","join","send","matchedTopicObservers_1","observerForTopic","observerTopic","push","parsedMessage_1","parse","observersForTopic","observer","next","error","reconnectSubscription","Set","add","observersForClientId","getClient","endpoint","_c","client_1","e_1","addObserver","unsubscribe","size","CLOSING_CONNECTION"],"sources":["../../src/Providers/MqttOverWSProvider.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}