{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexport var CognitoHostedUIIdentityProvider;\n(function (CognitoHostedUIIdentityProvider) {\n  CognitoHostedUIIdentityProvider[\"Cognito\"] = \"COGNITO\";\n  CognitoHostedUIIdentityProvider[\"Google\"] = \"Google\";\n  CognitoHostedUIIdentityProvider[\"Facebook\"] = \"Facebook\";\n  CognitoHostedUIIdentityProvider[\"Amazon\"] = \"LoginWithAmazon\";\n  CognitoHostedUIIdentityProvider[\"Apple\"] = \"SignInWithApple\";\n})(CognitoHostedUIIdentityProvider || (CognitoHostedUIIdentityProvider = {}));\nexport function isFederatedSignInOptions(obj) {\n  var keys = ['provider'];\n  return obj && !!keys.find(function (k) {\n    return obj.hasOwnProperty(k);\n  });\n}\nexport function isFederatedSignInOptionsCustom(obj) {\n  var keys = ['customProvider'];\n  return obj && !!keys.find(function (k) {\n    return obj.hasOwnProperty(k);\n  });\n}\nexport function hasCustomState(obj) {\n  var keys = ['customState'];\n  return obj && !!keys.find(function (k) {\n    return obj.hasOwnProperty(k);\n  });\n}\nexport function isCognitoHostedOpts(oauth) {\n  return oauth.redirectSignIn !== undefined;\n}\nexport var AuthErrorTypes;\n(function (AuthErrorTypes) {\n  AuthErrorTypes[\"NoConfig\"] = \"noConfig\";\n  AuthErrorTypes[\"MissingAuthConfig\"] = \"missingAuthConfig\";\n  AuthErrorTypes[\"EmptyUsername\"] = \"emptyUsername\";\n  AuthErrorTypes[\"InvalidUsername\"] = \"invalidUsername\";\n  AuthErrorTypes[\"EmptyPassword\"] = \"emptyPassword\";\n  AuthErrorTypes[\"EmptyCode\"] = \"emptyCode\";\n  AuthErrorTypes[\"SignUpError\"] = \"signUpError\";\n  AuthErrorTypes[\"NoMFA\"] = \"noMFA\";\n  AuthErrorTypes[\"InvalidMFA\"] = \"invalidMFA\";\n  AuthErrorTypes[\"EmptyChallengeResponse\"] = \"emptyChallengeResponse\";\n  AuthErrorTypes[\"NoUserSession\"] = \"noUserSession\";\n  AuthErrorTypes[\"Default\"] = \"default\";\n  AuthErrorTypes[\"DeviceConfig\"] = \"deviceConfig\";\n  AuthErrorTypes[\"NetworkError\"] = \"networkError\";\n  AuthErrorTypes[\"AutoSignInError\"] = \"autoSignInError\";\n})(AuthErrorTypes || (AuthErrorTypes = {}));\nexport function isUsernamePasswordOpts(obj) {\n  return !!obj.username;\n}\nexport var GRAPHQL_AUTH_MODE;\n(function (GRAPHQL_AUTH_MODE) {\n  GRAPHQL_AUTH_MODE[\"API_KEY\"] = \"API_KEY\";\n  GRAPHQL_AUTH_MODE[\"AWS_IAM\"] = \"AWS_IAM\";\n  GRAPHQL_AUTH_MODE[\"OPENID_CONNECT\"] = \"OPENID_CONNECT\";\n  GRAPHQL_AUTH_MODE[\"AMAZON_COGNITO_USER_POOLS\"] = \"AMAZON_COGNITO_USER_POOLS\";\n  GRAPHQL_AUTH_MODE[\"AWS_LAMBDA\"] = \"AWS_LAMBDA\";\n})(GRAPHQL_AUTH_MODE || (GRAPHQL_AUTH_MODE = {}));","map":{"version":3,"names":["CognitoHostedUIIdentityProvider","isFederatedSignInOptions","obj","keys","find","k","hasOwnProperty","isFederatedSignInOptionsCustom","hasCustomState","isCognitoHostedOpts","oauth","redirectSignIn","undefined","AuthErrorTypes","isUsernamePasswordOpts","username","GRAPHQL_AUTH_MODE"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-amplify/auth/src/types/Auth.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n\tICookieStorageData,\n\tICognitoStorage,\n} from 'amazon-cognito-identity-js';\n\n/**\n * Parameters for user sign up\n */\nexport interface SignUpParams {\n\tusername: string;\n\tpassword: string;\n\tattributes?: object;\n\tvalidationData?: { [key: string]: any };\n\tclientMetadata?: { [key: string]: string };\n\tautoSignIn?: AutoSignInOptions;\n}\n\nexport interface AuthCache {\n\tsetItem();\n\tgetItem();\n\tremoveItem();\n}\n\n/**\n * Auth instance options\n */\nexport interface AuthOptions {\n\tuserPoolId?: string;\n\tuserPoolWebClientId?: string;\n\tidentityPoolId?: string;\n\tregion?: string;\n\tmandatorySignIn?: boolean;\n\tcookieStorage?: ICookieStorageData;\n\toauth?: OAuthOpts;\n\trefreshHandlers?: object;\n\tstorage?: ICognitoStorage;\n\tauthenticationFlowType?: string;\n\tidentityPoolRegion?: string;\n\tclientMetadata?: any;\n\tendpoint?: string;\n\tsignUpVerificationMethod?: 'code' | 'link';\n}\n\nexport enum CognitoHostedUIIdentityProvider {\n\tCognito = 'COGNITO',\n\tGoogle = 'Google',\n\tFacebook = 'Facebook',\n\tAmazon = 'LoginWithAmazon',\n\tApple = 'SignInWithApple',\n}\n\nexport type LegacyProvider =\n\t| 'google'\n\t| 'facebook'\n\t| 'amazon'\n\t| 'developer'\n\t| string;\n\nexport type FederatedSignInOptions = {\n\tprovider: CognitoHostedUIIdentityProvider;\n\tcustomState?: string;\n};\n\nexport type FederatedSignInOptionsCustom = {\n\tcustomProvider: string;\n\tcustomState?: string;\n};\n\nexport function isFederatedSignInOptions(\n\tobj: any\n): obj is FederatedSignInOptions {\n\tconst keys: (keyof FederatedSignInOptions)[] = ['provider'];\n\treturn obj && !!keys.find(k => obj.hasOwnProperty(k));\n}\n\nexport function isFederatedSignInOptionsCustom(\n\tobj: any\n): obj is FederatedSignInOptionsCustom {\n\tconst keys: (keyof FederatedSignInOptionsCustom)[] = ['customProvider'];\n\treturn obj && !!keys.find(k => obj.hasOwnProperty(k));\n}\n\nexport function hasCustomState(obj: any): boolean {\n\tconst keys: (keyof (\n\t\t| FederatedSignInOptions\n\t\t| FederatedSignInOptionsCustom\n\t))[] = ['customState'];\n\treturn obj && !!keys.find(k => obj.hasOwnProperty(k));\n}\n\n/**\n * Details for multi-factor authentication\n */\nexport interface MfaRequiredDetails {\n\tchallengeName: any;\n\tchallengeParameters: any;\n}\n\n/**\n * interface for federatedResponse\n */\nexport interface FederatedResponse {\n\t// access token\n\ttoken: string;\n\t// identity id\n\tidentity_id?: string;\n\t// the universal time when token expired\n\texpires_at: number;\n}\n\n/**\n * interface for federatedUser\n */\nexport interface FederatedUser {\n\tname: string;\n\temail?: string;\n\tpicture?: string;\n}\n\nexport interface AwsCognitoOAuthOpts {\n\tdomain: string;\n\tscope: Array<string>;\n\tredirectSignIn: string;\n\tredirectSignOut: string;\n\tresponseType: string;\n\toptions?: object;\n\turlOpener?: (url: string, redirectUrl: string) => Promise<any>;\n}\n\nexport function isCognitoHostedOpts(\n\toauth: OAuthOpts\n): oauth is AwsCognitoOAuthOpts {\n\treturn (<AwsCognitoOAuthOpts>oauth).redirectSignIn !== undefined;\n}\n\nexport interface Auth0OAuthOpts {\n\tdomain: string;\n\tclientID: string;\n\tscope: string;\n\tredirectUri: string;\n\taudience: string;\n\tresponseType: string;\n\treturnTo: string;\n\turlOpener?: (url: string, redirectUrl: string) => Promise<any>;\n}\n\n// Replacing to fix typings\n// export interface OAuth {\n//     awsCognito?: awsCognitoOAuthOpts,\n//     auth0?: any\n// }\n\nexport type OAuthOpts = AwsCognitoOAuthOpts | Auth0OAuthOpts;\n\nexport interface ConfirmSignUpOptions {\n\tforceAliasCreation?: boolean;\n\tclientMetadata?: ClientMetaData;\n}\n\nexport interface SignOutOpts {\n\tglobal?: boolean;\n}\n\nexport interface CurrentUserOpts {\n\tbypassCache: boolean;\n}\n\nexport interface GetPreferredMFAOpts {\n\tbypassCache: boolean;\n}\n\nexport type UsernamePasswordOpts = {\n\tusername: string;\n\tpassword: string;\n\tvalidationData?: { [key: string]: any };\n};\n\nexport enum AuthErrorTypes {\n\tNoConfig = 'noConfig',\n\tMissingAuthConfig = 'missingAuthConfig',\n\tEmptyUsername = 'emptyUsername',\n\tInvalidUsername = 'invalidUsername',\n\tEmptyPassword = 'emptyPassword',\n\tEmptyCode = 'emptyCode',\n\tSignUpError = 'signUpError',\n\tNoMFA = 'noMFA',\n\tInvalidMFA = 'invalidMFA',\n\tEmptyChallengeResponse = 'emptyChallengeResponse',\n\tNoUserSession = 'noUserSession',\n\tDefault = 'default',\n\tDeviceConfig = 'deviceConfig',\n\tNetworkError = 'networkError',\n\tAutoSignInError = 'autoSignInError',\n}\n\nexport type AuthErrorMessages = { [key in AuthErrorTypes]: AuthErrorMessage };\n\nexport interface AuthErrorMessage {\n\tmessage: string;\n\tlog?: string;\n}\n\n// We can extend this in the future if needed\nexport type SignInOpts = UsernamePasswordOpts;\n\nexport type ClientMetaData =\n\t| {\n\t\t\t[key: string]: string;\n\t  }\n\t| undefined;\n\nexport function isUsernamePasswordOpts(obj: any): obj is UsernamePasswordOpts {\n\treturn !!(obj as UsernamePasswordOpts).username;\n}\n\nexport interface IAuthDevice {\n\tid: string;\n\tname: string;\n}\n\nexport interface AutoSignInOptions {\n\tenabled: boolean;\n\tclientMetaData?: ClientMetaData;\n\tvalidationData?: { [key: string]: any };\n}\n\nexport enum GRAPHQL_AUTH_MODE {\n\tAPI_KEY = 'API_KEY',\n\tAWS_IAM = 'AWS_IAM',\n\tOPENID_CONNECT = 'OPENID_CONNECT',\n\tAMAZON_COGNITO_USER_POOLS = 'AMAZON_COGNITO_USER_POOLS',\n\tAWS_LAMBDA = 'AWS_LAMBDA',\n}\n"],"mappings":"AAAA;AACA;AA6CA,WAAYA,+BAMX;AAND,WAAYA,+BAA+B;EAC1CA,+BAAA,uBAAmB;EACnBA,+BAAA,qBAAiB;EACjBA,+BAAA,yBAAqB;EACrBA,+BAAA,8BAA0B;EAC1BA,+BAAA,6BAAyB;AAC1B,CAAC,EANWA,+BAA+B,KAA/BA,+BAA+B;AAyB3C,OAAM,SAAUC,wBAAwBA,CACvCC,GAAQ;EAER,IAAMC,IAAI,GAAqC,CAAC,UAAU,CAAC;EAC3D,OAAOD,GAAG,IAAI,CAAC,CAACC,IAAI,CAACC,IAAI,CAAC,UAAAC,CAAC;IAAI,OAAAH,GAAG,CAACI,cAAc,CAACD,CAAC,CAAC;EAArB,CAAqB,CAAC;AACtD;AAEA,OAAM,SAAUE,8BAA8BA,CAC7CL,GAAQ;EAER,IAAMC,IAAI,GAA2C,CAAC,gBAAgB,CAAC;EACvE,OAAOD,GAAG,IAAI,CAAC,CAACC,IAAI,CAACC,IAAI,CAAC,UAAAC,CAAC;IAAI,OAAAH,GAAG,CAACI,cAAc,CAACD,CAAC,CAAC;EAArB,CAAqB,CAAC;AACtD;AAEA,OAAM,SAAUG,cAAcA,CAACN,GAAQ;EACtC,IAAMC,IAAI,GAGH,CAAC,aAAa,CAAC;EACtB,OAAOD,GAAG,IAAI,CAAC,CAACC,IAAI,CAACC,IAAI,CAAC,UAAAC,CAAC;IAAI,OAAAH,GAAG,CAACI,cAAc,CAACD,CAAC,CAAC;EAArB,CAAqB,CAAC;AACtD;AAyCA,OAAM,SAAUI,mBAAmBA,CAClCC,KAAgB;EAEhB,OAA6BA,KAAM,CAACC,cAAc,KAAKC,SAAS;AACjE;AA4CA,WAAYC,cAgBX;AAhBD,WAAYA,cAAc;EACzBA,cAAA,yBAAqB;EACrBA,cAAA,2CAAuC;EACvCA,cAAA,mCAA+B;EAC/BA,cAAA,uCAAmC;EACnCA,cAAA,mCAA+B;EAC/BA,cAAA,2BAAuB;EACvBA,cAAA,+BAA2B;EAC3BA,cAAA,mBAAe;EACfA,cAAA,6BAAyB;EACzBA,cAAA,qDAAiD;EACjDA,cAAA,mCAA+B;EAC/BA,cAAA,uBAAmB;EACnBA,cAAA,iCAA6B;EAC7BA,cAAA,iCAA6B;EAC7BA,cAAA,uCAAmC;AACpC,CAAC,EAhBWA,cAAc,KAAdA,cAAc;AAkC1B,OAAM,SAAUC,sBAAsBA,CAACZ,GAAQ;EAC9C,OAAO,CAAC,CAAEA,GAA4B,CAACa,QAAQ;AAChD;AAaA,WAAYC,iBAMX;AAND,WAAYA,iBAAiB;EAC5BA,iBAAA,uBAAmB;EACnBA,iBAAA,uBAAmB;EACnBA,iBAAA,qCAAiC;EACjCA,iBAAA,2DAAuD;EACvDA,iBAAA,6BAAyB;AAC1B,CAAC,EANWA,iBAAiB,KAAjBA,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}