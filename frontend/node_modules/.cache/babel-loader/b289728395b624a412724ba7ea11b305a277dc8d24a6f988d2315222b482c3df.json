{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { withMemoization } from '@aws-amplify/core/internals/aws-client-utils';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { SEND_DOWNLOAD_PROGRESS_EVENT, SEND_UPLOAD_PROGRESS_EVENT, ABORT_ERROR_CODE, ABORT_ERROR_MESSAGE, CANCELED_ERROR_CODE, CANCELED_ERROR_MESSAGE, NETWORK_ERROR_CODE, NETWORK_ERROR_MESSAGE } from './constants';\nvar logger = new Logger('xhr-http-handler');\n/**\n * Base transfer handler implementation using XMLHttpRequest to support upload and download progress events.\n *\n * @param request - The request object.\n * @param options - The request options.\n * @returns A promise that will be resolved with the response object.\n *\n * @internal\n */\nexport var xhrTransferHandler = function (request, options) {\n  var url = request.url,\n    method = request.method,\n    headers = request.headers,\n    body = request.body;\n  var emitter = options.emitter,\n    responseType = options.responseType,\n    abortSignal = options.abortSignal;\n  return new Promise(function (resolve, reject) {\n    var _a;\n    var xhr = new XMLHttpRequest();\n    xhr.open(method.toUpperCase(), url.toString());\n    Object.entries(headers).filter(function (_a) {\n      var _b = __read(_a, 1),\n        header = _b[0];\n      return !FORBIDDEN_HEADERS.includes(header);\n    }).forEach(function (_a) {\n      var _b = __read(_a, 2),\n        header = _b[0],\n        value = _b[1];\n      xhr.setRequestHeader(header, value);\n    });\n    xhr.responseType = responseType;\n    if (emitter) {\n      xhr.upload.addEventListener('progress', function (event) {\n        emitter.emit(SEND_UPLOAD_PROGRESS_EVENT, event);\n        logger.debug(event);\n      });\n      xhr.addEventListener('progress', function (event) {\n        emitter.emit(SEND_DOWNLOAD_PROGRESS_EVENT, event);\n        logger.debug(event);\n      });\n    }\n    xhr.addEventListener('error', function () {\n      var error = simulateAxiosError(NETWORK_ERROR_MESSAGE, NETWORK_ERROR_CODE, xhr, options);\n      logger.error(NETWORK_ERROR_MESSAGE);\n      reject(error);\n      xhr = null; // clean up request\n    });\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    xhr.addEventListener('abort', function () {\n      // The abort event can be triggered after the error or load event. So we need to check if the xhr is null.\n      if (!xhr || (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted)) return;\n      var error = simulateAxiosError(ABORT_ERROR_MESSAGE, ABORT_ERROR_CODE, xhr, options);\n      logger.error(ABORT_ERROR_MESSAGE);\n      reject(error);\n      xhr = null; // clean up request\n    });\n    // Skip handling timeout error since we don't have a timeout\n    xhr.addEventListener('readystatechange', function () {\n      if (!xhr || xhr.readyState !== xhr.DONE) {\n        return;\n      }\n      var onloadend = function () {\n        // The load event is triggered after the error/abort/load event. So we need to check if the xhr is null.\n        if (!xhr) return;\n        var responseHeaders = convertResponseHeaders(xhr.getAllResponseHeaders());\n        var responseType = xhr.responseType;\n        var responseBlob = xhr.response;\n        var responseText = responseType === 'text' ? xhr.responseText : '';\n        var bodyMixIn = {\n          blob: function () {\n            return Promise.resolve(responseBlob);\n          },\n          text: withMemoization(function () {\n            return responseType === 'blob' ? readBlobAsText(responseBlob) : Promise.resolve(responseText);\n          }),\n          json: function () {\n            return Promise.reject(\n            // S3 does not support JSON response. So fail-fast here with nicer error message.\n            new Error('Parsing response to JSON is not implemented. Please use response.text() instead.'));\n          }\n        };\n        var response = {\n          statusCode: xhr.status,\n          headers: responseHeaders,\n          // The xhr.responseType is only set to 'blob' for streaming binary S3 object data. The streaming data is\n          // exposed via public interface of Storage.get(). So we need to return the response as a Blob object for\n          // backward compatibility. In other cases, the response payload is only used internally, we return it is\n          // {@link ResponseBodyMixin}\n          body: xhr.responseType === 'blob' ? Object.assign(responseBlob, bodyMixIn) : bodyMixIn\n        };\n        resolve(response);\n        xhr = null; // clean up request\n      };\n      // readystate handler is calling before onerror or ontimeout handlers,\n      // so we should call onloadend on the next 'tick'\n      // @see https://github.com/axios/axios/blob/9588fcdec8aca45c3ba2f7968988a5d03f23168c/lib/adapters/xhr.js#L98-L99\n      setTimeout(onloadend);\n    });\n    if (abortSignal) {\n      var onCancelled = function () {\n        // The abort event is triggered after the error or load event. So we need to check if the xhr is null.\n        if (!xhr) {\n          return;\n        }\n        var canceledError = simulateAxiosCanceledError(CANCELED_ERROR_MESSAGE !== null && CANCELED_ERROR_MESSAGE !== void 0 ? CANCELED_ERROR_MESSAGE : abortSignal.reason, CANCELED_ERROR_CODE, xhr, options);\n        xhr.abort();\n        reject(canceledError);\n        xhr = null;\n      };\n      abortSignal.aborted ? onCancelled() : abortSignal.addEventListener('abort', onCancelled);\n    }\n    if (typeof ReadableStream === 'function' && body instanceof ReadableStream) {\n      // This does not matter as previous implementation uses Axios which does not support ReadableStream anyway.\n      throw new Error('ReadableStream request payload is not supported.');\n    }\n    xhr.send((_a = body) !== null && _a !== void 0 ? _a : null);\n  });\n};\n// TODO: V6 remove this\nvar simulateAxiosError = function (message, code, request, config) {\n  return Object.assign(new Error(message), {\n    code: code,\n    config: config,\n    request: request\n  });\n};\nvar simulateAxiosCanceledError = function (message, code, request, config) {\n  var error = simulateAxiosError(message, code, request, config);\n  error.name = 'CanceledError';\n  error['__CANCEL__'] = true;\n  return error;\n};\nexport var isCancelError = function (error) {\n  return !!(error === null || error === void 0 ? void 0 : error['__CANCEL__']);\n};\n/**\n * Convert xhr.getAllResponseHeaders() string to a Record<string, string>. Note that modern browser already returns\n * header names in lowercase.\n * @param xhrHeaders - string of headers returned from xhr.getAllResponseHeaders()\n */\nvar convertResponseHeaders = function (xhrHeaders) {\n  if (!xhrHeaders) {\n    return {};\n  }\n  return xhrHeaders.split('\\r\\n').reduce(function (headerMap, line) {\n    var parts = line.split(': ');\n    var header = parts.shift();\n    var value = parts.join(': ');\n    headerMap[header.toLowerCase()] = value;\n    return headerMap;\n  }, {});\n};\nvar readBlobAsText = function (blob) {\n  var reader = new FileReader();\n  return new Promise(function (resolve, reject) {\n    reader.onloadend = function () {\n      if (reader.readyState !== FileReader.DONE) {\n        return;\n      }\n      resolve(reader.result);\n    };\n    reader.onerror = function () {\n      reject(reader.error);\n    };\n    reader.readAsText(blob);\n  });\n};\n// To add more forbidden headers as found set by S3. Intentionally NOT list all of them here to save bundle size.\n// https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name\nvar FORBIDDEN_HEADERS = ['host'];","map":{"version":3,"names":["__read","o","n","m","Symbol","iterator","i","call","r","ar","e","next","done","push","value","error","withMemoization","ConsoleLogger","Logger","SEND_DOWNLOAD_PROGRESS_EVENT","SEND_UPLOAD_PROGRESS_EVENT","ABORT_ERROR_CODE","ABORT_ERROR_MESSAGE","CANCELED_ERROR_CODE","CANCELED_ERROR_MESSAGE","NETWORK_ERROR_CODE","NETWORK_ERROR_MESSAGE","logger","xhrTransferHandler","request","options","url","method","headers","body","emitter","responseType","abortSignal","Promise","resolve","reject","_a","xhr","XMLHttpRequest","open","toUpperCase","toString","Object","entries","filter","_b","header","FORBIDDEN_HEADERS","includes","forEach","setRequestHeader","upload","addEventListener","event","emit","debug","simulateAxiosError","aborted","readyState","DONE","onloadend","responseHeaders","convertResponseHeaders","getAllResponseHeaders","responseBlob","response","responseText","bodyMixIn","blob","text","readBlobAsText","json","Error","statusCode","status","assign","setTimeout","onCancelled","canceledError","simulateAxiosCanceledError","reason","abort","ReadableStream","send","message","code","config","name","isCancelError","xhrHeaders","split","reduce","headerMap","line","parts","shift","join","toLowerCase","reader","FileReader","result","onerror","readAsText"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-amplify/storage/lib-esm/AwsClients/S3/runtime/xhrTransferHandler.js"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nimport { withMemoization, } from '@aws-amplify/core/internals/aws-client-utils';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { SEND_DOWNLOAD_PROGRESS_EVENT, SEND_UPLOAD_PROGRESS_EVENT, ABORT_ERROR_CODE, ABORT_ERROR_MESSAGE, CANCELED_ERROR_CODE, CANCELED_ERROR_MESSAGE, NETWORK_ERROR_CODE, NETWORK_ERROR_MESSAGE, } from './constants';\nvar logger = new Logger('xhr-http-handler');\n/**\n * Base transfer handler implementation using XMLHttpRequest to support upload and download progress events.\n *\n * @param request - The request object.\n * @param options - The request options.\n * @returns A promise that will be resolved with the response object.\n *\n * @internal\n */\nexport var xhrTransferHandler = function (request, options) {\n    var url = request.url, method = request.method, headers = request.headers, body = request.body;\n    var emitter = options.emitter, responseType = options.responseType, abortSignal = options.abortSignal;\n    return new Promise(function (resolve, reject) {\n        var _a;\n        var xhr = new XMLHttpRequest();\n        xhr.open(method.toUpperCase(), url.toString());\n        Object.entries(headers)\n            .filter(function (_a) {\n            var _b = __read(_a, 1), header = _b[0];\n            return !FORBIDDEN_HEADERS.includes(header);\n        })\n            .forEach(function (_a) {\n            var _b = __read(_a, 2), header = _b[0], value = _b[1];\n            xhr.setRequestHeader(header, value);\n        });\n        xhr.responseType = responseType;\n        if (emitter) {\n            xhr.upload.addEventListener('progress', function (event) {\n                emitter.emit(SEND_UPLOAD_PROGRESS_EVENT, event);\n                logger.debug(event);\n            });\n            xhr.addEventListener('progress', function (event) {\n                emitter.emit(SEND_DOWNLOAD_PROGRESS_EVENT, event);\n                logger.debug(event);\n            });\n        }\n        xhr.addEventListener('error', function () {\n            var error = simulateAxiosError(NETWORK_ERROR_MESSAGE, NETWORK_ERROR_CODE, xhr, options);\n            logger.error(NETWORK_ERROR_MESSAGE);\n            reject(error);\n            xhr = null; // clean up request\n        });\n        // Handle browser request cancellation (as opposed to a manual cancellation)\n        xhr.addEventListener('abort', function () {\n            // The abort event can be triggered after the error or load event. So we need to check if the xhr is null.\n            if (!xhr || (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted))\n                return;\n            var error = simulateAxiosError(ABORT_ERROR_MESSAGE, ABORT_ERROR_CODE, xhr, options);\n            logger.error(ABORT_ERROR_MESSAGE);\n            reject(error);\n            xhr = null; // clean up request\n        });\n        // Skip handling timeout error since we don't have a timeout\n        xhr.addEventListener('readystatechange', function () {\n            if (!xhr || xhr.readyState !== xhr.DONE) {\n                return;\n            }\n            var onloadend = function () {\n                // The load event is triggered after the error/abort/load event. So we need to check if the xhr is null.\n                if (!xhr)\n                    return;\n                var responseHeaders = convertResponseHeaders(xhr.getAllResponseHeaders());\n                var responseType = xhr.responseType;\n                var responseBlob = xhr.response;\n                var responseText = responseType === 'text' ? xhr.responseText : '';\n                var bodyMixIn = {\n                    blob: function () { return Promise.resolve(responseBlob); },\n                    text: withMemoization(function () {\n                        return responseType === 'blob'\n                            ? readBlobAsText(responseBlob)\n                            : Promise.resolve(responseText);\n                    }),\n                    json: function () {\n                        return Promise.reject(\n                        // S3 does not support JSON response. So fail-fast here with nicer error message.\n                        new Error('Parsing response to JSON is not implemented. Please use response.text() instead.'));\n                    },\n                };\n                var response = {\n                    statusCode: xhr.status,\n                    headers: responseHeaders,\n                    // The xhr.responseType is only set to 'blob' for streaming binary S3 object data. The streaming data is\n                    // exposed via public interface of Storage.get(). So we need to return the response as a Blob object for\n                    // backward compatibility. In other cases, the response payload is only used internally, we return it is\n                    // {@link ResponseBodyMixin}\n                    body: (xhr.responseType === 'blob'\n                        ? Object.assign(responseBlob, bodyMixIn)\n                        : bodyMixIn),\n                };\n                resolve(response);\n                xhr = null; // clean up request\n            };\n            // readystate handler is calling before onerror or ontimeout handlers,\n            // so we should call onloadend on the next 'tick'\n            // @see https://github.com/axios/axios/blob/9588fcdec8aca45c3ba2f7968988a5d03f23168c/lib/adapters/xhr.js#L98-L99\n            setTimeout(onloadend);\n        });\n        if (abortSignal) {\n            var onCancelled = function () {\n                // The abort event is triggered after the error or load event. So we need to check if the xhr is null.\n                if (!xhr) {\n                    return;\n                }\n                var canceledError = simulateAxiosCanceledError(CANCELED_ERROR_MESSAGE !== null && CANCELED_ERROR_MESSAGE !== void 0 ? CANCELED_ERROR_MESSAGE : abortSignal.reason, CANCELED_ERROR_CODE, xhr, options);\n                xhr.abort();\n                reject(canceledError);\n                xhr = null;\n            };\n            abortSignal.aborted\n                ? onCancelled()\n                : abortSignal.addEventListener('abort', onCancelled);\n        }\n        if (typeof ReadableStream === 'function' &&\n            body instanceof ReadableStream) {\n            // This does not matter as previous implementation uses Axios which does not support ReadableStream anyway.\n            throw new Error('ReadableStream request payload is not supported.');\n        }\n        xhr.send((_a = body) !== null && _a !== void 0 ? _a : null);\n    });\n};\n// TODO: V6 remove this\nvar simulateAxiosError = function (message, code, request, config) {\n    return Object.assign(new Error(message), {\n        code: code,\n        config: config,\n        request: request,\n    });\n};\nvar simulateAxiosCanceledError = function (message, code, request, config) {\n    var error = simulateAxiosError(message, code, request, config);\n    error.name = 'CanceledError';\n    error['__CANCEL__'] = true;\n    return error;\n};\nexport var isCancelError = function (error) {\n    return !!(error === null || error === void 0 ? void 0 : error['__CANCEL__']);\n};\n/**\n * Convert xhr.getAllResponseHeaders() string to a Record<string, string>. Note that modern browser already returns\n * header names in lowercase.\n * @param xhrHeaders - string of headers returned from xhr.getAllResponseHeaders()\n */\nvar convertResponseHeaders = function (xhrHeaders) {\n    if (!xhrHeaders) {\n        return {};\n    }\n    return xhrHeaders\n        .split('\\r\\n')\n        .reduce(function (headerMap, line) {\n        var parts = line.split(': ');\n        var header = parts.shift();\n        var value = parts.join(': ');\n        headerMap[header.toLowerCase()] = value;\n        return headerMap;\n    }, {});\n};\nvar readBlobAsText = function (blob) {\n    var reader = new FileReader();\n    return new Promise(function (resolve, reject) {\n        reader.onloadend = function () {\n            if (reader.readyState !== FileReader.DONE) {\n                return;\n            }\n            resolve(reader.result);\n        };\n        reader.onerror = function () {\n            reject(reader.error);\n        };\n        reader.readAsText(blob);\n    });\n};\n// To add more forbidden headers as found set by S3. Intentionally NOT list all of them here to save bundle size.\n// https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name\nvar FORBIDDEN_HEADERS = ['host'];\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}