{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __assign, __awaiter, __generator } from \"tslib\";\nimport { Amplify, ConsoleLogger as Logger, Hub, parseAWSExports } from '@aws-amplify/core';\nimport { AWSPinpointProvider } from './Providers/AWSPinpointProvider';\nimport { PageViewTracker, EventTracker, SessionTracker } from './trackers';\nvar logger = new Logger('AnalyticsClass');\nvar AMPLIFY_SYMBOL = typeof Symbol !== 'undefined' && typeof Symbol.for === 'function' ? Symbol.for('amplify_default') : '@@amplify_default';\nvar dispatchAnalyticsEvent = function (event, data, message) {\n  Hub.dispatch('analytics', {\n    event: event,\n    data: data,\n    message: message\n  }, 'Analytics', AMPLIFY_SYMBOL);\n};\nvar trackers = {\n  pageView: PageViewTracker,\n  event: EventTracker,\n  session: SessionTracker\n};\nvar _instance = null;\n/**\n * Provide mobile analytics client functions\n */\nvar AnalyticsClass = /** @class */function () {\n  /**\n   * Initialize Analtyics\n   * @param config - Configuration of the Analytics\n   */\n  function AnalyticsClass() {\n    this._config = {};\n    this._pluggables = [];\n    this._disabled = false;\n    this._trackers = {};\n    _instance = this;\n    this.record = this.record.bind(this);\n    Hub.listen('auth', listener);\n    Hub.listen('storage', listener);\n    Hub.listen('analytics', listener);\n    Hub.listen('core', listener);\n  }\n  AnalyticsClass.prototype.getModuleName = function () {\n    return 'Analytics';\n  };\n  /**\n   * configure Analytics\n   * @param {Object} config - Configuration of the Analytics\n   */\n  AnalyticsClass.prototype.configure = function (config) {\n    var _this = this;\n    if (!config) return this._config;\n    logger.debug('configure Analytics', config);\n    var amplifyConfig = parseAWSExports(config);\n    this._config = Object.assign({}, this._config, amplifyConfig.Analytics, config);\n    if (this._config['disabled']) {\n      this._disabled = true;\n    }\n    // turn on the autoSessionRecord if not specified\n    if (this._config['autoSessionRecord'] === undefined) {\n      this._config['autoSessionRecord'] = true;\n    }\n    this._pluggables.forEach(function (pluggable) {\n      // for backward compatibility\n      var providerConfig = pluggable.getProviderName() === 'AWSPinpoint' && !_this._config['AWSPinpoint'] ? _this._config : _this._config[pluggable.getProviderName()];\n      pluggable.configure(__assign({\n        disabled: _this._config['disabled'],\n        autoSessionRecord: _this._config['autoSessionRecord']\n      }, providerConfig));\n    });\n    if (this._pluggables.length === 0) {\n      this.addPluggable(new AWSPinpointProvider());\n    }\n    dispatchAnalyticsEvent('configured', null, \"The Analytics category has been configured successfully\");\n    logger.debug('current configuration', this._config);\n    return this._config;\n  };\n  /**\n   * add plugin into Analytics category\n   * @param pluggable - an instance of the plugin\n   */\n  AnalyticsClass.prototype.addPluggable = function (pluggable) {\n    if (pluggable && pluggable.getCategory() === 'Analytics') {\n      this._pluggables.push(pluggable);\n      // for backward compatibility\n      var providerConfig = pluggable.getProviderName() === 'AWSPinpoint' && !this._config['AWSPinpoint'] ? this._config : this._config[pluggable.getProviderName()];\n      var config = __assign({\n        disabled: this._config['disabled']\n      }, providerConfig);\n      pluggable.configure(config);\n      return config;\n    }\n  };\n  /**\n   * Get the plugin object\n   * @param providerName - the name of the provider to be removed\n   */\n  AnalyticsClass.prototype.getPluggable = function (providerName) {\n    for (var i = 0; i < this._pluggables.length; i += 1) {\n      var pluggable = this._pluggables[i];\n      if (pluggable.getProviderName() === providerName) {\n        return pluggable;\n      }\n    }\n    logger.debug('No plugin found with providerName', providerName);\n    return null;\n  };\n  /**\n   * Remove the plugin object\n   * @param providerName - the name of the provider to be removed\n   */\n  AnalyticsClass.prototype.removePluggable = function (providerName) {\n    var idx = 0;\n    while (idx < this._pluggables.length) {\n      if (this._pluggables[idx].getProviderName() === providerName) {\n        break;\n      }\n      idx += 1;\n    }\n    if (idx === this._pluggables.length) {\n      logger.debug('No plugin found with providerName', providerName);\n      return;\n    } else {\n      this._pluggables.splice(idx, idx + 1);\n      return;\n    }\n  };\n  /**\n   * stop sending events\n   */\n  AnalyticsClass.prototype.disable = function () {\n    this._disabled = true;\n  };\n  /**\n   * start sending events\n   */\n  AnalyticsClass.prototype.enable = function () {\n    this._disabled = false;\n  };\n  /**\n   * Record Session start\n   * @param [provider] - name of the provider.\n   * @return - A promise which resolves if buffer doesn't overflow\n   */\n  AnalyticsClass.prototype.startSession = function (provider) {\n    return __awaiter(this, void 0, void 0, function () {\n      var event, params;\n      return __generator(this, function (_a) {\n        event = {\n          name: '_session.start'\n        };\n        params = {\n          event: event,\n          provider: provider\n        };\n        dispatchAnalyticsEvent('record', event, 'Recording Analytics session start event');\n        return [2 /*return*/, this._sendEvent(params)];\n      });\n    });\n  };\n  /**\n   * Record Session stop\n   * @param [provider] - name of the provider.\n   * @return - A promise which resolves if buffer doesn't overflow\n   */\n  AnalyticsClass.prototype.stopSession = function (provider) {\n    return __awaiter(this, void 0, void 0, function () {\n      var event, params;\n      return __generator(this, function (_a) {\n        event = {\n          name: '_session.stop'\n        };\n        params = {\n          event: event,\n          provider: provider\n        };\n        dispatchAnalyticsEvent('record', event, 'Recording Analytics session stop event');\n        return [2 /*return*/, this._sendEvent(params)];\n      });\n    });\n  };\n  /**\n   * Record one analytic event and send it to Pinpoint\n   * @param event - An object with the name of the event, attributes of the event and event metrics.\n   * @param [provider] - name of the provider.\n   */\n  AnalyticsClass.prototype.record = function (event, provider) {\n    return __awaiter(this, void 0, void 0, function () {\n      var params;\n      return __generator(this, function (_a) {\n        params = {\n          event: event,\n          provider: provider\n        };\n        dispatchAnalyticsEvent('record', params.event, 'Recording Analytics event');\n        return [2 /*return*/, this._sendEvent(params)];\n      });\n    });\n  };\n  AnalyticsClass.prototype.updateEndpoint = function (attrs, provider) {\n    return __awaiter(this, void 0, void 0, function () {\n      var event;\n      return __generator(this, function (_a) {\n        event = __assign(__assign({}, attrs), {\n          name: '_update_endpoint'\n        });\n        return [2 /*return*/, this.record(event, provider)];\n      });\n    });\n  };\n  AnalyticsClass.prototype._sendEvent = function (params) {\n    var _this = this;\n    if (this._disabled) {\n      logger.debug('Analytics has been disabled');\n      return Promise.resolve();\n    }\n    var provider = params.provider ? params.provider : 'AWSPinpoint';\n    return new Promise(function (resolve, reject) {\n      _this._pluggables.forEach(function (pluggable) {\n        if (pluggable.getProviderName() === provider) {\n          pluggable.record(params, {\n            resolve: resolve,\n            reject: reject\n          });\n        }\n      });\n    });\n  };\n  AnalyticsClass.prototype.autoTrack = function (trackerType, opts) {\n    if (!trackers[trackerType]) {\n      logger.debug('invalid tracker type');\n      return;\n    }\n    // to sync up two different configuration ways of auto session tracking\n    if (trackerType === 'session') {\n      this._config['autoSessionRecord'] = opts['enable'];\n    }\n    var tracker = this._trackers[trackerType];\n    if (!tracker) {\n      this._trackers[trackerType] = new trackers[trackerType](this.record, opts);\n    } else {\n      tracker.configure(opts);\n    }\n  };\n  return AnalyticsClass;\n}();\nexport { AnalyticsClass };\nvar endpointUpdated = false;\nvar authConfigured = false;\nvar analyticsConfigured = false;\nvar credentialsConfigured = false;\nvar listener = function (capsule) {\n  var channel = capsule.channel,\n    payload = capsule.payload;\n  logger.debug('on hub capsule ' + channel, payload);\n  switch (channel) {\n    case 'auth':\n      authEvent(payload);\n      break;\n    case 'storage':\n      storageEvent(payload);\n      break;\n    case 'analytics':\n      analyticsEvent(payload);\n      break;\n    case 'core':\n      coreEvent(payload);\n      break;\n    default:\n      break;\n  }\n};\nvar storageEvent = function (payload) {\n  var _a = payload.data,\n    attrs = _a.attrs,\n    metrics = _a.metrics;\n  if (!attrs) return;\n  if (analyticsConfigured) {\n    _instance.record({\n      name: 'Storage',\n      attributes: attrs,\n      metrics: metrics\n    }).catch(function (e) {\n      logger.debug('Failed to send the storage event automatically', e);\n    });\n  }\n};\nvar authEvent = function (payload) {\n  var event = payload.event;\n  if (!event) {\n    return;\n  }\n  var recordAuthEvent = function (eventName) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var err_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!(authConfigured && analyticsConfigured)) return [3 /*break*/, 4];\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, _instance.record({\n              name: \"_userauth.\" + eventName\n            })];\n          case 2:\n            return [2 /*return*/, _a.sent()];\n          case 3:\n            err_1 = _a.sent();\n            logger.debug(\"Failed to send the \" + eventName + \" event automatically\", err_1);\n            return [3 /*break*/, 4];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  switch (event) {\n    case 'signIn':\n      return recordAuthEvent('sign_in');\n    case 'signUp':\n      return recordAuthEvent('sign_up');\n    case 'signOut':\n      return recordAuthEvent('sign_out');\n    case 'signIn_failure':\n      return recordAuthEvent('auth_fail');\n    case 'configured':\n      authConfigured = true;\n      if (analyticsConfigured) {\n        sendEvents();\n      }\n      break;\n  }\n};\nvar analyticsEvent = function (payload) {\n  var event = payload.event;\n  if (!event) return;\n  switch (event) {\n    case 'pinpointProvider_configured':\n      analyticsConfigured = true;\n      if (authConfigured || credentialsConfigured) {\n        sendEvents();\n      }\n      break;\n  }\n};\nvar coreEvent = function (payload) {\n  var event = payload.event;\n  if (!event) return;\n  switch (event) {\n    case 'credentials_configured':\n      credentialsConfigured = true;\n      if (analyticsConfigured) {\n        sendEvents();\n      }\n      break;\n  }\n};\nvar sendEvents = function () {\n  var config = _instance.configure();\n  if (!endpointUpdated && config['autoSessionRecord']) {\n    _instance.updateEndpoint({\n      immediate: true\n    }).catch(function (e) {\n      logger.debug('Failed to update the endpoint', e);\n    });\n    endpointUpdated = true;\n  }\n  _instance.autoTrack('session', {\n    enable: config['autoSessionRecord']\n  });\n};\nexport var Analytics = new AnalyticsClass();\nAmplify.register(Analytics);","map":{"version":3,"names":["Amplify","ConsoleLogger","Logger","Hub","parseAWSExports","AWSPinpointProvider","PageViewTracker","EventTracker","SessionTracker","logger","AMPLIFY_SYMBOL","Symbol","for","dispatchAnalyticsEvent","event","data","message","dispatch","trackers","pageView","session","_instance","AnalyticsClass","_config","_pluggables","_disabled","_trackers","record","bind","listen","listener","prototype","getModuleName","configure","config","_this","debug","amplifyConfig","Object","assign","Analytics","undefined","forEach","pluggable","providerConfig","getProviderName","__assign","disabled","autoSessionRecord","length","addPluggable","getCategory","push","getPluggable","providerName","i","removePluggable","idx","splice","disable","enable","startSession","provider","name","params","_sendEvent","stopSession","updateEndpoint","attrs","Promise","resolve","reject","autoTrack","trackerType","opts","tracker","endpointUpdated","authConfigured","analyticsConfigured","credentialsConfigured","capsule","channel","payload","authEvent","storageEvent","analyticsEvent","coreEvent","_a","metrics","attributes","catch","e","recordAuthEvent","eventName","__awaiter","sent","err_1","sendEvents","immediate","register"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-amplify/analytics/src/Analytics.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n\tAmplify,\n\tConsoleLogger as Logger,\n\tHub,\n\tparseAWSExports,\n} from '@aws-amplify/core';\nimport { AWSPinpointProvider } from './Providers/AWSPinpointProvider';\n\nimport {\n\tAnalyticsProvider,\n\tEventAttributes,\n\tEventMetrics,\n\tAnalyticsEvent,\n\tAutoTrackSessionOpts,\n\tAutoTrackPageViewOpts,\n\tAutoTrackEventOpts,\n\tPersonalizeAnalyticsEvent,\n\tKinesisAnalyticsEvent,\n} from './types';\nimport { PageViewTracker, EventTracker, SessionTracker } from './trackers';\n\nconst logger = new Logger('AnalyticsClass');\n\nconst AMPLIFY_SYMBOL = (\n\ttypeof Symbol !== 'undefined' && typeof Symbol.for === 'function'\n\t\t? Symbol.for('amplify_default')\n\t\t: '@@amplify_default'\n) as Symbol;\n\nconst dispatchAnalyticsEvent = (event: string, data: any, message: string) => {\n\tHub.dispatch(\n\t\t'analytics',\n\t\t{ event, data, message },\n\t\t'Analytics',\n\t\tAMPLIFY_SYMBOL\n\t);\n};\n\nconst trackers = {\n\tpageView: PageViewTracker,\n\tevent: EventTracker,\n\tsession: SessionTracker,\n};\n\ntype TrackerTypes = keyof typeof trackers;\ntype Trackers = (typeof trackers)[TrackerTypes];\nlet _instance = null;\n\n/**\n * Provide mobile analytics client functions\n */\nexport class AnalyticsClass {\n\tprivate _config;\n\tprivate _pluggables: AnalyticsProvider[];\n\tprivate _disabled: boolean;\n\tprivate _trackers: Trackers | {};\n\n\t/**\n\t * Initialize Analtyics\n\t * @param config - Configuration of the Analytics\n\t */\n\tconstructor() {\n\t\tthis._config = {};\n\t\tthis._pluggables = [];\n\t\tthis._disabled = false;\n\t\tthis._trackers = {};\n\t\t_instance = this;\n\n\t\tthis.record = this.record.bind(this);\n\t\tHub.listen('auth', listener);\n\t\tHub.listen('storage', listener);\n\t\tHub.listen('analytics', listener);\n\t\tHub.listen('core', listener);\n\t}\n\n\tpublic getModuleName() {\n\t\treturn 'Analytics';\n\t}\n\t/**\n\t * configure Analytics\n\t * @param {Object} config - Configuration of the Analytics\n\t */\n\tpublic configure(config?) {\n\t\tif (!config) return this._config;\n\t\tlogger.debug('configure Analytics', config);\n\t\tconst amplifyConfig = parseAWSExports(config);\n\t\tthis._config = Object.assign(\n\t\t\t{},\n\t\t\tthis._config,\n\t\t\tamplifyConfig.Analytics,\n\t\t\tconfig\n\t\t);\n\n\t\tif (this._config['disabled']) {\n\t\t\tthis._disabled = true;\n\t\t}\n\n\t\t// turn on the autoSessionRecord if not specified\n\t\tif (this._config['autoSessionRecord'] === undefined) {\n\t\t\tthis._config['autoSessionRecord'] = true;\n\t\t}\n\n\t\tthis._pluggables.forEach(pluggable => {\n\t\t\t// for backward compatibility\n\t\t\tconst providerConfig =\n\t\t\t\tpluggable.getProviderName() === 'AWSPinpoint' &&\n\t\t\t\t!this._config['AWSPinpoint']\n\t\t\t\t\t? this._config\n\t\t\t\t\t: this._config[pluggable.getProviderName()];\n\n\t\t\tpluggable.configure({\n\t\t\t\tdisabled: this._config['disabled'],\n\t\t\t\tautoSessionRecord: this._config['autoSessionRecord'],\n\t\t\t\t...providerConfig,\n\t\t\t});\n\t\t});\n\n\t\tif (this._pluggables.length === 0) {\n\t\t\tthis.addPluggable(new AWSPinpointProvider());\n\t\t}\n\n\t\tdispatchAnalyticsEvent(\n\t\t\t'configured',\n\t\t\tnull,\n\t\t\t`The Analytics category has been configured successfully`\n\t\t);\n\t\tlogger.debug('current configuration', this._config);\n\t\treturn this._config;\n\t}\n\n\t/**\n\t * add plugin into Analytics category\n\t * @param pluggable - an instance of the plugin\n\t */\n\tpublic addPluggable(pluggable: AnalyticsProvider) {\n\t\tif (pluggable && pluggable.getCategory() === 'Analytics') {\n\t\t\tthis._pluggables.push(pluggable);\n\t\t\t// for backward compatibility\n\t\t\tconst providerConfig =\n\t\t\t\tpluggable.getProviderName() === 'AWSPinpoint' &&\n\t\t\t\t!this._config['AWSPinpoint']\n\t\t\t\t\t? this._config\n\t\t\t\t\t: this._config[pluggable.getProviderName()];\n\t\t\tconst config = { disabled: this._config['disabled'], ...providerConfig };\n\t\t\tpluggable.configure(config);\n\t\t\treturn config;\n\t\t}\n\t}\n\n\t/**\n\t * Get the plugin object\n\t * @param providerName - the name of the provider to be removed\n\t */\n\tpublic getPluggable(providerName: string): AnalyticsProvider {\n\t\tfor (let i = 0; i < this._pluggables.length; i += 1) {\n\t\t\tconst pluggable = this._pluggables[i];\n\t\t\tif (pluggable.getProviderName() === providerName) {\n\t\t\t\treturn pluggable;\n\t\t\t}\n\t\t}\n\n\t\tlogger.debug('No plugin found with providerName', providerName);\n\t\treturn null;\n\t}\n\n\t/**\n\t * Remove the plugin object\n\t * @param providerName - the name of the provider to be removed\n\t */\n\tpublic removePluggable(providerName: string): void {\n\t\tlet idx = 0;\n\t\twhile (idx < this._pluggables.length) {\n\t\t\tif (this._pluggables[idx].getProviderName() === providerName) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tidx += 1;\n\t\t}\n\n\t\tif (idx === this._pluggables.length) {\n\t\t\tlogger.debug('No plugin found with providerName', providerName);\n\t\t\treturn;\n\t\t} else {\n\t\t\tthis._pluggables.splice(idx, idx + 1);\n\t\t\treturn;\n\t\t}\n\t}\n\n\t/**\n\t * stop sending events\n\t */\n\tpublic disable() {\n\t\tthis._disabled = true;\n\t}\n\n\t/**\n\t * start sending events\n\t */\n\tpublic enable() {\n\t\tthis._disabled = false;\n\t}\n\n\t/**\n\t * Record Session start\n\t * @param [provider] - name of the provider.\n\t * @return - A promise which resolves if buffer doesn't overflow\n\t */\n\tpublic async startSession(provider?: string) {\n\t\tconst event = { name: '_session.start' };\n\t\tconst params = { event, provider };\n\n\t\tdispatchAnalyticsEvent(\n\t\t\t'record',\n\t\t\tevent,\n\t\t\t'Recording Analytics session start event'\n\t\t);\n\n\t\treturn this._sendEvent(params);\n\t}\n\n\t/**\n\t * Record Session stop\n\t * @param [provider] - name of the provider.\n\t * @return - A promise which resolves if buffer doesn't overflow\n\t */\n\tpublic async stopSession(provider?: string) {\n\t\tconst event = { name: '_session.stop' };\n\t\tconst params = { event, provider };\n\n\t\tdispatchAnalyticsEvent(\n\t\t\t'record',\n\t\t\tevent,\n\t\t\t'Recording Analytics session stop event'\n\t\t);\n\n\t\treturn this._sendEvent(params);\n\t}\n\n\t/**\n\t * Record one analytic event and send it to Pinpoint\n\t * @param event - An object with the name of the event, attributes of the event and event metrics.\n\t * @param [provider] - name of the provider.\n\t */\n\tpublic async record(\n\t\tevent: AnalyticsEvent | PersonalizeAnalyticsEvent | KinesisAnalyticsEvent,\n\t\tprovider?: string\n\t) {\n\t\tconst params = { event, provider };\n\n\t\tdispatchAnalyticsEvent('record', params.event, 'Recording Analytics event');\n\n\t\treturn this._sendEvent(params);\n\t}\n\n\tpublic async updateEndpoint(\n\t\tattrs: { [key: string]: any },\n\t\tprovider?: string\n\t) {\n\t\tconst event = { ...attrs, name: '_update_endpoint' };\n\n\t\treturn this.record(event, provider);\n\t}\n\n\tprivate _sendEvent(params: {\n\t\tevent: AnalyticsEvent | PersonalizeAnalyticsEvent | KinesisAnalyticsEvent;\n\t\tprovider?: string;\n\t}) {\n\t\tif (this._disabled) {\n\t\t\tlogger.debug('Analytics has been disabled');\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tconst provider = params.provider ? params.provider : 'AWSPinpoint';\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis._pluggables.forEach(pluggable => {\n\t\t\t\tif (pluggable.getProviderName() === provider) {\n\t\t\t\t\tpluggable.record(params, { resolve, reject });\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Enable or disable auto tracking\n\t * @param trackerType - The type of tracker to activate.\n\t * @param [opts] - Auto tracking options.\n\t */\n\tpublic autoTrack(trackerType: 'session', opts: AutoTrackSessionOpts);\n\tpublic autoTrack(trackerType: 'pageView', opts: AutoTrackPageViewOpts);\n\tpublic autoTrack(trackerType: 'event', opts: AutoTrackEventOpts);\n\t// ensures backwards compatibility for non-pinpoint provider users\n\tpublic autoTrack(\n\t\ttrackerType: TrackerTypes,\n\t\topts: { provider: string; [key: string]: any }\n\t);\n\tpublic autoTrack(trackerType: TrackerTypes, opts: { [key: string]: any }) {\n\t\tif (!trackers[trackerType]) {\n\t\t\tlogger.debug('invalid tracker type');\n\t\t\treturn;\n\t\t}\n\n\t\t// to sync up two different configuration ways of auto session tracking\n\t\tif (trackerType === 'session') {\n\t\t\tthis._config['autoSessionRecord'] = opts['enable'];\n\t\t}\n\n\t\tconst tracker = this._trackers[trackerType];\n\t\tif (!tracker) {\n\t\t\tthis._trackers[trackerType] = new trackers[trackerType](\n\t\t\t\tthis.record,\n\t\t\t\topts\n\t\t\t);\n\t\t} else {\n\t\t\ttracker.configure(opts);\n\t\t}\n\t}\n}\n\nlet endpointUpdated = false;\nlet authConfigured = false;\nlet analyticsConfigured = false;\nlet credentialsConfigured = false;\n\nconst listener = capsule => {\n\tconst { channel, payload } = capsule;\n\tlogger.debug('on hub capsule ' + channel, payload);\n\n\tswitch (channel) {\n\t\tcase 'auth':\n\t\t\tauthEvent(payload);\n\t\t\tbreak;\n\t\tcase 'storage':\n\t\t\tstorageEvent(payload);\n\t\t\tbreak;\n\t\tcase 'analytics':\n\t\t\tanalyticsEvent(payload);\n\t\t\tbreak;\n\t\tcase 'core':\n\t\t\tcoreEvent(payload);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t}\n};\n\nconst storageEvent = payload => {\n\tconst {\n\t\tdata: { attrs, metrics },\n\t} = payload;\n\tif (!attrs) return;\n\n\tif (analyticsConfigured) {\n\t\t_instance\n\t\t\t.record({\n\t\t\t\tname: 'Storage',\n\t\t\t\tattributes: attrs,\n\t\t\t\tmetrics,\n\t\t\t})\n\t\t\t.catch(e => {\n\t\t\t\tlogger.debug('Failed to send the storage event automatically', e);\n\t\t\t});\n\t}\n};\n\nconst authEvent = payload => {\n\tconst { event } = payload;\n\tif (!event) {\n\t\treturn;\n\t}\n\n\tconst recordAuthEvent = async eventName => {\n\t\tif (authConfigured && analyticsConfigured) {\n\t\t\ttry {\n\t\t\t\treturn await _instance.record({ name: `_userauth.${eventName}` });\n\t\t\t} catch (err) {\n\t\t\t\tlogger.debug(\n\t\t\t\t\t`Failed to send the ${eventName} event automatically`,\n\t\t\t\t\terr\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t};\n\n\tswitch (event) {\n\t\tcase 'signIn':\n\t\t\treturn recordAuthEvent('sign_in');\n\t\tcase 'signUp':\n\t\t\treturn recordAuthEvent('sign_up');\n\t\tcase 'signOut':\n\t\t\treturn recordAuthEvent('sign_out');\n\t\tcase 'signIn_failure':\n\t\t\treturn recordAuthEvent('auth_fail');\n\t\tcase 'configured':\n\t\t\tauthConfigured = true;\n\t\t\tif (analyticsConfigured) {\n\t\t\t\tsendEvents();\n\t\t\t}\n\t\t\tbreak;\n\t}\n};\n\nconst analyticsEvent = payload => {\n\tconst { event } = payload;\n\tif (!event) return;\n\n\tswitch (event) {\n\t\tcase 'pinpointProvider_configured':\n\t\t\tanalyticsConfigured = true;\n\t\t\tif (authConfigured || credentialsConfigured) {\n\t\t\t\tsendEvents();\n\t\t\t}\n\t\t\tbreak;\n\t}\n};\n\nconst coreEvent = payload => {\n\tconst { event } = payload;\n\tif (!event) return;\n\n\tswitch (event) {\n\t\tcase 'credentials_configured':\n\t\t\tcredentialsConfigured = true;\n\t\t\tif (analyticsConfigured) {\n\t\t\t\tsendEvents();\n\t\t\t}\n\t\t\tbreak;\n\t}\n};\n\nconst sendEvents = () => {\n\tconst config = _instance.configure();\n\tif (!endpointUpdated && config['autoSessionRecord']) {\n\t\t_instance.updateEndpoint({ immediate: true }).catch(e => {\n\t\t\tlogger.debug('Failed to update the endpoint', e);\n\t\t});\n\t\tendpointUpdated = true;\n\t}\n\t_instance.autoTrack('session', {\n\t\tenable: config['autoSessionRecord'],\n\t});\n};\n\nexport const Analytics = new AnalyticsClass();\nAmplify.register(Analytics);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}