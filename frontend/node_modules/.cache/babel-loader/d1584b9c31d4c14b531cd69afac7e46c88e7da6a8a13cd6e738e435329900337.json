{"ast":null,"code":"import { __assign, __read, __spread } from \"tslib\";\nvar HttpRequest = /** @class */function () {\n  function HttpRequest(options) {\n    this.method = options.method || \"GET\";\n    this.hostname = options.hostname || \"localhost\";\n    this.port = options.port;\n    this.query = options.query || {};\n    this.headers = options.headers || {};\n    this.body = options.body;\n    this.protocol = options.protocol ? options.protocol.substr(-1) !== \":\" ? options.protocol + \":\" : options.protocol : \"https:\";\n    this.path = options.path ? options.path.charAt(0) !== \"/\" ? \"/\" + options.path : options.path : \"/\";\n  }\n  HttpRequest.isInstance = function (request) {\n    //determine if request is a valid httpRequest\n    if (!request) return false;\n    var req = request;\n    return \"method\" in req && \"protocol\" in req && \"hostname\" in req && \"path\" in req && typeof req[\"query\"] === \"object\" && typeof req[\"headers\"] === \"object\";\n  };\n  HttpRequest.prototype.clone = function () {\n    var cloned = new HttpRequest(__assign(__assign({}, this), {\n      headers: __assign({}, this.headers)\n    }));\n    if (cloned.query) cloned.query = cloneQuery(cloned.query);\n    return cloned;\n  };\n  return HttpRequest;\n}();\nexport { HttpRequest };\nfunction cloneQuery(query) {\n  return Object.keys(query).reduce(function (carry, paramName) {\n    var _a;\n    var param = query[paramName];\n    return __assign(__assign({}, carry), (_a = {}, _a[paramName] = Array.isArray(param) ? __spread(param) : param, _a));\n  }, {});\n}","map":{"version":3,"names":["HttpRequest","options","method","hostname","port","query","headers","body","protocol","substr","path","charAt","isInstance","request","req","prototype","clone","cloned","__assign","cloneQuery","Object","keys","reduce","carry","paramName","param","_a","Array","isArray","__spread"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-sdk/protocol-http/src/httpRequest.ts"],"sourcesContent":["import { Endpoint, HeaderBag, HttpMessage, HttpRequest as IHttpRequest, QueryParameterBag } from \"@aws-sdk/types\";\n\ntype HttpRequestOptions = Partial<HttpMessage> & Partial<Endpoint> & { method?: string };\n\nexport interface HttpRequest extends IHttpRequest {}\n\nexport class HttpRequest implements HttpMessage, Endpoint {\n  public method: string;\n  public protocol: string;\n  public hostname: string;\n  public port?: number;\n  public path: string;\n  public query: QueryParameterBag;\n  public headers: HeaderBag;\n  public body?: any;\n\n  constructor(options: HttpRequestOptions) {\n    this.method = options.method || \"GET\";\n    this.hostname = options.hostname || \"localhost\";\n    this.port = options.port;\n    this.query = options.query || {};\n    this.headers = options.headers || {};\n    this.body = options.body;\n    this.protocol = options.protocol\n      ? options.protocol.substr(-1) !== \":\"\n        ? `${options.protocol}:`\n        : options.protocol\n      : \"https:\";\n    this.path = options.path ? (options.path.charAt(0) !== \"/\" ? `/${options.path}` : options.path) : \"/\";\n  }\n\n  static isInstance(request: unknown): request is HttpRequest {\n    //determine if request is a valid httpRequest\n    if (!request) return false;\n    const req: any = request;\n    return (\n      \"method\" in req &&\n      \"protocol\" in req &&\n      \"hostname\" in req &&\n      \"path\" in req &&\n      typeof req[\"query\"] === \"object\" &&\n      typeof req[\"headers\"] === \"object\"\n    );\n  }\n\n  clone(): HttpRequest {\n    const cloned = new HttpRequest({\n      ...this,\n      headers: { ...this.headers },\n    });\n    if (cloned.query) cloned.query = cloneQuery(cloned.query);\n    return cloned;\n  }\n}\n\nfunction cloneQuery(query: QueryParameterBag): QueryParameterBag {\n  return Object.keys(query).reduce((carry: QueryParameterBag, paramName: string) => {\n    const param = query[paramName];\n    return {\n      ...carry,\n      [paramName]: Array.isArray(param) ? [...param] : param,\n    };\n  }, {});\n}\n"],"mappings":";AAMA,IAAAA,WAAA;EAUE,SAAAA,YAAYC,OAA2B;IACrC,IAAI,CAACC,MAAM,GAAGD,OAAO,CAACC,MAAM,IAAI,KAAK;IACrC,IAAI,CAACC,QAAQ,GAAGF,OAAO,CAACE,QAAQ,IAAI,WAAW;IAC/C,IAAI,CAACC,IAAI,GAAGH,OAAO,CAACG,IAAI;IACxB,IAAI,CAACC,KAAK,GAAGJ,OAAO,CAACI,KAAK,IAAI,EAAE;IAChC,IAAI,CAACC,OAAO,GAAGL,OAAO,CAACK,OAAO,IAAI,EAAE;IACpC,IAAI,CAACC,IAAI,GAAGN,OAAO,CAACM,IAAI;IACxB,IAAI,CAACC,QAAQ,GAAGP,OAAO,CAACO,QAAQ,GAC5BP,OAAO,CAACO,QAAQ,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,GAC9BR,OAAO,CAACO,QAAQ,MAAG,GACtBP,OAAO,CAACO,QAAQ,GAClB,QAAQ;IACZ,IAAI,CAACE,IAAI,GAAGT,OAAO,CAACS,IAAI,GAAIT,OAAO,CAACS,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,MAAIV,OAAO,CAACS,IAAM,GAAGT,OAAO,CAACS,IAAI,GAAI,GAAG;EACvG;EAEOV,WAAA,CAAAY,UAAU,GAAjB,UAAkBC,OAAgB;IAChC;IACA,IAAI,CAACA,OAAO,EAAE,OAAO,KAAK;IAC1B,IAAMC,GAAG,GAAQD,OAAO;IACxB,OACE,QAAQ,IAAIC,GAAG,IACf,UAAU,IAAIA,GAAG,IACjB,UAAU,IAAIA,GAAG,IACjB,MAAM,IAAIA,GAAG,IACb,OAAOA,GAAG,CAAC,OAAO,CAAC,KAAK,QAAQ,IAChC,OAAOA,GAAG,CAAC,SAAS,CAAC,KAAK,QAAQ;EAEtC,CAAC;EAEDd,WAAA,CAAAe,SAAA,CAAAC,KAAK,GAAL;IACE,IAAMC,MAAM,GAAG,IAAIjB,WAAW,CAAAkB,QAAA,CAAAA,QAAA,KACzB,IAAI;MACPZ,OAAO,EAAAY,QAAA,KAAO,IAAI,CAACZ,OAAO;IAAA,GAC1B;IACF,IAAIW,MAAM,CAACZ,KAAK,EAAEY,MAAM,CAACZ,KAAK,GAAGc,UAAU,CAACF,MAAM,CAACZ,KAAK,CAAC;IACzD,OAAOY,MAAM;EACf,CAAC;EACH,OAAAjB,WAAC;AAAD,CAAC,CA/CD;;AAiDA,SAASmB,UAAUA,CAACd,KAAwB;EAC1C,OAAOe,MAAM,CAACC,IAAI,CAAChB,KAAK,CAAC,CAACiB,MAAM,CAAC,UAACC,KAAwB,EAAEC,SAAiB;;IAC3E,IAAMC,KAAK,GAAGpB,KAAK,CAACmB,SAAS,CAAC;IAC9B,OAAAN,QAAA,CAAAA,QAAA,KACKK,KAAK,IAAAG,EAAA,OAAAA,EAAA,CACPF,SAAS,IAAGG,KAAK,CAACC,OAAO,CAACH,KAAK,CAAC,GAAEI,QAAA,CAAKJ,KAAK,IAAIA,KAAK,EAAAC,EAAA;EAE1D,CAAC,EAAE,EAAE,CAAC;AACR"},"metadata":{},"sourceType":"module","externalDependencies":[]}