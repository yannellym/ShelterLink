{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { getRealRegion } from \"./getRealRegion\";\nimport { isFipsRegion } from \"./isFipsRegion\";\nexport var resolveRegionConfig = function (input) {\n  var region = input.region,\n    useFipsEndpoint = input.useFipsEndpoint;\n  if (!region) {\n    throw new Error(\"Region is missing\");\n  }\n  return __assign(__assign({}, input), {\n    region: function () {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var providedRegion;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (typeof region === \"string\") {\n                return [2, getRealRegion(region)];\n              }\n              return [4, region()];\n            case 1:\n              providedRegion = _a.sent();\n              return [2, getRealRegion(providedRegion)];\n          }\n        });\n      });\n    },\n    useFipsEndpoint: function () {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var providedRegion, _a;\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              if (!(typeof region === \"string\")) return [3, 1];\n              _a = region;\n              return [3, 3];\n            case 1:\n              return [4, region()];\n            case 2:\n              _a = _b.sent();\n              _b.label = 3;\n            case 3:\n              providedRegion = _a;\n              if (isFipsRegion(providedRegion)) {\n                return [2, true];\n              }\n              return [2, typeof useFipsEndpoint === \"boolean\" ? Promise.resolve(useFipsEndpoint) : useFipsEndpoint()];\n          }\n        });\n      });\n    }\n  });\n};","map":{"version":3,"names":["__assign","__awaiter","__generator","getRealRegion","isFipsRegion","resolveRegionConfig","input","region","useFipsEndpoint","Error","providedRegion","_a","label","sent","_b","Promise","resolve"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/resolveRegionConfig.js"],"sourcesContent":["import { __assign, __awaiter, __generator } from \"tslib\";\nimport { getRealRegion } from \"./getRealRegion\";\nimport { isFipsRegion } from \"./isFipsRegion\";\nexport var resolveRegionConfig = function (input) {\n    var region = input.region, useFipsEndpoint = input.useFipsEndpoint;\n    if (!region) {\n        throw new Error(\"Region is missing\");\n    }\n    return __assign(__assign({}, input), { region: function () { return __awaiter(void 0, void 0, void 0, function () {\n            var providedRegion;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (typeof region === \"string\") {\n                            return [2, getRealRegion(region)];\n                        }\n                        return [4, region()];\n                    case 1:\n                        providedRegion = _a.sent();\n                        return [2, getRealRegion(providedRegion)];\n                }\n            });\n        }); }, useFipsEndpoint: function () { return __awaiter(void 0, void 0, void 0, function () {\n            var providedRegion, _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(typeof region === \"string\")) return [3, 1];\n                        _a = region;\n                        return [3, 3];\n                    case 1: return [4, region()];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        providedRegion = _a;\n                        if (isFipsRegion(providedRegion)) {\n                            return [2, true];\n                        }\n                        return [2, typeof useFipsEndpoint === \"boolean\" ? Promise.resolve(useFipsEndpoint) : useFipsEndpoint()];\n                }\n            });\n        }); } });\n};\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACxD,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,YAAY,QAAQ,gBAAgB;AAC7C,OAAO,IAAIC,mBAAmB,GAAG,SAAAA,CAAUC,KAAK,EAAE;EAC9C,IAAIC,MAAM,GAAGD,KAAK,CAACC,MAAM;IAAEC,eAAe,GAAGF,KAAK,CAACE,eAAe;EAClE,IAAI,CAACD,MAAM,EAAE;IACT,MAAM,IAAIE,KAAK,CAAC,mBAAmB,CAAC;EACxC;EACA,OAAOT,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAEM,KAAK,CAAC,EAAE;IAAEC,MAAM,EAAE,SAAAA,CAAA,EAAY;MAAE,OAAON,SAAS,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,YAAY;QAC1G,IAAIS,cAAc;QAClB,OAAOR,WAAW,CAAC,IAAI,EAAE,UAAUS,EAAE,EAAE;UACnC,QAAQA,EAAE,CAACC,KAAK;YACZ,KAAK,CAAC;cACF,IAAI,OAAOL,MAAM,KAAK,QAAQ,EAAE;gBAC5B,OAAO,CAAC,CAAC,EAAEJ,aAAa,CAACI,MAAM,CAAC,CAAC;cACrC;cACA,OAAO,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC;YACxB,KAAK,CAAC;cACFG,cAAc,GAAGC,EAAE,CAACE,IAAI,CAAC,CAAC;cAC1B,OAAO,CAAC,CAAC,EAAEV,aAAa,CAACO,cAAc,CAAC,CAAC;UACjD;QACJ,CAAC,CAAC;MACN,CAAC,CAAC;IAAE,CAAC;IAAEF,eAAe,EAAE,SAAAA,CAAA,EAAY;MAAE,OAAOP,SAAS,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,YAAY;QACvF,IAAIS,cAAc,EAAEC,EAAE;QACtB,OAAOT,WAAW,CAAC,IAAI,EAAE,UAAUY,EAAE,EAAE;UACnC,QAAQA,EAAE,CAACF,KAAK;YACZ,KAAK,CAAC;cACF,IAAI,EAAE,OAAOL,MAAM,KAAK,QAAQ,CAAC,EAAE,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC;cAChDI,EAAE,GAAGJ,MAAM;cACX,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC;YACjB,KAAK,CAAC;cAAE,OAAO,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC;YAC5B,KAAK,CAAC;cACFI,EAAE,GAAGG,EAAE,CAACD,IAAI,CAAC,CAAC;cACdC,EAAE,CAACF,KAAK,GAAG,CAAC;YAChB,KAAK,CAAC;cACFF,cAAc,GAAGC,EAAE;cACnB,IAAIP,YAAY,CAACM,cAAc,CAAC,EAAE;gBAC9B,OAAO,CAAC,CAAC,EAAE,IAAI,CAAC;cACpB;cACA,OAAO,CAAC,CAAC,EAAE,OAAOF,eAAe,KAAK,SAAS,GAAGO,OAAO,CAACC,OAAO,CAACR,eAAe,CAAC,GAAGA,eAAe,CAAC,CAAC,CAAC;UAC/G;QACJ,CAAC,CAAC;MACN,CAAC,CAAC;IAAE;EAAE,CAAC,CAAC;AAChB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}