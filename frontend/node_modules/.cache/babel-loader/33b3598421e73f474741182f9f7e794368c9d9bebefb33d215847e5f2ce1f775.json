{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { StartDeliveryStreamEncryptionInput, StartDeliveryStreamEncryptionOutput } from \"../models/models_0\";\nimport { deserializeAws_json1_1StartDeliveryStreamEncryptionCommand, serializeAws_json1_1StartDeliveryStreamEncryptionCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Enables server-side encryption (SSE) for the delivery stream. </p>\n *          <p>This operation is asynchronous. It returns immediately. When you invoke it, Kinesis Data\n *          Firehose first sets the encryption status of the stream to <code>ENABLING</code>, and then\n *          to <code>ENABLED</code>. The encryption status of a delivery stream is the\n *             <code>Status</code> property in <a>DeliveryStreamEncryptionConfiguration</a>.\n *          If the operation fails, the encryption status changes to <code>ENABLING_FAILED</code>. You\n *          can continue to read and write data to your delivery stream while the encryption status is\n *             <code>ENABLING</code>, but the data is not encrypted. It can take up to 5 seconds after\n *          the encryption status changes to <code>ENABLED</code> before all records written to the\n *          delivery stream are encrypted. To find out whether a record or a batch of records was\n *          encrypted, check the response elements <a>PutRecordOutput$Encrypted</a> and\n *             <a>PutRecordBatchOutput$Encrypted</a>, respectively.</p>\n *          <p>To check the encryption status of a delivery stream, use <a>DescribeDeliveryStream</a>.</p>\n *          <p>Even if encryption is currently enabled for a delivery stream, you can still invoke this\n *          operation on it to change the ARN of the CMK or both its type and ARN. If you invoke this\n *          method to change the CMK, and the old CMK is of type <code>CUSTOMER_MANAGED_CMK</code>,\n *          Kinesis Data Firehose schedules the grant it had on the old CMK for retirement. If the new\n *          CMK is of type <code>CUSTOMER_MANAGED_CMK</code>, Kinesis Data Firehose creates a grant\n *          that enables it to use the new CMK to encrypt and decrypt data and to manage the\n *          grant.</p>\n *          <p>If a delivery stream already has encryption enabled and then you invoke this operation\n *          to change the ARN of the CMK or both its type and ARN and you get\n *             <code>ENABLING_FAILED</code>, this only means that the attempt to change the CMK failed.\n *          In this case, encryption remains enabled with the old CMK.</p>\n *          <p>If the encryption status of your delivery stream is <code>ENABLING_FAILED</code>, you\n *          can invoke this operation again with a valid CMK. The CMK must be enabled and the key\n *          policy mustn't explicitly deny the permission for Kinesis Data Firehose to invoke KMS\n *          encrypt and decrypt operations.</p>\n *          <p>You can enable SSE for a delivery stream only if it's a delivery stream that uses\n *             <code>DirectPut</code> as its source. </p>\n *          <p>The <code>StartDeliveryStreamEncryption</code> and\n *             <code>StopDeliveryStreamEncryption</code> operations have a combined limit of 25 calls\n *          per delivery stream per 24 hours. For example, you reach the limit if you call\n *             <code>StartDeliveryStreamEncryption</code> 13 times and\n *             <code>StopDeliveryStreamEncryption</code> 12 times for the same delivery stream in a\n *          24-hour period.</p>\n */\nvar StartDeliveryStreamEncryptionCommand = /** @class */function (_super) {\n  __extends(StartDeliveryStreamEncryptionCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function StartDeliveryStreamEncryptionCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  StartDeliveryStreamEncryptionCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"FirehoseClient\";\n    var commandName = \"StartDeliveryStreamEncryptionCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: StartDeliveryStreamEncryptionInput.filterSensitiveLog,\n      outputFilterSensitiveLog: StartDeliveryStreamEncryptionOutput.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  StartDeliveryStreamEncryptionCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1StartDeliveryStreamEncryptionCommand(input, context);\n  };\n  StartDeliveryStreamEncryptionCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1StartDeliveryStreamEncryptionCommand(output, context);\n  };\n  return StartDeliveryStreamEncryptionCommand;\n}($Command);\nexport { StartDeliveryStreamEncryptionCommand };","map":{"version":3,"names":["StartDeliveryStreamEncryptionInput","StartDeliveryStreamEncryptionOutput","deserializeAws_json1_1StartDeliveryStreamEncryptionCommand","serializeAws_json1_1StartDeliveryStreamEncryptionCommand","getSerdePlugin","Command","$Command","StartDeliveryStreamEncryptionCommand","_super","__extends","input","_this","call","prototype","resolveMiddleware","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","logger","clientName","commandName","handlerExecutionContext","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","requestHandler","resolve","request","handle","context","output"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-sdk/client-firehose/commands/StartDeliveryStreamEncryptionCommand.ts"],"sourcesContent":["import { FirehoseClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../FirehoseClient\";\nimport { StartDeliveryStreamEncryptionInput, StartDeliveryStreamEncryptionOutput } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1StartDeliveryStreamEncryptionCommand,\n  serializeAws_json1_1StartDeliveryStreamEncryptionCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type StartDeliveryStreamEncryptionCommandInput = StartDeliveryStreamEncryptionInput;\nexport type StartDeliveryStreamEncryptionCommandOutput = StartDeliveryStreamEncryptionOutput & __MetadataBearer;\n\n/**\n * <p>Enables server-side encryption (SSE) for the delivery stream. </p>\n *          <p>This operation is asynchronous. It returns immediately. When you invoke it, Kinesis Data\n *          Firehose first sets the encryption status of the stream to <code>ENABLING</code>, and then\n *          to <code>ENABLED</code>. The encryption status of a delivery stream is the\n *             <code>Status</code> property in <a>DeliveryStreamEncryptionConfiguration</a>.\n *          If the operation fails, the encryption status changes to <code>ENABLING_FAILED</code>. You\n *          can continue to read and write data to your delivery stream while the encryption status is\n *             <code>ENABLING</code>, but the data is not encrypted. It can take up to 5 seconds after\n *          the encryption status changes to <code>ENABLED</code> before all records written to the\n *          delivery stream are encrypted. To find out whether a record or a batch of records was\n *          encrypted, check the response elements <a>PutRecordOutput$Encrypted</a> and\n *             <a>PutRecordBatchOutput$Encrypted</a>, respectively.</p>\n *          <p>To check the encryption status of a delivery stream, use <a>DescribeDeliveryStream</a>.</p>\n *          <p>Even if encryption is currently enabled for a delivery stream, you can still invoke this\n *          operation on it to change the ARN of the CMK or both its type and ARN. If you invoke this\n *          method to change the CMK, and the old CMK is of type <code>CUSTOMER_MANAGED_CMK</code>,\n *          Kinesis Data Firehose schedules the grant it had on the old CMK for retirement. If the new\n *          CMK is of type <code>CUSTOMER_MANAGED_CMK</code>, Kinesis Data Firehose creates a grant\n *          that enables it to use the new CMK to encrypt and decrypt data and to manage the\n *          grant.</p>\n *          <p>If a delivery stream already has encryption enabled and then you invoke this operation\n *          to change the ARN of the CMK or both its type and ARN and you get\n *             <code>ENABLING_FAILED</code>, this only means that the attempt to change the CMK failed.\n *          In this case, encryption remains enabled with the old CMK.</p>\n *          <p>If the encryption status of your delivery stream is <code>ENABLING_FAILED</code>, you\n *          can invoke this operation again with a valid CMK. The CMK must be enabled and the key\n *          policy mustn't explicitly deny the permission for Kinesis Data Firehose to invoke KMS\n *          encrypt and decrypt operations.</p>\n *          <p>You can enable SSE for a delivery stream only if it's a delivery stream that uses\n *             <code>DirectPut</code> as its source. </p>\n *          <p>The <code>StartDeliveryStreamEncryption</code> and\n *             <code>StopDeliveryStreamEncryption</code> operations have a combined limit of 25 calls\n *          per delivery stream per 24 hours. For example, you reach the limit if you call\n *             <code>StartDeliveryStreamEncryption</code> 13 times and\n *             <code>StopDeliveryStreamEncryption</code> 12 times for the same delivery stream in a\n *          24-hour period.</p>\n */\nexport class StartDeliveryStreamEncryptionCommand extends $Command<\n  StartDeliveryStreamEncryptionCommandInput,\n  StartDeliveryStreamEncryptionCommandOutput,\n  FirehoseClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: StartDeliveryStreamEncryptionCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: FirehoseClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<StartDeliveryStreamEncryptionCommandInput, StartDeliveryStreamEncryptionCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"FirehoseClient\";\n    const commandName = \"StartDeliveryStreamEncryptionCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: StartDeliveryStreamEncryptionInput.filterSensitiveLog,\n      outputFilterSensitiveLog: StartDeliveryStreamEncryptionOutput.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: StartDeliveryStreamEncryptionCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1StartDeliveryStreamEncryptionCommand(input, context);\n  }\n\n  private deserialize(\n    output: __HttpResponse,\n    context: __SerdeContext\n  ): Promise<StartDeliveryStreamEncryptionCommandOutput> {\n    return deserializeAws_json1_1StartDeliveryStreamEncryptionCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"],"mappings":";AACA,SAASA,kCAAkC,EAAEC,mCAAmC,QAAQ,oBAAoB;AAC5G,SACEC,0DAA0D,EAC1DC,wDAAwD,QACnD,0BAA0B;AACjC,SAASC,cAAc,QAAQ,2BAA2B;AAE1D,SAASC,OAAO,IAAIC,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA,IAAAC,oCAAA,0BAAAC,MAAA;EAA0DC,SAAA,CAAAF,oCAAA,EAAAC,MAAA;EAKxD;EACA;EAEA,SAAAD,qCAAqBG,KAAgD;IAArE,IAAAC,KAAA;IACE;IACAH,MAAA,CAAAI,IAAA,MAAO;IAFYD,KAAA,CAAAD,KAAK,GAALA,KAAK;;IAGxB;EACF;EAEA;;;EAGAH,oCAAA,CAAAM,SAAA,CAAAC,iBAAiB,GAAjB,UACEC,WAAmE,EACnEC,aAA2C,EAC3CC,OAA8B;IAE9B,IAAI,CAACC,eAAe,CAACC,GAAG,CAACf,cAAc,CAACY,aAAa,EAAE,IAAI,CAACI,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CAAC;IAEzF,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAM,CAAC,IAAI,CAACL,eAAe,CAAC;IAE9C,IAAAM,MAAM,GAAKR,aAAa,CAAAQ,MAAlB;IACd,IAAMC,UAAU,GAAG,gBAAgB;IACnC,IAAMC,WAAW,GAAG,sCAAsC;IAC1D,IAAMC,uBAAuB,GAA4B;MACvDH,MAAM,EAAAA,MAAA;MACNC,UAAU,EAAAA,UAAA;MACVC,WAAW,EAAAA,WAAA;MACXE,uBAAuB,EAAE5B,kCAAkC,CAAC6B,kBAAkB;MAC9EC,wBAAwB,EAAE7B,mCAAmC,CAAC4B;KAC/D;IACO,IAAAE,cAAc,GAAKf,aAAa,CAAAe,cAAlB;IACtB,OAAOT,KAAK,CAACU,OAAO,CAClB,UAACC,OAAsC;MACrC,OAAAF,cAAc,CAACG,MAAM,CAACD,OAAO,CAACA,OAAwB,EAAEhB,OAAO,IAAI,EAAE,CAAC;IAAtE,CAAsE,EACxEU,uBAAuB,CACxB;EACH,CAAC;EAEOpB,oCAAA,CAAAM,SAAA,CAAAO,SAAS,GAAjB,UAAkBV,KAAgD,EAAEyB,OAAuB;IACzF,OAAOhC,wDAAwD,CAACO,KAAK,EAAEyB,OAAO,CAAC;EACjF,CAAC;EAEO5B,oCAAA,CAAAM,SAAA,CAAAQ,WAAW,GAAnB,UACEe,MAAsB,EACtBD,OAAuB;IAEvB,OAAOjC,0DAA0D,CAACkC,MAAM,EAAED,OAAO,CAAC;EACpF,CAAC;EAIH,OAAA5B,oCAAC;AAAD,CAAC,CAzDyDD,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}