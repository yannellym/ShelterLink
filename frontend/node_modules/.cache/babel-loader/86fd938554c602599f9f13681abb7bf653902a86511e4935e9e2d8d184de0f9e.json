{"ast":null,"code":"import { __assign, __awaiter, __generator, __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { RestClient } from './RestClient';\nimport { Amplify, ConsoleLogger as Logger, Credentials } from '@aws-amplify/core';\nvar logger = new Logger('RestAPI');\n/**\n * Export Cloud Logic APIs\n */\nvar RestAPIClass = /** @class */function () {\n  /**\n   * Initialize Rest API with AWS configuration\n   * @param {Object} options - Configuration object for API\n   */\n  function RestAPIClass(options) {\n    this._api = null;\n    this.Credentials = Credentials;\n    this._options = options;\n    logger.debug('API Options', this._options);\n  }\n  RestAPIClass.prototype.getModuleName = function () {\n    return 'RestAPI';\n  };\n  /**\n   * Configure API part with aws configurations\n   * @param {Object} config - Configuration of the API\n   * @return {Object} - The current configuration\n   */\n  RestAPIClass.prototype.configure = function (options) {\n    var _a = options || {},\n      _b = _a.API,\n      API = _b === void 0 ? {} : _b,\n      otherOptions = __rest(_a, [\"API\"]);\n    var opt = __assign(__assign({}, otherOptions), API);\n    logger.debug('configure Rest API', {\n      opt: opt\n    });\n    if (opt['aws_project_region']) {\n      if (opt['aws_cloud_logic_custom']) {\n        var custom = opt['aws_cloud_logic_custom'];\n        opt.endpoints = typeof custom === 'string' ? JSON.parse(custom) : custom;\n      }\n      opt = Object.assign({}, opt, {\n        region: opt['aws_project_region'],\n        header: {}\n      });\n    }\n    if (Array.isArray(opt.endpoints)) {\n      // Check if endpoints has custom_headers and validate if is a function\n      opt.endpoints.forEach(function (endpoint) {\n        if (typeof endpoint.custom_header !== 'undefined' && typeof endpoint.custom_header !== 'function') {\n          logger.warn('Rest API ' + endpoint.name + ', custom_header should be a function');\n          endpoint.custom_header = undefined;\n        }\n      });\n    } else if (this._options && Array.isArray(this._options.endpoints)) {\n      opt.endpoints = this._options.endpoints;\n    } else {\n      opt.endpoints = [];\n    }\n    this._options = Object.assign({}, this._options, opt);\n    this.createInstance();\n    return this._options;\n  };\n  /**\n   * Create an instance of API for the library\n   * @return - A promise of true if Success\n   */\n  RestAPIClass.prototype.createInstance = function () {\n    logger.debug('create Rest API instance');\n    this._api = new RestClient(this._options);\n    // Share Amplify instance with client for SSR\n    this._api.Credentials = this.Credentials;\n    return true;\n  };\n  /**\n   * Make a GET request\n   * @param {string} apiName - The api name of the request\n   * @param {string} path - The path of the request\n   * @param {json} [init] - Request extra params\n   * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.\n   */\n  RestAPIClass.prototype.get = function (apiName, path, init) {\n    try {\n      var apiInfo = this.getEndpointInfo(apiName, path);\n      var cancellableToken = this._api.getCancellableToken();\n      var initParams = Object.assign({}, init);\n      initParams.cancellableToken = cancellableToken;\n      var responsePromise = this._api.get(apiInfo, initParams);\n      this._api.updateRequestToBeCancellable(responsePromise, cancellableToken);\n      return responsePromise;\n    } catch (err) {\n      return Promise.reject(err.message);\n    }\n  };\n  /**\n   * Make a POST request\n   * @param {string} apiName - The api name of the request\n   * @param {string} path - The path of the request\n   * @param {json} [init] - Request extra params\n   * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.\n   */\n  RestAPIClass.prototype.post = function (apiName, path, init) {\n    try {\n      var apiInfo = this.getEndpointInfo(apiName, path);\n      var cancellableToken = this._api.getCancellableToken();\n      var initParams = Object.assign({}, init);\n      initParams.cancellableToken = cancellableToken;\n      var responsePromise = this._api.post(apiInfo, initParams);\n      this._api.updateRequestToBeCancellable(responsePromise, cancellableToken);\n      return responsePromise;\n    } catch (err) {\n      return Promise.reject(err.message);\n    }\n  };\n  /**\n   * Make a PUT request\n   * @param {string} apiName - The api name of the request\n   * @param {string} path - The path of the request\n   * @param {json} [init] - Request extra params\n   * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.\n   */\n  RestAPIClass.prototype.put = function (apiName, path, init) {\n    try {\n      var apiInfo = this.getEndpointInfo(apiName, path);\n      var cancellableToken = this._api.getCancellableToken();\n      var initParams = Object.assign({}, init);\n      initParams.cancellableToken = cancellableToken;\n      var responsePromise = this._api.put(apiInfo, initParams);\n      this._api.updateRequestToBeCancellable(responsePromise, cancellableToken);\n      return responsePromise;\n    } catch (err) {\n      return Promise.reject(err.message);\n    }\n  };\n  /**\n   * Make a PATCH request\n   * @param {string} apiName - The api name of the request\n   * @param {string} path - The path of the request\n   * @param {json} [init] - Request extra params\n   * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.\n   */\n  RestAPIClass.prototype.patch = function (apiName, path, init) {\n    try {\n      var apiInfo = this.getEndpointInfo(apiName, path);\n      var cancellableToken = this._api.getCancellableToken();\n      var initParams = Object.assign({}, init);\n      initParams.cancellableToken = cancellableToken;\n      var responsePromise = this._api.patch(apiInfo, initParams);\n      this._api.updateRequestToBeCancellable(responsePromise, cancellableToken);\n      return responsePromise;\n    } catch (err) {\n      return Promise.reject(err.message);\n    }\n  };\n  /**\n   * Make a DEL request\n   * @param {string} apiName - The api name of the request\n   * @param {string} path - The path of the request\n   * @param {json} [init] - Request extra params\n   * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.\n   */\n  RestAPIClass.prototype.del = function (apiName, path, init) {\n    try {\n      var apiInfo = this.getEndpointInfo(apiName, path);\n      var cancellableToken = this._api.getCancellableToken();\n      var initParams = Object.assign({}, init);\n      initParams.cancellableToken = cancellableToken;\n      var responsePromise = this._api.del(apiInfo, initParams);\n      this._api.updateRequestToBeCancellable(responsePromise, cancellableToken);\n      return responsePromise;\n    } catch (err) {\n      return Promise.reject(err.message);\n    }\n  };\n  /**\n   * Make a HEAD request\n   * @param {string} apiName - The api name of the request\n   * @param {string} path - The path of the request\n   * @param {json} [init] - Request extra params\n   * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.\n   */\n  RestAPIClass.prototype.head = function (apiName, path, init) {\n    try {\n      var apiInfo = this.getEndpointInfo(apiName, path);\n      var cancellableToken = this._api.getCancellableToken();\n      var initParams = Object.assign({}, init);\n      initParams.cancellableToken = cancellableToken;\n      var responsePromise = this._api.head(apiInfo, initParams);\n      this._api.updateRequestToBeCancellable(responsePromise, cancellableToken);\n      return responsePromise;\n    } catch (err) {\n      return Promise.reject(err.message);\n    }\n  };\n  /**\n   * Checks to see if an error thrown is from an api request cancellation\n   * @param {any} error - Any error\n   * @return {boolean} - A boolean indicating if the error was from an api request cancellation\n   */\n  RestAPIClass.prototype.isCancel = function (error) {\n    return this._api.isCancel(error);\n  };\n  /**\n   * Cancels an inflight request\n   * @param {any} request - request to cancel\n   * @return {boolean} - A boolean indicating if the request was cancelled\n   */\n  RestAPIClass.prototype.cancel = function (request, message) {\n    return this._api.cancel(request, message);\n  };\n  /**\n   * Check if the request has a corresponding cancel token in the WeakMap.\n   * @params request - The request promise\n   * @return if the request has a corresponding cancel token.\n   */\n  RestAPIClass.prototype.hasCancelToken = function (request) {\n    return this._api.hasCancelToken(request);\n  };\n  /**\n   * Getting endpoint for API\n   * @param {string} apiName - The name of the api\n   * @return {string} - The endpoint of the api\n   */\n  RestAPIClass.prototype.endpoint = function (apiName) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this._api.endpoint(apiName)];\n      });\n    });\n  };\n  /**\n   * Getting endpoint info for API\n   * @param {string} apiName - The name of the api\n   * @param {string} path - The path of the api that is going to accessed\n   * @return {ApiInfo} - The endpoint information for that api-name\n   */\n  RestAPIClass.prototype.getEndpointInfo = function (apiName, path) {\n    var cloud_logic_array = this._options.endpoints;\n    if (!Array.isArray(cloud_logic_array)) {\n      throw new Error(\"API category not configured\");\n    }\n    var apiConfig = cloud_logic_array.find(function (api) {\n      return api.name === apiName;\n    });\n    if (!apiConfig) {\n      throw new Error(\"API \" + apiName + \" does not exist\");\n    }\n    var response = {\n      endpoint: apiConfig.endpoint + path\n    };\n    if (typeof apiConfig.region === 'string') {\n      response.region = apiConfig.region;\n    } else if (typeof this._options.region === 'string') {\n      response.region = this._options.region;\n    }\n    if (typeof apiConfig.service === 'string') {\n      response.service = apiConfig.service || 'execute-api';\n    } else {\n      response.service = 'execute-api';\n    }\n    if (typeof apiConfig.custom_header === 'function') {\n      response.custom_header = apiConfig.custom_header;\n    } else {\n      response.custom_header = undefined;\n    }\n    return response;\n  };\n  return RestAPIClass;\n}();\nexport { RestAPIClass };\nexport var RestAPI = new RestAPIClass(null);\nAmplify.register(RestAPI);","map":{"version":3,"names":["RestClient","Amplify","ConsoleLogger","Logger","Credentials","logger","RestAPIClass","options","_api","_options","debug","prototype","getModuleName","configure","_a","_b","API","otherOptions","__rest","opt","__assign","custom","endpoints","JSON","parse","Object","assign","region","header","Array","isArray","forEach","endpoint","custom_header","warn","name","undefined","createInstance","get","apiName","path","init","apiInfo","getEndpointInfo","cancellableToken","getCancellableToken","initParams","responsePromise","updateRequestToBeCancellable","err","Promise","reject","message","post","put","patch","del","head","isCancel","error","cancel","request","hasCancelToken","cloud_logic_array","Error","apiConfig","find","api","response","service","RestAPI","register"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-amplify/api-rest/src/RestAPI.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { RestClient } from './RestClient';\nimport {\n\tAmplify,\n\tConsoleLogger as Logger,\n\tCredentials,\n} from '@aws-amplify/core';\nimport { ApiInfo } from './types';\n\nconst logger = new Logger('RestAPI');\n\n/**\n * Export Cloud Logic APIs\n */\nexport class RestAPIClass {\n\t/**\n\t * @private\n\t */\n\tprivate _options;\n\tprivate _api: RestClient = null;\n\n\tCredentials = Credentials;\n\n\t/**\n\t * Initialize Rest API with AWS configuration\n\t * @param {Object} options - Configuration object for API\n\t */\n\tconstructor(options) {\n\t\tthis._options = options;\n\t\tlogger.debug('API Options', this._options);\n\t}\n\n\tpublic getModuleName() {\n\t\treturn 'RestAPI';\n\t}\n\n\t/**\n\t * Configure API part with aws configurations\n\t * @param {Object} config - Configuration of the API\n\t * @return {Object} - The current configuration\n\t */\n\tconfigure(options) {\n\t\tconst { API = {}, ...otherOptions } = options || {};\n\t\tlet opt = { ...otherOptions, ...API };\n\t\tlogger.debug('configure Rest API', { opt });\n\n\t\tif (opt['aws_project_region']) {\n\t\t\tif (opt['aws_cloud_logic_custom']) {\n\t\t\t\tconst custom = opt['aws_cloud_logic_custom'];\n\t\t\t\topt.endpoints =\n\t\t\t\t\ttypeof custom === 'string' ? JSON.parse(custom) : custom;\n\t\t\t}\n\n\t\t\topt = Object.assign({}, opt, {\n\t\t\t\tregion: opt['aws_project_region'],\n\t\t\t\theader: {},\n\t\t\t});\n\t\t}\n\n\t\tif (Array.isArray(opt.endpoints)) {\n\t\t\t// Check if endpoints has custom_headers and validate if is a function\n\t\t\topt.endpoints.forEach(endpoint => {\n\t\t\t\tif (\n\t\t\t\t\ttypeof endpoint.custom_header !== 'undefined' &&\n\t\t\t\t\ttypeof endpoint.custom_header !== 'function'\n\t\t\t\t) {\n\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t'Rest API ' + endpoint.name + ', custom_header should be a function'\n\t\t\t\t\t);\n\t\t\t\t\tendpoint.custom_header = undefined;\n\t\t\t\t}\n\t\t\t});\n\t\t} else if (this._options && Array.isArray(this._options.endpoints)) {\n\t\t\topt.endpoints = this._options.endpoints;\n\t\t} else {\n\t\t\topt.endpoints = [];\n\t\t}\n\n\t\tthis._options = Object.assign({}, this._options, opt);\n\n\t\tthis.createInstance();\n\n\t\treturn this._options;\n\t}\n\n\t/**\n\t * Create an instance of API for the library\n\t * @return - A promise of true if Success\n\t */\n\tcreateInstance() {\n\t\tlogger.debug('create Rest API instance');\n\t\tthis._api = new RestClient(this._options);\n\n\t\t// Share Amplify instance with client for SSR\n\t\tthis._api.Credentials = this.Credentials;\n\t\treturn true;\n\t}\n\n\t/**\n\t * Make a GET request\n\t * @param {string} apiName - The api name of the request\n\t * @param {string} path - The path of the request\n\t * @param {json} [init] - Request extra params\n\t * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.\n\t */\n\tget(apiName, path, init): Promise<any> {\n\t\ttry {\n\t\t\tconst apiInfo = this.getEndpointInfo(apiName, path);\n\n\t\t\tconst cancellableToken = this._api.getCancellableToken();\n\n\t\t\tconst initParams = Object.assign({}, init);\n\t\t\tinitParams.cancellableToken = cancellableToken;\n\n\t\t\tconst responsePromise = this._api.get(apiInfo, initParams);\n\n\t\t\tthis._api.updateRequestToBeCancellable(responsePromise, cancellableToken);\n\n\t\t\treturn responsePromise;\n\t\t} catch (err) {\n\t\t\treturn Promise.reject(err.message);\n\t\t}\n\t}\n\n\t/**\n\t * Make a POST request\n\t * @param {string} apiName - The api name of the request\n\t * @param {string} path - The path of the request\n\t * @param {json} [init] - Request extra params\n\t * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.\n\t */\n\tpost(apiName, path, init): Promise<any> {\n\t\ttry {\n\t\t\tconst apiInfo = this.getEndpointInfo(apiName, path);\n\n\t\t\tconst cancellableToken = this._api.getCancellableToken();\n\n\t\t\tconst initParams = Object.assign({}, init);\n\t\t\tinitParams.cancellableToken = cancellableToken;\n\n\t\t\tconst responsePromise = this._api.post(apiInfo, initParams);\n\n\t\t\tthis._api.updateRequestToBeCancellable(responsePromise, cancellableToken);\n\n\t\t\treturn responsePromise;\n\t\t} catch (err) {\n\t\t\treturn Promise.reject(err.message);\n\t\t}\n\t}\n\n\t/**\n\t * Make a PUT request\n\t * @param {string} apiName - The api name of the request\n\t * @param {string} path - The path of the request\n\t * @param {json} [init] - Request extra params\n\t * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.\n\t */\n\tput(apiName, path, init): Promise<any> {\n\t\ttry {\n\t\t\tconst apiInfo = this.getEndpointInfo(apiName, path);\n\n\t\t\tconst cancellableToken = this._api.getCancellableToken();\n\n\t\t\tconst initParams = Object.assign({}, init);\n\t\t\tinitParams.cancellableToken = cancellableToken;\n\n\t\t\tconst responsePromise = this._api.put(apiInfo, initParams);\n\n\t\t\tthis._api.updateRequestToBeCancellable(responsePromise, cancellableToken);\n\n\t\t\treturn responsePromise;\n\t\t} catch (err) {\n\t\t\treturn Promise.reject(err.message);\n\t\t}\n\t}\n\n\t/**\n\t * Make a PATCH request\n\t * @param {string} apiName - The api name of the request\n\t * @param {string} path - The path of the request\n\t * @param {json} [init] - Request extra params\n\t * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.\n\t */\n\tpatch(apiName, path, init): Promise<any> {\n\t\ttry {\n\t\t\tconst apiInfo = this.getEndpointInfo(apiName, path);\n\n\t\t\tconst cancellableToken = this._api.getCancellableToken();\n\n\t\t\tconst initParams = Object.assign({}, init);\n\t\t\tinitParams.cancellableToken = cancellableToken;\n\n\t\t\tconst responsePromise = this._api.patch(apiInfo, initParams);\n\n\t\t\tthis._api.updateRequestToBeCancellable(responsePromise, cancellableToken);\n\n\t\t\treturn responsePromise;\n\t\t} catch (err) {\n\t\t\treturn Promise.reject(err.message);\n\t\t}\n\t}\n\n\t/**\n\t * Make a DEL request\n\t * @param {string} apiName - The api name of the request\n\t * @param {string} path - The path of the request\n\t * @param {json} [init] - Request extra params\n\t * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.\n\t */\n\tdel(apiName, path, init): Promise<any> {\n\t\ttry {\n\t\t\tconst apiInfo = this.getEndpointInfo(apiName, path);\n\n\t\t\tconst cancellableToken = this._api.getCancellableToken();\n\n\t\t\tconst initParams = Object.assign({}, init);\n\t\t\tinitParams.cancellableToken = cancellableToken;\n\n\t\t\tconst responsePromise = this._api.del(apiInfo, initParams);\n\n\t\t\tthis._api.updateRequestToBeCancellable(responsePromise, cancellableToken);\n\n\t\t\treturn responsePromise;\n\t\t} catch (err) {\n\t\t\treturn Promise.reject(err.message);\n\t\t}\n\t}\n\n\t/**\n\t * Make a HEAD request\n\t * @param {string} apiName - The api name of the request\n\t * @param {string} path - The path of the request\n\t * @param {json} [init] - Request extra params\n\t * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.\n\t */\n\thead(apiName, path, init): Promise<any> {\n\t\ttry {\n\t\t\tconst apiInfo = this.getEndpointInfo(apiName, path);\n\n\t\t\tconst cancellableToken = this._api.getCancellableToken();\n\n\t\t\tconst initParams = Object.assign({}, init);\n\t\t\tinitParams.cancellableToken = cancellableToken;\n\n\t\t\tconst responsePromise = this._api.head(apiInfo, initParams);\n\n\t\t\tthis._api.updateRequestToBeCancellable(responsePromise, cancellableToken);\n\n\t\t\treturn responsePromise;\n\t\t} catch (err) {\n\t\t\treturn Promise.reject(err.message);\n\t\t}\n\t}\n\n\t/**\n\t * Checks to see if an error thrown is from an api request cancellation\n\t * @param {any} error - Any error\n\t * @return {boolean} - A boolean indicating if the error was from an api request cancellation\n\t */\n\tisCancel(error) {\n\t\treturn this._api.isCancel(error);\n\t}\n\n\t/**\n\t * Cancels an inflight request\n\t * @param {any} request - request to cancel\n\t * @return {boolean} - A boolean indicating if the request was cancelled\n\t */\n\tcancel(request: Promise<any>, message?: string) {\n\t\treturn this._api.cancel(request, message);\n\t}\n\n\t/**\n\t * Check if the request has a corresponding cancel token in the WeakMap.\n\t * @params request - The request promise\n\t * @return if the request has a corresponding cancel token.\n\t */\n\thasCancelToken(request: Promise<any>) {\n\t\treturn this._api.hasCancelToken(request);\n\t}\n\n\t/**\n\t * Getting endpoint for API\n\t * @param {string} apiName - The name of the api\n\t * @return {string} - The endpoint of the api\n\t */\n\tasync endpoint(apiName) {\n\t\treturn this._api.endpoint(apiName);\n\t}\n\n\t/**\n\t * Getting endpoint info for API\n\t * @param {string} apiName - The name of the api\n\t * @param {string} path - The path of the api that is going to accessed\n\t * @return {ApiInfo} - The endpoint information for that api-name\n\t */\n\tprivate getEndpointInfo(apiName: string, path: string): ApiInfo {\n\t\tconst cloud_logic_array = this._options.endpoints;\n\n\t\tif (!Array.isArray(cloud_logic_array)) {\n\t\t\tthrow new Error(`API category not configured`);\n\t\t}\n\n\t\tconst apiConfig = cloud_logic_array.find(api => api.name === apiName);\n\n\t\tif (!apiConfig) {\n\t\t\tthrow new Error(`API ${apiName} does not exist`);\n\t\t}\n\n\t\tconst response: ApiInfo = {\n\t\t\tendpoint: apiConfig.endpoint + path,\n\t\t};\n\n\t\tif (typeof apiConfig.region === 'string') {\n\t\t\tresponse.region = apiConfig.region;\n\t\t} else if (typeof this._options.region === 'string') {\n\t\t\tresponse.region = this._options.region;\n\t\t}\n\n\t\tif (typeof apiConfig.service === 'string') {\n\t\t\tresponse.service = apiConfig.service || 'execute-api';\n\t\t} else {\n\t\t\tresponse.service = 'execute-api';\n\t\t}\n\n\t\tif (typeof apiConfig.custom_header === 'function') {\n\t\t\tresponse.custom_header = apiConfig.custom_header;\n\t\t} else {\n\t\t\tresponse.custom_header = undefined;\n\t\t}\n\n\t\treturn response;\n\t}\n}\n\nexport const RestAPI = new RestAPIClass(null);\nAmplify.register(RestAPI);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}