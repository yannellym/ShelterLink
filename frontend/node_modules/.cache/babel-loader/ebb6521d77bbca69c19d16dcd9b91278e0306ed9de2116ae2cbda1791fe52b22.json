{"ast":null,"code":"import { __assign, __awaiter, __generator, __read } from \"tslib\";\nimport { SignatureV4 } from \"@aws-sdk/signature-v4\";\nexport function resolveAwsAuthConfig(input) {\n  var _this = this;\n  var credentials = input.credentials || input.credentialDefaultProvider(input);\n  var normalizedCreds = normalizeProvider(credentials);\n  var _a = input.signingEscapePath,\n    signingEscapePath = _a === void 0 ? true : _a,\n    _b = input.systemClockOffset,\n    systemClockOffset = _b === void 0 ? input.systemClockOffset || 0 : _b,\n    sha256 = input.sha256;\n  var signer;\n  if (input.signer) {\n    //if signer is supplied by user, normalize it to a function returning a promise for signer.\n    signer = normalizeProvider(input.signer);\n  } else {\n    //construct a provider inferring signing from region.\n    signer = function () {\n      return normalizeProvider(input.region)().then(function (region) {\n        return __awaiter(_this, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                return [4 /*yield*/, input.regionInfoProvider(region)];\n              case 1:\n                return [2 /*return*/, [_a.sent() || {}, region]];\n            }\n          });\n        });\n      }).then(function (_a) {\n        var _b = __read(_a, 2),\n          regionInfo = _b[0],\n          region = _b[1];\n        var signingRegion = regionInfo.signingRegion,\n          signingService = regionInfo.signingService;\n        //update client's singing region and signing service config if they are resolved.\n        //signing region resolving order: user supplied signingRegion -> endpoints.json inferred region -> client region\n        input.signingRegion = input.signingRegion || signingRegion || region;\n        //signing name resolving order:\n        //user supplied signingName -> endpoints.json inferred (credential scope -> model arnNamespace) -> model service id\n        input.signingName = input.signingName || signingService || input.serviceId;\n        return new SignatureV4({\n          credentials: normalizedCreds,\n          region: input.signingRegion,\n          service: input.signingName,\n          sha256: sha256,\n          uriEscapePath: signingEscapePath\n        });\n      });\n    };\n  }\n  return __assign(__assign({}, input), {\n    systemClockOffset: systemClockOffset,\n    signingEscapePath: signingEscapePath,\n    credentials: normalizedCreds,\n    signer: signer\n  });\n}\nfunction normalizeProvider(input) {\n  if (typeof input === \"object\") {\n    var promisified_1 = Promise.resolve(input);\n    return function () {\n      return promisified_1;\n    };\n  }\n  return input;\n}","map":{"version":3,"names":["SignatureV4","resolveAwsAuthConfig","input","_this","credentials","credentialDefaultProvider","normalizedCreds","normalizeProvider","_a","signingEscapePath","_b","systemClockOffset","sha256","signer","region","then","__awaiter","__generator","regionInfoProvider","sent","__read","regionInfo","signingRegion","signingService","signingName","serviceId","service","uriEscapePath","__assign","promisified_1","Promise","resolve"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-sdk/middleware-signing/src/configurations.ts"],"sourcesContent":["import { SignatureV4 } from \"@aws-sdk/signature-v4\";\nimport { Credentials, HashConstructor, Provider, RegionInfo, RegionInfoProvider, RequestSigner } from \"@aws-sdk/types\";\n\nexport interface AwsAuthInputConfig {\n  /**\n   * The credentials used to sign requests.\n   */\n  credentials?: Credentials | Provider<Credentials>;\n\n  /**\n   * The signer to use when signing requests.\n   */\n  signer?: RequestSigner | Provider<RequestSigner>;\n\n  /**\n   * Whether to escape request path when signing the request.\n   */\n  signingEscapePath?: boolean;\n\n  /**\n   * An offset value in milliseconds to apply to all signing times.\n   */\n  systemClockOffset?: number;\n\n  /**\n   * The region where you want to sign your request against. This\n   * can be different to the region in the endpoint.\n   */\n  signingRegion?: string;\n}\ninterface PreviouslyResolved {\n  credentialDefaultProvider: (input: any) => Provider<Credentials>;\n  region: string | Provider<string>;\n  regionInfoProvider: RegionInfoProvider;\n  signingName?: string;\n  serviceId: string;\n  sha256: HashConstructor;\n}\nexport interface AwsAuthResolvedConfig {\n  credentials: Provider<Credentials>;\n  signer: Provider<RequestSigner>;\n  signingEscapePath: boolean;\n  systemClockOffset: number;\n}\nexport function resolveAwsAuthConfig<T>(input: T & AwsAuthInputConfig & PreviouslyResolved): T & AwsAuthResolvedConfig {\n  const credentials = input.credentials || input.credentialDefaultProvider(input as any);\n  const normalizedCreds = normalizeProvider(credentials);\n  const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;\n  let signer: Provider<RequestSigner>;\n  if (input.signer) {\n    //if signer is supplied by user, normalize it to a function returning a promise for signer.\n    signer = normalizeProvider(input.signer);\n  } else {\n    //construct a provider inferring signing from region.\n    signer = () =>\n      normalizeProvider(input.region)()\n        .then(async (region) => [(await input.regionInfoProvider(region)) || {}, region] as [RegionInfo, string])\n        .then(([regionInfo, region]) => {\n          const { signingRegion, signingService } = regionInfo;\n          //update client's singing region and signing service config if they are resolved.\n          //signing region resolving order: user supplied signingRegion -> endpoints.json inferred region -> client region\n          input.signingRegion = input.signingRegion || signingRegion || region;\n          //signing name resolving order:\n          //user supplied signingName -> endpoints.json inferred (credential scope -> model arnNamespace) -> model service id\n          input.signingName = input.signingName || signingService || input.serviceId;\n\n          return new SignatureV4({\n            credentials: normalizedCreds,\n            region: input.signingRegion,\n            service: input.signingName,\n            sha256,\n            uriEscapePath: signingEscapePath,\n          });\n        });\n  }\n\n  return {\n    ...input,\n    systemClockOffset,\n    signingEscapePath,\n    credentials: normalizedCreds,\n    signer,\n  };\n}\n\nfunction normalizeProvider<T>(input: T | Provider<T>): Provider<T> {\n  if (typeof input === \"object\") {\n    const promisified = Promise.resolve(input);\n    return () => promisified;\n  }\n  return input as Provider<T>;\n}\n"],"mappings":";AAAA,SAASA,WAAW,QAAQ,uBAAuB;AA4CnD,OAAM,SAAUC,oBAAoBA,CAAIC,KAAkD;EAA1F,IAAAC,KAAA;EACE,IAAMC,WAAW,GAAGF,KAAK,CAACE,WAAW,IAAIF,KAAK,CAACG,yBAAyB,CAACH,KAAY,CAAC;EACtF,IAAMI,eAAe,GAAGC,iBAAiB,CAACH,WAAW,CAAC;EAC9C,IAAAI,EAAA,GAAuFN,KAAK,CAAAO,iBAApE;IAAxBA,iBAAiB,GAAAD,EAAA,cAAG,IAAI,GAAAA,EAAA;IAAEE,EAAA,GAA6DR,KAAK,CAAAS,iBAAlB;IAAhDA,iBAAiB,GAAAD,EAAA,cAAGR,KAAK,CAACS,iBAAiB,IAAI,CAAC,GAAAD,EAAA;IAAEE,MAAM,GAAKV,KAAK,CAAAU,MAAV;EAC1F,IAAIC,MAA+B;EACnC,IAAIX,KAAK,CAACW,MAAM,EAAE;IAChB;IACAA,MAAM,GAAGN,iBAAiB,CAACL,KAAK,CAACW,MAAM,CAAC;GACzC,MAAM;IACL;IACAA,MAAM,GAAG,SAAAA,CAAA;MACP,OAAAN,iBAAiB,CAACL,KAAK,CAACY,MAAM,CAAC,EAAE,CAC9BC,IAAI,CAAC,UAAOD,MAAM;QAAA,OAAAE,SAAA,CAAAb,KAAA;UAAA,OAAAc,WAAA,iBAAAT,EAAA;;;gBAAO,qBAAMN,KAAK,CAACgB,kBAAkB,CAACJ,MAAM,CAAC;;gBAAxC,uBAAEN,EAAA,CAAAW,IAAA,EAAsC,IAAK,EAAE,EAAEL,MAAM,CAAyB;;;;OAAA,CAAC,CACxGC,IAAI,CAAC,UAACP,EAAoB;YAApBE,EAAA,GAAAU,MAAA,CAAAZ,EAAA,IAAoB;UAAnBa,UAAU,GAAAX,EAAA;UAAEI,MAAM,GAAAJ,EAAA;QAChB,IAAAY,aAAa,GAAqBD,UAAU,CAAAC,aAA/B;UAAEC,cAAc,GAAKF,UAAU,CAAAE,cAAf;QACrC;QACA;QACArB,KAAK,CAACoB,aAAa,GAAGpB,KAAK,CAACoB,aAAa,IAAIA,aAAa,IAAIR,MAAM;QACpE;QACA;QACAZ,KAAK,CAACsB,WAAW,GAAGtB,KAAK,CAACsB,WAAW,IAAID,cAAc,IAAIrB,KAAK,CAACuB,SAAS;QAE1E,OAAO,IAAIzB,WAAW,CAAC;UACrBI,WAAW,EAAEE,eAAe;UAC5BQ,MAAM,EAAEZ,KAAK,CAACoB,aAAa;UAC3BI,OAAO,EAAExB,KAAK,CAACsB,WAAW;UAC1BZ,MAAM,EAAAA,MAAA;UACNe,aAAa,EAAElB;SAChB,CAAC;MACJ,CAAC,CAAC;IAlBJ,CAkBI;;EAGR,OAAAmB,QAAA,CAAAA,QAAA,KACK1B,KAAK;IACRS,iBAAiB,EAAAA,iBAAA;IACjBF,iBAAiB,EAAAA,iBAAA;IACjBL,WAAW,EAAEE,eAAe;IAC5BO,MAAM,EAAAA;EAAA;AAEV;AAEA,SAASN,iBAAiBA,CAAIL,KAAsB;EAClD,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC7B,IAAM2B,aAAW,GAAGC,OAAO,CAACC,OAAO,CAAC7B,KAAK,CAAC;IAC1C,OAAO;MAAM,OAAA2B,aAAW;IAAX,CAAW;;EAE1B,OAAO3B,KAAoB;AAC7B"},"metadata":{},"sourceType":"module","externalDependencies":[]}