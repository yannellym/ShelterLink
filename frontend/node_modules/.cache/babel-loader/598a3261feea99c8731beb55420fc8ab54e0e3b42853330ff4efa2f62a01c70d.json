{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { sleep } from \"./utils/sleep\";\nimport { WaiterState } from \"./waiter\";\n/**\n * Reference: https://awslabs.github.io/smithy/1.0/spec/waiters.html#waiter-retries\n */\nvar exponentialBackoffWithJitter = function (minDelay, maxDelay, attemptCeiling, attempt) {\n  if (attempt > attemptCeiling) return maxDelay;\n  var delay = minDelay * Math.pow(2, attempt - 1);\n  return randomInRange(minDelay, delay);\n};\nvar randomInRange = function (min, max) {\n  return min + Math.random() * (max - min);\n};\n/**\n * Function that runs polling as part of waiters. This will make one inital attempt and then\n * subsequent attempts with an increasing delay.\n * @param params options passed to the waiter.\n * @param client AWS SDK Client\n * @param input client input\n * @param stateChecker function that checks the acceptor states on each poll.\n */\nexport var runPolling = function (_a, input, acceptorChecks) {\n  var minDelay = _a.minDelay,\n    maxDelay = _a.maxDelay,\n    maxWaitTime = _a.maxWaitTime,\n    abortController = _a.abortController,\n    client = _a.client;\n  return __awaiter(void 0, void 0, void 0, function () {\n    var state, currentAttempt, waitUntil, attemptCeiling, delay, state_1;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4 /*yield*/, acceptorChecks(client, input)];\n        case 1:\n          state = _c.sent().state;\n          if (state !== WaiterState.RETRY) {\n            return [2 /*return*/, {\n              state: state\n            }];\n          }\n          currentAttempt = 1;\n          waitUntil = Date.now() + maxWaitTime * 1000;\n          attemptCeiling = Math.log(maxDelay / minDelay) / Math.log(2) + 1;\n          _c.label = 2;\n        case 2:\n          if (!true) return [3 /*break*/, 5];\n          if ((_b = abortController === null || abortController === void 0 ? void 0 : abortController.signal) === null || _b === void 0 ? void 0 : _b.aborted) {\n            return [2 /*return*/, {\n              state: WaiterState.ABORTED\n            }];\n          }\n          delay = exponentialBackoffWithJitter(minDelay, maxDelay, attemptCeiling, currentAttempt);\n          // Resolve the promise explicitly at timeout or aborted. Otherwise this while loop will keep making API call until\n          // `acceptorCheck` returns non-retry status, even with the Promise.race() outside.\n          if (Date.now() + delay * 1000 > waitUntil) {\n            return [2 /*return*/, {\n              state: WaiterState.TIMEOUT\n            }];\n          }\n          return [4 /*yield*/, sleep(delay)];\n        case 3:\n          _c.sent();\n          return [4 /*yield*/, acceptorChecks(client, input)];\n        case 4:\n          state_1 = _c.sent().state;\n          if (state_1 !== WaiterState.RETRY) {\n            return [2 /*return*/, {\n              state: state_1\n            }];\n          }\n          currentAttempt += 1;\n          return [3 /*break*/, 2];\n        case 5:\n          return [2 /*return*/];\n      }\n    });\n  });\n};","map":{"version":3,"names":["sleep","WaiterState","exponentialBackoffWithJitter","minDelay","maxDelay","attemptCeiling","attempt","delay","Math","pow","randomInRange","min","max","random","runPolling","_a","input","acceptorChecks","maxWaitTime","abortController","client","state","_c","sent","RETRY","currentAttempt","waitUntil","Date","now","log","_b","signal","aborted","ABORTED","TIMEOUT","state_1"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-sdk/util-waiter/src/poller.ts"],"sourcesContent":["import { sleep } from \"./utils/sleep\";\nimport { WaiterOptions, WaiterResult, WaiterState } from \"./waiter\";\n\n/**\n * Reference: https://awslabs.github.io/smithy/1.0/spec/waiters.html#waiter-retries\n */\nconst exponentialBackoffWithJitter = (minDelay: number, maxDelay: number, attemptCeiling: number, attempt: number) => {\n  if (attempt > attemptCeiling) return maxDelay;\n  const delay = minDelay * 2 ** (attempt - 1);\n  return randomInRange(minDelay, delay);\n};\n\nconst randomInRange = (min: number, max: number) => min + Math.random() * (max - min);\n\n/**\n * Function that runs polling as part of waiters. This will make one inital attempt and then\n * subsequent attempts with an increasing delay.\n * @param params options passed to the waiter.\n * @param client AWS SDK Client\n * @param input client input\n * @param stateChecker function that checks the acceptor states on each poll.\n */\nexport const runPolling = async <Client, Input>(\n  { minDelay, maxDelay, maxWaitTime, abortController, client }: WaiterOptions<Client>,\n  input: Input,\n  acceptorChecks: (client: Client, input: Input) => Promise<WaiterResult>\n): Promise<WaiterResult> => {\n  const { state } = await acceptorChecks(client, input);\n  if (state !== WaiterState.RETRY) {\n    return { state };\n  }\n\n  let currentAttempt = 1;\n  const waitUntil = Date.now() + maxWaitTime * 1000;\n  // The max attempt number that the derived delay time tend to increase.\n  // Pre-compute this number to avoid Number type overflow.\n  const attemptCeiling = Math.log(maxDelay / minDelay) / Math.log(2) + 1;\n  while (true) {\n    if (abortController?.signal?.aborted) {\n      return { state: WaiterState.ABORTED };\n    }\n    const delay = exponentialBackoffWithJitter(minDelay, maxDelay, attemptCeiling, currentAttempt);\n    // Resolve the promise explicitly at timeout or aborted. Otherwise this while loop will keep making API call until\n    // `acceptorCheck` returns non-retry status, even with the Promise.race() outside.\n    if (Date.now() + delay * 1000 > waitUntil) {\n      return { state: WaiterState.TIMEOUT };\n    }\n    await sleep(delay);\n    const { state } = await acceptorChecks(client, input);\n    if (state !== WaiterState.RETRY) {\n      return { state };\n    }\n\n    currentAttempt += 1;\n  }\n};\n"],"mappings":";AAAA,SAASA,KAAK,QAAQ,eAAe;AACrC,SAAsCC,WAAW,QAAQ,UAAU;AAEnE;;;AAGA,IAAMC,4BAA4B,GAAG,SAAAA,CAACC,QAAgB,EAAEC,QAAgB,EAAEC,cAAsB,EAAEC,OAAe;EAC/G,IAAIA,OAAO,GAAGD,cAAc,EAAE,OAAOD,QAAQ;EAC7C,IAAMG,KAAK,GAAGJ,QAAQ,GAAGK,IAAA,CAAAC,GAAA,EAAC,EAAKH,OAAO,GAAG,CAAE;EAC3C,OAAOI,aAAa,CAACP,QAAQ,EAAEI,KAAK,CAAC;AACvC,CAAC;AAED,IAAMG,aAAa,GAAG,SAAAA,CAACC,GAAW,EAAEC,GAAW;EAAK,OAAAD,GAAG,GAAGH,IAAI,CAACK,MAAM,EAAE,IAAID,GAAG,GAAGD,GAAG,CAAC;AAAjC,CAAiC;AAErF;;;;;;;;AAQA,OAAO,IAAMG,UAAU,GAAG,SAAAA,CACxBC,EAAmF,EACnFC,KAAY,EACZC,cAAuE;MAFrEd,QAAQ,GAAAY,EAAA,CAAAZ,QAAA;IAAEC,QAAQ,GAAAW,EAAA,CAAAX,QAAA;IAAEc,WAAW,GAAAH,EAAA,CAAAG,WAAA;IAAEC,eAAe,GAAAJ,EAAA,CAAAI,eAAA;IAAEC,MAAM,GAAAL,EAAA,CAAAK,MAAA;;;;;;;UAIxC,qBAAMH,cAAc,CAACG,MAAM,EAAEJ,KAAK,CAAC;;UAA7CK,KAAK,GAAKC,EAAA,CAAAC,IAAA,EAAmC,CAAAF,KAAxC;UACb,IAAIA,KAAK,KAAKpB,WAAW,CAACuB,KAAK,EAAE;YAC/B,sBAAO;cAAEH,KAAK,EAAAA;YAAA,CAAE;;UAGdI,cAAc,GAAG,CAAC;UAChBC,SAAS,GAAGC,IAAI,CAACC,GAAG,EAAE,GAAGV,WAAW,GAAG,IAAI;UAG3Cb,cAAc,GAAGG,IAAI,CAACqB,GAAG,CAACzB,QAAQ,GAAGD,QAAQ,CAAC,GAAGK,IAAI,CAACqB,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;;;eAC/D,IAAI;UACT,KAAAC,EAAA,GAAIX,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAEY,MAAM,cAAAD,EAAA,uBAAAA,EAAA,CAAEE,OAAO,EAAE;YACpC,sBAAO;cAAEX,KAAK,EAAEpB,WAAW,CAACgC;YAAO,CAAE;;UAEjC1B,KAAK,GAAGL,4BAA4B,CAACC,QAAQ,EAAEC,QAAQ,EAAEC,cAAc,EAAEoB,cAAc,CAAC;UAC9F;UACA;UACA,IAAIE,IAAI,CAACC,GAAG,EAAE,GAAGrB,KAAK,GAAG,IAAI,GAAGmB,SAAS,EAAE;YACzC,sBAAO;cAAEL,KAAK,EAAEpB,WAAW,CAACiC;YAAO,CAAE;;UAEvC,qBAAMlC,KAAK,CAACO,KAAK,CAAC;;UAAlBe,EAAA,CAAAC,IAAA,EAAkB;UACA,qBAAMN,cAAc,CAACG,MAAM,EAAEJ,KAAK,CAAC;;UAA7CmB,OAAA,GAAUb,EAAA,CAAAC,IAAA,EAAmC,CAAAF,KAAxC;UACb,IAAIc,OAAK,KAAKlC,WAAW,CAACuB,KAAK,EAAE;YAC/B,sBAAO;cAAEH,KAAK,EAAAc;YAAA,CAAE;;UAGlBV,cAAc,IAAI,CAAC;;;;;;;CAEtB"},"metadata":{},"sourceType":"module","externalDependencies":[]}