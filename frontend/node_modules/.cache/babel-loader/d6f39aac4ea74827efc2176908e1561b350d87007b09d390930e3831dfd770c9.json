{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { CloudWatchLogsClient } from \"./CloudWatchLogsClient\";\nimport { AssociateKmsKeyCommand } from \"./commands/AssociateKmsKeyCommand\";\nimport { CancelExportTaskCommand } from \"./commands/CancelExportTaskCommand\";\nimport { CreateExportTaskCommand } from \"./commands/CreateExportTaskCommand\";\nimport { CreateLogGroupCommand } from \"./commands/CreateLogGroupCommand\";\nimport { CreateLogStreamCommand } from \"./commands/CreateLogStreamCommand\";\nimport { DeleteDestinationCommand } from \"./commands/DeleteDestinationCommand\";\nimport { DeleteLogGroupCommand } from \"./commands/DeleteLogGroupCommand\";\nimport { DeleteLogStreamCommand } from \"./commands/DeleteLogStreamCommand\";\nimport { DeleteMetricFilterCommand } from \"./commands/DeleteMetricFilterCommand\";\nimport { DeleteQueryDefinitionCommand } from \"./commands/DeleteQueryDefinitionCommand\";\nimport { DeleteResourcePolicyCommand } from \"./commands/DeleteResourcePolicyCommand\";\nimport { DeleteRetentionPolicyCommand } from \"./commands/DeleteRetentionPolicyCommand\";\nimport { DeleteSubscriptionFilterCommand } from \"./commands/DeleteSubscriptionFilterCommand\";\nimport { DescribeDestinationsCommand } from \"./commands/DescribeDestinationsCommand\";\nimport { DescribeExportTasksCommand } from \"./commands/DescribeExportTasksCommand\";\nimport { DescribeLogGroupsCommand } from \"./commands/DescribeLogGroupsCommand\";\nimport { DescribeLogStreamsCommand } from \"./commands/DescribeLogStreamsCommand\";\nimport { DescribeMetricFiltersCommand } from \"./commands/DescribeMetricFiltersCommand\";\nimport { DescribeQueriesCommand } from \"./commands/DescribeQueriesCommand\";\nimport { DescribeQueryDefinitionsCommand } from \"./commands/DescribeQueryDefinitionsCommand\";\nimport { DescribeResourcePoliciesCommand } from \"./commands/DescribeResourcePoliciesCommand\";\nimport { DescribeSubscriptionFiltersCommand } from \"./commands/DescribeSubscriptionFiltersCommand\";\nimport { DisassociateKmsKeyCommand } from \"./commands/DisassociateKmsKeyCommand\";\nimport { FilterLogEventsCommand } from \"./commands/FilterLogEventsCommand\";\nimport { GetLogEventsCommand } from \"./commands/GetLogEventsCommand\";\nimport { GetLogGroupFieldsCommand } from \"./commands/GetLogGroupFieldsCommand\";\nimport { GetLogRecordCommand } from \"./commands/GetLogRecordCommand\";\nimport { GetQueryResultsCommand } from \"./commands/GetQueryResultsCommand\";\nimport { ListTagsLogGroupCommand } from \"./commands/ListTagsLogGroupCommand\";\nimport { PutDestinationCommand } from \"./commands/PutDestinationCommand\";\nimport { PutDestinationPolicyCommand } from \"./commands/PutDestinationPolicyCommand\";\nimport { PutLogEventsCommand } from \"./commands/PutLogEventsCommand\";\nimport { PutMetricFilterCommand } from \"./commands/PutMetricFilterCommand\";\nimport { PutQueryDefinitionCommand } from \"./commands/PutQueryDefinitionCommand\";\nimport { PutResourcePolicyCommand } from \"./commands/PutResourcePolicyCommand\";\nimport { PutRetentionPolicyCommand } from \"./commands/PutRetentionPolicyCommand\";\nimport { PutSubscriptionFilterCommand } from \"./commands/PutSubscriptionFilterCommand\";\nimport { StartQueryCommand } from \"./commands/StartQueryCommand\";\nimport { StopQueryCommand } from \"./commands/StopQueryCommand\";\nimport { TagLogGroupCommand } from \"./commands/TagLogGroupCommand\";\nimport { TestMetricFilterCommand } from \"./commands/TestMetricFilterCommand\";\nimport { UntagLogGroupCommand } from \"./commands/UntagLogGroupCommand\";\n/**\n * <p>You can use Amazon CloudWatch Logs to monitor, store, and access your log files from\n *       EC2 instances, AWS CloudTrail, or other sources. You can then retrieve the associated\n *       log data from CloudWatch Logs using the CloudWatch console, CloudWatch Logs commands in the\n *       AWS CLI, CloudWatch Logs API, or CloudWatch Logs SDK.</p>\n *          <p>You can use CloudWatch Logs to:</p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <b>Monitor logs from EC2 instances in real-time</b>: You\n *           can use CloudWatch Logs to monitor applications and systems using log data. For example,\n *           CloudWatch Logs can track the number of errors that occur in your application logs and\n *           send you a notification whenever the rate of errors exceeds a threshold that you specify.\n *           CloudWatch Logs uses your log data for monitoring so no code changes are required. For\n *           example, you can monitor application logs for specific literal terms (such as\n *           \"NullReferenceException\") or count the number of occurrences of a literal term at a\n *           particular position in log data (such as \"404\" status codes in an Apache access log). When\n *           the term you are searching for is found, CloudWatch Logs reports the data to a CloudWatch\n *           metric that you specify.</p>\n *             </li>\n *             <li>\n *                <p>\n *                   <b>Monitor AWS CloudTrail logged events</b>: You can\n *           create alarms in CloudWatch and receive notifications of particular API activity as\n *           captured by CloudTrail. You can use the notification to perform troubleshooting.</p>\n *             </li>\n *             <li>\n *                <p>\n *                   <b>Archive log data</b>: You can use CloudWatch Logs to\n *           store your log data in highly durable storage. You can change the log retention setting so\n *           that any log events older than this setting are automatically deleted. The CloudWatch Logs\n *           agent makes it easy to quickly send both rotated and non-rotated log data off of a host\n *           and into the log service. You can then access the raw log data when you need it.</p>\n *             </li>\n *          </ul>\n */\nvar CloudWatchLogs = /** @class */function (_super) {\n  __extends(CloudWatchLogs, _super);\n  function CloudWatchLogs() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  CloudWatchLogs.prototype.associateKmsKey = function (args, optionsOrCb, cb) {\n    var command = new AssociateKmsKeyCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  CloudWatchLogs.prototype.cancelExportTask = function (args, optionsOrCb, cb) {\n    var command = new CancelExportTaskCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  CloudWatchLogs.prototype.createExportTask = function (args, optionsOrCb, cb) {\n    var command = new CreateExportTaskCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  CloudWatchLogs.prototype.createLogGroup = function (args, optionsOrCb, cb) {\n    var command = new CreateLogGroupCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  CloudWatchLogs.prototype.createLogStream = function (args, optionsOrCb, cb) {\n    var command = new CreateLogStreamCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  CloudWatchLogs.prototype.deleteDestination = function (args, optionsOrCb, cb) {\n    var command = new DeleteDestinationCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  CloudWatchLogs.prototype.deleteLogGroup = function (args, optionsOrCb, cb) {\n    var command = new DeleteLogGroupCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  CloudWatchLogs.prototype.deleteLogStream = function (args, optionsOrCb, cb) {\n    var command = new DeleteLogStreamCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  CloudWatchLogs.prototype.deleteMetricFilter = function (args, optionsOrCb, cb) {\n    var command = new DeleteMetricFilterCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  CloudWatchLogs.prototype.deleteQueryDefinition = function (args, optionsOrCb, cb) {\n    var command = new DeleteQueryDefinitionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  CloudWatchLogs.prototype.deleteResourcePolicy = function (args, optionsOrCb, cb) {\n    var command = new DeleteResourcePolicyCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  CloudWatchLogs.prototype.deleteRetentionPolicy = function (args, optionsOrCb, cb) {\n    var command = new DeleteRetentionPolicyCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  CloudWatchLogs.prototype.deleteSubscriptionFilter = function (args, optionsOrCb, cb) {\n    var command = new DeleteSubscriptionFilterCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  CloudWatchLogs.prototype.describeDestinations = function (args, optionsOrCb, cb) {\n    var command = new DescribeDestinationsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  CloudWatchLogs.prototype.describeExportTasks = function (args, optionsOrCb, cb) {\n    var command = new DescribeExportTasksCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  CloudWatchLogs.prototype.describeLogGroups = function (args, optionsOrCb, cb) {\n    var command = new DescribeLogGroupsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  CloudWatchLogs.prototype.describeLogStreams = function (args, optionsOrCb, cb) {\n    var command = new DescribeLogStreamsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  CloudWatchLogs.prototype.describeMetricFilters = function (args, optionsOrCb, cb) {\n    var command = new DescribeMetricFiltersCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  CloudWatchLogs.prototype.describeQueries = function (args, optionsOrCb, cb) {\n    var command = new DescribeQueriesCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  CloudWatchLogs.prototype.describeQueryDefinitions = function (args, optionsOrCb, cb) {\n    var command = new DescribeQueryDefinitionsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  CloudWatchLogs.prototype.describeResourcePolicies = function (args, optionsOrCb, cb) {\n    var command = new DescribeResourcePoliciesCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  CloudWatchLogs.prototype.describeSubscriptionFilters = function (args, optionsOrCb, cb) {\n    var command = new DescribeSubscriptionFiltersCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  CloudWatchLogs.prototype.disassociateKmsKey = function (args, optionsOrCb, cb) {\n    var command = new DisassociateKmsKeyCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  CloudWatchLogs.prototype.filterLogEvents = function (args, optionsOrCb, cb) {\n    var command = new FilterLogEventsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  CloudWatchLogs.prototype.getLogEvents = function (args, optionsOrCb, cb) {\n    var command = new GetLogEventsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  CloudWatchLogs.prototype.getLogGroupFields = function (args, optionsOrCb, cb) {\n    var command = new GetLogGroupFieldsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  CloudWatchLogs.prototype.getLogRecord = function (args, optionsOrCb, cb) {\n    var command = new GetLogRecordCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  CloudWatchLogs.prototype.getQueryResults = function (args, optionsOrCb, cb) {\n    var command = new GetQueryResultsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  CloudWatchLogs.prototype.listTagsLogGroup = function (args, optionsOrCb, cb) {\n    var command = new ListTagsLogGroupCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  CloudWatchLogs.prototype.putDestination = function (args, optionsOrCb, cb) {\n    var command = new PutDestinationCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  CloudWatchLogs.prototype.putDestinationPolicy = function (args, optionsOrCb, cb) {\n    var command = new PutDestinationPolicyCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  CloudWatchLogs.prototype.putLogEvents = function (args, optionsOrCb, cb) {\n    var command = new PutLogEventsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  CloudWatchLogs.prototype.putMetricFilter = function (args, optionsOrCb, cb) {\n    var command = new PutMetricFilterCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  CloudWatchLogs.prototype.putQueryDefinition = function (args, optionsOrCb, cb) {\n    var command = new PutQueryDefinitionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  CloudWatchLogs.prototype.putResourcePolicy = function (args, optionsOrCb, cb) {\n    var command = new PutResourcePolicyCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  CloudWatchLogs.prototype.putRetentionPolicy = function (args, optionsOrCb, cb) {\n    var command = new PutRetentionPolicyCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  CloudWatchLogs.prototype.putSubscriptionFilter = function (args, optionsOrCb, cb) {\n    var command = new PutSubscriptionFilterCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  CloudWatchLogs.prototype.startQuery = function (args, optionsOrCb, cb) {\n    var command = new StartQueryCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  CloudWatchLogs.prototype.stopQuery = function (args, optionsOrCb, cb) {\n    var command = new StopQueryCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  CloudWatchLogs.prototype.tagLogGroup = function (args, optionsOrCb, cb) {\n    var command = new TagLogGroupCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  CloudWatchLogs.prototype.testMetricFilter = function (args, optionsOrCb, cb) {\n    var command = new TestMetricFilterCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  CloudWatchLogs.prototype.untagLogGroup = function (args, optionsOrCb, cb) {\n    var command = new UntagLogGroupCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  return CloudWatchLogs;\n}(CloudWatchLogsClient);\nexport { CloudWatchLogs };","map":{"version":3,"names":["CloudWatchLogsClient","AssociateKmsKeyCommand","CancelExportTaskCommand","CreateExportTaskCommand","CreateLogGroupCommand","CreateLogStreamCommand","DeleteDestinationCommand","DeleteLogGroupCommand","DeleteLogStreamCommand","DeleteMetricFilterCommand","DeleteQueryDefinitionCommand","DeleteResourcePolicyCommand","DeleteRetentionPolicyCommand","DeleteSubscriptionFilterCommand","DescribeDestinationsCommand","DescribeExportTasksCommand","DescribeLogGroupsCommand","DescribeLogStreamsCommand","DescribeMetricFiltersCommand","DescribeQueriesCommand","DescribeQueryDefinitionsCommand","DescribeResourcePoliciesCommand","DescribeSubscriptionFiltersCommand","DisassociateKmsKeyCommand","FilterLogEventsCommand","GetLogEventsCommand","GetLogGroupFieldsCommand","GetLogRecordCommand","GetQueryResultsCommand","ListTagsLogGroupCommand","PutDestinationCommand","PutDestinationPolicyCommand","PutLogEventsCommand","PutMetricFilterCommand","PutQueryDefinitionCommand","PutResourcePolicyCommand","PutRetentionPolicyCommand","PutSubscriptionFilterCommand","StartQueryCommand","StopQueryCommand","TagLogGroupCommand","TestMetricFilterCommand","UntagLogGroupCommand","CloudWatchLogs","_super","__extends","prototype","associateKmsKey","args","optionsOrCb","cb","command","send","Error","cancelExportTask","createExportTask","createLogGroup","createLogStream","deleteDestination","deleteLogGroup","deleteLogStream","deleteMetricFilter","deleteQueryDefinition","deleteResourcePolicy","deleteRetentionPolicy","deleteSubscriptionFilter","describeDestinations","describeExportTasks","describeLogGroups","describeLogStreams","describeMetricFilters","describeQueries","describeQueryDefinitions","describeResourcePolicies","describeSubscriptionFilters","disassociateKmsKey","filterLogEvents","getLogEvents","getLogGroupFields","getLogRecord","getQueryResults","listTagsLogGroup","putDestination","putDestinationPolicy","putLogEvents","putMetricFilter","putQueryDefinition","putResourcePolicy","putRetentionPolicy","putSubscriptionFilter","startQuery","stopQuery","tagLogGroup","testMetricFilter","untagLogGroup"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-sdk/client-cloudwatch-logs/CloudWatchLogs.ts"],"sourcesContent":["import { CloudWatchLogsClient } from \"./CloudWatchLogsClient\";\nimport {\n  AssociateKmsKeyCommand,\n  AssociateKmsKeyCommandInput,\n  AssociateKmsKeyCommandOutput,\n} from \"./commands/AssociateKmsKeyCommand\";\nimport {\n  CancelExportTaskCommand,\n  CancelExportTaskCommandInput,\n  CancelExportTaskCommandOutput,\n} from \"./commands/CancelExportTaskCommand\";\nimport {\n  CreateExportTaskCommand,\n  CreateExportTaskCommandInput,\n  CreateExportTaskCommandOutput,\n} from \"./commands/CreateExportTaskCommand\";\nimport {\n  CreateLogGroupCommand,\n  CreateLogGroupCommandInput,\n  CreateLogGroupCommandOutput,\n} from \"./commands/CreateLogGroupCommand\";\nimport {\n  CreateLogStreamCommand,\n  CreateLogStreamCommandInput,\n  CreateLogStreamCommandOutput,\n} from \"./commands/CreateLogStreamCommand\";\nimport {\n  DeleteDestinationCommand,\n  DeleteDestinationCommandInput,\n  DeleteDestinationCommandOutput,\n} from \"./commands/DeleteDestinationCommand\";\nimport {\n  DeleteLogGroupCommand,\n  DeleteLogGroupCommandInput,\n  DeleteLogGroupCommandOutput,\n} from \"./commands/DeleteLogGroupCommand\";\nimport {\n  DeleteLogStreamCommand,\n  DeleteLogStreamCommandInput,\n  DeleteLogStreamCommandOutput,\n} from \"./commands/DeleteLogStreamCommand\";\nimport {\n  DeleteMetricFilterCommand,\n  DeleteMetricFilterCommandInput,\n  DeleteMetricFilterCommandOutput,\n} from \"./commands/DeleteMetricFilterCommand\";\nimport {\n  DeleteQueryDefinitionCommand,\n  DeleteQueryDefinitionCommandInput,\n  DeleteQueryDefinitionCommandOutput,\n} from \"./commands/DeleteQueryDefinitionCommand\";\nimport {\n  DeleteResourcePolicyCommand,\n  DeleteResourcePolicyCommandInput,\n  DeleteResourcePolicyCommandOutput,\n} from \"./commands/DeleteResourcePolicyCommand\";\nimport {\n  DeleteRetentionPolicyCommand,\n  DeleteRetentionPolicyCommandInput,\n  DeleteRetentionPolicyCommandOutput,\n} from \"./commands/DeleteRetentionPolicyCommand\";\nimport {\n  DeleteSubscriptionFilterCommand,\n  DeleteSubscriptionFilterCommandInput,\n  DeleteSubscriptionFilterCommandOutput,\n} from \"./commands/DeleteSubscriptionFilterCommand\";\nimport {\n  DescribeDestinationsCommand,\n  DescribeDestinationsCommandInput,\n  DescribeDestinationsCommandOutput,\n} from \"./commands/DescribeDestinationsCommand\";\nimport {\n  DescribeExportTasksCommand,\n  DescribeExportTasksCommandInput,\n  DescribeExportTasksCommandOutput,\n} from \"./commands/DescribeExportTasksCommand\";\nimport {\n  DescribeLogGroupsCommand,\n  DescribeLogGroupsCommandInput,\n  DescribeLogGroupsCommandOutput,\n} from \"./commands/DescribeLogGroupsCommand\";\nimport {\n  DescribeLogStreamsCommand,\n  DescribeLogStreamsCommandInput,\n  DescribeLogStreamsCommandOutput,\n} from \"./commands/DescribeLogStreamsCommand\";\nimport {\n  DescribeMetricFiltersCommand,\n  DescribeMetricFiltersCommandInput,\n  DescribeMetricFiltersCommandOutput,\n} from \"./commands/DescribeMetricFiltersCommand\";\nimport {\n  DescribeQueriesCommand,\n  DescribeQueriesCommandInput,\n  DescribeQueriesCommandOutput,\n} from \"./commands/DescribeQueriesCommand\";\nimport {\n  DescribeQueryDefinitionsCommand,\n  DescribeQueryDefinitionsCommandInput,\n  DescribeQueryDefinitionsCommandOutput,\n} from \"./commands/DescribeQueryDefinitionsCommand\";\nimport {\n  DescribeResourcePoliciesCommand,\n  DescribeResourcePoliciesCommandInput,\n  DescribeResourcePoliciesCommandOutput,\n} from \"./commands/DescribeResourcePoliciesCommand\";\nimport {\n  DescribeSubscriptionFiltersCommand,\n  DescribeSubscriptionFiltersCommandInput,\n  DescribeSubscriptionFiltersCommandOutput,\n} from \"./commands/DescribeSubscriptionFiltersCommand\";\nimport {\n  DisassociateKmsKeyCommand,\n  DisassociateKmsKeyCommandInput,\n  DisassociateKmsKeyCommandOutput,\n} from \"./commands/DisassociateKmsKeyCommand\";\nimport {\n  FilterLogEventsCommand,\n  FilterLogEventsCommandInput,\n  FilterLogEventsCommandOutput,\n} from \"./commands/FilterLogEventsCommand\";\nimport {\n  GetLogEventsCommand,\n  GetLogEventsCommandInput,\n  GetLogEventsCommandOutput,\n} from \"./commands/GetLogEventsCommand\";\nimport {\n  GetLogGroupFieldsCommand,\n  GetLogGroupFieldsCommandInput,\n  GetLogGroupFieldsCommandOutput,\n} from \"./commands/GetLogGroupFieldsCommand\";\nimport {\n  GetLogRecordCommand,\n  GetLogRecordCommandInput,\n  GetLogRecordCommandOutput,\n} from \"./commands/GetLogRecordCommand\";\nimport {\n  GetQueryResultsCommand,\n  GetQueryResultsCommandInput,\n  GetQueryResultsCommandOutput,\n} from \"./commands/GetQueryResultsCommand\";\nimport {\n  ListTagsLogGroupCommand,\n  ListTagsLogGroupCommandInput,\n  ListTagsLogGroupCommandOutput,\n} from \"./commands/ListTagsLogGroupCommand\";\nimport {\n  PutDestinationCommand,\n  PutDestinationCommandInput,\n  PutDestinationCommandOutput,\n} from \"./commands/PutDestinationCommand\";\nimport {\n  PutDestinationPolicyCommand,\n  PutDestinationPolicyCommandInput,\n  PutDestinationPolicyCommandOutput,\n} from \"./commands/PutDestinationPolicyCommand\";\nimport {\n  PutLogEventsCommand,\n  PutLogEventsCommandInput,\n  PutLogEventsCommandOutput,\n} from \"./commands/PutLogEventsCommand\";\nimport {\n  PutMetricFilterCommand,\n  PutMetricFilterCommandInput,\n  PutMetricFilterCommandOutput,\n} from \"./commands/PutMetricFilterCommand\";\nimport {\n  PutQueryDefinitionCommand,\n  PutQueryDefinitionCommandInput,\n  PutQueryDefinitionCommandOutput,\n} from \"./commands/PutQueryDefinitionCommand\";\nimport {\n  PutResourcePolicyCommand,\n  PutResourcePolicyCommandInput,\n  PutResourcePolicyCommandOutput,\n} from \"./commands/PutResourcePolicyCommand\";\nimport {\n  PutRetentionPolicyCommand,\n  PutRetentionPolicyCommandInput,\n  PutRetentionPolicyCommandOutput,\n} from \"./commands/PutRetentionPolicyCommand\";\nimport {\n  PutSubscriptionFilterCommand,\n  PutSubscriptionFilterCommandInput,\n  PutSubscriptionFilterCommandOutput,\n} from \"./commands/PutSubscriptionFilterCommand\";\nimport { StartQueryCommand, StartQueryCommandInput, StartQueryCommandOutput } from \"./commands/StartQueryCommand\";\nimport { StopQueryCommand, StopQueryCommandInput, StopQueryCommandOutput } from \"./commands/StopQueryCommand\";\nimport { TagLogGroupCommand, TagLogGroupCommandInput, TagLogGroupCommandOutput } from \"./commands/TagLogGroupCommand\";\nimport {\n  TestMetricFilterCommand,\n  TestMetricFilterCommandInput,\n  TestMetricFilterCommandOutput,\n} from \"./commands/TestMetricFilterCommand\";\nimport {\n  UntagLogGroupCommand,\n  UntagLogGroupCommandInput,\n  UntagLogGroupCommandOutput,\n} from \"./commands/UntagLogGroupCommand\";\nimport { HttpHandlerOptions as __HttpHandlerOptions } from \"@aws-sdk/types\";\n\n/**\n * <p>You can use Amazon CloudWatch Logs to monitor, store, and access your log files from\n *       EC2 instances, AWS CloudTrail, or other sources. You can then retrieve the associated\n *       log data from CloudWatch Logs using the CloudWatch console, CloudWatch Logs commands in the\n *       AWS CLI, CloudWatch Logs API, or CloudWatch Logs SDK.</p>\n *          <p>You can use CloudWatch Logs to:</p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <b>Monitor logs from EC2 instances in real-time</b>: You\n *           can use CloudWatch Logs to monitor applications and systems using log data. For example,\n *           CloudWatch Logs can track the number of errors that occur in your application logs and\n *           send you a notification whenever the rate of errors exceeds a threshold that you specify.\n *           CloudWatch Logs uses your log data for monitoring so no code changes are required. For\n *           example, you can monitor application logs for specific literal terms (such as\n *           \"NullReferenceException\") or count the number of occurrences of a literal term at a\n *           particular position in log data (such as \"404\" status codes in an Apache access log). When\n *           the term you are searching for is found, CloudWatch Logs reports the data to a CloudWatch\n *           metric that you specify.</p>\n *             </li>\n *             <li>\n *                <p>\n *                   <b>Monitor AWS CloudTrail logged events</b>: You can\n *           create alarms in CloudWatch and receive notifications of particular API activity as\n *           captured by CloudTrail. You can use the notification to perform troubleshooting.</p>\n *             </li>\n *             <li>\n *                <p>\n *                   <b>Archive log data</b>: You can use CloudWatch Logs to\n *           store your log data in highly durable storage. You can change the log retention setting so\n *           that any log events older than this setting are automatically deleted. The CloudWatch Logs\n *           agent makes it easy to quickly send both rotated and non-rotated log data off of a host\n *           and into the log service. You can then access the raw log data when you need it.</p>\n *             </li>\n *          </ul>\n */\nexport class CloudWatchLogs extends CloudWatchLogsClient {\n  /**\n   * <p>Associates the specified AWS Key Management Service (AWS KMS) customer master key (CMK) with the specified log group.</p>\n   *          <p>Associating an AWS KMS CMK with a log group overrides any existing associations between the log group and a CMK.\n   *       After a CMK is associated with a log group, all newly ingested data for the log group is encrypted using the CMK.\n   *       This association is stored as long as the data encrypted with the CMK is still within Amazon CloudWatch Logs.\n   *       This enables Amazon CloudWatch Logs to decrypt this data whenever it is requested.</p>\n   *          <important>\n   *             <p>CloudWatch Logs supports only symmetric CMKs. Do not use an associate an asymmetric CMK\n   *         with your log group. For more information, see <a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html\">Using Symmetric and Asymmetric\n   *           Keys</a>.</p>\n   *          </important>\n   *          <p>It can take up to 5 minutes for this operation to take effect.</p>\n   *          <p>If you attempt to associate a CMK with a log group but the CMK does not exist or the\n   *       CMK is disabled, you receive an <code>InvalidParameterException</code> error. </p>\n   */\n  public associateKmsKey(\n    args: AssociateKmsKeyCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<AssociateKmsKeyCommandOutput>;\n  public associateKmsKey(\n    args: AssociateKmsKeyCommandInput,\n    cb: (err: any, data?: AssociateKmsKeyCommandOutput) => void\n  ): void;\n  public associateKmsKey(\n    args: AssociateKmsKeyCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: AssociateKmsKeyCommandOutput) => void\n  ): void;\n  public associateKmsKey(\n    args: AssociateKmsKeyCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: AssociateKmsKeyCommandOutput) => void),\n    cb?: (err: any, data?: AssociateKmsKeyCommandOutput) => void\n  ): Promise<AssociateKmsKeyCommandOutput> | void {\n    const command = new AssociateKmsKeyCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Cancels the specified export task.</p>\n   *          <p>The task must be in the <code>PENDING</code> or <code>RUNNING</code> state.</p>\n   */\n  public cancelExportTask(\n    args: CancelExportTaskCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<CancelExportTaskCommandOutput>;\n  public cancelExportTask(\n    args: CancelExportTaskCommandInput,\n    cb: (err: any, data?: CancelExportTaskCommandOutput) => void\n  ): void;\n  public cancelExportTask(\n    args: CancelExportTaskCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: CancelExportTaskCommandOutput) => void\n  ): void;\n  public cancelExportTask(\n    args: CancelExportTaskCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: CancelExportTaskCommandOutput) => void),\n    cb?: (err: any, data?: CancelExportTaskCommandOutput) => void\n  ): Promise<CancelExportTaskCommandOutput> | void {\n    const command = new CancelExportTaskCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Creates an export task, which allows you to efficiently export data from a\n   *       log group to an Amazon S3 bucket. When you perform a <code>CreateExportTask</code>\n   *       operation, you must use credentials that have permission to write to the S3 bucket\n   *       that you specify as the destination.</p>\n   *          <p>This is an asynchronous call. If all the required information is provided, this\n   *       operation initiates an export task and responds with the ID of the task. After the task has started,\n   *       you can use <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DescribeExportTasks.html\">DescribeExportTasks</a> to get the status of the export task. Each account can\n   *       only have one active (<code>RUNNING</code> or <code>PENDING</code>) export task at a time.\n   *       To cancel an export task, use <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_CancelExportTask.html\">CancelExportTask</a>.</p>\n   *          <p>You can export logs from multiple log groups or multiple time ranges to the same S3\n   *       bucket. To separate out log data for each export task, you can specify a prefix to be used as\n   *       the Amazon S3 key prefix for all exported objects.</p>\n   *          <p>Exporting to S3 buckets that are encrypted with AES-256 is supported. Exporting to S3 buckets\n   *       encrypted with SSE-KMS is not supported. </p>\n   */\n  public createExportTask(\n    args: CreateExportTaskCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<CreateExportTaskCommandOutput>;\n  public createExportTask(\n    args: CreateExportTaskCommandInput,\n    cb: (err: any, data?: CreateExportTaskCommandOutput) => void\n  ): void;\n  public createExportTask(\n    args: CreateExportTaskCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: CreateExportTaskCommandOutput) => void\n  ): void;\n  public createExportTask(\n    args: CreateExportTaskCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: CreateExportTaskCommandOutput) => void),\n    cb?: (err: any, data?: CreateExportTaskCommandOutput) => void\n  ): Promise<CreateExportTaskCommandOutput> | void {\n    const command = new CreateExportTaskCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Creates a log group with the specified name. You can create up to 20,000 log groups per account.</p>\n   *          <p>You must use the following guidelines when naming a log group:</p>\n   *          <ul>\n   *             <li>\n   *                <p>Log group names must be unique within a region for an AWS account.</p>\n   *             </li>\n   *             <li>\n   *                <p>Log group names can be between 1 and 512 characters long.</p>\n   *             </li>\n   *             <li>\n   *                <p>Log group names consist of the following characters: a-z, A-Z, 0-9, '_' (underscore), '-' (hyphen),\n   *           '/' (forward slash), '.' (period), and '#' (number sign)</p>\n   *             </li>\n   *          </ul>\n   *          <p>When you create a log group, by default the log events in the log group never expire. To set\n   *     a retention policy so that events expire and are deleted after a specified time, use\n   *       <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutRetentionPolicy.html\">PutRetentionPolicy</a>.</p>\n   *          <p>If you associate a AWS Key Management Service (AWS KMS) customer master key (CMK) with the log group, ingested data is encrypted using the CMK.\n   *       This association is stored as long as the data encrypted with the CMK is still within Amazon CloudWatch Logs.\n   *       This enables Amazon CloudWatch Logs to decrypt this data whenever it is requested.</p>\n   *          <p>If you attempt to associate a CMK with the log group but the CMK does not exist or the\n   *       CMK is disabled, you receive an <code>InvalidParameterException</code> error. </p>\n   *          <important>\n   *             <p> CloudWatch Logs supports only symmetric CMKs. Do not associate an asymmetric CMK with\n   *         your log group. For more information, see <a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html\">Using Symmetric and Asymmetric\n   *           Keys</a>.</p>\n   *          </important>\n   */\n  public createLogGroup(\n    args: CreateLogGroupCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<CreateLogGroupCommandOutput>;\n  public createLogGroup(\n    args: CreateLogGroupCommandInput,\n    cb: (err: any, data?: CreateLogGroupCommandOutput) => void\n  ): void;\n  public createLogGroup(\n    args: CreateLogGroupCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: CreateLogGroupCommandOutput) => void\n  ): void;\n  public createLogGroup(\n    args: CreateLogGroupCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: CreateLogGroupCommandOutput) => void),\n    cb?: (err: any, data?: CreateLogGroupCommandOutput) => void\n  ): Promise<CreateLogGroupCommandOutput> | void {\n    const command = new CreateLogGroupCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Creates a log stream for the specified log group. A log stream is a sequence of log events\n   *       that originate from a single source, such as an application instance or a resource that is\n   *       being monitored.</p>\n   *          <p>There is no limit on the number of log streams that you can create for a log group. There is a limit\n   *     of 50 TPS on <code>CreateLogStream</code> operations, after which transactions are throttled.</p>\n   *          <p>You must use the following guidelines when naming a log stream:</p>\n   *          <ul>\n   *             <li>\n   *                <p>Log stream names must be unique within the log group.</p>\n   *             </li>\n   *             <li>\n   *                <p>Log stream names can be between 1 and 512 characters long.</p>\n   *             </li>\n   *             <li>\n   *                <p>The ':' (colon) and '*' (asterisk) characters are not allowed.</p>\n   *             </li>\n   *          </ul>\n   */\n  public createLogStream(\n    args: CreateLogStreamCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<CreateLogStreamCommandOutput>;\n  public createLogStream(\n    args: CreateLogStreamCommandInput,\n    cb: (err: any, data?: CreateLogStreamCommandOutput) => void\n  ): void;\n  public createLogStream(\n    args: CreateLogStreamCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: CreateLogStreamCommandOutput) => void\n  ): void;\n  public createLogStream(\n    args: CreateLogStreamCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: CreateLogStreamCommandOutput) => void),\n    cb?: (err: any, data?: CreateLogStreamCommandOutput) => void\n  ): Promise<CreateLogStreamCommandOutput> | void {\n    const command = new CreateLogStreamCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Deletes the specified destination, and eventually disables all the\n   *       subscription filters that publish to it. This operation does not delete the\n   *       physical resource encapsulated by the destination.</p>\n   */\n  public deleteDestination(\n    args: DeleteDestinationCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DeleteDestinationCommandOutput>;\n  public deleteDestination(\n    args: DeleteDestinationCommandInput,\n    cb: (err: any, data?: DeleteDestinationCommandOutput) => void\n  ): void;\n  public deleteDestination(\n    args: DeleteDestinationCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DeleteDestinationCommandOutput) => void\n  ): void;\n  public deleteDestination(\n    args: DeleteDestinationCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DeleteDestinationCommandOutput) => void),\n    cb?: (err: any, data?: DeleteDestinationCommandOutput) => void\n  ): Promise<DeleteDestinationCommandOutput> | void {\n    const command = new DeleteDestinationCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Deletes the specified log group and permanently deletes all the archived\n   *       log events associated with the log group.</p>\n   */\n  public deleteLogGroup(\n    args: DeleteLogGroupCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DeleteLogGroupCommandOutput>;\n  public deleteLogGroup(\n    args: DeleteLogGroupCommandInput,\n    cb: (err: any, data?: DeleteLogGroupCommandOutput) => void\n  ): void;\n  public deleteLogGroup(\n    args: DeleteLogGroupCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DeleteLogGroupCommandOutput) => void\n  ): void;\n  public deleteLogGroup(\n    args: DeleteLogGroupCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DeleteLogGroupCommandOutput) => void),\n    cb?: (err: any, data?: DeleteLogGroupCommandOutput) => void\n  ): Promise<DeleteLogGroupCommandOutput> | void {\n    const command = new DeleteLogGroupCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Deletes the specified log stream and permanently deletes all the archived log events associated\n   *       with the log stream.</p>\n   */\n  public deleteLogStream(\n    args: DeleteLogStreamCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DeleteLogStreamCommandOutput>;\n  public deleteLogStream(\n    args: DeleteLogStreamCommandInput,\n    cb: (err: any, data?: DeleteLogStreamCommandOutput) => void\n  ): void;\n  public deleteLogStream(\n    args: DeleteLogStreamCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DeleteLogStreamCommandOutput) => void\n  ): void;\n  public deleteLogStream(\n    args: DeleteLogStreamCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DeleteLogStreamCommandOutput) => void),\n    cb?: (err: any, data?: DeleteLogStreamCommandOutput) => void\n  ): Promise<DeleteLogStreamCommandOutput> | void {\n    const command = new DeleteLogStreamCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Deletes the specified metric filter.</p>\n   */\n  public deleteMetricFilter(\n    args: DeleteMetricFilterCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DeleteMetricFilterCommandOutput>;\n  public deleteMetricFilter(\n    args: DeleteMetricFilterCommandInput,\n    cb: (err: any, data?: DeleteMetricFilterCommandOutput) => void\n  ): void;\n  public deleteMetricFilter(\n    args: DeleteMetricFilterCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DeleteMetricFilterCommandOutput) => void\n  ): void;\n  public deleteMetricFilter(\n    args: DeleteMetricFilterCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DeleteMetricFilterCommandOutput) => void),\n    cb?: (err: any, data?: DeleteMetricFilterCommandOutput) => void\n  ): Promise<DeleteMetricFilterCommandOutput> | void {\n    const command = new DeleteMetricFilterCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Deletes a saved CloudWatch Logs Insights query definition.\n   *       A query definition contains details about a saved CloudWatch Logs Insights query.</p>\n   *          <p>Each <code>DeleteQueryDefinition</code> operation can delete one query definition.</p>\n   *          <p>You must have the <code>logs:DeleteQueryDefinition</code> permission to be able to perform\n   *       this operation.</p>\n   */\n  public deleteQueryDefinition(\n    args: DeleteQueryDefinitionCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DeleteQueryDefinitionCommandOutput>;\n  public deleteQueryDefinition(\n    args: DeleteQueryDefinitionCommandInput,\n    cb: (err: any, data?: DeleteQueryDefinitionCommandOutput) => void\n  ): void;\n  public deleteQueryDefinition(\n    args: DeleteQueryDefinitionCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DeleteQueryDefinitionCommandOutput) => void\n  ): void;\n  public deleteQueryDefinition(\n    args: DeleteQueryDefinitionCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DeleteQueryDefinitionCommandOutput) => void),\n    cb?: (err: any, data?: DeleteQueryDefinitionCommandOutput) => void\n  ): Promise<DeleteQueryDefinitionCommandOutput> | void {\n    const command = new DeleteQueryDefinitionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Deletes a resource policy from this account. This revokes\n   *     the access of the identities in that policy to put log events to this account.</p>\n   */\n  public deleteResourcePolicy(\n    args: DeleteResourcePolicyCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DeleteResourcePolicyCommandOutput>;\n  public deleteResourcePolicy(\n    args: DeleteResourcePolicyCommandInput,\n    cb: (err: any, data?: DeleteResourcePolicyCommandOutput) => void\n  ): void;\n  public deleteResourcePolicy(\n    args: DeleteResourcePolicyCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DeleteResourcePolicyCommandOutput) => void\n  ): void;\n  public deleteResourcePolicy(\n    args: DeleteResourcePolicyCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DeleteResourcePolicyCommandOutput) => void),\n    cb?: (err: any, data?: DeleteResourcePolicyCommandOutput) => void\n  ): Promise<DeleteResourcePolicyCommandOutput> | void {\n    const command = new DeleteResourcePolicyCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Deletes the specified retention policy.</p>\n   *          <p>Log events do not expire if they belong to log groups without a retention policy.</p>\n   */\n  public deleteRetentionPolicy(\n    args: DeleteRetentionPolicyCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DeleteRetentionPolicyCommandOutput>;\n  public deleteRetentionPolicy(\n    args: DeleteRetentionPolicyCommandInput,\n    cb: (err: any, data?: DeleteRetentionPolicyCommandOutput) => void\n  ): void;\n  public deleteRetentionPolicy(\n    args: DeleteRetentionPolicyCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DeleteRetentionPolicyCommandOutput) => void\n  ): void;\n  public deleteRetentionPolicy(\n    args: DeleteRetentionPolicyCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DeleteRetentionPolicyCommandOutput) => void),\n    cb?: (err: any, data?: DeleteRetentionPolicyCommandOutput) => void\n  ): Promise<DeleteRetentionPolicyCommandOutput> | void {\n    const command = new DeleteRetentionPolicyCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Deletes the specified subscription filter.</p>\n   */\n  public deleteSubscriptionFilter(\n    args: DeleteSubscriptionFilterCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DeleteSubscriptionFilterCommandOutput>;\n  public deleteSubscriptionFilter(\n    args: DeleteSubscriptionFilterCommandInput,\n    cb: (err: any, data?: DeleteSubscriptionFilterCommandOutput) => void\n  ): void;\n  public deleteSubscriptionFilter(\n    args: DeleteSubscriptionFilterCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DeleteSubscriptionFilterCommandOutput) => void\n  ): void;\n  public deleteSubscriptionFilter(\n    args: DeleteSubscriptionFilterCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DeleteSubscriptionFilterCommandOutput) => void),\n    cb?: (err: any, data?: DeleteSubscriptionFilterCommandOutput) => void\n  ): Promise<DeleteSubscriptionFilterCommandOutput> | void {\n    const command = new DeleteSubscriptionFilterCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Lists all your destinations. The results are ASCII-sorted by destination name.</p>\n   */\n  public describeDestinations(\n    args: DescribeDestinationsCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DescribeDestinationsCommandOutput>;\n  public describeDestinations(\n    args: DescribeDestinationsCommandInput,\n    cb: (err: any, data?: DescribeDestinationsCommandOutput) => void\n  ): void;\n  public describeDestinations(\n    args: DescribeDestinationsCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DescribeDestinationsCommandOutput) => void\n  ): void;\n  public describeDestinations(\n    args: DescribeDestinationsCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DescribeDestinationsCommandOutput) => void),\n    cb?: (err: any, data?: DescribeDestinationsCommandOutput) => void\n  ): Promise<DescribeDestinationsCommandOutput> | void {\n    const command = new DescribeDestinationsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Lists the specified export tasks. You can list all your export tasks or filter\n   *       the results based on task ID or task status.</p>\n   */\n  public describeExportTasks(\n    args: DescribeExportTasksCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DescribeExportTasksCommandOutput>;\n  public describeExportTasks(\n    args: DescribeExportTasksCommandInput,\n    cb: (err: any, data?: DescribeExportTasksCommandOutput) => void\n  ): void;\n  public describeExportTasks(\n    args: DescribeExportTasksCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DescribeExportTasksCommandOutput) => void\n  ): void;\n  public describeExportTasks(\n    args: DescribeExportTasksCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DescribeExportTasksCommandOutput) => void),\n    cb?: (err: any, data?: DescribeExportTasksCommandOutput) => void\n  ): Promise<DescribeExportTasksCommandOutput> | void {\n    const command = new DescribeExportTasksCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Lists the specified log groups. You can list all your log groups or filter the results by prefix.\n   *       The results are ASCII-sorted by log group name.</p>\n   */\n  public describeLogGroups(\n    args: DescribeLogGroupsCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DescribeLogGroupsCommandOutput>;\n  public describeLogGroups(\n    args: DescribeLogGroupsCommandInput,\n    cb: (err: any, data?: DescribeLogGroupsCommandOutput) => void\n  ): void;\n  public describeLogGroups(\n    args: DescribeLogGroupsCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DescribeLogGroupsCommandOutput) => void\n  ): void;\n  public describeLogGroups(\n    args: DescribeLogGroupsCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DescribeLogGroupsCommandOutput) => void),\n    cb?: (err: any, data?: DescribeLogGroupsCommandOutput) => void\n  ): Promise<DescribeLogGroupsCommandOutput> | void {\n    const command = new DescribeLogGroupsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Lists the log streams for the specified log group.\n   *       You can list all the log streams or filter the results by prefix.\n   *       You can also control how the results are ordered.</p>\n   *          <p>This operation has a limit of five transactions per second, after which transactions are throttled.</p>\n   */\n  public describeLogStreams(\n    args: DescribeLogStreamsCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DescribeLogStreamsCommandOutput>;\n  public describeLogStreams(\n    args: DescribeLogStreamsCommandInput,\n    cb: (err: any, data?: DescribeLogStreamsCommandOutput) => void\n  ): void;\n  public describeLogStreams(\n    args: DescribeLogStreamsCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DescribeLogStreamsCommandOutput) => void\n  ): void;\n  public describeLogStreams(\n    args: DescribeLogStreamsCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DescribeLogStreamsCommandOutput) => void),\n    cb?: (err: any, data?: DescribeLogStreamsCommandOutput) => void\n  ): Promise<DescribeLogStreamsCommandOutput> | void {\n    const command = new DescribeLogStreamsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Lists the specified metric filters. You can list all of the metric filters or filter\n   *       the results by log name, prefix, metric name, or metric namespace. The results are\n   *       ASCII-sorted by filter name.</p>\n   */\n  public describeMetricFilters(\n    args: DescribeMetricFiltersCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DescribeMetricFiltersCommandOutput>;\n  public describeMetricFilters(\n    args: DescribeMetricFiltersCommandInput,\n    cb: (err: any, data?: DescribeMetricFiltersCommandOutput) => void\n  ): void;\n  public describeMetricFilters(\n    args: DescribeMetricFiltersCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DescribeMetricFiltersCommandOutput) => void\n  ): void;\n  public describeMetricFilters(\n    args: DescribeMetricFiltersCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DescribeMetricFiltersCommandOutput) => void),\n    cb?: (err: any, data?: DescribeMetricFiltersCommandOutput) => void\n  ): Promise<DescribeMetricFiltersCommandOutput> | void {\n    const command = new DescribeMetricFiltersCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Returns a list of CloudWatch Logs Insights queries that are scheduled, executing, or have\n   *       been executed recently in this account. You can request all queries or limit it to queries of\n   *       a specific log group or queries with a certain status.</p>\n   */\n  public describeQueries(\n    args: DescribeQueriesCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DescribeQueriesCommandOutput>;\n  public describeQueries(\n    args: DescribeQueriesCommandInput,\n    cb: (err: any, data?: DescribeQueriesCommandOutput) => void\n  ): void;\n  public describeQueries(\n    args: DescribeQueriesCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DescribeQueriesCommandOutput) => void\n  ): void;\n  public describeQueries(\n    args: DescribeQueriesCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DescribeQueriesCommandOutput) => void),\n    cb?: (err: any, data?: DescribeQueriesCommandOutput) => void\n  ): Promise<DescribeQueriesCommandOutput> | void {\n    const command = new DescribeQueriesCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>This operation returns a paginated list of your saved CloudWatch Logs Insights query definitions.</p>\n   *          <p>You can use the <code>queryDefinitionNamePrefix</code> parameter to limit the results to only the\n   *       query definitions that have names that start with a certain string.</p>\n   */\n  public describeQueryDefinitions(\n    args: DescribeQueryDefinitionsCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DescribeQueryDefinitionsCommandOutput>;\n  public describeQueryDefinitions(\n    args: DescribeQueryDefinitionsCommandInput,\n    cb: (err: any, data?: DescribeQueryDefinitionsCommandOutput) => void\n  ): void;\n  public describeQueryDefinitions(\n    args: DescribeQueryDefinitionsCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DescribeQueryDefinitionsCommandOutput) => void\n  ): void;\n  public describeQueryDefinitions(\n    args: DescribeQueryDefinitionsCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DescribeQueryDefinitionsCommandOutput) => void),\n    cb?: (err: any, data?: DescribeQueryDefinitionsCommandOutput) => void\n  ): Promise<DescribeQueryDefinitionsCommandOutput> | void {\n    const command = new DescribeQueryDefinitionsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Lists the resource policies in this account.</p>\n   */\n  public describeResourcePolicies(\n    args: DescribeResourcePoliciesCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DescribeResourcePoliciesCommandOutput>;\n  public describeResourcePolicies(\n    args: DescribeResourcePoliciesCommandInput,\n    cb: (err: any, data?: DescribeResourcePoliciesCommandOutput) => void\n  ): void;\n  public describeResourcePolicies(\n    args: DescribeResourcePoliciesCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DescribeResourcePoliciesCommandOutput) => void\n  ): void;\n  public describeResourcePolicies(\n    args: DescribeResourcePoliciesCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DescribeResourcePoliciesCommandOutput) => void),\n    cb?: (err: any, data?: DescribeResourcePoliciesCommandOutput) => void\n  ): Promise<DescribeResourcePoliciesCommandOutput> | void {\n    const command = new DescribeResourcePoliciesCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Lists the subscription filters for the specified log group. You can list all the subscription filters or filter the results by prefix.\n   *       The results are ASCII-sorted by filter name.</p>\n   */\n  public describeSubscriptionFilters(\n    args: DescribeSubscriptionFiltersCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DescribeSubscriptionFiltersCommandOutput>;\n  public describeSubscriptionFilters(\n    args: DescribeSubscriptionFiltersCommandInput,\n    cb: (err: any, data?: DescribeSubscriptionFiltersCommandOutput) => void\n  ): void;\n  public describeSubscriptionFilters(\n    args: DescribeSubscriptionFiltersCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DescribeSubscriptionFiltersCommandOutput) => void\n  ): void;\n  public describeSubscriptionFilters(\n    args: DescribeSubscriptionFiltersCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DescribeSubscriptionFiltersCommandOutput) => void),\n    cb?: (err: any, data?: DescribeSubscriptionFiltersCommandOutput) => void\n  ): Promise<DescribeSubscriptionFiltersCommandOutput> | void {\n    const command = new DescribeSubscriptionFiltersCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Disassociates the associated AWS Key Management Service (AWS KMS) customer master key (CMK) from the specified log group.</p>\n   *          <p>After the AWS KMS CMK is disassociated from the log group, AWS CloudWatch Logs stops encrypting newly ingested data for the log group.\n   *       All previously ingested data remains encrypted, and AWS CloudWatch Logs requires permissions for the CMK whenever the encrypted data is requested.</p>\n   *          <p>Note that it can take up to 5 minutes for this operation to take effect.</p>\n   */\n  public disassociateKmsKey(\n    args: DisassociateKmsKeyCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DisassociateKmsKeyCommandOutput>;\n  public disassociateKmsKey(\n    args: DisassociateKmsKeyCommandInput,\n    cb: (err: any, data?: DisassociateKmsKeyCommandOutput) => void\n  ): void;\n  public disassociateKmsKey(\n    args: DisassociateKmsKeyCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DisassociateKmsKeyCommandOutput) => void\n  ): void;\n  public disassociateKmsKey(\n    args: DisassociateKmsKeyCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DisassociateKmsKeyCommandOutput) => void),\n    cb?: (err: any, data?: DisassociateKmsKeyCommandOutput) => void\n  ): Promise<DisassociateKmsKeyCommandOutput> | void {\n    const command = new DisassociateKmsKeyCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Lists log events from the specified log group. You can list all the log events or filter the results\n   *       using a filter pattern, a time range, and the name of the log stream.</p>\n   *          <p>By default, this operation returns as many log events as can fit in 1 MB (up to 10,000\n   *       log events) or all the events found within the time range that you specify. If the results\n   *       include a token, then there are more log events available, and you can get additional results\n   *       by specifying the token in a subsequent call. This operation can return empty results\n   *     while there are more log events available through the token.</p>\n   *          <p>The returned log events are sorted by event timestamp, the timestamp when the event was ingested\n   *     by CloudWatch Logs, and the ID of the <code>PutLogEvents</code> request.</p>\n   */\n  public filterLogEvents(\n    args: FilterLogEventsCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<FilterLogEventsCommandOutput>;\n  public filterLogEvents(\n    args: FilterLogEventsCommandInput,\n    cb: (err: any, data?: FilterLogEventsCommandOutput) => void\n  ): void;\n  public filterLogEvents(\n    args: FilterLogEventsCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: FilterLogEventsCommandOutput) => void\n  ): void;\n  public filterLogEvents(\n    args: FilterLogEventsCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: FilterLogEventsCommandOutput) => void),\n    cb?: (err: any, data?: FilterLogEventsCommandOutput) => void\n  ): Promise<FilterLogEventsCommandOutput> | void {\n    const command = new FilterLogEventsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Lists log events from the specified log stream. You can list all of the log events or\n   *       filter using a time range.</p>\n   *\n   *          <p>By default, this operation returns as many log events as can fit in a response size of 1MB (up to 10,000 log events).\n   *       You can get additional log events by specifying one of the tokens in a subsequent call.\n   *       This operation can return empty results while there are more log events available through the token.</p>\n   */\n  public getLogEvents(\n    args: GetLogEventsCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<GetLogEventsCommandOutput>;\n  public getLogEvents(args: GetLogEventsCommandInput, cb: (err: any, data?: GetLogEventsCommandOutput) => void): void;\n  public getLogEvents(\n    args: GetLogEventsCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: GetLogEventsCommandOutput) => void\n  ): void;\n  public getLogEvents(\n    args: GetLogEventsCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: GetLogEventsCommandOutput) => void),\n    cb?: (err: any, data?: GetLogEventsCommandOutput) => void\n  ): Promise<GetLogEventsCommandOutput> | void {\n    const command = new GetLogEventsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Returns a list of the fields that are included in log events in the specified log group, along with the percentage of log events\n   *     that contain each field. The search is limited to a time period that you specify.</p>\n   *          <p>In the results, fields that start with @ are fields generated by CloudWatch Logs. For\n   *       example, <code>@timestamp</code> is the timestamp of each log event. For more information about the fields that are\n   *       generated by CloudWatch logs, see\n   *       <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_AnalyzeLogData-discoverable-fields.html\">Supported Logs and Discovered Fields</a>.</p>\n   *          <p>The response results are sorted by the frequency percentage, starting\n   *     with the highest percentage.</p>\n   */\n  public getLogGroupFields(\n    args: GetLogGroupFieldsCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<GetLogGroupFieldsCommandOutput>;\n  public getLogGroupFields(\n    args: GetLogGroupFieldsCommandInput,\n    cb: (err: any, data?: GetLogGroupFieldsCommandOutput) => void\n  ): void;\n  public getLogGroupFields(\n    args: GetLogGroupFieldsCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: GetLogGroupFieldsCommandOutput) => void\n  ): void;\n  public getLogGroupFields(\n    args: GetLogGroupFieldsCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: GetLogGroupFieldsCommandOutput) => void),\n    cb?: (err: any, data?: GetLogGroupFieldsCommandOutput) => void\n  ): Promise<GetLogGroupFieldsCommandOutput> | void {\n    const command = new GetLogGroupFieldsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Retrieves all of the fields and values of a single log event. All fields are retrieved,\n   *       even if the original query that produced the <code>logRecordPointer</code> retrieved only a\n   *       subset of fields. Fields are returned as field name/field value pairs.</p>\n   *          <p>The full unparsed log event is returned within <code>@message</code>.</p>\n   */\n  public getLogRecord(\n    args: GetLogRecordCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<GetLogRecordCommandOutput>;\n  public getLogRecord(args: GetLogRecordCommandInput, cb: (err: any, data?: GetLogRecordCommandOutput) => void): void;\n  public getLogRecord(\n    args: GetLogRecordCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: GetLogRecordCommandOutput) => void\n  ): void;\n  public getLogRecord(\n    args: GetLogRecordCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: GetLogRecordCommandOutput) => void),\n    cb?: (err: any, data?: GetLogRecordCommandOutput) => void\n  ): Promise<GetLogRecordCommandOutput> | void {\n    const command = new GetLogRecordCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Returns the results from the specified query.</p>\n   *          <p>Only the fields requested in the query are returned, along with a <code>@ptr</code>\n   *       field, which is the identifier for the log record. You can use the value of <code>@ptr</code>\n   *       in a <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_GetLogRecord.html\">GetLogRecord</a>\n   *       operation to get the full log record.</p>\n   *          <p>\n   *             <code>GetQueryResults</code>\n   *       does not start a query execution. To run a query, use <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_StartQuery.html\">StartQuery</a>.</p>\n   *          <p>If the value of the <code>Status</code> field in the output is <code>Running</code>, this operation\n   *       returns only partial results. If you see a value of <code>Scheduled</code> or <code>Running</code> for the status,\n   *       you can retry the operation later to see the final results. </p>\n   */\n  public getQueryResults(\n    args: GetQueryResultsCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<GetQueryResultsCommandOutput>;\n  public getQueryResults(\n    args: GetQueryResultsCommandInput,\n    cb: (err: any, data?: GetQueryResultsCommandOutput) => void\n  ): void;\n  public getQueryResults(\n    args: GetQueryResultsCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: GetQueryResultsCommandOutput) => void\n  ): void;\n  public getQueryResults(\n    args: GetQueryResultsCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: GetQueryResultsCommandOutput) => void),\n    cb?: (err: any, data?: GetQueryResultsCommandOutput) => void\n  ): Promise<GetQueryResultsCommandOutput> | void {\n    const command = new GetQueryResultsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Lists the tags for the specified log group.</p>\n   */\n  public listTagsLogGroup(\n    args: ListTagsLogGroupCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<ListTagsLogGroupCommandOutput>;\n  public listTagsLogGroup(\n    args: ListTagsLogGroupCommandInput,\n    cb: (err: any, data?: ListTagsLogGroupCommandOutput) => void\n  ): void;\n  public listTagsLogGroup(\n    args: ListTagsLogGroupCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: ListTagsLogGroupCommandOutput) => void\n  ): void;\n  public listTagsLogGroup(\n    args: ListTagsLogGroupCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: ListTagsLogGroupCommandOutput) => void),\n    cb?: (err: any, data?: ListTagsLogGroupCommandOutput) => void\n  ): Promise<ListTagsLogGroupCommandOutput> | void {\n    const command = new ListTagsLogGroupCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Creates or updates a destination. This operation is used only to create destinations for cross-account subscriptions.</p>\n   *          <p>A destination encapsulates a physical resource (such\n   *       as an Amazon Kinesis stream) and enables you to subscribe to a real-time stream of log events\n   *       for a different account, ingested using <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutLogEvents.html\">PutLogEvents</a>.</p>\n   *          <p>Through an access policy, a destination controls what is written to it.\n   *       By default, <code>PutDestination</code> does not set any access policy with the destination,\n   *       which means a cross-account user cannot call <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutSubscriptionFilter.html\">PutSubscriptionFilter</a> against\n   *       this destination. To enable this, the destination owner must call <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutDestinationPolicy.html\">PutDestinationPolicy</a> after <code>PutDestination</code>.</p>\n   *          <p>To perform a <code>PutDestination</code> operation, you must also have the\n   *     <code>iam:PassRole</code> permission.</p>\n   */\n  public putDestination(\n    args: PutDestinationCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<PutDestinationCommandOutput>;\n  public putDestination(\n    args: PutDestinationCommandInput,\n    cb: (err: any, data?: PutDestinationCommandOutput) => void\n  ): void;\n  public putDestination(\n    args: PutDestinationCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: PutDestinationCommandOutput) => void\n  ): void;\n  public putDestination(\n    args: PutDestinationCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: PutDestinationCommandOutput) => void),\n    cb?: (err: any, data?: PutDestinationCommandOutput) => void\n  ): Promise<PutDestinationCommandOutput> | void {\n    const command = new PutDestinationCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Creates or updates an access policy associated with an existing\n   *       destination. An access policy is an <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/policies_overview.html\">IAM policy document</a> that is used\n   *       to authorize claims to register a subscription filter against a given destination.</p>\n   */\n  public putDestinationPolicy(\n    args: PutDestinationPolicyCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<PutDestinationPolicyCommandOutput>;\n  public putDestinationPolicy(\n    args: PutDestinationPolicyCommandInput,\n    cb: (err: any, data?: PutDestinationPolicyCommandOutput) => void\n  ): void;\n  public putDestinationPolicy(\n    args: PutDestinationPolicyCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: PutDestinationPolicyCommandOutput) => void\n  ): void;\n  public putDestinationPolicy(\n    args: PutDestinationPolicyCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: PutDestinationPolicyCommandOutput) => void),\n    cb?: (err: any, data?: PutDestinationPolicyCommandOutput) => void\n  ): Promise<PutDestinationPolicyCommandOutput> | void {\n    const command = new PutDestinationPolicyCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Uploads a batch of log events to the specified log stream.</p>\n   *          <p>You must include the sequence token obtained from the response of the previous call. An\n   *       upload in a newly created log stream does not require a sequence token. You can also get the\n   *       sequence token in the <code>expectedSequenceToken</code> field from\n   *         <code>InvalidSequenceTokenException</code>. If you call <code>PutLogEvents</code> twice\n   *       within a narrow time period using the same value for <code>sequenceToken</code>, both calls\n   *       might be successful or one might be rejected.</p>\n   *          <p>The batch of events must satisfy the following constraints:</p>\n   *          <ul>\n   *             <li>\n   *                <p>The maximum batch size is 1,048,576 bytes. This size is calculated as the sum of\n   *           all event messages in UTF-8, plus 26 bytes for each log event.</p>\n   *             </li>\n   *             <li>\n   *                <p>None of the log events in the batch can be more than 2 hours in the future.</p>\n   *             </li>\n   *             <li>\n   *                <p>None of the log events in the batch can be older than 14 days or older than the retention\n   *           period of the log group.</p>\n   *             </li>\n   *             <li>\n   *                <p>The log events in the batch must be in chronological order by their timestamp. The\n   *           timestamp is the time the event occurred, expressed as the number of milliseconds after\n   *           Jan 1, 1970 00:00:00 UTC. (In AWS Tools for PowerShell and the AWS SDK for .NET, the\n   *           timestamp is specified in .NET format: yyyy-mm-ddThh:mm:ss. For example,\n   *           2017-09-15T13:45:30.) </p>\n   *             </li>\n   *             <li>\n   *                <p>A batch of log events in a single request cannot span more than 24 hours. Otherwise, the operation fails.</p>\n   *             </li>\n   *             <li>\n   *                <p>The maximum number of log events in a batch is 10,000.</p>\n   *             </li>\n   *             <li>\n   *                <p>There is a quota of 5 requests per second per log stream. Additional requests are throttled. This quota can't be changed.</p>\n   *             </li>\n   *          </ul>\n   *          <p>If a call to <code>PutLogEvents</code> returns \"UnrecognizedClientException\" the most likely cause is an invalid AWS access key ID or secret key. </p>\n   */\n  public putLogEvents(\n    args: PutLogEventsCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<PutLogEventsCommandOutput>;\n  public putLogEvents(args: PutLogEventsCommandInput, cb: (err: any, data?: PutLogEventsCommandOutput) => void): void;\n  public putLogEvents(\n    args: PutLogEventsCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: PutLogEventsCommandOutput) => void\n  ): void;\n  public putLogEvents(\n    args: PutLogEventsCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: PutLogEventsCommandOutput) => void),\n    cb?: (err: any, data?: PutLogEventsCommandOutput) => void\n  ): Promise<PutLogEventsCommandOutput> | void {\n    const command = new PutLogEventsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Creates or updates a metric filter and associates it with the specified log group.\n   *       Metric filters allow you to configure rules to extract metric data from log events ingested\n   *       through <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutLogEvents.html\">PutLogEvents</a>.</p>\n   *          <p>The maximum number of metric filters that can be associated with a log group is\n   *       100.</p>\n   */\n  public putMetricFilter(\n    args: PutMetricFilterCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<PutMetricFilterCommandOutput>;\n  public putMetricFilter(\n    args: PutMetricFilterCommandInput,\n    cb: (err: any, data?: PutMetricFilterCommandOutput) => void\n  ): void;\n  public putMetricFilter(\n    args: PutMetricFilterCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: PutMetricFilterCommandOutput) => void\n  ): void;\n  public putMetricFilter(\n    args: PutMetricFilterCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: PutMetricFilterCommandOutput) => void),\n    cb?: (err: any, data?: PutMetricFilterCommandOutput) => void\n  ): Promise<PutMetricFilterCommandOutput> | void {\n    const command = new PutMetricFilterCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Creates or updates a query definition for CloudWatch Logs Insights. For\n   *       more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/AnalyzingLogData.html\">Analyzing Log Data with CloudWatch Logs Insights</a>.</p>\n   *\n   *          <p>To update a query definition, specify its\n   *         <code>queryDefinitionId</code> in your request. The values of <code>name</code>, <code>queryString</code>,\n   *       and <code>logGroupNames</code> are changed to the values that you specify in your update\n   *       operation. No current values are retained from the current query definition. For example, if\n   *       you update a current query definition that includes log groups, and you don't specify the\n   *         <code>logGroupNames</code> parameter in your update operation, the query definition changes\n   *       to contain no log groups.</p>\n   *          <p>You must have the <code>logs:PutQueryDefinition</code> permission to be able to perform\n   *     this operation.</p>\n   */\n  public putQueryDefinition(\n    args: PutQueryDefinitionCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<PutQueryDefinitionCommandOutput>;\n  public putQueryDefinition(\n    args: PutQueryDefinitionCommandInput,\n    cb: (err: any, data?: PutQueryDefinitionCommandOutput) => void\n  ): void;\n  public putQueryDefinition(\n    args: PutQueryDefinitionCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: PutQueryDefinitionCommandOutput) => void\n  ): void;\n  public putQueryDefinition(\n    args: PutQueryDefinitionCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: PutQueryDefinitionCommandOutput) => void),\n    cb?: (err: any, data?: PutQueryDefinitionCommandOutput) => void\n  ): Promise<PutQueryDefinitionCommandOutput> | void {\n    const command = new PutQueryDefinitionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Creates or updates a resource policy allowing other AWS services to put log events to\n   *       this account, such as Amazon Route 53. An account can have up to 10 resource policies per AWS\n   *       Region.</p>\n   */\n  public putResourcePolicy(\n    args: PutResourcePolicyCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<PutResourcePolicyCommandOutput>;\n  public putResourcePolicy(\n    args: PutResourcePolicyCommandInput,\n    cb: (err: any, data?: PutResourcePolicyCommandOutput) => void\n  ): void;\n  public putResourcePolicy(\n    args: PutResourcePolicyCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: PutResourcePolicyCommandOutput) => void\n  ): void;\n  public putResourcePolicy(\n    args: PutResourcePolicyCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: PutResourcePolicyCommandOutput) => void),\n    cb?: (err: any, data?: PutResourcePolicyCommandOutput) => void\n  ): Promise<PutResourcePolicyCommandOutput> | void {\n    const command = new PutResourcePolicyCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Sets the retention of the specified log group. A retention policy allows you to\n   *       configure the number of days for which to retain log events in the specified log\n   *       group.</p>\n   */\n  public putRetentionPolicy(\n    args: PutRetentionPolicyCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<PutRetentionPolicyCommandOutput>;\n  public putRetentionPolicy(\n    args: PutRetentionPolicyCommandInput,\n    cb: (err: any, data?: PutRetentionPolicyCommandOutput) => void\n  ): void;\n  public putRetentionPolicy(\n    args: PutRetentionPolicyCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: PutRetentionPolicyCommandOutput) => void\n  ): void;\n  public putRetentionPolicy(\n    args: PutRetentionPolicyCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: PutRetentionPolicyCommandOutput) => void),\n    cb?: (err: any, data?: PutRetentionPolicyCommandOutput) => void\n  ): Promise<PutRetentionPolicyCommandOutput> | void {\n    const command = new PutRetentionPolicyCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Creates or updates a subscription filter and associates it with the specified log\n   *       group. Subscription filters allow you to subscribe to a real-time stream of log events\n   *       ingested through <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutLogEvents.html\">PutLogEvents</a> and have them delivered to a specific\n   *       destination. When log events are sent to the\n   *       receiving service, they are Base64 encoded\n   *       and compressed with the gzip format.</p>\n   *          <p>The following destinations are supported for subscription filters:</p>\n   *          <ul>\n   *             <li>\n   *                <p>An Amazon Kinesis stream belonging to the same account as the subscription filter,\n   *           for same-account delivery.</p>\n   *             </li>\n   *             <li>\n   *                <p>A logical destination that belongs to a different account, for cross-account delivery.</p>\n   *             </li>\n   *             <li>\n   *                <p>An Amazon Kinesis Firehose delivery stream that belongs to the same account as the\n   *           subscription filter, for same-account delivery.</p>\n   *             </li>\n   *             <li>\n   *                <p>An AWS Lambda function that belongs to the same account as the subscription filter,\n   *           for same-account delivery.</p>\n   *             </li>\n   *          </ul>\n   *          <p>There can only be one subscription filter associated with a log group. If you are\n   *       updating an existing filter, you must specify the correct name in <code>filterName</code>.\n   *       Otherwise, the call fails because you cannot associate a second filter with a log\n   *       group.</p>\n   *          <p>To perform a <code>PutSubscriptionFilter</code> operation, you must also have the\n   *       <code>iam:PassRole</code> permission.</p>\n   */\n  public putSubscriptionFilter(\n    args: PutSubscriptionFilterCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<PutSubscriptionFilterCommandOutput>;\n  public putSubscriptionFilter(\n    args: PutSubscriptionFilterCommandInput,\n    cb: (err: any, data?: PutSubscriptionFilterCommandOutput) => void\n  ): void;\n  public putSubscriptionFilter(\n    args: PutSubscriptionFilterCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: PutSubscriptionFilterCommandOutput) => void\n  ): void;\n  public putSubscriptionFilter(\n    args: PutSubscriptionFilterCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: PutSubscriptionFilterCommandOutput) => void),\n    cb?: (err: any, data?: PutSubscriptionFilterCommandOutput) => void\n  ): Promise<PutSubscriptionFilterCommandOutput> | void {\n    const command = new PutSubscriptionFilterCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Schedules a query of a log group using CloudWatch Logs Insights. You specify the log group\n   *       and time range to query and the query string to use.</p>\n   *          <p>For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html\">CloudWatch Logs Insights Query Syntax</a>.</p>\n   *\n   *          <p>Queries time out after 15 minutes of execution. If your queries are timing out, reduce the\n   *       time range being searched or partition your query into a number of queries.</p>\n   */\n  public startQuery(args: StartQueryCommandInput, options?: __HttpHandlerOptions): Promise<StartQueryCommandOutput>;\n  public startQuery(args: StartQueryCommandInput, cb: (err: any, data?: StartQueryCommandOutput) => void): void;\n  public startQuery(\n    args: StartQueryCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StartQueryCommandOutput) => void\n  ): void;\n  public startQuery(\n    args: StartQueryCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StartQueryCommandOutput) => void),\n    cb?: (err: any, data?: StartQueryCommandOutput) => void\n  ): Promise<StartQueryCommandOutput> | void {\n    const command = new StartQueryCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Stops a CloudWatch Logs Insights query that is in progress. If the query has already ended, the operation\n   *     returns an error indicating that the specified query is not running.</p>\n   */\n  public stopQuery(args: StopQueryCommandInput, options?: __HttpHandlerOptions): Promise<StopQueryCommandOutput>;\n  public stopQuery(args: StopQueryCommandInput, cb: (err: any, data?: StopQueryCommandOutput) => void): void;\n  public stopQuery(\n    args: StopQueryCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StopQueryCommandOutput) => void\n  ): void;\n  public stopQuery(\n    args: StopQueryCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StopQueryCommandOutput) => void),\n    cb?: (err: any, data?: StopQueryCommandOutput) => void\n  ): Promise<StopQueryCommandOutput> | void {\n    const command = new StopQueryCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Adds or updates the specified tags for the specified log group.</p>\n   *          <p>To list the tags for a log group, use <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_ListTagsLogGroup.html\">ListTagsLogGroup</a>.\n   *       To remove tags, use <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_UntagLogGroup.html\">UntagLogGroup</a>.</p>\n   *          <p>For more information about tags, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/Working-with-log-groups-and-streams.html#log-group-tagging\">Tag Log Groups in Amazon CloudWatch Logs</a>\n   *       in the <i>Amazon CloudWatch Logs User Guide</i>.</p>\n   */\n  public tagLogGroup(args: TagLogGroupCommandInput, options?: __HttpHandlerOptions): Promise<TagLogGroupCommandOutput>;\n  public tagLogGroup(args: TagLogGroupCommandInput, cb: (err: any, data?: TagLogGroupCommandOutput) => void): void;\n  public tagLogGroup(\n    args: TagLogGroupCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: TagLogGroupCommandOutput) => void\n  ): void;\n  public tagLogGroup(\n    args: TagLogGroupCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: TagLogGroupCommandOutput) => void),\n    cb?: (err: any, data?: TagLogGroupCommandOutput) => void\n  ): Promise<TagLogGroupCommandOutput> | void {\n    const command = new TagLogGroupCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Tests the filter pattern of a metric filter against a sample of log event messages. You\n   *       can use this operation to validate the correctness of a metric filter pattern.</p>\n   */\n  public testMetricFilter(\n    args: TestMetricFilterCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<TestMetricFilterCommandOutput>;\n  public testMetricFilter(\n    args: TestMetricFilterCommandInput,\n    cb: (err: any, data?: TestMetricFilterCommandOutput) => void\n  ): void;\n  public testMetricFilter(\n    args: TestMetricFilterCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: TestMetricFilterCommandOutput) => void\n  ): void;\n  public testMetricFilter(\n    args: TestMetricFilterCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: TestMetricFilterCommandOutput) => void),\n    cb?: (err: any, data?: TestMetricFilterCommandOutput) => void\n  ): Promise<TestMetricFilterCommandOutput> | void {\n    const command = new TestMetricFilterCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Removes the specified tags from the specified log group.</p>\n   *          <p>To list the tags for a log group, use <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_ListTagsLogGroup.html\">ListTagsLogGroup</a>.\n   *       To add tags, use <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_TagLogGroup.html\">TagLogGroup</a>.</p>\n   */\n  public untagLogGroup(\n    args: UntagLogGroupCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<UntagLogGroupCommandOutput>;\n  public untagLogGroup(\n    args: UntagLogGroupCommandInput,\n    cb: (err: any, data?: UntagLogGroupCommandOutput) => void\n  ): void;\n  public untagLogGroup(\n    args: UntagLogGroupCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: UntagLogGroupCommandOutput) => void\n  ): void;\n  public untagLogGroup(\n    args: UntagLogGroupCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: UntagLogGroupCommandOutput) => void),\n    cb?: (err: any, data?: UntagLogGroupCommandOutput) => void\n  ): Promise<UntagLogGroupCommandOutput> | void {\n    const command = new UntagLogGroupCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}