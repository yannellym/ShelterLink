{"ast":null,"code":"import { EventStreamMarshaller as EventMarshaller } from \"@aws-sdk/eventstream-marshaller\";\nimport { EventStreamMarshaller as UniversalEventStreamMarshaller } from \"@aws-sdk/eventstream-serde-universal\";\nimport { iterableToReadableStream, readableStreamtoIterable } from \"./utils\";\n/**\n * Utility class used to serialize and deserialize event streams in\n * browsers and ReactNative.\n *\n * In browsers where ReadableStream API is available:\n * * deserialize from ReadableStream to an async iterable of output structure\n * * serialize from async iterable of input structure to ReadableStream\n * In ReactNative where only async iterable API is available:\n * * deserialize from async iterable of binaries to async iterable of output structure\n * * serialize from async iterable of input structure to async iterable of binaries\n *\n * We use ReadableStream API in browsers because of the consistency with other\n * streaming operations, where ReadableStream API is used to denote streaming data.\n * Whereas in ReactNative, ReadableStream API is not available, we use async iterable\n * for streaming data although it has lower throughput.\n */\nvar EventStreamMarshaller = /** @class */function () {\n  function EventStreamMarshaller(_a) {\n    var utf8Encoder = _a.utf8Encoder,\n      utf8Decoder = _a.utf8Decoder;\n    this.eventMarshaller = new EventMarshaller(utf8Encoder, utf8Decoder);\n    this.universalMarshaller = new UniversalEventStreamMarshaller({\n      utf8Decoder: utf8Decoder,\n      utf8Encoder: utf8Encoder\n    });\n  }\n  EventStreamMarshaller.prototype.deserialize = function (body, deserializer) {\n    var bodyIterable = isReadableStream(body) ? readableStreamtoIterable(body) : body;\n    return this.universalMarshaller.deserialize(bodyIterable, deserializer);\n  };\n  /**\n   * Generate a stream that serialize events into stream of binary chunks;\n   *\n   * Caveat is that streaming request payload doesn't work on browser with native\n   * xhr or fetch handler currently because they don't support upload streaming.\n   * reference:\n   * * https://bugs.chromium.org/p/chromium/issues/detail?id=688906\n   * * https://bugzilla.mozilla.org/show_bug.cgi?id=1387483\n   *\n   */\n  EventStreamMarshaller.prototype.serialize = function (input, serializer) {\n    var serialziedIterable = this.universalMarshaller.serialize(input, serializer);\n    return typeof ReadableStream === \"function\" ? iterableToReadableStream(serialziedIterable) : serialziedIterable;\n  };\n  return EventStreamMarshaller;\n}();\nexport { EventStreamMarshaller };\nvar isReadableStream = function (body) {\n  return typeof ReadableStream === \"function\" && body instanceof ReadableStream;\n};","map":{"version":3,"names":["EventStreamMarshaller","EventMarshaller","UniversalEventStreamMarshaller","iterableToReadableStream","readableStreamtoIterable","_a","utf8Encoder","utf8Decoder","eventMarshaller","universalMarshaller","prototype","deserialize","body","deserializer","bodyIterable","isReadableStream","serialize","input","serializer","serialziedIterable","ReadableStream"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-sdk/eventstream-serde-browser/src/EventStreamMarshaller.ts"],"sourcesContent":["import { EventStreamMarshaller as EventMarshaller } from \"@aws-sdk/eventstream-marshaller\";\nimport { EventStreamMarshaller as UniversalEventStreamMarshaller } from \"@aws-sdk/eventstream-serde-universal\";\nimport { Decoder, Encoder, EventStreamMarshaller as IEventStreamMarshaller, Message } from \"@aws-sdk/types\";\n\nimport { iterableToReadableStream, readableStreamtoIterable } from \"./utils\";\n\nexport interface EventStreamMarshaller extends IEventStreamMarshaller {}\n\nexport interface EventStreamMarshallerOptions {\n  utf8Encoder: Encoder;\n  utf8Decoder: Decoder;\n}\n\n/**\n * Utility class used to serialize and deserialize event streams in\n * browsers and ReactNative.\n *\n * In browsers where ReadableStream API is available:\n * * deserialize from ReadableStream to an async iterable of output structure\n * * serialize from async iterable of input structure to ReadableStream\n * In ReactNative where only async iterable API is available:\n * * deserialize from async iterable of binaries to async iterable of output structure\n * * serialize from async iterable of input structure to async iterable of binaries\n *\n * We use ReadableStream API in browsers because of the consistency with other\n * streaming operations, where ReadableStream API is used to denote streaming data.\n * Whereas in ReactNative, ReadableStream API is not available, we use async iterable\n * for streaming data although it has lower throughput.\n */\nexport class EventStreamMarshaller {\n  private readonly eventMarshaller: EventMarshaller;\n  private readonly universalMarshaller: UniversalEventStreamMarshaller;\n  constructor({ utf8Encoder, utf8Decoder }: EventStreamMarshallerOptions) {\n    this.eventMarshaller = new EventMarshaller(utf8Encoder, utf8Decoder);\n    this.universalMarshaller = new UniversalEventStreamMarshaller({\n      utf8Decoder,\n      utf8Encoder,\n    });\n  }\n\n  deserialize<T>(\n    body: ReadableStream<Uint8Array> | AsyncIterable<Uint8Array>,\n    deserializer: (input: { [event: string]: Message }) => Promise<T>\n  ): AsyncIterable<T> {\n    const bodyIterable = isReadableStream(body) ? readableStreamtoIterable(body) : body;\n    return this.universalMarshaller.deserialize(bodyIterable, deserializer);\n  }\n\n  /**\n   * Generate a stream that serialize events into stream of binary chunks;\n   *\n   * Caveat is that streaming request payload doesn't work on browser with native\n   * xhr or fetch handler currently because they don't support upload streaming.\n   * reference:\n   * * https://bugs.chromium.org/p/chromium/issues/detail?id=688906\n   * * https://bugzilla.mozilla.org/show_bug.cgi?id=1387483\n   *\n   */\n  serialize<T>(input: AsyncIterable<T>, serializer: (event: T) => Message): ReadableStream | AsyncIterable<Uint8Array> {\n    const serialziedIterable = this.universalMarshaller.serialize(input, serializer);\n    return typeof ReadableStream === \"function\" ? iterableToReadableStream(serialziedIterable) : serialziedIterable;\n  }\n}\n\nconst isReadableStream = (body: any): body is ReadableStream =>\n  typeof ReadableStream === \"function\" && body instanceof ReadableStream;\n"],"mappings":"AAAA,SAASA,qBAAqB,IAAIC,eAAe,QAAQ,iCAAiC;AAC1F,SAASD,qBAAqB,IAAIE,8BAA8B,QAAQ,sCAAsC;AAG9G,SAASC,wBAAwB,EAAEC,wBAAwB,QAAQ,SAAS;AAS5E;;;;;;;;;;;;;;;;AAgBA,IAAAJ,qBAAA;EAGE,SAAAA,sBAAYK,EAA0D;QAAxDC,WAAW,GAAAD,EAAA,CAAAC,WAAA;MAAEC,WAAW,GAAAF,EAAA,CAAAE,WAAA;IACpC,IAAI,CAACC,eAAe,GAAG,IAAIP,eAAe,CAACK,WAAW,EAAEC,WAAW,CAAC;IACpE,IAAI,CAACE,mBAAmB,GAAG,IAAIP,8BAA8B,CAAC;MAC5DK,WAAW,EAAAA,WAAA;MACXD,WAAW,EAAAA;KACZ,CAAC;EACJ;EAEAN,qBAAA,CAAAU,SAAA,CAAAC,WAAW,GAAX,UACEC,IAA4D,EAC5DC,YAAiE;IAEjE,IAAMC,YAAY,GAAGC,gBAAgB,CAACH,IAAI,CAAC,GAAGR,wBAAwB,CAACQ,IAAI,CAAC,GAAGA,IAAI;IACnF,OAAO,IAAI,CAACH,mBAAmB,CAACE,WAAW,CAACG,YAAY,EAAED,YAAY,CAAC;EACzE,CAAC;EAED;;;;;;;;;;EAUAb,qBAAA,CAAAU,SAAA,CAAAM,SAAS,GAAT,UAAaC,KAAuB,EAAEC,UAAiC;IACrE,IAAMC,kBAAkB,GAAG,IAAI,CAACV,mBAAmB,CAACO,SAAS,CAACC,KAAK,EAAEC,UAAU,CAAC;IAChF,OAAO,OAAOE,cAAc,KAAK,UAAU,GAAGjB,wBAAwB,CAACgB,kBAAkB,CAAC,GAAGA,kBAAkB;EACjH,CAAC;EACH,OAAAnB,qBAAC;AAAD,CAAC,CAjCD;;AAmCA,IAAMe,gBAAgB,GAAG,SAAAA,CAACH,IAAS;EACjC,cAAOQ,cAAc,KAAK,UAAU,IAAIR,IAAI,YAAYQ,cAAc;AAAtE,CAAsE"},"metadata":{},"sourceType":"module","externalDependencies":[]}