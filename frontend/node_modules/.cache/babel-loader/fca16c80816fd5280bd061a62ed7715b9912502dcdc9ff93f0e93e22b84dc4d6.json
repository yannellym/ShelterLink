{"ast":null,"code":"var _jsxFileName = \"/Users/yannellym/Desktop/iwantapet/frontend/src/components/AllPetsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport '../styles/AllPetsPage.css';\nimport PetCard from './PetCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n}\nfunction AllPetsPage() {\n  _s();\n  const {\n    category\n  } = useParams();\n  const [loading, setLoading] = useState(true);\n  const [cache, setCache] = useState([]);\n  const petsPerPage = 100;\n  const otherAnimalTypes = [\"horse\", \"bird\", \"barnyard\"];\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 20;\n  const [totalPages, setTotalPages] = useState(0);\n  const [nextPageUrl, setNextPageUrl] = useState(null); // State variable to store the URL of the next page\n\n  const fetchAnimalsByCategory = async (category, page) => {\n    try {\n      // Modify your API endpoint to include the page number\n      const endpoint = `http://localhost:3002/api/petfinder?type=${category}&limit=${petsPerPage}&page=${page}`;\n      const response = await fetch(endpoint);\n      const data = await response.json();\n      if (data && data.animals) {\n        setCache([...cache, ...data.animals]);\n        setLoading(false);\n        setTotalPages(data.pagination.total_pages);\n        setNextPageUrl(data.pagination._links.next.href); // Store the URL of the next page\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error.message);\n    }\n  };\n  useEffect(() => {\n    async function fetchData() {\n      const animals = await fetchAnimalsByCategory(category, currentPage);\n\n      // Shuffle the animals array\n      shuffleArray(animals);\n      setCache(animals);\n      setLoading(false);\n    }\n    fetchData();\n  }, [category, currentPage]);\n\n  // Function to handle next page\n  const handleNextPage = () => {\n    if (nextPageUrl) {\n      // Fetch the next page data\n      setLoading(true);\n      fetchNextPageData();\n    }\n  };\n\n  // Function to fetch data for the next page using the provided URL\n  const fetchNextPageData = async () => {\n    try {\n      const response = await fetch(nextPageUrl);\n      const data = await response.json();\n      if (data && data.animals) {\n        setCache([...cache, ...data.animals]);\n        setLoading(false);\n        setTotalPages(data.pagination.total_pages);\n        setNextPageUrl(data.pagination._links.next.href);\n      }\n    } catch (error) {\n      console.error('Error fetching data for the next page:', error.message);\n    }\n  };\n\n  // Calculate the range of pets to display based on the current page\n  const indexOfLastPet = currentPage * itemsPerPage;\n  const indexOfFirstPet = indexOfLastPet - itemsPerPage;\n  const currentPets = cache.slice(indexOfFirstPet, indexOfLastPet);\n\n  // Function to handle page change\n  const handlePageChange = page => {\n    setCurrentPage(page);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"all-pets-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: `All ${category.charAt(0).toUpperCase() + category.slice(1)}s`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pet-list\",\n        children: currentPets.map(pet => /*#__PURE__*/_jsxDEV(PetCard, {\n          pet: pet\n        }, pet.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pagination\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handlePageChange(currentPage - 1),\n        disabled: currentPage === 1,\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handlePageChange(currentPage + 1),\n        disabled: currentPage >= totalPages,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n_s(AllPetsPage, \"rXrXd2CCwz1a33vNBPKTAtt4P58=\", false, function () {\n  return [useParams];\n});\n_c = AllPetsPage;\nexport default AllPetsPage;\nvar _c;\n$RefreshReg$(_c, \"AllPetsPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","PetCard","jsxDEV","_jsxDEV","shuffleArray","array","i","length","j","Math","floor","random","AllPetsPage","_s","category","loading","setLoading","cache","setCache","petsPerPage","otherAnimalTypes","currentPage","setCurrentPage","itemsPerPage","totalPages","setTotalPages","nextPageUrl","setNextPageUrl","fetchAnimalsByCategory","page","endpoint","response","fetch","data","json","animals","pagination","total_pages","_links","next","href","error","console","message","fetchData","handleNextPage","fetchNextPageData","indexOfLastPet","indexOfFirstPet","currentPets","slice","handlePageChange","className","children","charAt","toUpperCase","fileName","_jsxFileName","lineNumber","columnNumber","map","pet","id","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/yannellym/Desktop/iwantapet/frontend/src/components/AllPetsPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport '../styles/AllPetsPage.css';\nimport PetCard from './PetCard';\n\nfunction shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n}\n\nfunction AllPetsPage() {\n  const { category } = useParams();\n  const [loading, setLoading] = useState(true);\n  const [cache, setCache] = useState([]);\n  const petsPerPage = 100;\n  const otherAnimalTypes = [\"horse\", \"bird\", \"barnyard\"];\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 20;\n  const [totalPages, setTotalPages] = useState(0);\n  const [nextPageUrl, setNextPageUrl] = useState(null); // State variable to store the URL of the next page\n\n  const fetchAnimalsByCategory = async (category, page) => {\n    try {\n      // Modify your API endpoint to include the page number\n      const endpoint = `http://localhost:3002/api/petfinder?type=${category}&limit=${petsPerPage}&page=${page}`;\n\n      const response = await fetch(endpoint);\n      const data = await response.json();\n\n      if (data && data.animals) {\n        setCache([...cache, ...data.animals]);\n        setLoading(false);\n        setTotalPages(data.pagination.total_pages);\n        setNextPageUrl(data.pagination._links.next.href); // Store the URL of the next page\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error.message);\n    }\n  };\n\n  useEffect(() => {\n    async function fetchData() {\n      const animals = await fetchAnimalsByCategory(category, currentPage);\n\n      // Shuffle the animals array\n      shuffleArray(animals);\n      \n      setCache(animals);\n      setLoading(false);\n    }\n\n    fetchData();\n  }, [category, currentPage]);\n\n  // Function to handle next page\n  const handleNextPage = () => {\n    if (nextPageUrl) {\n      // Fetch the next page data\n      setLoading(true);\n      fetchNextPageData();\n    }\n  };\n\n  // Function to fetch data for the next page using the provided URL\n  const fetchNextPageData = async () => {\n    try {\n      const response = await fetch(nextPageUrl);\n      const data = await response.json();\n\n      if (data && data.animals) {\n        setCache([...cache, ...data.animals]);\n        setLoading(false);\n        setTotalPages(data.pagination.total_pages);\n        setNextPageUrl(data.pagination._links.next.href);\n      }\n    } catch (error) {\n      console.error('Error fetching data for the next page:', error.message);\n    }\n  };\n\n  // Calculate the range of pets to display based on the current page\n  const indexOfLastPet = currentPage * itemsPerPage;\n  const indexOfFirstPet = indexOfLastPet - itemsPerPage;\n  const currentPets = cache.slice(indexOfFirstPet, indexOfLastPet);\n\n  // Function to handle page change\n  const handlePageChange = (page) => {\n    setCurrentPage(page);\n  };\n\n  return (\n    <div className=\"all-pets-page\">\n      <h2>{`All ${category.charAt(0).toUpperCase() + category.slice(1)}s`}</h2>\n      {loading ? (\n        <p>Loading...</p>\n      ) : (\n        <div>\n          <div className=\"pet-list\">\n            {currentPets.map((pet) => (\n              <PetCard key={pet.id} pet={pet} />\n            ))}\n          </div>\n        </div>\n      )}\n      <div className=\"pagination\">\n        <button\n          onClick={() => handlePageChange(currentPage - 1)}\n          disabled={currentPage === 1}\n        >\n          Previous\n        </button>\n        <button\n          onClick={() => handlePageChange(currentPage + 1)}\n          disabled={currentPage >= totalPages}\n        >\n          Next\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default AllPetsPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}