{"ast":null,"code":"import { __assign, __read, __spread } from \"tslib\";\nimport { Amplify, ConsoleLogger as Logger } from '@aws-amplify/core';\nvar logger = new Logger('Predictions');\nvar PredictionsClass = /** @class */function () {\n  /**\n   * Initialize Predictions with AWS configurations\n   * @param {PredictionsOptions} options - Configuration object for Predictions\n   */\n  function PredictionsClass(options) {\n    this._options = options;\n    this._convertPluggables = [];\n    this._identifyPluggables = [];\n    this._interpretPluggables = [];\n  }\n  PredictionsClass.prototype.getModuleName = function () {\n    return 'Predictions';\n  };\n  /**\n   * add plugin/pluggable into Predictions category\n   * @param {Object} pluggable - an instance of the plugin/pluggable\n   **/\n  PredictionsClass.prototype.addPluggable = function (pluggable) {\n    if (this.getPluggable(pluggable.getProviderName())) {\n      throw new Error(\"Pluggable with name \" + pluggable.getProviderName() + \" has already been added.\");\n    }\n    var pluggableAdded = false;\n    if (this.implementsConvertPluggable(pluggable)) {\n      this._convertPluggables.push(pluggable);\n      pluggableAdded = true;\n    }\n    if (this.implementsIdentifyPluggable(pluggable)) {\n      this._identifyPluggables.push(pluggable);\n      pluggableAdded = true;\n    }\n    if (this.implementsInterpretPluggable(pluggable)) {\n      this._interpretPluggables.push(pluggable);\n      pluggableAdded = true;\n    }\n    if (pluggableAdded) {\n      this.configurePluggable(pluggable);\n    }\n  };\n  /**\n   * Get the plugin object\n   * @param providerName - the name of the plugin\n   */\n  PredictionsClass.prototype.getPluggable = function (providerName) {\n    var pluggable = this.getAllProviders().find(function (pluggable) {\n      return pluggable.getProviderName() === providerName;\n    });\n    if (pluggable === undefined) {\n      logger.debug('No plugin found with providerName=>', providerName);\n      return null;\n    } else return pluggable;\n  };\n  /**\n   * Remove the plugin object\n   * @param providerName - the name of the plugin\n   */\n  PredictionsClass.prototype.removePluggable = function (providerName) {\n    this._convertPluggables = this._convertPluggables.filter(function (pluggable) {\n      return pluggable.getProviderName() !== providerName;\n    });\n    this._identifyPluggables = this._identifyPluggables.filter(function (pluggable) {\n      return pluggable.getProviderName() !== providerName;\n    });\n    this._interpretPluggables = this._interpretPluggables.filter(function (pluggable) {\n      return pluggable.getProviderName() !== providerName;\n    });\n    return;\n  };\n  /**\n   * To make both top level providers and category level providers work with same interface and configuration\n   * this method duplicates Predictions config into parent level config (for top level provider) and\n   * category level config (such as convert, identify etc) and pass both to each provider.\n   */\n  PredictionsClass.prototype.configure = function (options) {\n    var _this = this;\n    var predictionsConfig = options ? options.predictions || options : {};\n    predictionsConfig = __assign(__assign({}, predictionsConfig), options);\n    this._options = Object.assign({}, this._options, predictionsConfig);\n    logger.debug('configure Predictions', this._options);\n    this.getAllProviders().forEach(function (pluggable) {\n      return _this.configurePluggable(pluggable);\n    });\n  };\n  PredictionsClass.prototype.interpret = function (input, options) {\n    var pluggableToExecute = this.getPluggableToExecute(this._interpretPluggables, options);\n    return pluggableToExecute.interpret(input);\n  };\n  PredictionsClass.prototype.convert = function (input, options) {\n    var pluggableToExecute = this.getPluggableToExecute(this._convertPluggables, options);\n    return pluggableToExecute.convert(input);\n  };\n  PredictionsClass.prototype.identify = function (input, options) {\n    var pluggableToExecute = this.getPluggableToExecute(this._identifyPluggables, options);\n    return pluggableToExecute.identify(input);\n  };\n  // tslint:disable-next-line: max-line-length\n  PredictionsClass.prototype.getPluggableToExecute = function (pluggables, providerOptions) {\n    // Give preference to provider name first since it is more specific to this call, even if\n    // there is only one provider configured to error out if the name provided is not the one matched.\n    if (providerOptions && providerOptions.providerName) {\n      return __spread(pluggables).find(function (pluggable) {\n        return pluggable.getProviderName() === providerOptions.providerName;\n      });\n    } else {\n      if (pluggables.length === 1) {\n        return pluggables[0];\n      } else {\n        throw new Error('More than one or no providers are configured, ' + 'Either specify a provider name or configure exactly one provider');\n      }\n    }\n  };\n  PredictionsClass.prototype.getAllProviders = function () {\n    return __spread(this._convertPluggables, this._identifyPluggables, this._interpretPluggables);\n  };\n  PredictionsClass.prototype.configurePluggable = function (pluggable) {\n    var categoryConfig = Object.assign({}, this._options['predictions'],\n    // Parent predictions config for the top level provider\n    this._options[pluggable.getCategory().toLowerCase()] // Actual category level config\n    );\n\n    pluggable.configure(categoryConfig);\n  };\n  PredictionsClass.prototype.implementsConvertPluggable = function (obj) {\n    return obj && typeof obj.convert === 'function';\n  };\n  PredictionsClass.prototype.implementsIdentifyPluggable = function (obj) {\n    return obj && typeof obj.identify === 'function';\n  };\n  PredictionsClass.prototype.implementsInterpretPluggable = function (obj) {\n    return obj && typeof obj.interpret === 'function';\n  };\n  return PredictionsClass;\n}();\nexport { PredictionsClass };\nexport var Predictions = new PredictionsClass({});\nAmplify.register(Predictions);","map":{"version":3,"names":["Amplify","ConsoleLogger","Logger","logger","PredictionsClass","options","_options","_convertPluggables","_identifyPluggables","_interpretPluggables","prototype","getModuleName","addPluggable","pluggable","getPluggable","getProviderName","Error","pluggableAdded","implementsConvertPluggable","push","implementsIdentifyPluggable","implementsInterpretPluggable","configurePluggable","providerName","getAllProviders","find","undefined","debug","removePluggable","filter","configure","_this","predictionsConfig","predictions","__assign","Object","assign","forEach","interpret","input","pluggableToExecute","getPluggableToExecute","convert","identify","pluggables","providerOptions","__spread","length","categoryConfig","getCategory","toLowerCase","obj","Predictions","register"],"sources":["../src/Predictions.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}