{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { getCanonicalHeaders } from './getCanonicalHeaders';\nimport { getCanonicalQueryString } from './getCanonicalQueryString';\nimport { getCanonicalUri } from './getCanonicalUri';\nimport { getHashedPayload } from './getHashedPayload';\nimport { getSignedHeaders } from './getSignedHeaders';\n/**\n * Returns a canonical request.\n *\n * @param request `HttpRequest` from which to create the canonical request from.\n * @param uriEscapePath Whether to uri encode the path as part of canonical uri. It's used for S3 only where the\n *   pathname is already uri encoded, and the signing process is not expected to uri encode it again. Defaults to true.\n * @returns String created by by concatenating the following strings, separated by newline characters:\n * - HTTPMethod\n * - CanonicalUri\n * - CanonicalQueryString\n * - CanonicalHeaders\n * - SignedHeaders\n * - HashedPayload\n *\n * @internal\n */\nexport var getCanonicalRequest = function (_a, uriEscapePath) {\n  var body = _a.body,\n    headers = _a.headers,\n    method = _a.method,\n    url = _a.url;\n  if (uriEscapePath === void 0) {\n    uriEscapePath = true;\n  }\n  return [method, getCanonicalUri(url.pathname, uriEscapePath), getCanonicalQueryString(url.searchParams), getCanonicalHeaders(headers), getSignedHeaders(headers), getHashedPayload(body)].join('\\n');\n};","map":{"version":3,"names":["getCanonicalHeaders","getCanonicalQueryString","getCanonicalUri","getHashedPayload","getSignedHeaders","getCanonicalRequest","_a","uriEscapePath","body","headers","method","url","pathname","searchParams","join"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/signer/signatureV4/utils/getCanonicalRequest.js"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { getCanonicalHeaders } from './getCanonicalHeaders';\nimport { getCanonicalQueryString } from './getCanonicalQueryString';\nimport { getCanonicalUri } from './getCanonicalUri';\nimport { getHashedPayload } from './getHashedPayload';\nimport { getSignedHeaders } from './getSignedHeaders';\n/**\n * Returns a canonical request.\n *\n * @param request `HttpRequest` from which to create the canonical request from.\n * @param uriEscapePath Whether to uri encode the path as part of canonical uri. It's used for S3 only where the\n *   pathname is already uri encoded, and the signing process is not expected to uri encode it again. Defaults to true.\n * @returns String created by by concatenating the following strings, separated by newline characters:\n * - HTTPMethod\n * - CanonicalUri\n * - CanonicalQueryString\n * - CanonicalHeaders\n * - SignedHeaders\n * - HashedPayload\n *\n * @internal\n */\nexport var getCanonicalRequest = function (_a, uriEscapePath) {\n    var body = _a.body, headers = _a.headers, method = _a.method, url = _a.url;\n    if (uriEscapePath === void 0) { uriEscapePath = true; }\n    return [\n        method,\n        getCanonicalUri(url.pathname, uriEscapePath),\n        getCanonicalQueryString(url.searchParams),\n        getCanonicalHeaders(headers),\n        getSignedHeaders(headers),\n        getHashedPayload(body),\n    ].join('\\n');\n};\n"],"mappings":"AAAA;AACA;AACA,SAASA,mBAAmB,QAAQ,uBAAuB;AAC3D,SAASC,uBAAuB,QAAQ,2BAA2B;AACnE,SAASC,eAAe,QAAQ,mBAAmB;AACnD,SAASC,gBAAgB,QAAQ,oBAAoB;AACrD,SAASC,gBAAgB,QAAQ,oBAAoB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,mBAAmB,GAAG,SAAAA,CAAUC,EAAE,EAAEC,aAAa,EAAE;EAC1D,IAAIC,IAAI,GAAGF,EAAE,CAACE,IAAI;IAAEC,OAAO,GAAGH,EAAE,CAACG,OAAO;IAAEC,MAAM,GAAGJ,EAAE,CAACI,MAAM;IAAEC,GAAG,GAAGL,EAAE,CAACK,GAAG;EAC1E,IAAIJ,aAAa,KAAK,KAAK,CAAC,EAAE;IAAEA,aAAa,GAAG,IAAI;EAAE;EACtD,OAAO,CACHG,MAAM,EACNR,eAAe,CAACS,GAAG,CAACC,QAAQ,EAAEL,aAAa,CAAC,EAC5CN,uBAAuB,CAACU,GAAG,CAACE,YAAY,CAAC,EACzCb,mBAAmB,CAACS,OAAO,CAAC,EAC5BL,gBAAgB,CAACK,OAAO,CAAC,EACzBN,gBAAgB,CAACK,IAAI,CAAC,CACzB,CAACM,IAAI,CAAC,IAAI,CAAC;AAChB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}