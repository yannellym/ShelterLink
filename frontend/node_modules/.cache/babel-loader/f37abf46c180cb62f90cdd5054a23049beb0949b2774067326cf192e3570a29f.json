{"ast":null,"code":"var _jsxFileName = \"/Users/yannellym/Desktop/iwantapet/frontend/src/pages/FindApet.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../styles/MainPage.css';\nimport PetCard from '../components/PetCard';\nimport Filter from './Filter';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FindApet({\n  favoritePets,\n  addToFavorites,\n  removeFromFavorites\n}) {\n  _s();\n  // State variables\n  const [searchResults, setSearchResults] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 24;\n  const maxPaginationButtons = 9; // Change the maximum number of pagination buttons\n\n  const [showOnlyPetsWithImages, setShowOnlyPetsWithImages] = useState(false);\n\n  // Filters state\n  const [selectedFilters, setSelectedFilters] = useState({\n    type: 'any',\n    breed: 'any',\n    age: 'any',\n    gender: 'any',\n    size: 'any',\n    coat: 'any'\n  });\n\n  // Function to fetch pets for a specific page\n  const fetchPetsForPage = async (page, filters) => {\n    try {\n      let endpoint = `http://localhost:3002/api/petfinder?page=${page}&limit=${showOnlyPetsWithImages ? 60 : itemsPerPage}`;\n\n      // Add filter parameters to the API request\n      for (const filterKey in filters) {\n        if (filters[filterKey] !== 'any') {\n          endpoint += `&${filterKey}=${filters[filterKey]}`;\n        }\n      }\n      const response = await fetch(endpoint);\n      const data = await response.json();\n      if (data && data.animals) {\n        setSearchResults(data.animals); // Set the search results\n        // remove the loading indicator\n        setLoading(false);\n        // set the new data\n        setCurrentPage(page);\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error.message);\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    // Fetch pets for the initial page when the component mounts\n    fetchPetsForPage(currentPage, selectedFilters);\n  }, [showOnlyPetsWithImages]);\n  const handlePageChange = page => {\n    // Set loading to true before changing the page\n    setLoading(true);\n\n    // Delay fetching data and scrolling to the top\n    setTimeout(() => {\n      fetchPetsForPage(page, selectedFilters);\n\n      // After the data is loaded, scroll to the top\n      window.scrollTo(0, 0); // Scroll to the top of the page\n    }, 500); // 500 milliseconds (0.5 second) delay\n  };\n\n  const handleFilterChange = async newFilters => {\n    // Set loading to true before fetching new data (this will allow our \"looking through\" message to display)\n    setLoading(true);\n    // Update selected filters\n    setSelectedFilters(newFilters);\n\n    // Set the current page to 1 when filters change\n    setCurrentPage(1);\n  };\n\n  // Function to apply filters to the results based on selected filters and showOnlyPetsWithImages flag\n  const applyFiltersToResults = (filters, showOnlyPetsWithImages) => {\n    // Apply filters to the cached data\n    const filteredResults = applyFilters(searchResults, filters);\n\n    // Apply the \"showOnlyPetsWithImages\" filter\n    if (showOnlyPetsWithImages) {\n      return filteredResults.filter(pet => pet.photos && pet.photos.length > 0);\n    }\n    return filteredResults;\n  };\n\n  // Update the handleShowOnlyPetsWithImages function to correctly handle pagination\n  const handleShowOnlyPetsWithImages = () => {\n    setShowOnlyPetsWithImages(!showOnlyPetsWithImages);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filters\",\n        children: /*#__PURE__*/_jsxDEV(Filter, {\n          onFilterChange: handleFilterChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter-pets\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: showOnlyPetsWithImages,\n            onChange: handleShowOnlyPetsWithImages\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this), \"Show only pets with images\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pet-card-list\",\n        children: renderPetCards()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pagination-horizontal\",\n        children: generatePaginationButtons()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n_s(FindApet, \"0NMdeOuxdgsmhifDAlXU+Dc//3c=\");\n_c = FindApet;\nexport default FindApet;\nvar _c;\n$RefreshReg$(_c, \"FindApet\");","map":{"version":3,"names":["React","useState","useEffect","PetCard","Filter","jsxDEV","_jsxDEV","FindApet","favoritePets","addToFavorites","removeFromFavorites","_s","searchResults","setSearchResults","loading","setLoading","currentPage","setCurrentPage","itemsPerPage","maxPaginationButtons","showOnlyPetsWithImages","setShowOnlyPetsWithImages","selectedFilters","setSelectedFilters","type","breed","age","gender","size","coat","fetchPetsForPage","page","filters","endpoint","filterKey","response","fetch","data","json","animals","error","console","message","handlePageChange","setTimeout","window","scrollTo","handleFilterChange","newFilters","applyFiltersToResults","filteredResults","applyFilters","filter","pet","photos","length","handleShowOnlyPetsWithImages","className","children","onFilterChange","fileName","_jsxFileName","lineNumber","columnNumber","checked","onChange","renderPetCards","generatePaginationButtons","_c","$RefreshReg$"],"sources":["/Users/yannellym/Desktop/iwantapet/frontend/src/pages/FindApet.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../styles/MainPage.css';\nimport PetCard from '../components/PetCard';\nimport Filter from './Filter';\n\nfunction FindApet({ favoritePets, addToFavorites, removeFromFavorites }) {\n  // State variables\n  const [searchResults, setSearchResults] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 24;\n  const maxPaginationButtons = 9; // Change the maximum number of pagination buttons\n\n  const [showOnlyPetsWithImages, setShowOnlyPetsWithImages] = useState(false);\n\n  // Filters state\n  const [selectedFilters, setSelectedFilters] = useState({\n    type: 'any',\n    breed: 'any',\n    age: 'any',\n    gender: 'any',\n    size: 'any',\n    coat: 'any',\n  });\n\n  // Function to fetch pets for a specific page\n  const fetchPetsForPage = async (page, filters) => {\n    try {\n      let endpoint = `http://localhost:3002/api/petfinder?page=${page}&limit=${showOnlyPetsWithImages ? 60 : itemsPerPage}`;\n\n      // Add filter parameters to the API request\n      for (const filterKey in filters) {\n        if (filters[filterKey] !== 'any') {\n          endpoint += `&${filterKey}=${filters[filterKey]}`;\n        }\n      }\n\n      const response = await fetch(endpoint);\n      const data = await response.json();\n\n      if (data && data.animals) {\n        setSearchResults(data.animals); // Set the search results\n        // remove the loading indicator\n        setLoading(false);\n        // set the new data\n        setCurrentPage(page);\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error.message);\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    // Fetch pets for the initial page when the component mounts\n    fetchPetsForPage(currentPage, selectedFilters);\n  }, [showOnlyPetsWithImages]);\n\n  const handlePageChange = (page) => {\n    // Set loading to true before changing the page\n    setLoading(true);\n\n    // Delay fetching data and scrolling to the top\n    setTimeout(() => {\n      fetchPetsForPage(page, selectedFilters);\n\n      // After the data is loaded, scroll to the top\n      window.scrollTo(0, 0); // Scroll to the top of the page\n    }, 500); // 500 milliseconds (0.5 second) delay\n  };\n\n  const handleFilterChange = async (newFilters) => {\n    // Set loading to true before fetching new data (this will allow our \"looking through\" message to display)\n    setLoading(true);\n    // Update selected filters\n    setSelectedFilters(newFilters);\n\n    // Set the current page to 1 when filters change\n    setCurrentPage(1);\n  };\n\n  // Function to apply filters to the results based on selected filters and showOnlyPetsWithImages flag\n  const applyFiltersToResults = (filters, showOnlyPetsWithImages) => {\n    // Apply filters to the cached data\n    const filteredResults = applyFilters(searchResults, filters);\n\n    // Apply the \"showOnlyPetsWithImages\" filter\n    if (showOnlyPetsWithImages) {\n      return filteredResults.filter((pet) => pet.photos && pet.photos.length > 0);\n    }\n\n    return filteredResults;\n  };\n\n  // Update the handleShowOnlyPetsWithImages function to correctly handle pagination\n  const handleShowOnlyPetsWithImages = () => {\n    setShowOnlyPetsWithImages(!showOnlyPetsWithImages);\n  };\n\n  return (\n    <div className=\"main-page\">\n      <div className=\"sidebar\">\n        <div className=\"filters\">\n          <Filter onFilterChange={handleFilterChange} />\n        </div>\n      </div>\n      <div className=\"content\">\n        <div className=\"filter-pets\">\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={showOnlyPetsWithImages}\n              onChange={handleShowOnlyPetsWithImages}\n            />\n            Show only pets with images\n          </label>\n        </div>\n        <div className=\"pet-card-list\">\n          {renderPetCards()}\n        </div>\n        <div className=\"pagination-horizontal\">\n          {generatePaginationButtons()}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default FindApet;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}