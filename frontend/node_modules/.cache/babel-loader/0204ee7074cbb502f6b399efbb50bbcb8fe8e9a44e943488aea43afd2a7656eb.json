{"ast":null,"code":"import { __values } from \"tslib\";\nimport { escapeUri } from \"@aws-sdk/util-uri-escape\";\nimport { SIGNATURE_HEADER } from \"./constants\";\n/**\n * @internal\n */\nexport function getCanonicalQuery(_a) {\n  var e_1, _b;\n  var _c = _a.query,\n    query = _c === void 0 ? {} : _c;\n  var keys = [];\n  var serialized = {};\n  var _loop_1 = function (key) {\n    if (key.toLowerCase() === SIGNATURE_HEADER) {\n      return \"continue\";\n    }\n    keys.push(key);\n    var value = query[key];\n    if (typeof value === \"string\") {\n      serialized[key] = escapeUri(key) + \"=\" + escapeUri(value);\n    } else if (Array.isArray(value)) {\n      serialized[key] = value.slice(0).sort().reduce(function (encoded, value) {\n        return encoded.concat([escapeUri(key) + \"=\" + escapeUri(value)]);\n      }, []).join(\"&\");\n    }\n  };\n  try {\n    for (var _d = __values(Object.keys(query).sort()), _e = _d.next(); !_e.done; _e = _d.next()) {\n      var key = _e.value;\n      _loop_1(key);\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_e && !_e.done && (_b = _d.return)) _b.call(_d);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n  return keys.map(function (key) {\n    return serialized[key];\n  }).filter(function (serialized) {\n    return serialized;\n  }) // omit any falsy values\n  .join(\"&\");\n}","map":{"version":3,"names":["escapeUri","SIGNATURE_HEADER","getCanonicalQuery","_a","_c","query","keys","serialized","key","toLowerCase","push","value","Array","isArray","slice","sort","reduce","encoded","concat","join","_d","__values","Object","_e","next","done","map","filter"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-sdk/signature-v4/src/getCanonicalQuery.ts"],"sourcesContent":["import { HttpRequest } from \"@aws-sdk/types\";\nimport { escapeUri } from \"@aws-sdk/util-uri-escape\";\n\nimport { SIGNATURE_HEADER } from \"./constants\";\n\n/**\n * @internal\n */\nexport function getCanonicalQuery({ query = {} }: HttpRequest): string {\n  const keys: Array<string> = [];\n  const serialized: { [key: string]: string } = {};\n  for (const key of Object.keys(query).sort()) {\n    if (key.toLowerCase() === SIGNATURE_HEADER) {\n      continue;\n    }\n\n    keys.push(key);\n    const value = query[key];\n    if (typeof value === \"string\") {\n      serialized[key] = `${escapeUri(key)}=${escapeUri(value)}`;\n    } else if (Array.isArray(value)) {\n      serialized[key] = value\n        .slice(0)\n        .sort()\n        .reduce(\n          (encoded: Array<string>, value: string) => encoded.concat([`${escapeUri(key)}=${escapeUri(value)}`]),\n          []\n        )\n        .join(\"&\");\n    }\n  }\n\n  return keys\n    .map((key) => serialized[key])\n    .filter((serialized) => serialized) // omit any falsy values\n    .join(\"&\");\n}\n"],"mappings":";AACA,SAASA,SAAS,QAAQ,0BAA0B;AAEpD,SAASC,gBAAgB,QAAQ,aAAa;AAE9C;;;AAGA,OAAM,SAAUC,iBAAiBA,CAACC,EAA2B;;MAAzBC,EAAA,GAAAD,EAAA,CAAAE,KAAU;IAAVA,KAAK,GAAAD,EAAA,cAAG,EAAE,GAAAA,EAAA;EAC5C,IAAME,IAAI,GAAkB,EAAE;EAC9B,IAAMC,UAAU,GAA8B,EAAE;0BACrCC,GAAG;IACZ,IAAIA,GAAG,CAACC,WAAW,EAAE,KAAKR,gBAAgB,EAAE;;;IAI5CK,IAAI,CAACI,IAAI,CAACF,GAAG,CAAC;IACd,IAAMG,KAAK,GAAGN,KAAK,CAACG,GAAG,CAAC;IACxB,IAAI,OAAOG,KAAK,KAAK,QAAQ,EAAE;MAC7BJ,UAAU,CAACC,GAAG,CAAC,GAAMR,SAAS,CAACQ,GAAG,CAAC,SAAIR,SAAS,CAACW,KAAK,CAAG;KAC1D,MAAM,IAAIC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,EAAE;MAC/BJ,UAAU,CAACC,GAAG,CAAC,GAAGG,KAAK,CACpBG,KAAK,CAAC,CAAC,CAAC,CACRC,IAAI,EAAE,CACNC,MAAM,CACL,UAACC,OAAsB,EAAEN,KAAa;QAAK,OAAAM,OAAO,CAACC,MAAM,CAAC,CAAIlB,SAAS,CAACQ,GAAG,CAAC,SAAIR,SAAS,CAACW,KAAK,CAAG,CAAC,CAAC;MAAzD,CAAyD,EACpG,EAAE,CACH,CACAQ,IAAI,CAAC,GAAG,CAAC;;;;IAjBhB,KAAkB,IAAAC,EAAA,GAAAC,QAAA,CAAAC,MAAM,CAAChB,IAAI,CAACD,KAAK,CAAC,CAACU,IAAI,EAAE,GAAAQ,EAAA,GAAAH,EAAA,CAAAI,IAAA,KAAAD,EAAA,CAAAE,IAAA,EAAAF,EAAA,GAAAH,EAAA,CAAAI,IAAA;MAAtC,IAAMhB,GAAG,GAAAe,EAAA,CAAAZ,KAAA;cAAHH,GAAG;;;;;;;;;;;;;EAqBd,OAAOF,IAAI,CACRoB,GAAG,CAAC,UAAClB,GAAG;IAAK,OAAAD,UAAU,CAACC,GAAG,CAAC;EAAf,CAAe,CAAC,CAC7BmB,MAAM,CAAC,UAACpB,UAAU;IAAK,OAAAA,UAAU;EAAV,CAAU,CAAC,CAAC;EAAA,CACnCY,IAAI,CAAC,GAAG,CAAC;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}