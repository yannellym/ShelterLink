{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { GetDocumentAnalysisRequest, GetDocumentAnalysisResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1GetDocumentAnalysisCommand, serializeAws_json1_1GetDocumentAnalysisCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Gets the results for an Amazon Textract asynchronous operation that analyzes text in a document.</p>\n *          <p>You start asynchronous text analysis by calling <a>StartDocumentAnalysis</a>, which returns a job identifier\n *             (<code>JobId</code>). When the text analysis operation finishes, Amazon Textract publishes a\n *          completion status to the Amazon Simple Notification Service (Amazon SNS) topic that's registered in the initial call to\n *             <code>StartDocumentAnalysis</code>. To get the results of the text-detection operation,\n *          first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>.\n *          If so, call <code>GetDocumentAnalysis</code>, and pass the job identifier\n *             (<code>JobId</code>) from the initial call to <code>StartDocumentAnalysis</code>.</p>\n *          <p>\n *             <code>GetDocumentAnalysis</code> returns an array of <a>Block</a> objects. The following\n *          types of information are returned: </p>\n *          <ul>\n *             <li>\n *                <p>Form data (key-value pairs). The related information is returned in two <a>Block</a> objects, each of type <code>KEY_VALUE_SET</code>: a KEY\n *             <code>Block</code> object and a VALUE <code>Block</code> object. For example,\n *             <i>Name: Ana Silva Carolina</i> contains a key and value.\n *             <i>Name:</i> is the key. <i>Ana Silva Carolina</i> is\n *             the value.</p>\n *             </li>\n *             <li>\n *                <p>Table and table cell data. A TABLE <code>Block</code> object contains information about a detected table. A CELL\n *             <code>Block</code> object is returned for each cell in a table.</p>\n *             </li>\n *             <li>\n *                <p>Lines and words of text. A LINE <code>Block</code> object contains one or more WORD <code>Block</code> objects.\n *             All lines and words that are detected in the document are returned (including text that doesn't have a\n *             relationship with the value of the <code>StartDocumentAnalysis</code>\n *                   <code>FeatureTypes</code> input parameter). </p>\n *             </li>\n *          </ul>\n *\n *          <p>Selection elements such as check boxes and option buttons (radio buttons) can be detected in form data and in tables.\n *          A SELECTION_ELEMENT <code>Block</code> object contains information about a selection element,\n *          including the selection status.</p>\n *\n *\n *\n *          <p>Use the <code>MaxResults</code> parameter to limit the number of blocks that are\n *          returned. If there are more results than specified in <code>MaxResults</code>, the value of\n *             <code>NextToken</code> in the operation response contains a pagination token for getting\n *          the next set of results. To get the next page of results, call\n *             <code>GetDocumentAnalysis</code>, and populate the <code>NextToken</code> request\n *          parameter with the token value that's returned from the previous call to\n *             <code>GetDocumentAnalysis</code>.</p>\n *          <p>For more information, see <a href=\"https://docs.aws.amazon.com/textract/latest/dg/how-it-works-analyzing.html\">Document Text Analysis</a>.</p>\n */\nvar GetDocumentAnalysisCommand = /** @class */function (_super) {\n  __extends(GetDocumentAnalysisCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function GetDocumentAnalysisCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  GetDocumentAnalysisCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"TextractClient\";\n    var commandName = \"GetDocumentAnalysisCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: GetDocumentAnalysisRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: GetDocumentAnalysisResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  GetDocumentAnalysisCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1GetDocumentAnalysisCommand(input, context);\n  };\n  GetDocumentAnalysisCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1GetDocumentAnalysisCommand(output, context);\n  };\n  return GetDocumentAnalysisCommand;\n}($Command);\nexport { GetDocumentAnalysisCommand };","map":{"version":3,"names":["GetDocumentAnalysisRequest","GetDocumentAnalysisResponse","deserializeAws_json1_1GetDocumentAnalysisCommand","serializeAws_json1_1GetDocumentAnalysisCommand","getSerdePlugin","Command","$Command","GetDocumentAnalysisCommand","_super","__extends","input","_this","call","prototype","resolveMiddleware","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","logger","clientName","commandName","handlerExecutionContext","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","requestHandler","resolve","request","handle","context","output"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-sdk/client-textract/commands/GetDocumentAnalysisCommand.ts"],"sourcesContent":["import { ServiceInputTypes, ServiceOutputTypes, TextractClientResolvedConfig } from \"../TextractClient\";\nimport { GetDocumentAnalysisRequest, GetDocumentAnalysisResponse } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1GetDocumentAnalysisCommand,\n  serializeAws_json1_1GetDocumentAnalysisCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type GetDocumentAnalysisCommandInput = GetDocumentAnalysisRequest;\nexport type GetDocumentAnalysisCommandOutput = GetDocumentAnalysisResponse & __MetadataBearer;\n\n/**\n * <p>Gets the results for an Amazon Textract asynchronous operation that analyzes text in a document.</p>\n *          <p>You start asynchronous text analysis by calling <a>StartDocumentAnalysis</a>, which returns a job identifier\n *             (<code>JobId</code>). When the text analysis operation finishes, Amazon Textract publishes a\n *          completion status to the Amazon Simple Notification Service (Amazon SNS) topic that's registered in the initial call to\n *             <code>StartDocumentAnalysis</code>. To get the results of the text-detection operation,\n *          first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>.\n *          If so, call <code>GetDocumentAnalysis</code>, and pass the job identifier\n *             (<code>JobId</code>) from the initial call to <code>StartDocumentAnalysis</code>.</p>\n *          <p>\n *             <code>GetDocumentAnalysis</code> returns an array of <a>Block</a> objects. The following\n *          types of information are returned: </p>\n *          <ul>\n *             <li>\n *                <p>Form data (key-value pairs). The related information is returned in two <a>Block</a> objects, each of type <code>KEY_VALUE_SET</code>: a KEY\n *             <code>Block</code> object and a VALUE <code>Block</code> object. For example,\n *             <i>Name: Ana Silva Carolina</i> contains a key and value.\n *             <i>Name:</i> is the key. <i>Ana Silva Carolina</i> is\n *             the value.</p>\n *             </li>\n *             <li>\n *                <p>Table and table cell data. A TABLE <code>Block</code> object contains information about a detected table. A CELL\n *             <code>Block</code> object is returned for each cell in a table.</p>\n *             </li>\n *             <li>\n *                <p>Lines and words of text. A LINE <code>Block</code> object contains one or more WORD <code>Block</code> objects.\n *             All lines and words that are detected in the document are returned (including text that doesn't have a\n *             relationship with the value of the <code>StartDocumentAnalysis</code>\n *                   <code>FeatureTypes</code> input parameter). </p>\n *             </li>\n *          </ul>\n *\n *          <p>Selection elements such as check boxes and option buttons (radio buttons) can be detected in form data and in tables.\n *          A SELECTION_ELEMENT <code>Block</code> object contains information about a selection element,\n *          including the selection status.</p>\n *\n *\n *\n *          <p>Use the <code>MaxResults</code> parameter to limit the number of blocks that are\n *          returned. If there are more results than specified in <code>MaxResults</code>, the value of\n *             <code>NextToken</code> in the operation response contains a pagination token for getting\n *          the next set of results. To get the next page of results, call\n *             <code>GetDocumentAnalysis</code>, and populate the <code>NextToken</code> request\n *          parameter with the token value that's returned from the previous call to\n *             <code>GetDocumentAnalysis</code>.</p>\n *          <p>For more information, see <a href=\"https://docs.aws.amazon.com/textract/latest/dg/how-it-works-analyzing.html\">Document Text Analysis</a>.</p>\n */\nexport class GetDocumentAnalysisCommand extends $Command<\n  GetDocumentAnalysisCommandInput,\n  GetDocumentAnalysisCommandOutput,\n  TextractClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: GetDocumentAnalysisCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: TextractClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<GetDocumentAnalysisCommandInput, GetDocumentAnalysisCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"TextractClient\";\n    const commandName = \"GetDocumentAnalysisCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: GetDocumentAnalysisRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: GetDocumentAnalysisResponse.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: GetDocumentAnalysisCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1GetDocumentAnalysisCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<GetDocumentAnalysisCommandOutput> {\n    return deserializeAws_json1_1GetDocumentAnalysisCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"],"mappings":";AACA,SAASA,0BAA0B,EAAEC,2BAA2B,QAAQ,oBAAoB;AAC5F,SACEC,gDAAgD,EAChDC,8CAA8C,QACzC,0BAA0B;AACjC,SAASC,cAAc,QAAQ,2BAA2B;AAE1D,SAASC,OAAO,IAAIC,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CA,IAAAC,0BAAA,0BAAAC,MAAA;EAAgDC,SAAA,CAAAF,0BAAA,EAAAC,MAAA;EAK9C;EACA;EAEA,SAAAD,2BAAqBG,KAAsC;IAA3D,IAAAC,KAAA;IACE;IACAH,MAAA,CAAAI,IAAA,MAAO;IAFYD,KAAA,CAAAD,KAAK,GAALA,KAAK;;IAGxB;EACF;EAEA;;;EAGAH,0BAAA,CAAAM,SAAA,CAAAC,iBAAiB,GAAjB,UACEC,WAAmE,EACnEC,aAA2C,EAC3CC,OAA8B;IAE9B,IAAI,CAACC,eAAe,CAACC,GAAG,CAACf,cAAc,CAACY,aAAa,EAAE,IAAI,CAACI,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CAAC;IAEzF,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAM,CAAC,IAAI,CAACL,eAAe,CAAC;IAE9C,IAAAM,MAAM,GAAKR,aAAa,CAAAQ,MAAlB;IACd,IAAMC,UAAU,GAAG,gBAAgB;IACnC,IAAMC,WAAW,GAAG,4BAA4B;IAChD,IAAMC,uBAAuB,GAA4B;MACvDH,MAAM,EAAAA,MAAA;MACNC,UAAU,EAAAA,UAAA;MACVC,WAAW,EAAAA,WAAA;MACXE,uBAAuB,EAAE5B,0BAA0B,CAAC6B,kBAAkB;MACtEC,wBAAwB,EAAE7B,2BAA2B,CAAC4B;KACvD;IACO,IAAAE,cAAc,GAAKf,aAAa,CAAAe,cAAlB;IACtB,OAAOT,KAAK,CAACU,OAAO,CAClB,UAACC,OAAsC;MACrC,OAAAF,cAAc,CAACG,MAAM,CAACD,OAAO,CAACA,OAAwB,EAAEhB,OAAO,IAAI,EAAE,CAAC;IAAtE,CAAsE,EACxEU,uBAAuB,CACxB;EACH,CAAC;EAEOpB,0BAAA,CAAAM,SAAA,CAAAO,SAAS,GAAjB,UAAkBV,KAAsC,EAAEyB,OAAuB;IAC/E,OAAOhC,8CAA8C,CAACO,KAAK,EAAEyB,OAAO,CAAC;EACvE,CAAC;EAEO5B,0BAAA,CAAAM,SAAA,CAAAQ,WAAW,GAAnB,UAAoBe,MAAsB,EAAED,OAAuB;IACjE,OAAOjC,gDAAgD,CAACkC,MAAM,EAAED,OAAO,CAAC;EAC1E,CAAC;EAIH,OAAA5B,0BAAC;AAAD,CAAC,CAtD+CD,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}