{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __assign, __awaiter, __extends, __generator } from \"tslib\";\nimport { getInAppMessages } from '@aws-amplify/core/internals/aws-clients/pinpoint';\nimport { addEventListener, AWSPinpointProviderCommon } from '../../../common';\nimport SessionTracker from '../../SessionTracker';\nimport { InAppMessageInteractionEvent } from '../../types';\nimport { AWSPinpointMessageEvent } from './types';\nimport { clearMemo, dispatchInAppMessagingEvent, extractContent, extractMetadata, getStartOfDay, interpretLayout, isBeforeEndDate, logger, matchesAttributes, matchesEventType, matchesMetrics, recordAnalyticsEvent } from './utils';\nvar MESSAGE_DAILY_COUNT_KEY = 'pinpointProvider_inAppMessages_dailyCount';\nvar MESSAGE_TOTAL_COUNT_KEY = 'pinpointProvider_inAppMessages_totalCount';\nvar AWSPinpointProvider = /** @class */function (_super) {\n  __extends(AWSPinpointProvider, _super);\n  function AWSPinpointProvider() {\n    var _this = _super.call(this, logger) || this;\n    _this.configured = false;\n    _this.configure = function (config) {\n      if (config === void 0) {\n        config = {};\n      }\n      _this.config = __assign(__assign({}, _super.prototype.configure.call(_this, config)), {\n        endpointInfo: {\n          channelType: 'IN_APP'\n        }\n      });\n      // some configuration steps should not be re-run even if provider is re-configured for some reason\n      if (!_this.configured) {\n        _this.sessionTracker = new SessionTracker(_this.sessionStateChangeHandler);\n        _this.sessionTracker.start();\n        // wire up default Pinpoint message event handling\n        addEventListener(InAppMessageInteractionEvent.MESSAGE_DISPLAYED, function (message) {\n          _this.recordMessageEvent(message, AWSPinpointMessageEvent.MESSAGE_DISPLAYED);\n        });\n        addEventListener(InAppMessageInteractionEvent.MESSAGE_DISMISSED, function (message) {\n          _this.recordMessageEvent(message, AWSPinpointMessageEvent.MESSAGE_DISMISSED);\n        });\n        addEventListener(InAppMessageInteractionEvent.MESSAGE_ACTION_TAKEN, function (message) {\n          _this.recordMessageEvent(message, AWSPinpointMessageEvent.MESSAGE_ACTION_TAKEN);\n        });\n      }\n      _this.configured = true;\n      dispatchInAppMessagingEvent('pinpointProvider_configured', null);\n      return _this.config;\n    };\n    _this.getInAppMessages = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _a, appId, credentials, endpointId, region, input, response, messages, err_1;\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              if (!!this.initialized) return [3 /*break*/, 2];\n              return [4 /*yield*/, this.init()];\n            case 1:\n              _b.sent();\n              _b.label = 2;\n            case 2:\n              // There is no way to granuarly reconcile the filter memoization as the keys are composited from a message id and\n              // event properties thus opting to just clear them out when getting messages rather than leave potentially\n              // obsolete entries that will no longer serve any purpose.\n              clearMemo();\n              _b.label = 3;\n            case 3:\n              _b.trys.push([3, 6,, 7]);\n              return [4 /*yield*/, this.updateEndpoint()];\n            case 4:\n              _b.sent();\n              _a = this.config, appId = _a.appId, credentials = _a.credentials, endpointId = _a.endpointId, region = _a.region;\n              input = {\n                ApplicationId: appId,\n                EndpointId: endpointId\n              };\n              this.logger.debug('getting in-app messages');\n              return [4 /*yield*/, getInAppMessages({\n                credentials: credentials,\n                region: region\n              }, input)];\n            case 5:\n              response = _b.sent();\n              messages = response.InAppMessagesResponse.InAppMessageCampaigns;\n              dispatchInAppMessagingEvent('getInAppMessages', messages);\n              return [2 /*return*/, messages];\n            case 6:\n              err_1 = _b.sent();\n              this.logger.error('Error getting in-app messages', err_1);\n              throw err_1;\n            case 7:\n              return [2 /*return*/];\n          }\n        });\n      });\n    };\n\n    _this.processInAppMessages = function (messages, event) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var highestPrioritySeen;\n        var _this = this;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (!!this.initialized) return [3 /*break*/, 2];\n              return [4 /*yield*/, this.init()];\n            case 1:\n              _a.sent();\n              _a.label = 2;\n            case 2:\n              return [2 /*return*/, this.normalizeMessages(messages.reduce(function (acc, message) {\n                var messageQualifies = matchesEventType(message, event) && matchesAttributes(message, event) && matchesMetrics(message, event) && isBeforeEndDate(message) && _this.isBelowCap(message);\n                // filter all qualifying messages returning only those that are of (relative) highest priority\n                if (messageQualifies) {\n                  // have not yet encountered message with priority\n                  if (!highestPrioritySeen) {\n                    // this message has priority, so reset the accumulator with this message only\n                    if (message.Priority) {\n                      highestPrioritySeen = message.Priority;\n                      return [message];\n                    } else {\n                      // this message also has no priority, so just add this message to accumulator\n                      acc.push(message);\n                    }\n                    // have previously encountered message with priority, so only messages with priority matter now\n                  } else if (message.Priority) {\n                    // this message has higher priority (lower number), so reset the accumulator with this message only\n                    if (message.Priority < highestPrioritySeen) {\n                      highestPrioritySeen = message.Priority;\n                      return [message];\n                      // this message has the same priority, so just add this message to accumulator\n                    } else if (message.Priority === highestPrioritySeen) {\n                      acc.push(message);\n                    }\n                  }\n                }\n                return acc;\n              }, []))];\n          }\n        });\n      });\n    };\n    _this.sessionStateChangeHandler = function (state) {\n      if (state === 'started') {\n        // reset all session counts\n        _this.sessionMessageCountMap = {};\n      }\n    };\n    _this.isBelowCap = function (_a) {\n      var CampaignId = _a.CampaignId,\n        SessionCap = _a.SessionCap,\n        DailyCap = _a.DailyCap,\n        TotalCap = _a.TotalCap;\n      var _b = _this.getMessageCounts(CampaignId),\n        sessionCount = _b.sessionCount,\n        dailyCount = _b.dailyCount,\n        totalCount = _b.totalCount;\n      return (!SessionCap || sessionCount < SessionCap) && (!DailyCap || dailyCount < DailyCap) && (!TotalCap || totalCount < TotalCap);\n    };\n    // Use the current session count in memory or initialize as empty count\n    _this.getSessionCount = function (messageId) {\n      return _this.sessionMessageCountMap[messageId] || 0;\n    };\n    _this.getDailyCount = function () {\n      var storage = _this.config.storage;\n      var today = getStartOfDay();\n      var item = storage.getItem(MESSAGE_DAILY_COUNT_KEY);\n      // Parse stored count or initialize as empty count\n      var counter = item ? JSON.parse(item) : {\n        count: 0,\n        lastCountTimestamp: today\n      };\n      // If the stored counter timestamp is today, use it as the count, otherwise reset to 0\n      return counter.lastCountTimestamp === today ? counter.count : 0;\n    };\n    _this.getTotalCountMap = function () {\n      var storage = _this.config.storage;\n      var item = storage.getItem(MESSAGE_TOTAL_COUNT_KEY);\n      // Parse stored count map or initialize as empty\n      return item ? JSON.parse(item) : {};\n    };\n    _this.getTotalCount = function (messageId) {\n      var countMap = _this.getTotalCountMap();\n      // Return stored count or initialize as empty count\n      return countMap[messageId] || 0;\n    };\n    _this.getMessageCounts = function (messageId) {\n      try {\n        return {\n          sessionCount: _this.getSessionCount(messageId),\n          dailyCount: _this.getDailyCount(),\n          totalCount: _this.getTotalCount(messageId)\n        };\n      } catch (err) {\n        _this.logger.error('Failed to get message counts from storage', err);\n      }\n    };\n    _this.setSessionCount = function (messageId, count) {\n      _this.sessionMessageCountMap[messageId] = count;\n    };\n    _this.setDailyCount = function (count) {\n      var storage = _this.config.storage;\n      var dailyCount = {\n        count: count,\n        lastCountTimestamp: getStartOfDay()\n      };\n      try {\n        storage.setItem(MESSAGE_DAILY_COUNT_KEY, JSON.stringify(dailyCount));\n      } catch (err) {\n        _this.logger.error('Failed to save daily message count to storage', err);\n      }\n    };\n    _this.setTotalCountMap = function (countMap) {\n      var storage = _this.config.storage;\n      try {\n        storage.setItem(MESSAGE_TOTAL_COUNT_KEY, JSON.stringify(countMap));\n      } catch (err) {\n        _this.logger.error('Failed to save total count to storage', err);\n      }\n    };\n    _this.setTotalCount = function (messageId, count) {\n      var _a;\n      var updatedMap = __assign(__assign({}, _this.getTotalCountMap()), (_a = {}, _a[messageId] = count, _a));\n      _this.setTotalCountMap(updatedMap);\n    };\n    _this.incrementCounts = function (messageId) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _a, sessionCount, dailyCount, totalCount;\n        return __generator(this, function (_b) {\n          _a = this.getMessageCounts(messageId), sessionCount = _a.sessionCount, dailyCount = _a.dailyCount, totalCount = _a.totalCount;\n          this.setSessionCount(messageId, sessionCount + 1);\n          this.setDailyCount(dailyCount + 1);\n          this.setTotalCount(messageId, totalCount + 1);\n          return [2 /*return*/];\n        });\n      });\n    };\n\n    _this.normalizeMessages = function (messages) {\n      return messages.map(function (message) {\n        var CampaignId = message.CampaignId,\n          InAppMessage = message.InAppMessage;\n        return {\n          id: CampaignId,\n          content: extractContent(message),\n          layout: interpretLayout(InAppMessage.Layout),\n          metadata: extractMetadata(message)\n        };\n      });\n    };\n    _this.recordMessageEvent = function (message, event) {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (!!this.initialized) return [3 /*break*/, 2];\n              return [4 /*yield*/, this.init()];\n            case 1:\n              _a.sent();\n              _a.label = 2;\n            case 2:\n              recordAnalyticsEvent(event, message);\n              if (!(event === AWSPinpointMessageEvent.MESSAGE_DISPLAYED)) return [3 /*break*/, 4];\n              return [4 /*yield*/, this.incrementCounts(message.id)];\n            case 3:\n              _a.sent();\n              _a.label = 4;\n            case 4:\n              return [2 /*return*/];\n          }\n        });\n      });\n    };\n\n    _this.sessionMessageCountMap = {};\n    return _this;\n  }\n  /**\n   * get the sub-category of the plugin\n   */\n  AWSPinpointProvider.prototype.getSubCategory = function () {\n    return AWSPinpointProvider.subCategory;\n  };\n  AWSPinpointProvider.subCategory = 'InAppMessaging';\n  return AWSPinpointProvider;\n}(AWSPinpointProviderCommon);\nexport default AWSPinpointProvider;","map":{"version":3,"names":["getInAppMessages","addEventListener","AWSPinpointProviderCommon","SessionTracker","InAppMessageInteractionEvent","AWSPinpointMessageEvent","clearMemo","dispatchInAppMessagingEvent","extractContent","extractMetadata","getStartOfDay","interpretLayout","isBeforeEndDate","logger","matchesAttributes","matchesEventType","matchesMetrics","recordAnalyticsEvent","MESSAGE_DAILY_COUNT_KEY","MESSAGE_TOTAL_COUNT_KEY","AWSPinpointProvider","_super","__extends","_this","call","configured","configure","config","__assign","prototype","endpointInfo","channelType","sessionTracker","sessionStateChangeHandler","start","MESSAGE_DISPLAYED","message","recordMessageEvent","MESSAGE_DISMISSED","MESSAGE_ACTION_TAKEN","__awaiter","initialized","init","_b","sent","updateEndpoint","_a","appId","credentials","endpointId","region","input","ApplicationId","EndpointId","debug","response","messages","InAppMessagesResponse","InAppMessageCampaigns","error","err_1","processInAppMessages","event","normalizeMessages","reduce","acc","messageQualifies","isBelowCap","highestPrioritySeen","Priority","push","state","sessionMessageCountMap","CampaignId","SessionCap","DailyCap","TotalCap","getMessageCounts","sessionCount","dailyCount","totalCount","getSessionCount","messageId","getDailyCount","storage","today","item","getItem","counter","JSON","parse","count","lastCountTimestamp","getTotalCountMap","getTotalCount","countMap","err","setSessionCount","setDailyCount","setItem","stringify","setTotalCountMap","setTotalCount","updatedMap","incrementCounts","map","InAppMessage","id","content","layout","Layout","metadata","getSubCategory","subCategory"],"sources":["../../../../src/InAppMessaging/Providers/AWSPinpointProvider/index.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}