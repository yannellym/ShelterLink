{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nvar TRACE_ID_HEADER_NAME = \"X-Amzn-Trace-Id\";\nvar ENV_LAMBDA_FUNCTION_NAME = \"AWS_LAMBDA_FUNCTION_NAME\";\nvar ENV_TRACE_ID = \"_X_AMZN_TRACE_ID\";\nexport var recursionDetectionMiddleware = function (options) {\n  return function (next) {\n    return function (args) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var request, functionName, traceId, nonEmptyString;\n        return __generator(this, function (_a) {\n          request = args.request;\n          if (!HttpRequest.isInstance(request) || options.runtime !== \"node\" || request.headers.hasOwnProperty(TRACE_ID_HEADER_NAME)) {\n            return [2, next(args)];\n          }\n          functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];\n          traceId = process.env[ENV_TRACE_ID];\n          nonEmptyString = function (str) {\n            return typeof str === \"string\" && str.length > 0;\n          };\n          if (nonEmptyString(functionName) && nonEmptyString(traceId)) {\n            request.headers[TRACE_ID_HEADER_NAME] = traceId;\n          }\n          return [2, next(__assign(__assign({}, args), {\n            request: request\n          }))];\n        });\n      });\n    };\n  };\n};\nexport var addRecursionDetectionMiddlewareOptions = {\n  step: \"build\",\n  tags: [\"RECURSION_DETECTION\"],\n  name: \"recursionDetectionMiddleware\",\n  override: true,\n  priority: \"low\"\n};\nexport var getRecursionDetectionPlugin = function (options) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.add(recursionDetectionMiddleware(options), addRecursionDetectionMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"names":["__assign","__awaiter","__generator","HttpRequest","TRACE_ID_HEADER_NAME","ENV_LAMBDA_FUNCTION_NAME","ENV_TRACE_ID","recursionDetectionMiddleware","options","next","args","request","functionName","traceId","nonEmptyString","_a","isInstance","runtime","headers","hasOwnProperty","process","env","str","length","addRecursionDetectionMiddlewareOptions","step","tags","name","override","priority","getRecursionDetectionPlugin","applyToStack","clientStack","add"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-sdk/middleware-recursion-detection/dist-es/index.js"],"sourcesContent":["import { __assign, __awaiter, __generator } from \"tslib\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nvar TRACE_ID_HEADER_NAME = \"X-Amzn-Trace-Id\";\nvar ENV_LAMBDA_FUNCTION_NAME = \"AWS_LAMBDA_FUNCTION_NAME\";\nvar ENV_TRACE_ID = \"_X_AMZN_TRACE_ID\";\nexport var recursionDetectionMiddleware = function (options) {\n    return function (next) {\n        return function (args) { return __awaiter(void 0, void 0, void 0, function () {\n            var request, functionName, traceId, nonEmptyString;\n            return __generator(this, function (_a) {\n                request = args.request;\n                if (!HttpRequest.isInstance(request) ||\n                    options.runtime !== \"node\" ||\n                    request.headers.hasOwnProperty(TRACE_ID_HEADER_NAME)) {\n                    return [2, next(args)];\n                }\n                functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];\n                traceId = process.env[ENV_TRACE_ID];\n                nonEmptyString = function (str) { return typeof str === \"string\" && str.length > 0; };\n                if (nonEmptyString(functionName) && nonEmptyString(traceId)) {\n                    request.headers[TRACE_ID_HEADER_NAME] = traceId;\n                }\n                return [2, next(__assign(__assign({}, args), { request: request }))];\n            });\n        }); };\n    };\n};\nexport var addRecursionDetectionMiddlewareOptions = {\n    step: \"build\",\n    tags: [\"RECURSION_DETECTION\"],\n    name: \"recursionDetectionMiddleware\",\n    override: true,\n    priority: \"low\",\n};\nexport var getRecursionDetectionPlugin = function (options) { return ({\n    applyToStack: function (clientStack) {\n        clientStack.add(recursionDetectionMiddleware(options), addRecursionDetectionMiddlewareOptions);\n    },\n}); };\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACxD,SAASC,WAAW,QAAQ,wBAAwB;AACpD,IAAIC,oBAAoB,GAAG,iBAAiB;AAC5C,IAAIC,wBAAwB,GAAG,0BAA0B;AACzD,IAAIC,YAAY,GAAG,kBAAkB;AACrC,OAAO,IAAIC,4BAA4B,GAAG,SAAAA,CAAUC,OAAO,EAAE;EACzD,OAAO,UAAUC,IAAI,EAAE;IACnB,OAAO,UAAUC,IAAI,EAAE;MAAE,OAAOT,SAAS,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,YAAY;QAC1E,IAAIU,OAAO,EAAEC,YAAY,EAAEC,OAAO,EAAEC,cAAc;QAClD,OAAOZ,WAAW,CAAC,IAAI,EAAE,UAAUa,EAAE,EAAE;UACnCJ,OAAO,GAAGD,IAAI,CAACC,OAAO;UACtB,IAAI,CAACR,WAAW,CAACa,UAAU,CAACL,OAAO,CAAC,IAChCH,OAAO,CAACS,OAAO,KAAK,MAAM,IAC1BN,OAAO,CAACO,OAAO,CAACC,cAAc,CAACf,oBAAoB,CAAC,EAAE;YACtD,OAAO,CAAC,CAAC,EAAEK,IAAI,CAACC,IAAI,CAAC,CAAC;UAC1B;UACAE,YAAY,GAAGQ,OAAO,CAACC,GAAG,CAAChB,wBAAwB,CAAC;UACpDQ,OAAO,GAAGO,OAAO,CAACC,GAAG,CAACf,YAAY,CAAC;UACnCQ,cAAc,GAAG,SAAAA,CAAUQ,GAAG,EAAE;YAAE,OAAO,OAAOA,GAAG,KAAK,QAAQ,IAAIA,GAAG,CAACC,MAAM,GAAG,CAAC;UAAE,CAAC;UACrF,IAAIT,cAAc,CAACF,YAAY,CAAC,IAAIE,cAAc,CAACD,OAAO,CAAC,EAAE;YACzDF,OAAO,CAACO,OAAO,CAACd,oBAAoB,CAAC,GAAGS,OAAO;UACnD;UACA,OAAO,CAAC,CAAC,EAAEJ,IAAI,CAACT,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAEU,IAAI,CAAC,EAAE;YAAEC,OAAO,EAAEA;UAAQ,CAAC,CAAC,CAAC,CAAC;QACxE,CAAC,CAAC;MACN,CAAC,CAAC;IAAE,CAAC;EACT,CAAC;AACL,CAAC;AACD,OAAO,IAAIa,sCAAsC,GAAG;EAChDC,IAAI,EAAE,OAAO;EACbC,IAAI,EAAE,CAAC,qBAAqB,CAAC;EAC7BC,IAAI,EAAE,8BAA8B;EACpCC,QAAQ,EAAE,IAAI;EACdC,QAAQ,EAAE;AACd,CAAC;AACD,OAAO,IAAIC,2BAA2B,GAAG,SAAAA,CAAUtB,OAAO,EAAE;EAAE,OAAQ;IAClEuB,YAAY,EAAE,SAAAA,CAAUC,WAAW,EAAE;MACjCA,WAAW,CAACC,GAAG,CAAC1B,4BAA4B,CAACC,OAAO,CAAC,EAAEgB,sCAAsC,CAAC;IAClG;EACJ,CAAC;AAAG,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}