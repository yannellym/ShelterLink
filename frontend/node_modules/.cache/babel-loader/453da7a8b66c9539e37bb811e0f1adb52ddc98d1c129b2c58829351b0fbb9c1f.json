{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { RekognitionClient } from \"./RekognitionClient\";\nimport { CompareFacesCommand } from \"./commands/CompareFacesCommand\";\nimport { CreateCollectionCommand } from \"./commands/CreateCollectionCommand\";\nimport { CreateProjectCommand } from \"./commands/CreateProjectCommand\";\nimport { CreateProjectVersionCommand } from \"./commands/CreateProjectVersionCommand\";\nimport { CreateStreamProcessorCommand } from \"./commands/CreateStreamProcessorCommand\";\nimport { DeleteCollectionCommand } from \"./commands/DeleteCollectionCommand\";\nimport { DeleteFacesCommand } from \"./commands/DeleteFacesCommand\";\nimport { DeleteProjectCommand } from \"./commands/DeleteProjectCommand\";\nimport { DeleteProjectVersionCommand } from \"./commands/DeleteProjectVersionCommand\";\nimport { DeleteStreamProcessorCommand } from \"./commands/DeleteStreamProcessorCommand\";\nimport { DescribeCollectionCommand } from \"./commands/DescribeCollectionCommand\";\nimport { DescribeProjectVersionsCommand } from \"./commands/DescribeProjectVersionsCommand\";\nimport { DescribeProjectsCommand } from \"./commands/DescribeProjectsCommand\";\nimport { DescribeStreamProcessorCommand } from \"./commands/DescribeStreamProcessorCommand\";\nimport { DetectCustomLabelsCommand } from \"./commands/DetectCustomLabelsCommand\";\nimport { DetectFacesCommand } from \"./commands/DetectFacesCommand\";\nimport { DetectLabelsCommand } from \"./commands/DetectLabelsCommand\";\nimport { DetectModerationLabelsCommand } from \"./commands/DetectModerationLabelsCommand\";\nimport { DetectProtectiveEquipmentCommand } from \"./commands/DetectProtectiveEquipmentCommand\";\nimport { DetectTextCommand } from \"./commands/DetectTextCommand\";\nimport { GetCelebrityInfoCommand } from \"./commands/GetCelebrityInfoCommand\";\nimport { GetCelebrityRecognitionCommand } from \"./commands/GetCelebrityRecognitionCommand\";\nimport { GetContentModerationCommand } from \"./commands/GetContentModerationCommand\";\nimport { GetFaceDetectionCommand } from \"./commands/GetFaceDetectionCommand\";\nimport { GetFaceSearchCommand } from \"./commands/GetFaceSearchCommand\";\nimport { GetLabelDetectionCommand } from \"./commands/GetLabelDetectionCommand\";\nimport { GetPersonTrackingCommand } from \"./commands/GetPersonTrackingCommand\";\nimport { GetSegmentDetectionCommand } from \"./commands/GetSegmentDetectionCommand\";\nimport { GetTextDetectionCommand } from \"./commands/GetTextDetectionCommand\";\nimport { IndexFacesCommand } from \"./commands/IndexFacesCommand\";\nimport { ListCollectionsCommand } from \"./commands/ListCollectionsCommand\";\nimport { ListFacesCommand } from \"./commands/ListFacesCommand\";\nimport { ListStreamProcessorsCommand } from \"./commands/ListStreamProcessorsCommand\";\nimport { RecognizeCelebritiesCommand } from \"./commands/RecognizeCelebritiesCommand\";\nimport { SearchFacesByImageCommand } from \"./commands/SearchFacesByImageCommand\";\nimport { SearchFacesCommand } from \"./commands/SearchFacesCommand\";\nimport { StartCelebrityRecognitionCommand } from \"./commands/StartCelebrityRecognitionCommand\";\nimport { StartContentModerationCommand } from \"./commands/StartContentModerationCommand\";\nimport { StartFaceDetectionCommand } from \"./commands/StartFaceDetectionCommand\";\nimport { StartFaceSearchCommand } from \"./commands/StartFaceSearchCommand\";\nimport { StartLabelDetectionCommand } from \"./commands/StartLabelDetectionCommand\";\nimport { StartPersonTrackingCommand } from \"./commands/StartPersonTrackingCommand\";\nimport { StartProjectVersionCommand } from \"./commands/StartProjectVersionCommand\";\nimport { StartSegmentDetectionCommand } from \"./commands/StartSegmentDetectionCommand\";\nimport { StartStreamProcessorCommand } from \"./commands/StartStreamProcessorCommand\";\nimport { StartTextDetectionCommand } from \"./commands/StartTextDetectionCommand\";\nimport { StopProjectVersionCommand } from \"./commands/StopProjectVersionCommand\";\nimport { StopStreamProcessorCommand } from \"./commands/StopStreamProcessorCommand\";\n/**\n * <p>This is the Amazon Rekognition API reference.</p>\n */\nvar Rekognition = /** @class */function (_super) {\n  __extends(Rekognition, _super);\n  function Rekognition() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Rekognition.prototype.compareFaces = function (args, optionsOrCb, cb) {\n    var command = new CompareFacesCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Rekognition.prototype.createCollection = function (args, optionsOrCb, cb) {\n    var command = new CreateCollectionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Rekognition.prototype.createProject = function (args, optionsOrCb, cb) {\n    var command = new CreateProjectCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Rekognition.prototype.createProjectVersion = function (args, optionsOrCb, cb) {\n    var command = new CreateProjectVersionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Rekognition.prototype.createStreamProcessor = function (args, optionsOrCb, cb) {\n    var command = new CreateStreamProcessorCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Rekognition.prototype.deleteCollection = function (args, optionsOrCb, cb) {\n    var command = new DeleteCollectionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Rekognition.prototype.deleteFaces = function (args, optionsOrCb, cb) {\n    var command = new DeleteFacesCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Rekognition.prototype.deleteProject = function (args, optionsOrCb, cb) {\n    var command = new DeleteProjectCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Rekognition.prototype.deleteProjectVersion = function (args, optionsOrCb, cb) {\n    var command = new DeleteProjectVersionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Rekognition.prototype.deleteStreamProcessor = function (args, optionsOrCb, cb) {\n    var command = new DeleteStreamProcessorCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Rekognition.prototype.describeCollection = function (args, optionsOrCb, cb) {\n    var command = new DescribeCollectionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Rekognition.prototype.describeProjects = function (args, optionsOrCb, cb) {\n    var command = new DescribeProjectsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Rekognition.prototype.describeProjectVersions = function (args, optionsOrCb, cb) {\n    var command = new DescribeProjectVersionsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Rekognition.prototype.describeStreamProcessor = function (args, optionsOrCb, cb) {\n    var command = new DescribeStreamProcessorCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Rekognition.prototype.detectCustomLabels = function (args, optionsOrCb, cb) {\n    var command = new DetectCustomLabelsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Rekognition.prototype.detectFaces = function (args, optionsOrCb, cb) {\n    var command = new DetectFacesCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Rekognition.prototype.detectLabels = function (args, optionsOrCb, cb) {\n    var command = new DetectLabelsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Rekognition.prototype.detectModerationLabels = function (args, optionsOrCb, cb) {\n    var command = new DetectModerationLabelsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Rekognition.prototype.detectProtectiveEquipment = function (args, optionsOrCb, cb) {\n    var command = new DetectProtectiveEquipmentCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Rekognition.prototype.detectText = function (args, optionsOrCb, cb) {\n    var command = new DetectTextCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Rekognition.prototype.getCelebrityInfo = function (args, optionsOrCb, cb) {\n    var command = new GetCelebrityInfoCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Rekognition.prototype.getCelebrityRecognition = function (args, optionsOrCb, cb) {\n    var command = new GetCelebrityRecognitionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Rekognition.prototype.getContentModeration = function (args, optionsOrCb, cb) {\n    var command = new GetContentModerationCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Rekognition.prototype.getFaceDetection = function (args, optionsOrCb, cb) {\n    var command = new GetFaceDetectionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Rekognition.prototype.getFaceSearch = function (args, optionsOrCb, cb) {\n    var command = new GetFaceSearchCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Rekognition.prototype.getLabelDetection = function (args, optionsOrCb, cb) {\n    var command = new GetLabelDetectionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Rekognition.prototype.getPersonTracking = function (args, optionsOrCb, cb) {\n    var command = new GetPersonTrackingCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Rekognition.prototype.getSegmentDetection = function (args, optionsOrCb, cb) {\n    var command = new GetSegmentDetectionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Rekognition.prototype.getTextDetection = function (args, optionsOrCb, cb) {\n    var command = new GetTextDetectionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Rekognition.prototype.indexFaces = function (args, optionsOrCb, cb) {\n    var command = new IndexFacesCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Rekognition.prototype.listCollections = function (args, optionsOrCb, cb) {\n    var command = new ListCollectionsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Rekognition.prototype.listFaces = function (args, optionsOrCb, cb) {\n    var command = new ListFacesCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Rekognition.prototype.listStreamProcessors = function (args, optionsOrCb, cb) {\n    var command = new ListStreamProcessorsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Rekognition.prototype.recognizeCelebrities = function (args, optionsOrCb, cb) {\n    var command = new RecognizeCelebritiesCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Rekognition.prototype.searchFaces = function (args, optionsOrCb, cb) {\n    var command = new SearchFacesCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Rekognition.prototype.searchFacesByImage = function (args, optionsOrCb, cb) {\n    var command = new SearchFacesByImageCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Rekognition.prototype.startCelebrityRecognition = function (args, optionsOrCb, cb) {\n    var command = new StartCelebrityRecognitionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Rekognition.prototype.startContentModeration = function (args, optionsOrCb, cb) {\n    var command = new StartContentModerationCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Rekognition.prototype.startFaceDetection = function (args, optionsOrCb, cb) {\n    var command = new StartFaceDetectionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Rekognition.prototype.startFaceSearch = function (args, optionsOrCb, cb) {\n    var command = new StartFaceSearchCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Rekognition.prototype.startLabelDetection = function (args, optionsOrCb, cb) {\n    var command = new StartLabelDetectionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Rekognition.prototype.startPersonTracking = function (args, optionsOrCb, cb) {\n    var command = new StartPersonTrackingCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Rekognition.prototype.startProjectVersion = function (args, optionsOrCb, cb) {\n    var command = new StartProjectVersionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Rekognition.prototype.startSegmentDetection = function (args, optionsOrCb, cb) {\n    var command = new StartSegmentDetectionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Rekognition.prototype.startStreamProcessor = function (args, optionsOrCb, cb) {\n    var command = new StartStreamProcessorCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Rekognition.prototype.startTextDetection = function (args, optionsOrCb, cb) {\n    var command = new StartTextDetectionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Rekognition.prototype.stopProjectVersion = function (args, optionsOrCb, cb) {\n    var command = new StopProjectVersionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Rekognition.prototype.stopStreamProcessor = function (args, optionsOrCb, cb) {\n    var command = new StopStreamProcessorCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  return Rekognition;\n}(RekognitionClient);\nexport { Rekognition };","map":{"version":3,"names":["RekognitionClient","CompareFacesCommand","CreateCollectionCommand","CreateProjectCommand","CreateProjectVersionCommand","CreateStreamProcessorCommand","DeleteCollectionCommand","DeleteFacesCommand","DeleteProjectCommand","DeleteProjectVersionCommand","DeleteStreamProcessorCommand","DescribeCollectionCommand","DescribeProjectVersionsCommand","DescribeProjectsCommand","DescribeStreamProcessorCommand","DetectCustomLabelsCommand","DetectFacesCommand","DetectLabelsCommand","DetectModerationLabelsCommand","DetectProtectiveEquipmentCommand","DetectTextCommand","GetCelebrityInfoCommand","GetCelebrityRecognitionCommand","GetContentModerationCommand","GetFaceDetectionCommand","GetFaceSearchCommand","GetLabelDetectionCommand","GetPersonTrackingCommand","GetSegmentDetectionCommand","GetTextDetectionCommand","IndexFacesCommand","ListCollectionsCommand","ListFacesCommand","ListStreamProcessorsCommand","RecognizeCelebritiesCommand","SearchFacesByImageCommand","SearchFacesCommand","StartCelebrityRecognitionCommand","StartContentModerationCommand","StartFaceDetectionCommand","StartFaceSearchCommand","StartLabelDetectionCommand","StartPersonTrackingCommand","StartProjectVersionCommand","StartSegmentDetectionCommand","StartStreamProcessorCommand","StartTextDetectionCommand","StopProjectVersionCommand","StopStreamProcessorCommand","Rekognition","_super","__extends","prototype","compareFaces","args","optionsOrCb","cb","command","send","Error","createCollection","createProject","createProjectVersion","createStreamProcessor","deleteCollection","deleteFaces","deleteProject","deleteProjectVersion","deleteStreamProcessor","describeCollection","describeProjects","describeProjectVersions","describeStreamProcessor","detectCustomLabels","detectFaces","detectLabels","detectModerationLabels","detectProtectiveEquipment","detectText","getCelebrityInfo","getCelebrityRecognition","getContentModeration","getFaceDetection","getFaceSearch","getLabelDetection","getPersonTracking","getSegmentDetection","getTextDetection","indexFaces","listCollections","listFaces","listStreamProcessors","recognizeCelebrities","searchFaces","searchFacesByImage","startCelebrityRecognition","startContentModeration","startFaceDetection","startFaceSearch","startLabelDetection","startPersonTracking","startProjectVersion","startSegmentDetection","startStreamProcessor","startTextDetection","stopProjectVersion","stopStreamProcessor"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-sdk/client-rekognition/Rekognition.ts"],"sourcesContent":["import { RekognitionClient } from \"./RekognitionClient\";\nimport {\n  CompareFacesCommand,\n  CompareFacesCommandInput,\n  CompareFacesCommandOutput,\n} from \"./commands/CompareFacesCommand\";\nimport {\n  CreateCollectionCommand,\n  CreateCollectionCommandInput,\n  CreateCollectionCommandOutput,\n} from \"./commands/CreateCollectionCommand\";\nimport {\n  CreateProjectCommand,\n  CreateProjectCommandInput,\n  CreateProjectCommandOutput,\n} from \"./commands/CreateProjectCommand\";\nimport {\n  CreateProjectVersionCommand,\n  CreateProjectVersionCommandInput,\n  CreateProjectVersionCommandOutput,\n} from \"./commands/CreateProjectVersionCommand\";\nimport {\n  CreateStreamProcessorCommand,\n  CreateStreamProcessorCommandInput,\n  CreateStreamProcessorCommandOutput,\n} from \"./commands/CreateStreamProcessorCommand\";\nimport {\n  DeleteCollectionCommand,\n  DeleteCollectionCommandInput,\n  DeleteCollectionCommandOutput,\n} from \"./commands/DeleteCollectionCommand\";\nimport { DeleteFacesCommand, DeleteFacesCommandInput, DeleteFacesCommandOutput } from \"./commands/DeleteFacesCommand\";\nimport {\n  DeleteProjectCommand,\n  DeleteProjectCommandInput,\n  DeleteProjectCommandOutput,\n} from \"./commands/DeleteProjectCommand\";\nimport {\n  DeleteProjectVersionCommand,\n  DeleteProjectVersionCommandInput,\n  DeleteProjectVersionCommandOutput,\n} from \"./commands/DeleteProjectVersionCommand\";\nimport {\n  DeleteStreamProcessorCommand,\n  DeleteStreamProcessorCommandInput,\n  DeleteStreamProcessorCommandOutput,\n} from \"./commands/DeleteStreamProcessorCommand\";\nimport {\n  DescribeCollectionCommand,\n  DescribeCollectionCommandInput,\n  DescribeCollectionCommandOutput,\n} from \"./commands/DescribeCollectionCommand\";\nimport {\n  DescribeProjectVersionsCommand,\n  DescribeProjectVersionsCommandInput,\n  DescribeProjectVersionsCommandOutput,\n} from \"./commands/DescribeProjectVersionsCommand\";\nimport {\n  DescribeProjectsCommand,\n  DescribeProjectsCommandInput,\n  DescribeProjectsCommandOutput,\n} from \"./commands/DescribeProjectsCommand\";\nimport {\n  DescribeStreamProcessorCommand,\n  DescribeStreamProcessorCommandInput,\n  DescribeStreamProcessorCommandOutput,\n} from \"./commands/DescribeStreamProcessorCommand\";\nimport {\n  DetectCustomLabelsCommand,\n  DetectCustomLabelsCommandInput,\n  DetectCustomLabelsCommandOutput,\n} from \"./commands/DetectCustomLabelsCommand\";\nimport { DetectFacesCommand, DetectFacesCommandInput, DetectFacesCommandOutput } from \"./commands/DetectFacesCommand\";\nimport {\n  DetectLabelsCommand,\n  DetectLabelsCommandInput,\n  DetectLabelsCommandOutput,\n} from \"./commands/DetectLabelsCommand\";\nimport {\n  DetectModerationLabelsCommand,\n  DetectModerationLabelsCommandInput,\n  DetectModerationLabelsCommandOutput,\n} from \"./commands/DetectModerationLabelsCommand\";\nimport {\n  DetectProtectiveEquipmentCommand,\n  DetectProtectiveEquipmentCommandInput,\n  DetectProtectiveEquipmentCommandOutput,\n} from \"./commands/DetectProtectiveEquipmentCommand\";\nimport { DetectTextCommand, DetectTextCommandInput, DetectTextCommandOutput } from \"./commands/DetectTextCommand\";\nimport {\n  GetCelebrityInfoCommand,\n  GetCelebrityInfoCommandInput,\n  GetCelebrityInfoCommandOutput,\n} from \"./commands/GetCelebrityInfoCommand\";\nimport {\n  GetCelebrityRecognitionCommand,\n  GetCelebrityRecognitionCommandInput,\n  GetCelebrityRecognitionCommandOutput,\n} from \"./commands/GetCelebrityRecognitionCommand\";\nimport {\n  GetContentModerationCommand,\n  GetContentModerationCommandInput,\n  GetContentModerationCommandOutput,\n} from \"./commands/GetContentModerationCommand\";\nimport {\n  GetFaceDetectionCommand,\n  GetFaceDetectionCommandInput,\n  GetFaceDetectionCommandOutput,\n} from \"./commands/GetFaceDetectionCommand\";\nimport {\n  GetFaceSearchCommand,\n  GetFaceSearchCommandInput,\n  GetFaceSearchCommandOutput,\n} from \"./commands/GetFaceSearchCommand\";\nimport {\n  GetLabelDetectionCommand,\n  GetLabelDetectionCommandInput,\n  GetLabelDetectionCommandOutput,\n} from \"./commands/GetLabelDetectionCommand\";\nimport {\n  GetPersonTrackingCommand,\n  GetPersonTrackingCommandInput,\n  GetPersonTrackingCommandOutput,\n} from \"./commands/GetPersonTrackingCommand\";\nimport {\n  GetSegmentDetectionCommand,\n  GetSegmentDetectionCommandInput,\n  GetSegmentDetectionCommandOutput,\n} from \"./commands/GetSegmentDetectionCommand\";\nimport {\n  GetTextDetectionCommand,\n  GetTextDetectionCommandInput,\n  GetTextDetectionCommandOutput,\n} from \"./commands/GetTextDetectionCommand\";\nimport { IndexFacesCommand, IndexFacesCommandInput, IndexFacesCommandOutput } from \"./commands/IndexFacesCommand\";\nimport {\n  ListCollectionsCommand,\n  ListCollectionsCommandInput,\n  ListCollectionsCommandOutput,\n} from \"./commands/ListCollectionsCommand\";\nimport { ListFacesCommand, ListFacesCommandInput, ListFacesCommandOutput } from \"./commands/ListFacesCommand\";\nimport {\n  ListStreamProcessorsCommand,\n  ListStreamProcessorsCommandInput,\n  ListStreamProcessorsCommandOutput,\n} from \"./commands/ListStreamProcessorsCommand\";\nimport {\n  RecognizeCelebritiesCommand,\n  RecognizeCelebritiesCommandInput,\n  RecognizeCelebritiesCommandOutput,\n} from \"./commands/RecognizeCelebritiesCommand\";\nimport {\n  SearchFacesByImageCommand,\n  SearchFacesByImageCommandInput,\n  SearchFacesByImageCommandOutput,\n} from \"./commands/SearchFacesByImageCommand\";\nimport { SearchFacesCommand, SearchFacesCommandInput, SearchFacesCommandOutput } from \"./commands/SearchFacesCommand\";\nimport {\n  StartCelebrityRecognitionCommand,\n  StartCelebrityRecognitionCommandInput,\n  StartCelebrityRecognitionCommandOutput,\n} from \"./commands/StartCelebrityRecognitionCommand\";\nimport {\n  StartContentModerationCommand,\n  StartContentModerationCommandInput,\n  StartContentModerationCommandOutput,\n} from \"./commands/StartContentModerationCommand\";\nimport {\n  StartFaceDetectionCommand,\n  StartFaceDetectionCommandInput,\n  StartFaceDetectionCommandOutput,\n} from \"./commands/StartFaceDetectionCommand\";\nimport {\n  StartFaceSearchCommand,\n  StartFaceSearchCommandInput,\n  StartFaceSearchCommandOutput,\n} from \"./commands/StartFaceSearchCommand\";\nimport {\n  StartLabelDetectionCommand,\n  StartLabelDetectionCommandInput,\n  StartLabelDetectionCommandOutput,\n} from \"./commands/StartLabelDetectionCommand\";\nimport {\n  StartPersonTrackingCommand,\n  StartPersonTrackingCommandInput,\n  StartPersonTrackingCommandOutput,\n} from \"./commands/StartPersonTrackingCommand\";\nimport {\n  StartProjectVersionCommand,\n  StartProjectVersionCommandInput,\n  StartProjectVersionCommandOutput,\n} from \"./commands/StartProjectVersionCommand\";\nimport {\n  StartSegmentDetectionCommand,\n  StartSegmentDetectionCommandInput,\n  StartSegmentDetectionCommandOutput,\n} from \"./commands/StartSegmentDetectionCommand\";\nimport {\n  StartStreamProcessorCommand,\n  StartStreamProcessorCommandInput,\n  StartStreamProcessorCommandOutput,\n} from \"./commands/StartStreamProcessorCommand\";\nimport {\n  StartTextDetectionCommand,\n  StartTextDetectionCommandInput,\n  StartTextDetectionCommandOutput,\n} from \"./commands/StartTextDetectionCommand\";\nimport {\n  StopProjectVersionCommand,\n  StopProjectVersionCommandInput,\n  StopProjectVersionCommandOutput,\n} from \"./commands/StopProjectVersionCommand\";\nimport {\n  StopStreamProcessorCommand,\n  StopStreamProcessorCommandInput,\n  StopStreamProcessorCommandOutput,\n} from \"./commands/StopStreamProcessorCommand\";\nimport { HttpHandlerOptions as __HttpHandlerOptions } from \"@aws-sdk/types\";\n\n/**\n * <p>This is the Amazon Rekognition API reference.</p>\n */\nexport class Rekognition extends RekognitionClient {\n  /**\n   * <p>Compares a face in the <i>source</i> input image with\n   *       each of the 100 largest faces detected in the <i>target</i> input image.\n   *     </p>\n   *          <note>\n   *             <p> If the source image contains multiple faces, the service detects the largest face\n   *         and compares it with each face detected in the target image. </p>\n   *          </note>\n   *\n   *\n   *          <p>You pass the input and target images either as base64-encoded image bytes or as\n   *       references to images in an Amazon S3 bucket. If you use the\n   *       AWS\n   *       CLI to call Amazon Rekognition operations, passing image bytes isn't\n   *       supported. The image must be formatted as a PNG or JPEG file. </p>\n   *          <p>In response, the operation returns an array of face matches ordered by similarity score\n   *       in descending order. For each face match, the response provides a bounding box of the face,\n   *       facial landmarks, pose details (pitch, role, and yaw), quality (brightness and sharpness), and\n   *       confidence value (indicating the level of confidence that the bounding box contains a face).\n   *       The response also provides a similarity score, which indicates how closely the faces match. </p>\n   *\n   *          <note>\n   *             <p>By default, only faces with a similarity score of greater than or equal to 80% are\n   *         returned in the response. You can change this value by specifying the\n   *           <code>SimilarityThreshold</code> parameter.</p>\n   *          </note>\n   *\n   *          <p>\n   *             <code>CompareFaces</code> also returns an array of faces that don't match the source image.\n   *       For each face, it returns a bounding box, confidence value, landmarks, pose details, and quality.\n   *     The response also returns information about the face in the source image, including the bounding box\n   *       of the face and confidence value.</p>\n   *\n   *          <p>The <code>QualityFilter</code> input parameter allows you to filter out detected faces\n   *       that don’t meet a required quality bar. The quality bar is based on a\n   *       variety of common use cases.  Use <code>QualityFilter</code> to set the quality bar\n   *       by specifying <code>LOW</code>, <code>MEDIUM</code>, or <code>HIGH</code>.\n   *       If you do not want to filter detected faces, specify <code>NONE</code>. The default value is <code>NONE</code>. </p>\n   *\n   *          <p>If the image doesn't contain Exif metadata, <code>CompareFaces</code> returns orientation information for the\n   *         source and target images. Use these values to display the images with the correct image orientation.</p>\n   *          <p>If no faces are detected in the source or target images, <code>CompareFaces</code> returns an\n   *     <code>InvalidParameterException</code> error. </p>\n   *\n   *\n   *          <note>\n   *             <p> This is a stateless API operation. That is, data returned by this operation doesn't persist.</p>\n   *          </note>\n   *\n   *\n   *          <p>For an example, see Comparing Faces in Images in the Amazon Rekognition Developer Guide.</p>\n   *          <p>This operation requires permissions to perform the <code>rekognition:CompareFaces</code>\n   *       action.</p>\n   */\n  public compareFaces(\n    args: CompareFacesCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<CompareFacesCommandOutput>;\n  public compareFaces(args: CompareFacesCommandInput, cb: (err: any, data?: CompareFacesCommandOutput) => void): void;\n  public compareFaces(\n    args: CompareFacesCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: CompareFacesCommandOutput) => void\n  ): void;\n  public compareFaces(\n    args: CompareFacesCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: CompareFacesCommandOutput) => void),\n    cb?: (err: any, data?: CompareFacesCommandOutput) => void\n  ): Promise<CompareFacesCommandOutput> | void {\n    const command = new CompareFacesCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Creates a collection in an AWS Region. You can add faces to the collection using the\n   *         <a>IndexFaces</a> operation. </p>\n   *          <p>For example, you might create collections, one for each of your application users. A\n   *       user can then index faces using the <code>IndexFaces</code> operation and persist results in a\n   *       specific collection. Then, a user can search the collection for faces in the user-specific\n   *       container. </p>\n   *          <p>When you create a collection, it is associated with the latest version of the face model version.</p>\n   *          <note>\n   *             <p>Collection names are case-sensitive.</p>\n   *          </note>\n   *\n   *          <p>This operation requires permissions to perform the\n   *         <code>rekognition:CreateCollection</code> action.</p>\n   */\n  public createCollection(\n    args: CreateCollectionCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<CreateCollectionCommandOutput>;\n  public createCollection(\n    args: CreateCollectionCommandInput,\n    cb: (err: any, data?: CreateCollectionCommandOutput) => void\n  ): void;\n  public createCollection(\n    args: CreateCollectionCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: CreateCollectionCommandOutput) => void\n  ): void;\n  public createCollection(\n    args: CreateCollectionCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: CreateCollectionCommandOutput) => void),\n    cb?: (err: any, data?: CreateCollectionCommandOutput) => void\n  ): Promise<CreateCollectionCommandOutput> | void {\n    const command = new CreateCollectionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Creates a new Amazon Rekognition Custom Labels project. A project is a logical grouping of resources (images, Labels, models)\n   *          and operations (training, evaluation and detection).  </p>\n   *          <p>This operation requires permissions to perform the <code>rekognition:CreateProject</code> action.</p>\n   */\n  public createProject(\n    args: CreateProjectCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<CreateProjectCommandOutput>;\n  public createProject(\n    args: CreateProjectCommandInput,\n    cb: (err: any, data?: CreateProjectCommandOutput) => void\n  ): void;\n  public createProject(\n    args: CreateProjectCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: CreateProjectCommandOutput) => void\n  ): void;\n  public createProject(\n    args: CreateProjectCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: CreateProjectCommandOutput) => void),\n    cb?: (err: any, data?: CreateProjectCommandOutput) => void\n  ): Promise<CreateProjectCommandOutput> | void {\n    const command = new CreateProjectCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Creates a new version of a model and begins training.\n   *          Models are managed as part of an Amazon Rekognition Custom Labels project.  You can specify\n   *          one training dataset and one testing dataset. The response from <code>CreateProjectVersion</code>\n   *          is an Amazon Resource Name (ARN) for the version of the model. </p>\n   *          <p>Training takes a while to complete. You can get the current status by calling\n   *          <a>DescribeProjectVersions</a>.</p>\n   *          <p>Once training has successfully completed, call <a>DescribeProjectVersions</a> to\n   *          get the training results and evaluate the model.\n   *       </p>\n   *          <p>After evaluating the model, you start the model\n   *        by calling <a>StartProjectVersion</a>.</p>\n   *          <p>This operation requires permissions to perform the <code>rekognition:CreateProjectVersion</code> action.</p>\n   */\n  public createProjectVersion(\n    args: CreateProjectVersionCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<CreateProjectVersionCommandOutput>;\n  public createProjectVersion(\n    args: CreateProjectVersionCommandInput,\n    cb: (err: any, data?: CreateProjectVersionCommandOutput) => void\n  ): void;\n  public createProjectVersion(\n    args: CreateProjectVersionCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: CreateProjectVersionCommandOutput) => void\n  ): void;\n  public createProjectVersion(\n    args: CreateProjectVersionCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: CreateProjectVersionCommandOutput) => void),\n    cb?: (err: any, data?: CreateProjectVersionCommandOutput) => void\n  ): Promise<CreateProjectVersionCommandOutput> | void {\n    const command = new CreateProjectVersionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Creates an Amazon Rekognition stream processor that you can use to detect and recognize faces in a streaming video.</p>\n   *         <p>Amazon Rekognition Video is a consumer of live video from Amazon Kinesis Video Streams. Amazon Rekognition Video sends analysis results to Amazon Kinesis Data Streams.</p>\n   *         <p>You provide as input a Kinesis video stream (<code>Input</code>) and a Kinesis data stream (<code>Output</code>) stream. You also specify the\n   *             face recognition criteria in <code>Settings</code>. For example, the collection containing faces that you want to recognize.\n   *             Use <code>Name</code> to assign an identifier for the stream processor. You use <code>Name</code>\n   *             to manage the stream processor. For example, you can start processing the source video by calling <a>StartStreamProcessor</a> with\n   *             the <code>Name</code> field. </p>\n   *         <p>After you have finished analyzing a streaming video, use <a>StopStreamProcessor</a> to\n   *         stop processing. You can delete the stream processor by calling <a>DeleteStreamProcessor</a>.</p>\n   */\n  public createStreamProcessor(\n    args: CreateStreamProcessorCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<CreateStreamProcessorCommandOutput>;\n  public createStreamProcessor(\n    args: CreateStreamProcessorCommandInput,\n    cb: (err: any, data?: CreateStreamProcessorCommandOutput) => void\n  ): void;\n  public createStreamProcessor(\n    args: CreateStreamProcessorCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: CreateStreamProcessorCommandOutput) => void\n  ): void;\n  public createStreamProcessor(\n    args: CreateStreamProcessorCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: CreateStreamProcessorCommandOutput) => void),\n    cb?: (err: any, data?: CreateStreamProcessorCommandOutput) => void\n  ): Promise<CreateStreamProcessorCommandOutput> | void {\n    const command = new CreateStreamProcessorCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Deletes the specified collection. Note that this operation\n   *       removes all faces in the collection. For an example, see <a>delete-collection-procedure</a>.</p>\n   *\n   *          <p>This operation requires permissions to perform the\n   *         <code>rekognition:DeleteCollection</code> action.</p>\n   */\n  public deleteCollection(\n    args: DeleteCollectionCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DeleteCollectionCommandOutput>;\n  public deleteCollection(\n    args: DeleteCollectionCommandInput,\n    cb: (err: any, data?: DeleteCollectionCommandOutput) => void\n  ): void;\n  public deleteCollection(\n    args: DeleteCollectionCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DeleteCollectionCommandOutput) => void\n  ): void;\n  public deleteCollection(\n    args: DeleteCollectionCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DeleteCollectionCommandOutput) => void),\n    cb?: (err: any, data?: DeleteCollectionCommandOutput) => void\n  ): Promise<DeleteCollectionCommandOutput> | void {\n    const command = new DeleteCollectionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Deletes faces from a collection. You specify a collection ID and an array of face IDs\n   *       to remove from the collection.</p>\n   *          <p>This operation requires permissions to perform the <code>rekognition:DeleteFaces</code>\n   *       action.</p>\n   */\n  public deleteFaces(args: DeleteFacesCommandInput, options?: __HttpHandlerOptions): Promise<DeleteFacesCommandOutput>;\n  public deleteFaces(args: DeleteFacesCommandInput, cb: (err: any, data?: DeleteFacesCommandOutput) => void): void;\n  public deleteFaces(\n    args: DeleteFacesCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DeleteFacesCommandOutput) => void\n  ): void;\n  public deleteFaces(\n    args: DeleteFacesCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DeleteFacesCommandOutput) => void),\n    cb?: (err: any, data?: DeleteFacesCommandOutput) => void\n  ): Promise<DeleteFacesCommandOutput> | void {\n    const command = new DeleteFacesCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Deletes an Amazon Rekognition Custom Labels project.  To delete a project you must first delete all models associated\n   *          with the project. To delete a model, see <a>DeleteProjectVersion</a>.</p>\n   *          <p>This operation requires permissions to perform the\n   *          <code>rekognition:DeleteProject</code> action. </p>\n   */\n  public deleteProject(\n    args: DeleteProjectCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DeleteProjectCommandOutput>;\n  public deleteProject(\n    args: DeleteProjectCommandInput,\n    cb: (err: any, data?: DeleteProjectCommandOutput) => void\n  ): void;\n  public deleteProject(\n    args: DeleteProjectCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DeleteProjectCommandOutput) => void\n  ): void;\n  public deleteProject(\n    args: DeleteProjectCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DeleteProjectCommandOutput) => void),\n    cb?: (err: any, data?: DeleteProjectCommandOutput) => void\n  ): Promise<DeleteProjectCommandOutput> | void {\n    const command = new DeleteProjectCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Deletes an Amazon Rekognition Custom Labels model.  </p>\n   *          <p>You can't delete a model if it is running or if it is training.\n   *           To check the status of a model, use the <code>Status</code> field returned\n   *          from <a>DescribeProjectVersions</a>.\n   *          To stop a running model call <a>StopProjectVersion</a>. If the model\n   *       is training, wait until it finishes.</p>\n   *          <p>This operation requires permissions to perform the\n   *          <code>rekognition:DeleteProjectVersion</code> action. </p>\n   */\n  public deleteProjectVersion(\n    args: DeleteProjectVersionCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DeleteProjectVersionCommandOutput>;\n  public deleteProjectVersion(\n    args: DeleteProjectVersionCommandInput,\n    cb: (err: any, data?: DeleteProjectVersionCommandOutput) => void\n  ): void;\n  public deleteProjectVersion(\n    args: DeleteProjectVersionCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DeleteProjectVersionCommandOutput) => void\n  ): void;\n  public deleteProjectVersion(\n    args: DeleteProjectVersionCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DeleteProjectVersionCommandOutput) => void),\n    cb?: (err: any, data?: DeleteProjectVersionCommandOutput) => void\n  ): Promise<DeleteProjectVersionCommandOutput> | void {\n    const command = new DeleteProjectVersionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Deletes the stream processor identified by <code>Name</code>. You assign the value for <code>Name</code> when you create the stream processor with\n   *             <a>CreateStreamProcessor</a>. You might not be able to use the same name for a stream processor for a few seconds after calling <code>DeleteStreamProcessor</code>.</p>\n   */\n  public deleteStreamProcessor(\n    args: DeleteStreamProcessorCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DeleteStreamProcessorCommandOutput>;\n  public deleteStreamProcessor(\n    args: DeleteStreamProcessorCommandInput,\n    cb: (err: any, data?: DeleteStreamProcessorCommandOutput) => void\n  ): void;\n  public deleteStreamProcessor(\n    args: DeleteStreamProcessorCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DeleteStreamProcessorCommandOutput) => void\n  ): void;\n  public deleteStreamProcessor(\n    args: DeleteStreamProcessorCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DeleteStreamProcessorCommandOutput) => void),\n    cb?: (err: any, data?: DeleteStreamProcessorCommandOutput) => void\n  ): Promise<DeleteStreamProcessorCommandOutput> | void {\n    const command = new DeleteStreamProcessorCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Describes the specified collection. You can use <code>DescribeCollection</code> to get\n   *          information, such as the number of faces indexed into a collection and the version of the\n   *          model used by the collection for face detection.</p>\n   *\n   *          <p>For more information, see Describing a Collection in the\n   *      Amazon Rekognition Developer Guide.</p>\n   */\n  public describeCollection(\n    args: DescribeCollectionCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DescribeCollectionCommandOutput>;\n  public describeCollection(\n    args: DescribeCollectionCommandInput,\n    cb: (err: any, data?: DescribeCollectionCommandOutput) => void\n  ): void;\n  public describeCollection(\n    args: DescribeCollectionCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DescribeCollectionCommandOutput) => void\n  ): void;\n  public describeCollection(\n    args: DescribeCollectionCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DescribeCollectionCommandOutput) => void),\n    cb?: (err: any, data?: DescribeCollectionCommandOutput) => void\n  ): Promise<DescribeCollectionCommandOutput> | void {\n    const command = new DescribeCollectionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Lists and gets information about your Amazon Rekognition Custom Labels projects.</p>\n   *          <p>This operation requires permissions to perform the <code>rekognition:DescribeProjects</code> action.</p>\n   */\n  public describeProjects(\n    args: DescribeProjectsCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DescribeProjectsCommandOutput>;\n  public describeProjects(\n    args: DescribeProjectsCommandInput,\n    cb: (err: any, data?: DescribeProjectsCommandOutput) => void\n  ): void;\n  public describeProjects(\n    args: DescribeProjectsCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DescribeProjectsCommandOutput) => void\n  ): void;\n  public describeProjects(\n    args: DescribeProjectsCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DescribeProjectsCommandOutput) => void),\n    cb?: (err: any, data?: DescribeProjectsCommandOutput) => void\n  ): Promise<DescribeProjectsCommandOutput> | void {\n    const command = new DescribeProjectsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Lists and describes the models in an Amazon Rekognition Custom Labels project. You\n   *          can specify up to 10 model versions in <code>ProjectVersionArns</code>. If\n   *          you don't specify a value, descriptions for all models are returned.</p>\n   *          <p>This operation requires permissions to perform the <code>rekognition:DescribeProjectVersions</code>\n   *             action.</p>\n   */\n  public describeProjectVersions(\n    args: DescribeProjectVersionsCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DescribeProjectVersionsCommandOutput>;\n  public describeProjectVersions(\n    args: DescribeProjectVersionsCommandInput,\n    cb: (err: any, data?: DescribeProjectVersionsCommandOutput) => void\n  ): void;\n  public describeProjectVersions(\n    args: DescribeProjectVersionsCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DescribeProjectVersionsCommandOutput) => void\n  ): void;\n  public describeProjectVersions(\n    args: DescribeProjectVersionsCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DescribeProjectVersionsCommandOutput) => void),\n    cb?: (err: any, data?: DescribeProjectVersionsCommandOutput) => void\n  ): Promise<DescribeProjectVersionsCommandOutput> | void {\n    const command = new DescribeProjectVersionsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Provides information about a stream processor created by <a>CreateStreamProcessor</a>. You can get information about the input and output streams, the input parameters for the face recognition being performed,\n   *             and the current status of the stream processor.</p>\n   */\n  public describeStreamProcessor(\n    args: DescribeStreamProcessorCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DescribeStreamProcessorCommandOutput>;\n  public describeStreamProcessor(\n    args: DescribeStreamProcessorCommandInput,\n    cb: (err: any, data?: DescribeStreamProcessorCommandOutput) => void\n  ): void;\n  public describeStreamProcessor(\n    args: DescribeStreamProcessorCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DescribeStreamProcessorCommandOutput) => void\n  ): void;\n  public describeStreamProcessor(\n    args: DescribeStreamProcessorCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DescribeStreamProcessorCommandOutput) => void),\n    cb?: (err: any, data?: DescribeStreamProcessorCommandOutput) => void\n  ): Promise<DescribeStreamProcessorCommandOutput> | void {\n    const command = new DescribeStreamProcessorCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Detects custom labels in a supplied image by using an Amazon Rekognition Custom Labels model. </p>\n   *          <p>You specify which version of a model version to use by using the <code>ProjectVersionArn</code> input\n   *       parameter. </p>\n   *          <p>You pass the input image as base64-encoded image bytes or as a reference to an image in\n   *          an Amazon S3 bucket. If you use the AWS CLI to call Amazon Rekognition operations, passing\n   *          image bytes is not supported. The image must be either a PNG or JPEG formatted file. </p>\n   *          <p> For each object that the model version detects on an image, the API returns a\n   *          (<code>CustomLabel</code>) object in an array (<code>CustomLabels</code>).\n   *          Each <code>CustomLabel</code> object provides the label name (<code>Name</code>), the level\n   *          of confidence that the image contains the object (<code>Confidence</code>), and\n   *          object location information, if it exists,  for the label on the image (<code>Geometry</code>). </p>\n   *          <p>During training model calculates a threshold value that determines\n   *          if a prediction for a label is true. By default, <code>DetectCustomLabels</code> doesn't\n   *          return labels whose confidence value is below the model's calculated threshold value.  To filter\n   *          labels that are returned, specify a value for <code>MinConfidence</code> that is higher than the\n   *          model's calculated threshold. You can get the model's calculated threshold from the model's\n   *          training results shown in the Amazon Rekognition Custom Labels console.\n   *          To get all labels, regardless of confidence, specify a <code>MinConfidence</code>\n   *          value of 0. </p>\n   *          <p>You can also add the <code>MaxResults</code> parameter\n   *            to limit the number of labels returned. </p>\n   *\n   *          <p>This is a stateless API operation. That is, the operation does not persist any\n   *          data.</p>\n   *          <p>This operation requires permissions to perform the\n   *          <code>rekognition:DetectCustomLabels</code> action. </p>\n   */\n  public detectCustomLabels(\n    args: DetectCustomLabelsCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DetectCustomLabelsCommandOutput>;\n  public detectCustomLabels(\n    args: DetectCustomLabelsCommandInput,\n    cb: (err: any, data?: DetectCustomLabelsCommandOutput) => void\n  ): void;\n  public detectCustomLabels(\n    args: DetectCustomLabelsCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DetectCustomLabelsCommandOutput) => void\n  ): void;\n  public detectCustomLabels(\n    args: DetectCustomLabelsCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DetectCustomLabelsCommandOutput) => void),\n    cb?: (err: any, data?: DetectCustomLabelsCommandOutput) => void\n  ): Promise<DetectCustomLabelsCommandOutput> | void {\n    const command = new DetectCustomLabelsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Detects faces within an image that is provided as input.</p>\n   *\n   *          <p>\n   *             <code>DetectFaces</code> detects the 100 largest faces in the image. For each face\n   *       detected, the operation returns face details. These details include a bounding box of the\n   *       face, a confidence value (that the bounding box contains a face), and a fixed set of\n   *       attributes such as facial landmarks (for example, coordinates of eye and mouth),\n   *       presence of beard, sunglasses, and so on. </p>\n   *          <p>The face-detection algorithm is most effective on frontal faces. For non-frontal or\n   *       obscured faces, the algorithm might not detect the faces or might detect faces with lower\n   *       confidence. </p>\n   *          <p>You pass the input image either as base64-encoded image bytes or as a reference to an\n   *       image in an Amazon S3 bucket. If you use the AWS CLI\n   *        to call Amazon Rekognition operations, passing image bytes is not\n   *       supported. The image must be either a PNG or JPEG formatted file. </p>\n   *\n   *          <note>\n   *             <p>This is a stateless API operation. That is, the operation does not persist any\n   *         data.</p>\n   *          </note>\n   *\n   *          <p>This operation requires permissions to perform the\n   *       <code>rekognition:DetectFaces</code> action. </p>\n   */\n  public detectFaces(args: DetectFacesCommandInput, options?: __HttpHandlerOptions): Promise<DetectFacesCommandOutput>;\n  public detectFaces(args: DetectFacesCommandInput, cb: (err: any, data?: DetectFacesCommandOutput) => void): void;\n  public detectFaces(\n    args: DetectFacesCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DetectFacesCommandOutput) => void\n  ): void;\n  public detectFaces(\n    args: DetectFacesCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DetectFacesCommandOutput) => void),\n    cb?: (err: any, data?: DetectFacesCommandOutput) => void\n  ): Promise<DetectFacesCommandOutput> | void {\n    const command = new DetectFacesCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Detects instances of real-world entities within an image (JPEG or PNG)\n   *        provided as input. This includes objects like flower, tree, and table; events like\n   *        wedding, graduation, and birthday party; and concepts like landscape, evening, and nature.\n   *      </p>\n   *\n   *          <p>For an example, see Analyzing Images Stored in an Amazon S3 Bucket in the Amazon Rekognition Developer Guide.</p>\n   *          <note>\n   *\n   *             <p>\n   *                <code>DetectLabels</code> does not support the detection of activities. However, activity detection\n   *         is supported for label detection in videos. For more information, see StartLabelDetection in the Amazon Rekognition Developer Guide.</p>\n   *          </note>\n   *\n   *          <p>You pass the input image as base64-encoded image bytes or as a reference to an image in\n   *       an Amazon S3 bucket. If you use the\n   *       AWS\n   *       CLI to call Amazon Rekognition operations, passing image bytes is not\n   *       supported. The image must be either a PNG or JPEG formatted file. </p>\n   *          <p> For each object, scene, and concept the API returns one or more labels. Each label\n   *       provides the object name, and the level of confidence that the image contains the object. For\n   *       example, suppose the input image has a lighthouse, the sea, and a rock. The response includes\n   *       all three labels, one for each object. </p>\n   *\n   *          <p>\n   *             <code>{Name: lighthouse, Confidence: 98.4629}</code>\n   *          </p>\n   *          <p>\n   *             <code>{Name: rock,Confidence: 79.2097}</code>\n   *          </p>\n   *          <p>\n   *             <code> {Name: sea,Confidence: 75.061}</code>\n   *          </p>\n   *          <p>In the preceding example, the operation returns one label for each of the three\n   *       objects. The operation can also return multiple labels for the same object in the image. For\n   *       example, if the input image shows a flower (for example, a tulip), the operation might return\n   *       the following three labels. </p>\n   *          <p>\n   *             <code>{Name: flower,Confidence: 99.0562}</code>\n   *          </p>\n   *          <p>\n   *             <code>{Name: plant,Confidence: 99.0562}</code>\n   *          </p>\n   *          <p>\n   *             <code>{Name: tulip,Confidence: 99.0562}</code>\n   *          </p>\n   *\n   *          <p>In this example, the detection algorithm more precisely identifies the flower as a\n   *       tulip.</p>\n   *          <p>In response, the API returns an array of labels. In addition, the response also\n   *       includes the orientation correction. Optionally, you can specify <code>MinConfidence</code> to\n   *       control the confidence threshold for the labels returned. The default is 55%. You can also add\n   *       the <code>MaxLabels</code> parameter to limit the number of labels returned. </p>\n   *          <note>\n   *             <p>If the object detected is a person, the operation doesn't provide the same facial\n   *         details that the <a>DetectFaces</a> operation provides.</p>\n   *          </note>\n   *          <p>\n   *             <code>DetectLabels</code> returns bounding boxes for instances of common object labels in an array of\n   *       <a>Instance</a> objects. An <code>Instance</code> object contains a\n   *       <a>BoundingBox</a> object, for the location of the label on the image. It also includes\n   *       the confidence by which the bounding box was detected.</p>\n   *          <p>\n   *             <code>DetectLabels</code> also returns a hierarchical taxonomy of detected labels. For example,\n   *       a detected car might be assigned the label <i>car</i>. The label <i>car</i>\n   *       has two parent labels: <i>Vehicle</i> (its parent) and <i>Transportation</i> (its\n   *       grandparent).\n   *       The response returns the entire list of ancestors for a label. Each ancestor is a unique label in the response.\n   *       In the previous example, <i>Car</i>, <i>Vehicle</i>, and <i>Transportation</i>\n   *       are returned as unique labels in the response.\n   *       </p>\n   *          <p>This is a stateless API operation. That is, the operation does not persist any\n   *       data.</p>\n   *          <p>This operation requires permissions to perform the\n   *         <code>rekognition:DetectLabels</code> action. </p>\n   */\n  public detectLabels(\n    args: DetectLabelsCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DetectLabelsCommandOutput>;\n  public detectLabels(args: DetectLabelsCommandInput, cb: (err: any, data?: DetectLabelsCommandOutput) => void): void;\n  public detectLabels(\n    args: DetectLabelsCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DetectLabelsCommandOutput) => void\n  ): void;\n  public detectLabels(\n    args: DetectLabelsCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DetectLabelsCommandOutput) => void),\n    cb?: (err: any, data?: DetectLabelsCommandOutput) => void\n  ): Promise<DetectLabelsCommandOutput> | void {\n    const command = new DetectLabelsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Detects unsafe content in a specified JPEG or PNG format image.\n   *      Use <code>DetectModerationLabels</code> to moderate images depending on your requirements.\n   *      For example, you might want to filter images that contain nudity, but not images containing\n   *      suggestive content.</p>\n   *          <p>To filter images, use the labels returned by <code>DetectModerationLabels</code>\n   *      to determine which types of content are appropriate.</p>\n   *\n   *          <p>For information about moderation labels,\n   *       see Detecting Unsafe Content in the Amazon Rekognition Developer Guide.</p>\n   *          <p>You pass the input image either as base64-encoded image bytes or as a reference to an\n   *       image in an Amazon S3 bucket. If you use the\n   *       AWS\n   *       CLI to call Amazon Rekognition operations, passing image bytes is not\n   *       supported. The image must be either a PNG or JPEG formatted file. </p>\n   */\n  public detectModerationLabels(\n    args: DetectModerationLabelsCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DetectModerationLabelsCommandOutput>;\n  public detectModerationLabels(\n    args: DetectModerationLabelsCommandInput,\n    cb: (err: any, data?: DetectModerationLabelsCommandOutput) => void\n  ): void;\n  public detectModerationLabels(\n    args: DetectModerationLabelsCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DetectModerationLabelsCommandOutput) => void\n  ): void;\n  public detectModerationLabels(\n    args: DetectModerationLabelsCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DetectModerationLabelsCommandOutput) => void),\n    cb?: (err: any, data?: DetectModerationLabelsCommandOutput) => void\n  ): Promise<DetectModerationLabelsCommandOutput> | void {\n    const command = new DetectModerationLabelsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Detects Personal Protective Equipment (PPE) worn by people detected in an image. Amazon Rekognition can detect the\n   *          following types of PPE.</p>\n   *          <ul>\n   *             <li>\n   *                <p>Face cover</p>\n   *             </li>\n   *             <li>\n   *                <p>Hand cover</p>\n   *             </li>\n   *             <li>\n   *                <p>Head cover</p>\n   *             </li>\n   *          </ul>\n   *\n   *          <p>You pass the input image as base64-encoded image bytes or as a reference to an image in an Amazon S3 bucket.\n   *          The image must be either a PNG or JPG formatted file. </p>\n   *\n   *          <p>\n   *             <code>DetectProtectiveEquipment</code> detects PPE worn by up to 15 persons detected in an image.</p>\n   *          <p>For each person detected in the image the API returns an array of body parts (face, head, left-hand, right-hand).\n   *          For each body part, an array of detected items of PPE is returned, including an indicator of whether or not the PPE\n   *          covers the body part. The API returns the confidence it has in each detection\n   *          (person, PPE, body part and body part coverage). It also returns a bounding box (<a>BoundingBox</a>) for each detected\n   *          person and each detected item of PPE. </p>\n   *          <p>You can optionally request a summary of detected PPE items with the <code>SummarizationAttributes</code> input parameter.\n   *          The summary provides the following information. </p>\n   *          <ul>\n   *             <li>\n   *                <p>The persons detected as wearing all of the types of PPE that you specify.</p>\n   *             </li>\n   *             <li>\n   *                <p>The persons detected as not wearing all of the types PPE that you specify.</p>\n   *             </li>\n   *             <li>\n   *                <p>The persons detected where PPE adornment could not be determined. </p>\n   *             </li>\n   *          </ul>\n   *          <p>This is a stateless API operation. That is, the operation does not persist any data.</p>\n   *\n   *          <p>This operation requires permissions to perform the <code>rekognition:DetectProtectiveEquipment</code> action. </p>\n   */\n  public detectProtectiveEquipment(\n    args: DetectProtectiveEquipmentCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DetectProtectiveEquipmentCommandOutput>;\n  public detectProtectiveEquipment(\n    args: DetectProtectiveEquipmentCommandInput,\n    cb: (err: any, data?: DetectProtectiveEquipmentCommandOutput) => void\n  ): void;\n  public detectProtectiveEquipment(\n    args: DetectProtectiveEquipmentCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DetectProtectiveEquipmentCommandOutput) => void\n  ): void;\n  public detectProtectiveEquipment(\n    args: DetectProtectiveEquipmentCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DetectProtectiveEquipmentCommandOutput) => void),\n    cb?: (err: any, data?: DetectProtectiveEquipmentCommandOutput) => void\n  ): Promise<DetectProtectiveEquipmentCommandOutput> | void {\n    const command = new DetectProtectiveEquipmentCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Detects text in the input image and converts it into machine-readable text.</p>\n   *          <p>Pass the input image as base64-encoded image bytes or as a reference to an image in an\n   *       Amazon S3 bucket. If you use the AWS CLI to call Amazon Rekognition operations, you must pass it as a\n   *       reference to an image in an Amazon S3 bucket. For the AWS CLI, passing image bytes is not\n   *       supported. The image must be either a .png or .jpeg formatted file. </p>\n   *          <p>The <code>DetectText</code> operation returns text in an array of <a>TextDetection</a> elements, <code>TextDetections</code>. Each\n   *         <code>TextDetection</code> element provides information about a single word or line of text\n   *       that was detected in the image. </p>\n   *          <p>A word is one or more ISO basic latin script characters that are not separated by spaces.\n   *         <code>DetectText</code> can detect up to 50 words in an image.</p>\n   *          <p>A line is a string of equally spaced words. A line isn't necessarily a complete\n   *       sentence. For example, a driver's license number is detected as a line. A line ends when there\n   *       is no aligned text after it. Also, a line ends when there is a large gap between words,\n   *       relative to the length of the words. This means, depending on the gap between words, Amazon Rekognition\n   *       may detect multiple lines in text aligned in the same direction. Periods don't represent the\n   *       end of a line. If a sentence spans multiple lines, the <code>DetectText</code> operation\n   *       returns multiple lines.</p>\n   *          <p>To determine whether a <code>TextDetection</code> element is a line of text or a word,\n   *       use the <code>TextDetection</code> object <code>Type</code> field. </p>\n   *          <p>To be detected, text must be within +/- 90 degrees orientation of the horizontal axis.</p>\n   *\n   *          <p>For more information, see DetectText in the Amazon Rekognition Developer Guide.</p>\n   */\n  public detectText(args: DetectTextCommandInput, options?: __HttpHandlerOptions): Promise<DetectTextCommandOutput>;\n  public detectText(args: DetectTextCommandInput, cb: (err: any, data?: DetectTextCommandOutput) => void): void;\n  public detectText(\n    args: DetectTextCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DetectTextCommandOutput) => void\n  ): void;\n  public detectText(\n    args: DetectTextCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DetectTextCommandOutput) => void),\n    cb?: (err: any, data?: DetectTextCommandOutput) => void\n  ): Promise<DetectTextCommandOutput> | void {\n    const command = new DetectTextCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets the name and additional information about a celebrity based on his or her\n   *       Amazon Rekognition ID. The additional information is returned as an array of URLs. If there is no\n   *       additional information about the celebrity, this list is empty.</p>\n   *\n   *          <p>For more information, see Recognizing Celebrities in an Image in\n   *       the Amazon Rekognition Developer Guide.</p>\n   *          <p>This operation requires permissions to perform the\n   *         <code>rekognition:GetCelebrityInfo</code> action. </p>\n   */\n  public getCelebrityInfo(\n    args: GetCelebrityInfoCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<GetCelebrityInfoCommandOutput>;\n  public getCelebrityInfo(\n    args: GetCelebrityInfoCommandInput,\n    cb: (err: any, data?: GetCelebrityInfoCommandOutput) => void\n  ): void;\n  public getCelebrityInfo(\n    args: GetCelebrityInfoCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: GetCelebrityInfoCommandOutput) => void\n  ): void;\n  public getCelebrityInfo(\n    args: GetCelebrityInfoCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: GetCelebrityInfoCommandOutput) => void),\n    cb?: (err: any, data?: GetCelebrityInfoCommandOutput) => void\n  ): Promise<GetCelebrityInfoCommandOutput> | void {\n    const command = new GetCelebrityInfoCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets the celebrity recognition results for a Amazon Rekognition Video analysis started by\n   *      <a>StartCelebrityRecognition</a>.</p>\n   *          <p>Celebrity recognition in a video is an asynchronous operation. Analysis is started by a call\n   *       to <a>StartCelebrityRecognition</a>  which returns a job identifier (<code>JobId</code>).\n   *       When the celebrity recognition operation finishes, Amazon Rekognition Video publishes a completion status to the Amazon Simple Notification Service\n   *       topic registered in the initial call to <code>StartCelebrityRecognition</code>.\n   *       To get the results of the celebrity recognition analysis, first check that the status value published to the Amazon SNS\n   *       topic is <code>SUCCEEDED</code>. If so, call  <code>GetCelebrityDetection</code> and pass the job identifier\n   *       (<code>JobId</code>) from the initial call to <code>StartCelebrityDetection</code>. </p>\n   *\n   *          <p>For more information, see Working With Stored Videos in the Amazon Rekognition Developer Guide.</p>\n   *          <p>\n   *             <code>GetCelebrityRecognition</code> returns detected celebrities and the time(s) they are detected in an array\n   *       (<code>Celebrities</code>) of <a>CelebrityRecognition</a>\n   *\n   *       objects. Each <code>CelebrityRecognition</code> contains information about the celebrity in a <a>CelebrityDetail</a>\n   *       object and the time, <code>Timestamp</code>, the celebrity was detected.\n   *       </p>\n   *          <note>\n   *\n   *             <p>\n   *                <code>GetCelebrityRecognition</code> only returns the default\n   *         facial attributes (<code>BoundingBox</code>, <code>Confidence</code>,\n   *         <code>Landmarks</code>, <code>Pose</code>, and <code>Quality</code>). The other facial attributes listed\n   *         in the <code>Face</code> object of the following response syntax are not returned. For more information,\n   *         see FaceDetail in the Amazon Rekognition Developer Guide. </p>\n   *          </note>\n   *          <p>By default, the <code>Celebrities</code> array is sorted by time (milliseconds from the start of the video).\n   *       You can also sort the array by celebrity by specifying the value <code>ID</code> in the <code>SortBy</code> input parameter.</p>\n   *          <p>The <code>CelebrityDetail</code> object includes the celebrity identifer and additional information urls. If you don't store\n   *       the additional information urls, you can get them later by calling <a>GetCelebrityInfo</a> with the celebrity identifer.</p>\n   *          <p>No information is returned for faces not recognized as celebrities.</p>\n   *          <p>Use MaxResults parameter to limit the number of labels returned. If there are more results than\n   *       specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains a\n   *       pagination token for getting the next set of results. To get the next page of results, call <code>GetCelebrityDetection</code>\n   *       and populate the <code>NextToken</code> request parameter with the token\n   *       value returned from the previous call to <code>GetCelebrityRecognition</code>.</p>\n   */\n  public getCelebrityRecognition(\n    args: GetCelebrityRecognitionCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<GetCelebrityRecognitionCommandOutput>;\n  public getCelebrityRecognition(\n    args: GetCelebrityRecognitionCommandInput,\n    cb: (err: any, data?: GetCelebrityRecognitionCommandOutput) => void\n  ): void;\n  public getCelebrityRecognition(\n    args: GetCelebrityRecognitionCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: GetCelebrityRecognitionCommandOutput) => void\n  ): void;\n  public getCelebrityRecognition(\n    args: GetCelebrityRecognitionCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: GetCelebrityRecognitionCommandOutput) => void),\n    cb?: (err: any, data?: GetCelebrityRecognitionCommandOutput) => void\n  ): Promise<GetCelebrityRecognitionCommandOutput> | void {\n    const command = new GetCelebrityRecognitionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets the unsafe content analysis results for a Amazon Rekognition Video analysis started by\n   *        <a>StartContentModeration</a>.</p>\n   *\n   *          <p>Unsafe content analysis of a video is an asynchronous operation. You start analysis by calling\n   *        <a>StartContentModeration</a> which returns a job identifier (<code>JobId</code>).\n   *        When analysis finishes, Amazon Rekognition Video publishes a completion status to the Amazon Simple Notification Service\n   *        topic registered in the initial call to <code>StartContentModeration</code>.\n   *        To get the results of the unsafe content analysis, first check that the status value published to the Amazon SNS\n   *        topic is <code>SUCCEEDED</code>. If so, call  <code>GetContentModeration</code> and pass the job identifier\n   *        (<code>JobId</code>) from the initial call to <code>StartContentModeration</code>. </p>\n   *\n   *          <p>For more information, see Working with Stored Videos in the\n   *      Amazon Rekognition Devlopers Guide.</p>\n   *          <p>\n   *             <code>GetContentModeration</code> returns detected unsafe content labels,\n   *       and the time they are detected, in an array, <code>ModerationLabels</code>, of\n   *       <a>ContentModerationDetection</a> objects.\n   *      </p>\n   *          <p>By default, the moderated labels are returned sorted by time, in milliseconds from the start of the\n   *        video. You can also sort them by moderated label by specifying <code>NAME</code> for the <code>SortBy</code>\n   *        input parameter. </p>\n   *          <p>Since video analysis can return a large number of results, use the <code>MaxResults</code> parameter to limit\n   *       the number of labels returned in a single call to <code>GetContentModeration</code>. If there are more results than\n   *        specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains a\n   *        pagination token for getting the next set of results. To get the next page of results, call <code>GetContentModeration</code>\n   *        and populate the <code>NextToken</code> request parameter with the value of <code>NextToken</code>\n   *        returned from the previous call to <code>GetContentModeration</code>.</p>\n   *\n   *          <p>For more information, see Detecting Unsafe Content in the Amazon Rekognition Developer Guide.</p>\n   */\n  public getContentModeration(\n    args: GetContentModerationCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<GetContentModerationCommandOutput>;\n  public getContentModeration(\n    args: GetContentModerationCommandInput,\n    cb: (err: any, data?: GetContentModerationCommandOutput) => void\n  ): void;\n  public getContentModeration(\n    args: GetContentModerationCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: GetContentModerationCommandOutput) => void\n  ): void;\n  public getContentModeration(\n    args: GetContentModerationCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: GetContentModerationCommandOutput) => void),\n    cb?: (err: any, data?: GetContentModerationCommandOutput) => void\n  ): Promise<GetContentModerationCommandOutput> | void {\n    const command = new GetContentModerationCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets face detection results for a Amazon Rekognition Video analysis started by <a>StartFaceDetection</a>.</p>\n   *          <p>Face detection with Amazon Rekognition Video is an asynchronous operation. You start face detection by calling <a>StartFaceDetection</a>\n   *      which returns a job identifier (<code>JobId</code>). When the face detection operation finishes, Amazon Rekognition Video publishes a completion status to\n   *      the Amazon Simple Notification Service topic registered in the initial call to <code>StartFaceDetection</code>. To get the results\n   *      of the face detection operation, first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>.\n   *      If so, call  <a>GetFaceDetection</a> and pass the job identifier\n   *      (<code>JobId</code>) from the initial call to <code>StartFaceDetection</code>.</p>\n   *          <p>\n   *             <code>GetFaceDetection</code> returns an array of detected faces (<code>Faces</code>) sorted by the time the faces were detected. </p>\n   *          <p>Use MaxResults parameter to limit the number of labels returned. If there are more results than\n   *    specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains a pagination token for getting the next set\n   *    of results. To get the next page of results, call <code>GetFaceDetection</code> and populate the <code>NextToken</code> request parameter with the token\n   *     value returned from the previous call to <code>GetFaceDetection</code>.</p>\n   */\n  public getFaceDetection(\n    args: GetFaceDetectionCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<GetFaceDetectionCommandOutput>;\n  public getFaceDetection(\n    args: GetFaceDetectionCommandInput,\n    cb: (err: any, data?: GetFaceDetectionCommandOutput) => void\n  ): void;\n  public getFaceDetection(\n    args: GetFaceDetectionCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: GetFaceDetectionCommandOutput) => void\n  ): void;\n  public getFaceDetection(\n    args: GetFaceDetectionCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: GetFaceDetectionCommandOutput) => void),\n    cb?: (err: any, data?: GetFaceDetectionCommandOutput) => void\n  ): Promise<GetFaceDetectionCommandOutput> | void {\n    const command = new GetFaceDetectionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets the face search results for Amazon Rekognition Video face search started by\n   *       <a>StartFaceSearch</a>. The search returns faces in a collection that match the faces\n   *     of persons detected in a video. It also includes the time(s) that faces are matched in the video.</p>\n   *          <p>Face search in a video is an asynchronous operation. You start face search by calling\n   *       to <a>StartFaceSearch</a> which returns a job identifier (<code>JobId</code>).\n   *       When the search operation finishes, Amazon Rekognition Video publishes a completion status to the Amazon Simple Notification Service\n   *       topic registered in the initial call to <code>StartFaceSearch</code>.\n   *       To get the search results, first check that the status value published to the Amazon SNS\n   *       topic is <code>SUCCEEDED</code>. If so, call  <code>GetFaceSearch</code> and pass the job identifier\n   *       (<code>JobId</code>) from the initial call to <code>StartFaceSearch</code>.</p>\n   *\n   *          <p>For more information, see Searching Faces in a Collection in the\n   *       Amazon Rekognition Developer Guide.</p>\n   *          <p>The search results are retured in an array, <code>Persons</code>, of\n   *     <a>PersonMatch</a> objects. Each<code>PersonMatch</code> element contains\n   *     details about the matching faces in the input collection, person information (facial attributes,\n   *     bounding boxes, and person identifer)\n   *     for the matched person, and the time the person was matched in the video.</p>\n   *          <note>\n   *\n   *             <p>\n   *                <code>GetFaceSearch</code> only returns the default\n   *         facial attributes (<code>BoundingBox</code>, <code>Confidence</code>,\n   *         <code>Landmarks</code>, <code>Pose</code>, and <code>Quality</code>). The other facial attributes listed\n   *         in the <code>Face</code> object of the following response syntax are not returned. For more information,\n   *         see FaceDetail in the Amazon Rekognition Developer Guide. </p>\n   *          </note>\n   *\n   *          <p>By default, the <code>Persons</code> array is sorted by the time, in milliseconds from the\n   *     start of the video, persons are matched.\n   *     You can also sort by persons by specifying <code>INDEX</code> for the <code>SORTBY</code> input\n   *     parameter.</p>\n   */\n  public getFaceSearch(\n    args: GetFaceSearchCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<GetFaceSearchCommandOutput>;\n  public getFaceSearch(\n    args: GetFaceSearchCommandInput,\n    cb: (err: any, data?: GetFaceSearchCommandOutput) => void\n  ): void;\n  public getFaceSearch(\n    args: GetFaceSearchCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: GetFaceSearchCommandOutput) => void\n  ): void;\n  public getFaceSearch(\n    args: GetFaceSearchCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: GetFaceSearchCommandOutput) => void),\n    cb?: (err: any, data?: GetFaceSearchCommandOutput) => void\n  ): Promise<GetFaceSearchCommandOutput> | void {\n    const command = new GetFaceSearchCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets the label detection results of a Amazon Rekognition Video analysis started by <a>StartLabelDetection</a>.  </p>\n   *\n   *          <p>The label detection operation is started by a call to <a>StartLabelDetection</a>\n   *       which returns a job identifier (<code>JobId</code>). When the label detection operation finishes, Amazon Rekognition publishes a completion status to\n   *       the Amazon Simple Notification Service topic registered in the initial call to <code>StartlabelDetection</code>. To get the results\n   *       of the label detection operation, first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>.\n   *       If so, call  <a>GetLabelDetection</a> and pass the job identifier\n   *       (<code>JobId</code>) from the initial call to <code>StartLabelDetection</code>.</p>\n   *          <p>\n   *             <code>GetLabelDetection</code> returns an array of detected labels (<code>Labels</code>) sorted by the time\n   *        the labels were detected. You can also sort by the label name by specifying <code>NAME</code> for the\n   *        <code>SortBy</code> input parameter.</p>\n   *          <p>The labels returned include the label name, the percentage confidence in the accuracy of the detected label,\n   *         and the time the label was detected in the video.</p>\n   *          <p>The returned labels also include bounding box information for common objects, a\n   *        hierarchical taxonomy of detected labels, and the version of the label model used for detection.</p>\n   *\n   *          <p>Use MaxResults parameter to limit the number of labels returned. If there are more results than\n   *     specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains a pagination token for getting the next set\n   *     of results. To get the next page of results, call <code>GetlabelDetection</code> and populate the <code>NextToken</code> request parameter with the token\n   *      value returned from the previous call to <code>GetLabelDetection</code>.</p>\n   */\n  public getLabelDetection(\n    args: GetLabelDetectionCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<GetLabelDetectionCommandOutput>;\n  public getLabelDetection(\n    args: GetLabelDetectionCommandInput,\n    cb: (err: any, data?: GetLabelDetectionCommandOutput) => void\n  ): void;\n  public getLabelDetection(\n    args: GetLabelDetectionCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: GetLabelDetectionCommandOutput) => void\n  ): void;\n  public getLabelDetection(\n    args: GetLabelDetectionCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: GetLabelDetectionCommandOutput) => void),\n    cb?: (err: any, data?: GetLabelDetectionCommandOutput) => void\n  ): Promise<GetLabelDetectionCommandOutput> | void {\n    const command = new GetLabelDetectionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets the path tracking results of a Amazon Rekognition Video analysis started by <a>StartPersonTracking</a>.</p>\n   *\n   *          <p>The person path tracking operation is started by a call to <code>StartPersonTracking</code>\n   *      which returns a job identifier (<code>JobId</code>). When the operation finishes, Amazon Rekognition Video publishes a completion status to\n   *      the Amazon Simple Notification Service topic registered in the initial call to <code>StartPersonTracking</code>.</p>\n   *          <p>To get the results of the person path tracking operation, first check\n   *        that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>.\n   *      If so, call  <a>GetPersonTracking</a> and pass the job identifier\n   *      (<code>JobId</code>) from the initial call to <code>StartPersonTracking</code>.</p>\n   *          <p>\n   *             <code>GetPersonTracking</code> returns an array, <code>Persons</code>, of tracked persons and the time(s) their\n   *        paths were tracked in the video. </p>\n   *          <note>\n   *             <p>\n   *                <code>GetPersonTracking</code> only returns the default\n   *        facial attributes (<code>BoundingBox</code>, <code>Confidence</code>,\n   *        <code>Landmarks</code>, <code>Pose</code>, and <code>Quality</code>). The other facial attributes listed\n   *        in the <code>Face</code> object of the following response syntax are not returned. </p>\n   *\n   *             <p>For more information, see FaceDetail in the Amazon Rekognition Developer Guide.</p>\n   *          </note>\n   *\n   *\n   *          <p>By default, the array is sorted by the time(s) a person's path is tracked in the video.\n   *       You can sort by tracked persons by specifying <code>INDEX</code> for the <code>SortBy</code> input parameter.</p>\n   *\n   *          <p>Use the <code>MaxResults</code> parameter to limit the number of items returned. If there are more results than\n   *    specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains a pagination token for getting the next set\n   *    of results. To get the next page of results, call <code>GetPersonTracking</code> and populate the <code>NextToken</code> request parameter with the token\n   *     value returned from the previous call to <code>GetPersonTracking</code>.</p>\n   */\n  public getPersonTracking(\n    args: GetPersonTrackingCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<GetPersonTrackingCommandOutput>;\n  public getPersonTracking(\n    args: GetPersonTrackingCommandInput,\n    cb: (err: any, data?: GetPersonTrackingCommandOutput) => void\n  ): void;\n  public getPersonTracking(\n    args: GetPersonTrackingCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: GetPersonTrackingCommandOutput) => void\n  ): void;\n  public getPersonTracking(\n    args: GetPersonTrackingCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: GetPersonTrackingCommandOutput) => void),\n    cb?: (err: any, data?: GetPersonTrackingCommandOutput) => void\n  ): Promise<GetPersonTrackingCommandOutput> | void {\n    const command = new GetPersonTrackingCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets the segment detection results of a Amazon Rekognition Video analysis started by <a>StartSegmentDetection</a>.</p>\n   *          <p>Segment detection with Amazon Rekognition Video is an asynchronous operation. You start segment detection by\n   *       calling <a>StartSegmentDetection</a> which returns a job identifier (<code>JobId</code>).\n   *       When the segment detection operation finishes, Amazon Rekognition publishes a completion status to the Amazon Simple Notification Service\n   *       topic registered in the initial call to <code>StartSegmentDetection</code>. To get the results\n   *       of the segment detection operation, first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>.\n   *       if so, call <code>GetSegmentDetection</code> and pass the job identifier (<code>JobId</code>) from the initial call\n   *       of <code>StartSegmentDetection</code>.</p>\n   *          <p>\n   *             <code>GetSegmentDetection</code> returns detected segments in an array (<code>Segments</code>)\n   *       of <a>SegmentDetection</a> objects. <code>Segments</code> is sorted by the segment types\n   *       specified in the <code>SegmentTypes</code> input parameter of <code>StartSegmentDetection</code>.\n   *     Each element of the array includes the detected segment, the precentage confidence in the acuracy\n   *       of the detected segment, the type of the segment, and the frame in which the segment was detected.</p>\n   *          <p>Use <code>SelectedSegmentTypes</code> to find out the type of segment detection requested in the\n   *     call to <code>StartSegmentDetection</code>.</p>\n   *          <p>Use the <code>MaxResults</code> parameter to limit the number of segment detections returned. If there are more results than\n   *       specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains\n   *       a pagination token for getting the next set of results. To get the next page of results, call <code>GetSegmentDetection</code>\n   *       and populate the <code>NextToken</code> request parameter with the token value returned from the previous\n   *       call to <code>GetSegmentDetection</code>.</p>\n   *\n   *          <p>For more information, see Detecting Video Segments in Stored Video in the Amazon Rekognition Developer Guide.</p>\n   */\n  public getSegmentDetection(\n    args: GetSegmentDetectionCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<GetSegmentDetectionCommandOutput>;\n  public getSegmentDetection(\n    args: GetSegmentDetectionCommandInput,\n    cb: (err: any, data?: GetSegmentDetectionCommandOutput) => void\n  ): void;\n  public getSegmentDetection(\n    args: GetSegmentDetectionCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: GetSegmentDetectionCommandOutput) => void\n  ): void;\n  public getSegmentDetection(\n    args: GetSegmentDetectionCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: GetSegmentDetectionCommandOutput) => void),\n    cb?: (err: any, data?: GetSegmentDetectionCommandOutput) => void\n  ): Promise<GetSegmentDetectionCommandOutput> | void {\n    const command = new GetSegmentDetectionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets the text detection results of a Amazon Rekognition Video analysis started by <a>StartTextDetection</a>.</p>\n   *          <p>Text detection with Amazon Rekognition Video is an asynchronous operation. You start text detection by\n   *      calling <a>StartTextDetection</a> which returns a job identifier (<code>JobId</code>)\n   *      When the text detection operation finishes, Amazon Rekognition publishes a completion status to the Amazon Simple Notification Service\n   *      topic registered in the initial call to <code>StartTextDetection</code>. To get the results\n   *      of the text detection operation, first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>.\n   *      if so, call <code>GetTextDetection</code> and pass the job identifier (<code>JobId</code>) from the initial call\n   *      of <code>StartLabelDetection</code>.</p>\n   *          <p>\n   *             <code>GetTextDetection</code> returns an array of detected text (<code>TextDetections</code>) sorted by\n   *        the time the text was detected, up to 50 words per frame of video.</p>\n   *          <p>Each element of the array includes the detected text, the precentage confidence in the acuracy\n   *        of the detected text, the time the text was detected, bounding box information for where the text\n   *        was located, and unique identifiers for words and their lines.</p>\n   *          <p>Use MaxResults parameter to limit the number of text detections returned. If there are more results than\n   *      specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains\n   *      a pagination token for getting the next set of results. To get the next page of results, call <code>GetTextDetection</code>\n   *      and populate the <code>NextToken</code> request parameter with the token value returned from the previous\n   *      call to <code>GetTextDetection</code>.</p>\n   */\n  public getTextDetection(\n    args: GetTextDetectionCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<GetTextDetectionCommandOutput>;\n  public getTextDetection(\n    args: GetTextDetectionCommandInput,\n    cb: (err: any, data?: GetTextDetectionCommandOutput) => void\n  ): void;\n  public getTextDetection(\n    args: GetTextDetectionCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: GetTextDetectionCommandOutput) => void\n  ): void;\n  public getTextDetection(\n    args: GetTextDetectionCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: GetTextDetectionCommandOutput) => void),\n    cb?: (err: any, data?: GetTextDetectionCommandOutput) => void\n  ): Promise<GetTextDetectionCommandOutput> | void {\n    const command = new GetTextDetectionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Detects faces in the input image and adds them to the specified collection. </p>\n   *          <p>Amazon Rekognition doesn't save the actual faces that are detected. Instead, the underlying\n   *       detection algorithm first detects the faces in the input image. For each face, the algorithm\n   *       extracts facial features into a feature vector, and stores it in the backend database.\n   *       Amazon Rekognition uses feature vectors when it performs face match and search operations using the\n   *         <a>SearchFaces</a> and <a>SearchFacesByImage</a>\n   *       operations.</p>\n   *\n   *          <p>For more information, see Adding Faces to a Collection in the Amazon Rekognition\n   *       Developer Guide.</p>\n   *          <p>To get the number of faces in a collection, call <a>DescribeCollection</a>. </p>\n   *\n   *          <p>If you're using version 1.0 of the face detection model, <code>IndexFaces</code>\n   *       indexes the 15 largest faces in the input image. Later versions of the face detection model\n   *       index the 100 largest faces in the input image. </p>\n   *          <p>If you're using version 4 or later of the face model, image orientation information\n   *      is not returned in the <code>OrientationCorrection</code> field. </p>\n   *          <p>To determine which version of the model you're using, call <a>DescribeCollection</a>\n   *       and supply the collection ID. You can also get the model version from the value of <code>FaceModelVersion</code> in the response\n   *       from <code>IndexFaces</code>\n   *          </p>\n   *\n   *          <p>For more information, see Model Versioning in the Amazon Rekognition Developer\n   *       Guide.</p>\n   *          <p>If you provide the optional <code>ExternalImageId</code> for the input image you\n   *       provided, Amazon Rekognition associates this ID with all faces that it detects. When you call the <a>ListFaces</a> operation, the response returns the external ID. You can use this\n   *       external image ID to create a client-side index to associate the faces with each image. You\n   *       can then use the index to find all faces in an image.</p>\n   *          <p>You can specify the maximum number of faces to index with the <code>MaxFaces</code> input\n   *       parameter. This is useful when you want to index the largest faces in an image and don't want to index\n   *       smaller faces, such as those belonging to people standing in the background.</p>\n   *          <p>The <code>QualityFilter</code> input parameter allows you to filter out detected faces\n   *       that don’t meet a required quality bar. The quality bar is based on a\n   *       variety of common use cases. By default, <code>IndexFaces</code> chooses the quality bar that's\n   *       used to filter faces.  You can also explicitly choose\n   *       the quality bar. Use <code>QualityFilter</code>, to set the quality bar\n   *       by specifying <code>LOW</code>, <code>MEDIUM</code>, or <code>HIGH</code>.\n   *       If you do not want to filter detected faces, specify <code>NONE</code>. </p>\n   *          <note>\n   *             <p>To use quality filtering, you need a collection associated with version 3 of the\n   *     face model or higher. To get the version of the face model associated with a collection, call\n   *       <a>DescribeCollection</a>. </p>\n   *          </note>\n   *          <p>Information about faces detected in an image, but not indexed, is returned in an array of\n   *       <a>UnindexedFace</a> objects, <code>UnindexedFaces</code>. Faces aren't\n   *       indexed for reasons such as:</p>\n   *          <ul>\n   *             <li>\n   *                <p>The number of faces detected exceeds the value of the <code>MaxFaces</code> request\n   *           parameter.</p>\n   *             </li>\n   *             <li>\n   *                <p>The face is too small compared to the image dimensions.</p>\n   *             </li>\n   *             <li>\n   *                <p>The face is too blurry.</p>\n   *             </li>\n   *             <li>\n   *                <p>The image is too dark.</p>\n   *             </li>\n   *             <li>\n   *                <p>The face has an extreme pose.</p>\n   *             </li>\n   *             <li>\n   *                <p>The face doesn’t have enough detail to be suitable for face search.</p>\n   *             </li>\n   *          </ul>\n   *          <p>In response, the <code>IndexFaces</code> operation returns an array of metadata for\n   *       all detected faces, <code>FaceRecords</code>. This includes: </p>\n   *          <ul>\n   *             <li>\n   *                <p>The bounding box, <code>BoundingBox</code>, of the detected face. </p>\n   *             </li>\n   *             <li>\n   *                <p>A confidence value, <code>Confidence</code>, which indicates the confidence that the\n   *           bounding box contains a face.</p>\n   *             </li>\n   *             <li>\n   *                <p>A face ID, <code>FaceId</code>, assigned by the service for each face that's detected\n   *           and stored.</p>\n   *             </li>\n   *             <li>\n   *                <p>An image ID, <code>ImageId</code>, assigned by the service for the input image.</p>\n   *             </li>\n   *          </ul>\n   *          <p>If you request all facial attributes (by using the <code>detectionAttributes</code>\n   *       parameter), Amazon Rekognition returns detailed facial attributes, such as facial landmarks (for\n   *       example, location of eye and mouth) and other facial attributes. If you provide\n   *       the same image, specify the same collection, and use the same external ID in the\n   *         <code>IndexFaces</code> operation, Amazon Rekognition doesn't save duplicate face metadata.</p>\n   *\n   *\n   *          <p></p>\n   *\n   *\n   *          <p>The input image is passed either as base64-encoded image bytes, or as a reference to an\n   *       image in an Amazon S3 bucket. If you use the AWS CLI to call Amazon Rekognition operations,\n   *       passing image bytes isn't supported. The image must be formatted as a PNG or JPEG file. </p>\n   *          <p>This operation requires permissions to perform the <code>rekognition:IndexFaces</code>\n   *       action.</p>\n   */\n  public indexFaces(args: IndexFacesCommandInput, options?: __HttpHandlerOptions): Promise<IndexFacesCommandOutput>;\n  public indexFaces(args: IndexFacesCommandInput, cb: (err: any, data?: IndexFacesCommandOutput) => void): void;\n  public indexFaces(\n    args: IndexFacesCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: IndexFacesCommandOutput) => void\n  ): void;\n  public indexFaces(\n    args: IndexFacesCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: IndexFacesCommandOutput) => void),\n    cb?: (err: any, data?: IndexFacesCommandOutput) => void\n  ): Promise<IndexFacesCommandOutput> | void {\n    const command = new IndexFacesCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Returns list of collection IDs in your account.\n   *     If the result is truncated, the response also provides a <code>NextToken</code>\n   *     that you can use in the subsequent request to fetch the next set of collection IDs.</p>\n   *\n   *          <p>For an example, see Listing Collections in the Amazon Rekognition Developer Guide.</p>\n   *          <p>This operation requires permissions to perform the <code>rekognition:ListCollections</code> action.</p>\n   */\n  public listCollections(\n    args: ListCollectionsCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<ListCollectionsCommandOutput>;\n  public listCollections(\n    args: ListCollectionsCommandInput,\n    cb: (err: any, data?: ListCollectionsCommandOutput) => void\n  ): void;\n  public listCollections(\n    args: ListCollectionsCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: ListCollectionsCommandOutput) => void\n  ): void;\n  public listCollections(\n    args: ListCollectionsCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: ListCollectionsCommandOutput) => void),\n    cb?: (err: any, data?: ListCollectionsCommandOutput) => void\n  ): Promise<ListCollectionsCommandOutput> | void {\n    const command = new ListCollectionsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Returns metadata for faces in the specified collection.\n   *       This metadata includes information such as the bounding box coordinates, the confidence\n   *       (that the bounding box contains a face), and face ID. For an example, see Listing Faces in a Collection\n   *       in the Amazon Rekognition Developer Guide.</p>\n   *\n   *\n   *          <p>This operation requires permissions to perform the\n   *       <code>rekognition:ListFaces</code> action.</p>\n   */\n  public listFaces(args: ListFacesCommandInput, options?: __HttpHandlerOptions): Promise<ListFacesCommandOutput>;\n  public listFaces(args: ListFacesCommandInput, cb: (err: any, data?: ListFacesCommandOutput) => void): void;\n  public listFaces(\n    args: ListFacesCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: ListFacesCommandOutput) => void\n  ): void;\n  public listFaces(\n    args: ListFacesCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: ListFacesCommandOutput) => void),\n    cb?: (err: any, data?: ListFacesCommandOutput) => void\n  ): Promise<ListFacesCommandOutput> | void {\n    const command = new ListFacesCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets a list of stream processors that you have created with <a>CreateStreamProcessor</a>. </p>\n   */\n  public listStreamProcessors(\n    args: ListStreamProcessorsCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<ListStreamProcessorsCommandOutput>;\n  public listStreamProcessors(\n    args: ListStreamProcessorsCommandInput,\n    cb: (err: any, data?: ListStreamProcessorsCommandOutput) => void\n  ): void;\n  public listStreamProcessors(\n    args: ListStreamProcessorsCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: ListStreamProcessorsCommandOutput) => void\n  ): void;\n  public listStreamProcessors(\n    args: ListStreamProcessorsCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: ListStreamProcessorsCommandOutput) => void),\n    cb?: (err: any, data?: ListStreamProcessorsCommandOutput) => void\n  ): Promise<ListStreamProcessorsCommandOutput> | void {\n    const command = new ListStreamProcessorsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Returns an array of celebrities recognized in the input image.  For more information, see Recognizing Celebrities\n   *     in the Amazon Rekognition Developer Guide. </p>\n   *          <p>\n   *             <code>RecognizeCelebrities</code> returns the 64 largest faces in the image. It lists\n   *       recognized celebrities in the <code>CelebrityFaces</code> array and unrecognized faces in the\n   *         <code>UnrecognizedFaces</code> array. <code>RecognizeCelebrities</code> doesn't return\n   *       celebrities whose faces aren't among the largest 64 faces in the image.</p>\n   *\n   *          <p>For each celebrity recognized, <code>RecognizeCelebrities</code> returns a\n   *         <code>Celebrity</code> object. The <code>Celebrity</code> object contains the celebrity\n   *       name, ID, URL links to additional information, match confidence, and a\n   *         <code>ComparedFace</code> object that you can use to locate the celebrity's face on the\n   *       image.</p>\n   *          <p>Amazon Rekognition doesn't retain information about which images a celebrity has been recognized\n   *       in. Your application must store this information and use the <code>Celebrity</code> ID\n   *       property as a unique identifier for the celebrity. If you don't store the celebrity name or\n   *       additional information URLs returned by <code>RecognizeCelebrities</code>, you will need the\n   *       ID to identify the celebrity in a call to the <a>GetCelebrityInfo</a>\n   *       operation.</p>\n   *          <p>You pass the input image either as base64-encoded image bytes or as a reference to an\n   *       image in an Amazon S3 bucket. If you use the\n   *       AWS\n   *       CLI to call Amazon Rekognition operations, passing image bytes is not\n   *       supported. The image must be either a PNG or JPEG formatted file. </p>\n   *\n   *\n   *\n   *\n   *          <p>For an example, see Recognizing Celebrities in an Image in the Amazon Rekognition Developer Guide.</p>\n   *          <p>This operation requires permissions to perform the\n   *         <code>rekognition:RecognizeCelebrities</code> operation.</p>\n   */\n  public recognizeCelebrities(\n    args: RecognizeCelebritiesCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<RecognizeCelebritiesCommandOutput>;\n  public recognizeCelebrities(\n    args: RecognizeCelebritiesCommandInput,\n    cb: (err: any, data?: RecognizeCelebritiesCommandOutput) => void\n  ): void;\n  public recognizeCelebrities(\n    args: RecognizeCelebritiesCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: RecognizeCelebritiesCommandOutput) => void\n  ): void;\n  public recognizeCelebrities(\n    args: RecognizeCelebritiesCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: RecognizeCelebritiesCommandOutput) => void),\n    cb?: (err: any, data?: RecognizeCelebritiesCommandOutput) => void\n  ): Promise<RecognizeCelebritiesCommandOutput> | void {\n    const command = new RecognizeCelebritiesCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>For a given input face ID, searches for matching faces in the collection the face\n   *       belongs to. You get a face ID when you add a face to the collection using the <a>IndexFaces</a> operation. The operation compares the features of the input face with\n   *       faces in the specified collection. </p>\n   *          <note>\n   *             <p>You can also search faces without indexing faces by using the\n   *           <code>SearchFacesByImage</code> operation.</p>\n   *          </note>\n   *\n   *          <p>\n   *      The operation response returns\n   *       an array of faces that match, ordered by similarity score with the highest\n   *       similarity first. More specifically, it is an\n   *       array of metadata for each face match that is found. Along with the metadata, the response also\n   *       includes a <code>confidence</code> value for each face match, indicating the confidence\n   *       that the specific face matches the input face.\n   *     </p>\n   *\n   *          <p>For an example, see Searching for a Face Using Its Face ID in the Amazon Rekognition Developer Guide.</p>\n   *\n   *          <p>This operation requires permissions to perform the <code>rekognition:SearchFaces</code>\n   *       action.</p>\n   */\n  public searchFaces(args: SearchFacesCommandInput, options?: __HttpHandlerOptions): Promise<SearchFacesCommandOutput>;\n  public searchFaces(args: SearchFacesCommandInput, cb: (err: any, data?: SearchFacesCommandOutput) => void): void;\n  public searchFaces(\n    args: SearchFacesCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: SearchFacesCommandOutput) => void\n  ): void;\n  public searchFaces(\n    args: SearchFacesCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: SearchFacesCommandOutput) => void),\n    cb?: (err: any, data?: SearchFacesCommandOutput) => void\n  ): Promise<SearchFacesCommandOutput> | void {\n    const command = new SearchFacesCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>For a given input image, first detects the largest face in the image, and then searches\n   *       the specified collection for matching faces. The operation compares the features of the input\n   *       face with faces in the specified collection. </p>\n   *          <note>\n   *             <p>To search for all faces in an input image, you might first call the <a>IndexFaces</a> operation, and then use the face IDs returned in subsequent\n   *         calls to the <a>SearchFaces</a> operation. </p>\n   *             <p> You can also call the <code>DetectFaces</code> operation and use the bounding boxes\n   *         in the response to make face crops, which then you can pass in to the\n   *           <code>SearchFacesByImage</code> operation. </p>\n   *          </note>\n   *\n   *          <p>You pass the input image either as base64-encoded image bytes or as a reference to an\n   *       image in an Amazon S3 bucket. If you use the\n   *       AWS\n   *       CLI to call Amazon Rekognition operations, passing image bytes is not\n   *       supported. The image must be either a PNG or JPEG formatted file. </p>\n   *          <p>\n   *       The response returns an array of faces that match, ordered by similarity score with the\n   *       highest similarity first. More specifically, it is an\n   *       array of metadata for each face match found. Along with the metadata, the response also\n   *       includes a <code>similarity</code> indicating how similar the face is\n   *       to the input face.\n   *\n   *       In the response, the operation also returns the bounding\n   *       box (and a confidence level that the bounding box contains a face) of the face that Amazon Rekognition\n   *       used for the input image.\n   *     </p>\n   *\n   *          <p>For an example, Searching for a Face Using an Image in the Amazon Rekognition Developer Guide.</p>\n   *\n   *          <p>The <code>QualityFilter</code> input parameter allows you to filter out detected faces\n   *       that don’t meet a required quality bar. The quality bar is based on a\n   *       variety of common use cases.\n   *       Use <code>QualityFilter</code> to set the quality bar for\n   *       filtering by specifying <code>LOW</code>, <code>MEDIUM</code>, or <code>HIGH</code>.\n   *       If you do not want to filter detected faces, specify <code>NONE</code>. The default\n   *       value is <code>NONE</code>.</p>\n   *          <note>\n   *             <p>To use quality filtering, you need a collection associated with version 3 of the\n   *       face model or higher. To get the version of the face model associated with a collection, call\n   *       <a>DescribeCollection</a>. </p>\n   *          </note>\n   *\n   *          <p>This operation requires permissions to perform the <code>rekognition:SearchFacesByImage</code>\n   *       action.</p>\n   */\n  public searchFacesByImage(\n    args: SearchFacesByImageCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<SearchFacesByImageCommandOutput>;\n  public searchFacesByImage(\n    args: SearchFacesByImageCommandInput,\n    cb: (err: any, data?: SearchFacesByImageCommandOutput) => void\n  ): void;\n  public searchFacesByImage(\n    args: SearchFacesByImageCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: SearchFacesByImageCommandOutput) => void\n  ): void;\n  public searchFacesByImage(\n    args: SearchFacesByImageCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: SearchFacesByImageCommandOutput) => void),\n    cb?: (err: any, data?: SearchFacesByImageCommandOutput) => void\n  ): Promise<SearchFacesByImageCommandOutput> | void {\n    const command = new SearchFacesByImageCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Starts asynchronous recognition of celebrities in a stored video.</p>\n   *          <p>Amazon Rekognition Video can detect celebrities in a video must be stored in an Amazon S3 bucket. Use <a>Video</a> to specify the bucket name\n   *       and the filename of the video.\n   *       <code>StartCelebrityRecognition</code>\n   *       returns a job identifier (<code>JobId</code>) which you use to get the results of the analysis.\n   *       When celebrity recognition analysis is finished, Amazon Rekognition Video publishes a completion status\n   *       to the Amazon Simple Notification Service topic that you specify in <code>NotificationChannel</code>.\n   *       To get the results of the celebrity recognition analysis, first check that the status value published to the Amazon SNS\n   *       topic is <code>SUCCEEDED</code>. If so, call  <a>GetCelebrityRecognition</a> and pass the job identifier\n   *       (<code>JobId</code>) from the initial call to <code>StartCelebrityRecognition</code>. </p>\n   *\n   *          <p>For more information, see Recognizing Celebrities in the Amazon Rekognition Developer Guide.</p>\n   */\n  public startCelebrityRecognition(\n    args: StartCelebrityRecognitionCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StartCelebrityRecognitionCommandOutput>;\n  public startCelebrityRecognition(\n    args: StartCelebrityRecognitionCommandInput,\n    cb: (err: any, data?: StartCelebrityRecognitionCommandOutput) => void\n  ): void;\n  public startCelebrityRecognition(\n    args: StartCelebrityRecognitionCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StartCelebrityRecognitionCommandOutput) => void\n  ): void;\n  public startCelebrityRecognition(\n    args: StartCelebrityRecognitionCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StartCelebrityRecognitionCommandOutput) => void),\n    cb?: (err: any, data?: StartCelebrityRecognitionCommandOutput) => void\n  ): Promise<StartCelebrityRecognitionCommandOutput> | void {\n    const command = new StartCelebrityRecognitionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p> Starts asynchronous detection of unsafe content in a stored video.</p>\n   *          <p>Amazon Rekognition Video can moderate content in a video stored in an Amazon S3 bucket. Use <a>Video</a> to specify the bucket name\n   *       and the filename of the video. <code>StartContentModeration</code>\n   *         returns a job identifier (<code>JobId</code>) which you use to get the results of the analysis.\n   *         When unsafe content analysis is finished, Amazon Rekognition Video publishes a completion status\n   *         to the Amazon Simple Notification Service topic that you specify in <code>NotificationChannel</code>.</p>\n   *         <p>To get the results of the unsafe content analysis, first check that the status value published to the Amazon SNS\n   *         topic is <code>SUCCEEDED</code>. If so, call <a>GetContentModeration</a> and pass the job identifier\n   *         (<code>JobId</code>) from the initial call to <code>StartContentModeration</code>. </p>\n   *\n   *          <p>For more information, see Detecting Unsafe Content in the Amazon Rekognition Developer Guide.</p>\n   */\n  public startContentModeration(\n    args: StartContentModerationCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StartContentModerationCommandOutput>;\n  public startContentModeration(\n    args: StartContentModerationCommandInput,\n    cb: (err: any, data?: StartContentModerationCommandOutput) => void\n  ): void;\n  public startContentModeration(\n    args: StartContentModerationCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StartContentModerationCommandOutput) => void\n  ): void;\n  public startContentModeration(\n    args: StartContentModerationCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StartContentModerationCommandOutput) => void),\n    cb?: (err: any, data?: StartContentModerationCommandOutput) => void\n  ): Promise<StartContentModerationCommandOutput> | void {\n    const command = new StartContentModerationCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Starts asynchronous detection of faces in a stored video.</p>\n   *          <p>Amazon Rekognition Video can detect faces in a video stored in an Amazon S3 bucket.\n   *        Use <a>Video</a> to specify the bucket name and the filename of the video.\n   *        <code>StartFaceDetection</code> returns a job identifier (<code>JobId</code>) that you\n   *        use to get the results of the operation.\n   *        When face detection is finished, Amazon Rekognition Video publishes a completion status\n   *        to the Amazon Simple Notification Service topic that you specify in <code>NotificationChannel</code>.\n   *        To get the results of the face detection operation, first check that the status value published to the Amazon SNS\n   *        topic is <code>SUCCEEDED</code>. If so, call  <a>GetFaceDetection</a> and pass the job identifier\n   *       (<code>JobId</code>) from the initial call to <code>StartFaceDetection</code>.</p>\n   *\n   *          <p>For more information, see Detecting Faces in a Stored Video in the\n   *      Amazon Rekognition Developer Guide.</p>\n   */\n  public startFaceDetection(\n    args: StartFaceDetectionCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StartFaceDetectionCommandOutput>;\n  public startFaceDetection(\n    args: StartFaceDetectionCommandInput,\n    cb: (err: any, data?: StartFaceDetectionCommandOutput) => void\n  ): void;\n  public startFaceDetection(\n    args: StartFaceDetectionCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StartFaceDetectionCommandOutput) => void\n  ): void;\n  public startFaceDetection(\n    args: StartFaceDetectionCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StartFaceDetectionCommandOutput) => void),\n    cb?: (err: any, data?: StartFaceDetectionCommandOutput) => void\n  ): Promise<StartFaceDetectionCommandOutput> | void {\n    const command = new StartFaceDetectionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Starts the asynchronous search for faces in a collection that match the faces of persons detected in a stored video.</p>\n   *          <p>The video must be stored in an Amazon S3 bucket. Use <a>Video</a> to specify the bucket name\n   *       and the filename of the video. <code>StartFaceSearch</code>\n   *       returns a job identifier (<code>JobId</code>) which you use to get the search results once the search has completed.\n   *       When searching is finished, Amazon Rekognition Video publishes a completion status\n   *       to the Amazon Simple Notification Service topic that you specify in <code>NotificationChannel</code>.\n   *       To get the search results, first check that the status value published to the Amazon SNS\n   *       topic is <code>SUCCEEDED</code>. If so, call <a>GetFaceSearch</a> and pass the job identifier\n   *       (<code>JobId</code>) from the initial call to <code>StartFaceSearch</code>. For more information, see\n   *       <a>procedure-person-search-videos</a>.</p>\n   */\n  public startFaceSearch(\n    args: StartFaceSearchCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StartFaceSearchCommandOutput>;\n  public startFaceSearch(\n    args: StartFaceSearchCommandInput,\n    cb: (err: any, data?: StartFaceSearchCommandOutput) => void\n  ): void;\n  public startFaceSearch(\n    args: StartFaceSearchCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StartFaceSearchCommandOutput) => void\n  ): void;\n  public startFaceSearch(\n    args: StartFaceSearchCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StartFaceSearchCommandOutput) => void),\n    cb?: (err: any, data?: StartFaceSearchCommandOutput) => void\n  ): Promise<StartFaceSearchCommandOutput> | void {\n    const command = new StartFaceSearchCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Starts asynchronous detection of labels in a stored video.</p>\n   *          <p>Amazon Rekognition Video can detect labels in a video. Labels are instances of real-world entities.\n   *        This includes objects like flower, tree, and table; events like\n   *        wedding, graduation, and birthday party; concepts like landscape, evening, and nature; and activities\n   *        like a person getting out of a car or a person skiing.</p>\n   *\n   *          <p>The video must be stored in an Amazon S3 bucket. Use <a>Video</a> to specify the bucket name\n   *        and the filename of the video.\n   *         <code>StartLabelDetection</code> returns a job identifier (<code>JobId</code>) which you use to get the\n   *        results of the operation. When label detection is finished, Amazon Rekognition Video publishes a completion status\n   *         to the Amazon Simple Notification Service topic that you specify in <code>NotificationChannel</code>.</p>\n   *          <p>To get the results of the label detection operation, first check that the status value published to the Amazon SNS\n   *         topic is <code>SUCCEEDED</code>. If so, call  <a>GetLabelDetection</a> and pass the job identifier\n   *        (<code>JobId</code>) from the initial call to <code>StartLabelDetection</code>.</p>\n   *         <p></p>\n   */\n  public startLabelDetection(\n    args: StartLabelDetectionCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StartLabelDetectionCommandOutput>;\n  public startLabelDetection(\n    args: StartLabelDetectionCommandInput,\n    cb: (err: any, data?: StartLabelDetectionCommandOutput) => void\n  ): void;\n  public startLabelDetection(\n    args: StartLabelDetectionCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StartLabelDetectionCommandOutput) => void\n  ): void;\n  public startLabelDetection(\n    args: StartLabelDetectionCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StartLabelDetectionCommandOutput) => void),\n    cb?: (err: any, data?: StartLabelDetectionCommandOutput) => void\n  ): Promise<StartLabelDetectionCommandOutput> | void {\n    const command = new StartLabelDetectionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Starts the asynchronous tracking of a person's path in a stored video.</p>\n   *          <p>Amazon Rekognition Video can track the path of people in a video stored in an Amazon S3 bucket. Use <a>Video</a> to specify the bucket name\n   *        and the filename of the video. <code>StartPersonTracking</code>\n   *        returns a job identifier (<code>JobId</code>) which you use to get the results of the operation.\n   *        When label detection is finished, Amazon Rekognition publishes a completion status\n   *        to the Amazon Simple Notification Service topic that you specify in <code>NotificationChannel</code>. </p>\n   *          <p>To get the results of the person detection operation, first check that the status value published to the Amazon SNS\n   *        topic is <code>SUCCEEDED</code>. If so, call  <a>GetPersonTracking</a> and pass the job identifier\n   *       (<code>JobId</code>) from the initial call to <code>StartPersonTracking</code>.</p>\n   */\n  public startPersonTracking(\n    args: StartPersonTrackingCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StartPersonTrackingCommandOutput>;\n  public startPersonTracking(\n    args: StartPersonTrackingCommandInput,\n    cb: (err: any, data?: StartPersonTrackingCommandOutput) => void\n  ): void;\n  public startPersonTracking(\n    args: StartPersonTrackingCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StartPersonTrackingCommandOutput) => void\n  ): void;\n  public startPersonTracking(\n    args: StartPersonTrackingCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StartPersonTrackingCommandOutput) => void),\n    cb?: (err: any, data?: StartPersonTrackingCommandOutput) => void\n  ): Promise<StartPersonTrackingCommandOutput> | void {\n    const command = new StartPersonTrackingCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Starts the running of the version of a model. Starting a model takes a while\n   *       to complete. To check the current state of the model, use <a>DescribeProjectVersions</a>.</p>\n   *          <p>Once the model is running, you can detect custom labels in new images by calling\n   *          <a>DetectCustomLabels</a>.</p>\n   *          <note>\n   *             <p>You are charged for the amount of time that the model is running. To stop a running\n   *       model, call <a>StopProjectVersion</a>.</p>\n   *          </note>\n   *          <p>This operation requires permissions to perform the\n   *          <code>rekognition:StartProjectVersion</code> action.</p>\n   */\n  public startProjectVersion(\n    args: StartProjectVersionCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StartProjectVersionCommandOutput>;\n  public startProjectVersion(\n    args: StartProjectVersionCommandInput,\n    cb: (err: any, data?: StartProjectVersionCommandOutput) => void\n  ): void;\n  public startProjectVersion(\n    args: StartProjectVersionCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StartProjectVersionCommandOutput) => void\n  ): void;\n  public startProjectVersion(\n    args: StartProjectVersionCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StartProjectVersionCommandOutput) => void),\n    cb?: (err: any, data?: StartProjectVersionCommandOutput) => void\n  ): Promise<StartProjectVersionCommandOutput> | void {\n    const command = new StartProjectVersionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Starts asynchronous detection of segment detection in a stored video.</p>\n   *          <p>Amazon Rekognition Video can detect segments in a video stored in an Amazon S3 bucket. Use <a>Video</a> to specify the bucket name and\n   *       the filename of the video. <code>StartSegmentDetection</code> returns a job identifier (<code>JobId</code>) which you use to get\n   *       the results of the operation. When segment detection is finished, Amazon Rekognition Video publishes a completion status to the Amazon Simple Notification Service topic\n   *       that you specify in <code>NotificationChannel</code>.</p>\n   *          <p>You can use the <code>Filters</code> (<a>StartSegmentDetectionFilters</a>)\n   *       input parameter to specify the minimum detection confidence returned in the response.\n   *       Within <code>Filters</code>, use <code>ShotFilter</code> (<a>StartShotDetectionFilter</a>)\n   *       to filter detected shots. Use  <code>TechnicalCueFilter</code> (<a>StartTechnicalCueDetectionFilter</a>)\n   *       to filter technical cues. </p>\n   *          <p>To get the results of the segment detection operation, first check that the status value published to the Amazon SNS\n   *       topic is <code>SUCCEEDED</code>. if so, call <a>GetSegmentDetection</a> and pass the job identifier (<code>JobId</code>)\n   *       from the initial call to <code>StartSegmentDetection</code>. </p>\n   *\n   *\n   *          <p>For more information, see Detecting Video Segments in Stored Video in the Amazon Rekognition Developer Guide.</p>\n   */\n  public startSegmentDetection(\n    args: StartSegmentDetectionCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StartSegmentDetectionCommandOutput>;\n  public startSegmentDetection(\n    args: StartSegmentDetectionCommandInput,\n    cb: (err: any, data?: StartSegmentDetectionCommandOutput) => void\n  ): void;\n  public startSegmentDetection(\n    args: StartSegmentDetectionCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StartSegmentDetectionCommandOutput) => void\n  ): void;\n  public startSegmentDetection(\n    args: StartSegmentDetectionCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StartSegmentDetectionCommandOutput) => void),\n    cb?: (err: any, data?: StartSegmentDetectionCommandOutput) => void\n  ): Promise<StartSegmentDetectionCommandOutput> | void {\n    const command = new StartSegmentDetectionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Starts processing a stream processor. You create a stream processor by calling <a>CreateStreamProcessor</a>.\n   *             To tell <code>StartStreamProcessor</code> which stream processor to start, use the value of the <code>Name</code> field specified in the call to\n   *             <code>CreateStreamProcessor</code>.</p>\n   */\n  public startStreamProcessor(\n    args: StartStreamProcessorCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StartStreamProcessorCommandOutput>;\n  public startStreamProcessor(\n    args: StartStreamProcessorCommandInput,\n    cb: (err: any, data?: StartStreamProcessorCommandOutput) => void\n  ): void;\n  public startStreamProcessor(\n    args: StartStreamProcessorCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StartStreamProcessorCommandOutput) => void\n  ): void;\n  public startStreamProcessor(\n    args: StartStreamProcessorCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StartStreamProcessorCommandOutput) => void),\n    cb?: (err: any, data?: StartStreamProcessorCommandOutput) => void\n  ): Promise<StartStreamProcessorCommandOutput> | void {\n    const command = new StartStreamProcessorCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Starts asynchronous detection of text in a stored video.</p>\n   *          <p>Amazon Rekognition Video can detect text in a video stored in an Amazon S3 bucket. Use <a>Video</a> to specify the bucket name and\n   *        the filename of the video. <code>StartTextDetection</code> returns a job identifier (<code>JobId</code>) which you use to get\n   *        the results of the operation. When text detection is finished, Amazon Rekognition Video publishes a completion status to the Amazon Simple Notification Service topic\n   *        that you specify in <code>NotificationChannel</code>.</p>\n   *          <p>To get the results of the text detection operation, first check that the status value published to the Amazon SNS\n   *        topic is <code>SUCCEEDED</code>. if so, call <a>GetTextDetection</a> and pass the job identifier (<code>JobId</code>)\n   *        from the initial call to <code>StartTextDetection</code>. </p>\n   */\n  public startTextDetection(\n    args: StartTextDetectionCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StartTextDetectionCommandOutput>;\n  public startTextDetection(\n    args: StartTextDetectionCommandInput,\n    cb: (err: any, data?: StartTextDetectionCommandOutput) => void\n  ): void;\n  public startTextDetection(\n    args: StartTextDetectionCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StartTextDetectionCommandOutput) => void\n  ): void;\n  public startTextDetection(\n    args: StartTextDetectionCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StartTextDetectionCommandOutput) => void),\n    cb?: (err: any, data?: StartTextDetectionCommandOutput) => void\n  ): Promise<StartTextDetectionCommandOutput> | void {\n    const command = new StartTextDetectionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Stops a running model. The operation might take a while to complete. To\n   *          check the current status, call <a>DescribeProjectVersions</a>. </p>\n   */\n  public stopProjectVersion(\n    args: StopProjectVersionCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StopProjectVersionCommandOutput>;\n  public stopProjectVersion(\n    args: StopProjectVersionCommandInput,\n    cb: (err: any, data?: StopProjectVersionCommandOutput) => void\n  ): void;\n  public stopProjectVersion(\n    args: StopProjectVersionCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StopProjectVersionCommandOutput) => void\n  ): void;\n  public stopProjectVersion(\n    args: StopProjectVersionCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StopProjectVersionCommandOutput) => void),\n    cb?: (err: any, data?: StopProjectVersionCommandOutput) => void\n  ): Promise<StopProjectVersionCommandOutput> | void {\n    const command = new StopProjectVersionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Stops a running stream processor that was created by <a>CreateStreamProcessor</a>.</p>\n   */\n  public stopStreamProcessor(\n    args: StopStreamProcessorCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StopStreamProcessorCommandOutput>;\n  public stopStreamProcessor(\n    args: StopStreamProcessorCommandInput,\n    cb: (err: any, data?: StopStreamProcessorCommandOutput) => void\n  ): void;\n  public stopStreamProcessor(\n    args: StopStreamProcessorCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StopStreamProcessorCommandOutput) => void\n  ): void;\n  public stopStreamProcessor(\n    args: StopStreamProcessorCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StopStreamProcessorCommandOutput) => void),\n    cb?: (err: any, data?: StopStreamProcessorCommandOutput) => void\n  ): Promise<StopStreamProcessorCommandOutput> | void {\n    const command = new StopStreamProcessorCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}