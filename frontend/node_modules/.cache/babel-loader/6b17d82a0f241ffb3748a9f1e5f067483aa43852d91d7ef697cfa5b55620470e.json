{"ast":null,"code":"var _jsxFileName = \"/Users/yannellym/Desktop/iwantapet/frontend/src/pages/FindApet.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../styles/MainPage.css';\nimport PetCard from '../components/PetCard';\nimport Filter from './Filter';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FindApet({\n  favoritePets,\n  addToFavorites,\n  removeFromFavorites\n}) {\n  _s();\n  // State variables\n  const [searchResults, setSearchResults] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 24;\n  const [totalPages, setTotalPages] = useState(0);\n  const maxPaginationButtons = 9; // Change the maximum number of pagination buttons\n\n  const [showOnlyPetsWithImages, setShowOnlyPetsWithImages] = useState(false);\n  const [minPetsPerPage] = useState(20); // Minimum number of pets per page\n\n  // Filters state\n  const [selectedFilters, setSelectedFilters] = useState({\n    type: 'any',\n    breed: 'any',\n    age: 'any',\n    gender: 'any',\n    size: 'any',\n    coat: 'any'\n  });\n\n  // Function to fetch pets for a specific page\n  const fetchPetsForPage = async (page, filters) => {\n    try {\n      let endpoint = `http://localhost:3002/api/petfinder?page=${page}&limit=${showOnlyPetsWithImages ? 60 : itemsPerPage}`;\n\n      // Add filter parameters to the API request\n      for (const filterKey in filters) {\n        if (filters[filterKey] !== 'any') {\n          endpoint += `&${filterKey}=${filters[filterKey]}`;\n        }\n      }\n      const response = await fetch(endpoint);\n      const data = await response.json();\n      if (data && data.animals) {\n        setSearchResults(applyFilters(data.animals, filters)); // Apply filters to the new data\n        // remove the loading indicator\n        setLoading(false);\n        // set the new data\n        setCurrentPage(page);\n        setTotalPages(data.pagination.total_pages);\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error.message);\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    // Fetch pets for the initial page when the component mounts\n    fetchPetsForPage(currentPage, selectedFilters);\n  }, []);\n  const handlePageChange = page => {\n    // Set loading to true before changing the page\n    setLoading(true);\n\n    // Delay fetching data and scrolling to the top\n    setTimeout(() => {\n      fetchPetsForPage(page, selectedFilters);\n\n      // After the data is loaded, scroll to the top\n      window.scrollTo(0, 0); // Scroll to the top of the page\n    }, 500); // 500 milliseconds (0.5 second) delay\n  };\n\n  const handleFilterChange = async newFilters => {\n    setSearchResults([]);\n    // Set loading to true before fetching new data (this will allow our \"looking through\" message to display)\n    setLoading(true);\n    // Update selected filters\n    setSelectedFilters(newFilters);\n\n    // Set the current page to 1 when filters change\n    setCurrentPage(1);\n\n    // Fetch new data based on the updated filters\n    try {\n      // Construct the API endpoint based on selected filter values\n      let endpoint = `http://localhost:3002/api/petfinder?page=1&limit=${50}`;\n      for (const filterKey in newFilters) {\n        if (newFilters[filterKey] !== 'any') {\n          endpoint += `&${filterKey}=${newFilters[filterKey]}`;\n        }\n      }\n      const response = await fetch(endpoint);\n      const data = await response.json();\n      console.log('API Response:', data);\n      if (data && data.animals) {\n        // Apply filters to the new data, including the \"showOnlyPetsWithImages\" filter\n        const filteredResults = applyFilters(data.animals, newFilters);\n        if (filteredResults.length > 0) {\n          // If there are matching pets, set the search results and total pages\n          setSearchResults(filteredResults);\n          setTotalPages(data.pagination.total_pages);\n        } else {\n          // If there are no matching pets, set the total pages to 0\n          setTotalPages(0);\n        }\n        setLoading(false);\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error.message);\n      setLoading(false);\n    }\n  };\n\n  // Function to filter pet data based on selected filters\n  const applyFilters = (data, filters) => {\n    return data.filter(pet => {\n      let matchesAllFilters = true;\n\n      // Loop through each filter to check if the pet matches the criteria\n      for (const filterKey in filters) {\n        var _filters$filterKey, _pet$filterKey;\n        // Get the filter value and pet value, converting both to lowercase for case-insensitive comparison\n        const filterValue = (_filters$filterKey = filters[filterKey]) === null || _filters$filterKey === void 0 ? void 0 : _filters$filterKey.toLowerCase();\n        const petValue = (_pet$filterKey = pet[filterKey]) === null || _pet$filterKey === void 0 ? void 0 : _pet$filterKey.toLowerCase();\n\n        // If the filter value is \"any,\" skip this filter\n        if (filterValue === 'any') {\n          continue;\n        }\n\n        // Special handling for the \"type\" filter to handle both \"Cat\" and \"Dog\"\n        if (filterKey === 'type') {\n          if (filterValue === 'cat' && petValue !== 'cat') {\n            matchesAllFilters = false;\n            break; // Exit the loop early if there's no match\n          }\n\n          if (filterValue === 'dog' && petValue !== 'dog') {\n            matchesAllFilters = false;\n            break; // Exit the loop early if there's no match\n          }\n        } else if (filterKey === 'breed') {\n          if (filterValue !== 'any' && petValue && !(petValue.primary.toLowerCase().includes(filterValue) || petValue.secondary && petValue.secondary.toLowerCase().includes(filterValue))) {\n            matchesAllFilters = false;\n            break;\n          }\n        } else {\n          // For other filters, compare values directly\n          if (petValue !== filterValue) {\n            matchesAllFilters = false;\n            break; // Exit the loop early if there's no match\n          }\n        }\n      }\n\n      // Filter pets with images\n      if (showOnlyPetsWithImages && (!pet.photos || pet.photos.length === 0)) {\n        matchesAllFilters = false;\n      }\n\n      // If the pet matches all filters, include it in the results\n      return matchesAllFilters;\n    });\n  };\n  const renderPetCards = () => {\n    if (loading) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Looking through all of our amazing pets...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 14\n      }, this);\n    } else {\n      if (searchResults.length > 0) {\n        // If there are matching pets, display the pet cards\n        return searchResults.map(pet => /*#__PURE__*/_jsxDEV(PetCard, {\n          pet: pet,\n          addToFavorites: addToFavorites,\n          removeFromFavorites: removeFromFavorites,\n          isFavorite: favoritePets.some(favoritePet => favoritePet.id === pet.id)\n        }, pet.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this));\n      } else {\n        // If there are no matching pets, display a message and set total pages to 0\n        setTotalPages(0);\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No pets match your criteria.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 16\n        }, this);\n      }\n    }\n  };\n  const generatePaginationButtons = () => {\n    if (totalPages > 1) {\n      const buttons = [];\n      // Calculate the starting and ending page numbers to display\n      const startPage = Math.max(1, currentPage - Math.floor(maxPaginationButtons / 2));\n      const endPage = Math.min(totalPages, startPage + maxPaginationButtons - 1);\n\n      // Iterate through the pages and create buttons for each page\n      for (let page = startPage; page <= endPage; page++) {\n        buttons.push( /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePageChange(page) // Set an onClick handler to change the page\n          ,\n          className: currentPage === page ? 'active' : '' // Apply the 'active' class to the current page\n          ,\n          children: [page, \" \"]\n        }, page, true, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this));\n      }\n      return buttons; // Return the generated pagination buttons\n    } else {\n      // If there's only one page or no pages, return null to hide the buttons\n      return null;\n    }\n  };\n  const handleShowOnlyPetsWithImages = async () => {\n    setShowOnlyPetsWithImages(!showOnlyPetsWithImages);\n\n    // Reset the current page to 1 when applying the \"Show only pets with images\" filter\n    setCurrentPage(1);\n\n    // Apply filters to the cached data\n    const filteredResults = applyFilters(searchResults, selectedFilters);\n\n    // Apply the \"Show only pets with images\" filter\n    let filteredPets = filteredResults;\n    if (showOnlyPetsWithImages) {\n      filteredPets = filteredResults.filter(pet => pet.photos && pet.photos.length > 0);\n    }\n    setSearchResults(filteredPets);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filters\",\n        children: /*#__PURE__*/_jsxDEV(Filter, {\n          onFilterChange: handleFilterChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter-pets\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: showOnlyPetsWithImages,\n            onChange: handleShowOnlyPetsWithImages\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 13\n          }, this), \"Show only pets with images\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pet-card-list\",\n        children: renderPetCards()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pagination-horizontal\",\n        children: generatePaginationButtons()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 253,\n    columnNumber: 5\n  }, this);\n}\n_s(FindApet, \"Av/UIk2QPhvrvS0lemNCd68ndI8=\");\n_c = FindApet;\nexport default FindApet;\nvar _c;\n$RefreshReg$(_c, \"FindApet\");","map":{"version":3,"names":["React","useState","useEffect","PetCard","Filter","jsxDEV","_jsxDEV","FindApet","favoritePets","addToFavorites","removeFromFavorites","_s","searchResults","setSearchResults","loading","setLoading","currentPage","setCurrentPage","itemsPerPage","totalPages","setTotalPages","maxPaginationButtons","showOnlyPetsWithImages","setShowOnlyPetsWithImages","minPetsPerPage","selectedFilters","setSelectedFilters","type","breed","age","gender","size","coat","fetchPetsForPage","page","filters","endpoint","filterKey","response","fetch","data","json","animals","applyFilters","pagination","total_pages","error","console","message","handlePageChange","setTimeout","window","scrollTo","handleFilterChange","newFilters","log","filteredResults","length","filter","pet","matchesAllFilters","_filters$filterKey","_pet$filterKey","filterValue","toLowerCase","petValue","primary","includes","secondary","photos","renderPetCards","children","fileName","_jsxFileName","lineNumber","columnNumber","map","isFavorite","some","favoritePet","id","generatePaginationButtons","buttons","startPage","Math","max","floor","endPage","min","push","onClick","className","handleShowOnlyPetsWithImages","filteredPets","onFilterChange","checked","onChange","_c","$RefreshReg$"],"sources":["/Users/yannellym/Desktop/iwantapet/frontend/src/pages/FindApet.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../styles/MainPage.css';\nimport PetCard from '../components/PetCard';\nimport Filter from './Filter';\n\nfunction FindApet({ favoritePets, addToFavorites, removeFromFavorites }) {\n  // State variables\n  const [searchResults, setSearchResults] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 24;\n  const [totalPages, setTotalPages] = useState(0);\n  const maxPaginationButtons = 9; // Change the maximum number of pagination buttons\n\n  const [showOnlyPetsWithImages, setShowOnlyPetsWithImages] = useState(false);\n  const [minPetsPerPage] = useState(20); // Minimum number of pets per page\n\n  // Filters state\n  const [selectedFilters, setSelectedFilters] = useState({\n    type: 'any',\n    breed: 'any',\n    age: 'any',\n    gender: 'any',\n    size: 'any',\n    coat: 'any',\n  });\n\n  // Function to fetch pets for a specific page\n  const fetchPetsForPage = async (page, filters) => {\n    try {\n      let endpoint = `http://localhost:3002/api/petfinder?page=${page}&limit=${showOnlyPetsWithImages ? 60 : itemsPerPage}`;\n\n      // Add filter parameters to the API request\n      for (const filterKey in filters) {\n        if (filters[filterKey] !== 'any') {\n          endpoint += `&${filterKey}=${filters[filterKey]}`;\n        }\n      }\n\n      const response = await fetch(endpoint);\n      const data = await response.json();\n\n      if (data && data.animals) {\n        setSearchResults(applyFilters(data.animals, filters)); // Apply filters to the new data\n        // remove the loading indicator\n        setLoading(false);\n        // set the new data\n        setCurrentPage(page);\n        setTotalPages(data.pagination.total_pages);\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error.message);\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    // Fetch pets for the initial page when the component mounts\n    fetchPetsForPage(currentPage, selectedFilters);\n  }, []);\n\n  const handlePageChange = (page) => {\n    // Set loading to true before changing the page\n    setLoading(true);\n\n    // Delay fetching data and scrolling to the top\n    setTimeout(() => {\n      fetchPetsForPage(page, selectedFilters);\n\n      // After the data is loaded, scroll to the top\n      window.scrollTo(0, 0); // Scroll to the top of the page\n    }, 500); // 500 milliseconds (0.5 second) delay\n  };\n\n  const handleFilterChange = async (newFilters) => {\n    setSearchResults([]);\n    // Set loading to true before fetching new data (this will allow our \"looking through\" message to display)\n    setLoading(true);\n    // Update selected filters\n    setSelectedFilters(newFilters);\n  \n    // Set the current page to 1 when filters change\n    setCurrentPage(1);\n  \n    // Fetch new data based on the updated filters\n    try {\n      // Construct the API endpoint based on selected filter values\n      let endpoint = `http://localhost:3002/api/petfinder?page=1&limit=${50}`;\n      for (const filterKey in newFilters) {\n        if (newFilters[filterKey] !== 'any') {\n          endpoint += `&${filterKey}=${newFilters[filterKey]}`;\n        }\n      }\n  \n      const response = await fetch(endpoint);\n      const data = await response.json();\n  \n      console.log('API Response:', data);\n  \n      if (data && data.animals) {\n  \n        // Apply filters to the new data, including the \"showOnlyPetsWithImages\" filter\n        const filteredResults = applyFilters(data.animals, newFilters);\n  \n        if (filteredResults.length > 0) {\n          // If there are matching pets, set the search results and total pages\n          setSearchResults(filteredResults);\n          setTotalPages(data.pagination.total_pages);\n        } else {\n          // If there are no matching pets, set the total pages to 0\n          setTotalPages(0);\n        }\n  \n        setLoading(false);\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error.message);\n      setLoading(false);\n    }\n  };\n  \n\n  // Function to filter pet data based on selected filters\n  const applyFilters = (data, filters) => {\n    return data.filter((pet) => {\n      let matchesAllFilters = true;\n\n      // Loop through each filter to check if the pet matches the criteria\n      for (const filterKey in filters) {\n        // Get the filter value and pet value, converting both to lowercase for case-insensitive comparison\n        const filterValue = filters[filterKey]?.toLowerCase();\n        const petValue = pet[filterKey]?.toLowerCase();\n\n        // If the filter value is \"any,\" skip this filter\n        if (filterValue === 'any') {\n          continue;\n        }\n\n        // Special handling for the \"type\" filter to handle both \"Cat\" and \"Dog\"\n        if (filterKey === 'type') {\n          if (filterValue === 'cat' && petValue !== 'cat') {\n            matchesAllFilters = false;\n            break; // Exit the loop early if there's no match\n          }\n          if (filterValue === 'dog' && petValue !== 'dog') {\n            matchesAllFilters = false;\n            break; // Exit the loop early if there's no match\n          }\n        } else if (filterKey === 'breed') {\n          if (\n            filterValue !== 'any' &&\n            petValue &&\n            !(\n              petValue.primary.toLowerCase().includes(filterValue) ||\n              (petValue.secondary && petValue.secondary.toLowerCase().includes(filterValue))\n            )\n          ) {\n            matchesAllFilters = false;\n            break;\n          }\n        } else {\n          // For other filters, compare values directly\n          if (petValue !== filterValue) {\n            matchesAllFilters = false;\n            break; // Exit the loop early if there's no match\n          }\n        }\n      }\n\n      // Filter pets with images\n      if (showOnlyPetsWithImages && (!pet.photos || pet.photos.length === 0)) {\n        matchesAllFilters = false;\n      }\n\n      // If the pet matches all filters, include it in the results\n      return matchesAllFilters;\n    });\n  };\n\n  const renderPetCards = () => {\n    if (loading) {\n      return <p>Looking through all of our amazing pets...</p>;\n    } else {\n      if (searchResults.length > 0) {\n        // If there are matching pets, display the pet cards\n        return searchResults.map((pet) => (\n          <PetCard\n            key={pet.id}\n            pet={pet}\n            addToFavorites={addToFavorites}\n            removeFromFavorites={removeFromFavorites}\n            isFavorite={favoritePets.some((favoritePet) => favoritePet.id === pet.id)}\n          />\n        ));\n      } else {\n        // If there are no matching pets, display a message and set total pages to 0\n        setTotalPages(0);\n        return <p>No pets match your criteria.</p>;\n      }\n    }\n  };\n\n\n  const generatePaginationButtons = () => {\n    if (totalPages > 1) {\n      const buttons = [];\n      // Calculate the starting and ending page numbers to display\n      const startPage = Math.max(1, currentPage - Math.floor(maxPaginationButtons / 2));\n      const endPage = Math.min(totalPages, startPage + maxPaginationButtons - 1);\n\n      // Iterate through the pages and create buttons for each page\n      for (let page = startPage; page <= endPage; page++) {\n        buttons.push(\n          <button\n            key={page}\n            onClick={() => handlePageChange(page)} // Set an onClick handler to change the page\n            className={currentPage === page ? 'active' : ''} // Apply the 'active' class to the current page\n          >\n            {page} {/* Display the page number as button text */}\n          </button>\n        );\n      }\n\n      return buttons; // Return the generated pagination buttons\n    } else {\n      // If there's only one page or no pages, return null to hide the buttons\n      return null;\n    }\n  };\n\n  const handleShowOnlyPetsWithImages = async () => {\n  setShowOnlyPetsWithImages(!showOnlyPetsWithImages);\n\n  // Reset the current page to 1 when applying the \"Show only pets with images\" filter\n  setCurrentPage(1);\n\n  // Apply filters to the cached data\n  const filteredResults = applyFilters(searchResults, selectedFilters);\n\n  // Apply the \"Show only pets with images\" filter\n  let filteredPets = filteredResults;\n\n  if (showOnlyPetsWithImages) {\n    filteredPets = filteredResults.filter((pet) => pet.photos && pet.photos.length > 0);\n  }\n\n  setSearchResults(filteredPets);\n};\n\n  \n\n  return (\n    <div className=\"main-page\">\n      <div className=\"sidebar\">\n        <div className=\"filters\">\n          <Filter onFilterChange={handleFilterChange} />\n        </div>\n      </div>\n      <div className=\"content\">\n        <div className=\"filter-pets\">\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={showOnlyPetsWithImages}\n              onChange={handleShowOnlyPetsWithImages}\n            />\n            Show only pets with images\n          </label>\n        </div>\n        <div className=\"pet-card-list\">\n          {renderPetCards()}\n        </div>\n        <div className=\"pagination-horizontal\">\n          {generatePaginationButtons()}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default FindApet;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,wBAAwB;AAC/B,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,MAAM,MAAM,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,SAASC,QAAQA,CAAC;EAAEC,YAAY;EAAEC,cAAc;EAAEC;AAAoB,CAAC,EAAE;EAAAC,EAAA;EACvE;EACA,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACe,WAAW,EAAEC,cAAc,CAAC,GAAGhB,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAMiB,YAAY,GAAG,EAAE;EACvB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGnB,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAMoB,oBAAoB,GAAG,CAAC,CAAC,CAAC;;EAEhC,MAAM,CAACC,sBAAsB,EAAEC,yBAAyB,CAAC,GAAGtB,QAAQ,CAAC,KAAK,CAAC;EAC3E,MAAM,CAACuB,cAAc,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAEvC;EACA,MAAM,CAACwB,eAAe,EAAEC,kBAAkB,CAAC,GAAGzB,QAAQ,CAAC;IACrD0B,IAAI,EAAE,KAAK;IACXC,KAAK,EAAE,KAAK;IACZC,GAAG,EAAE,KAAK;IACVC,MAAM,EAAE,KAAK;IACbC,IAAI,EAAE,KAAK;IACXC,IAAI,EAAE;EACR,CAAC,CAAC;;EAEF;EACA,MAAMC,gBAAgB,GAAG,MAAAA,CAAOC,IAAI,EAAEC,OAAO,KAAK;IAChD,IAAI;MACF,IAAIC,QAAQ,GAAI,4CAA2CF,IAAK,UAASZ,sBAAsB,GAAG,EAAE,GAAGJ,YAAa,EAAC;;MAErH;MACA,KAAK,MAAMmB,SAAS,IAAIF,OAAO,EAAE;QAC/B,IAAIA,OAAO,CAACE,SAAS,CAAC,KAAK,KAAK,EAAE;UAChCD,QAAQ,IAAK,IAAGC,SAAU,IAAGF,OAAO,CAACE,SAAS,CAAE,EAAC;QACnD;MACF;MAEA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,QAAQ,CAAC;MACtC,MAAMI,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAElC,IAAID,IAAI,IAAIA,IAAI,CAACE,OAAO,EAAE;QACxB7B,gBAAgB,CAAC8B,YAAY,CAACH,IAAI,CAACE,OAAO,EAAEP,OAAO,CAAC,CAAC,CAAC,CAAC;QACvD;QACApB,UAAU,CAAC,KAAK,CAAC;QACjB;QACAE,cAAc,CAACiB,IAAI,CAAC;QACpBd,aAAa,CAACoB,IAAI,CAACI,UAAU,CAACC,WAAW,CAAC;MAC5C;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAACE,OAAO,CAAC;MACpDjC,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAEDb,SAAS,CAAC,MAAM;IACd;IACA+B,gBAAgB,CAACjB,WAAW,EAAES,eAAe,CAAC;EAChD,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMwB,gBAAgB,GAAIf,IAAI,IAAK;IACjC;IACAnB,UAAU,CAAC,IAAI,CAAC;;IAEhB;IACAmC,UAAU,CAAC,MAAM;MACfjB,gBAAgB,CAACC,IAAI,EAAET,eAAe,CAAC;;MAEvC;MACA0B,MAAM,CAACC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACzB,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;EACX,CAAC;;EAED,MAAMC,kBAAkB,GAAG,MAAOC,UAAU,IAAK;IAC/CzC,gBAAgB,CAAC,EAAE,CAAC;IACpB;IACAE,UAAU,CAAC,IAAI,CAAC;IAChB;IACAW,kBAAkB,CAAC4B,UAAU,CAAC;;IAE9B;IACArC,cAAc,CAAC,CAAC,CAAC;;IAEjB;IACA,IAAI;MACF;MACA,IAAImB,QAAQ,GAAI,oDAAmD,EAAG,EAAC;MACvE,KAAK,MAAMC,SAAS,IAAIiB,UAAU,EAAE;QAClC,IAAIA,UAAU,CAACjB,SAAS,CAAC,KAAK,KAAK,EAAE;UACnCD,QAAQ,IAAK,IAAGC,SAAU,IAAGiB,UAAU,CAACjB,SAAS,CAAE,EAAC;QACtD;MACF;MAEA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,QAAQ,CAAC;MACtC,MAAMI,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAElCM,OAAO,CAACQ,GAAG,CAAC,eAAe,EAAEf,IAAI,CAAC;MAElC,IAAIA,IAAI,IAAIA,IAAI,CAACE,OAAO,EAAE;QAExB;QACA,MAAMc,eAAe,GAAGb,YAAY,CAACH,IAAI,CAACE,OAAO,EAAEY,UAAU,CAAC;QAE9D,IAAIE,eAAe,CAACC,MAAM,GAAG,CAAC,EAAE;UAC9B;UACA5C,gBAAgB,CAAC2C,eAAe,CAAC;UACjCpC,aAAa,CAACoB,IAAI,CAACI,UAAU,CAACC,WAAW,CAAC;QAC5C,CAAC,MAAM;UACL;UACAzB,aAAa,CAAC,CAAC,CAAC;QAClB;QAEAL,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC,CAAC,OAAO+B,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAACE,OAAO,CAAC;MACpDjC,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;;EAGD;EACA,MAAM4B,YAAY,GAAGA,CAACH,IAAI,EAAEL,OAAO,KAAK;IACtC,OAAOK,IAAI,CAACkB,MAAM,CAAEC,GAAG,IAAK;MAC1B,IAAIC,iBAAiB,GAAG,IAAI;;MAE5B;MACA,KAAK,MAAMvB,SAAS,IAAIF,OAAO,EAAE;QAAA,IAAA0B,kBAAA,EAAAC,cAAA;QAC/B;QACA,MAAMC,WAAW,IAAAF,kBAAA,GAAG1B,OAAO,CAACE,SAAS,CAAC,cAAAwB,kBAAA,uBAAlBA,kBAAA,CAAoBG,WAAW,CAAC,CAAC;QACrD,MAAMC,QAAQ,IAAAH,cAAA,GAAGH,GAAG,CAACtB,SAAS,CAAC,cAAAyB,cAAA,uBAAdA,cAAA,CAAgBE,WAAW,CAAC,CAAC;;QAE9C;QACA,IAAID,WAAW,KAAK,KAAK,EAAE;UACzB;QACF;;QAEA;QACA,IAAI1B,SAAS,KAAK,MAAM,EAAE;UACxB,IAAI0B,WAAW,KAAK,KAAK,IAAIE,QAAQ,KAAK,KAAK,EAAE;YAC/CL,iBAAiB,GAAG,KAAK;YACzB,MAAM,CAAC;UACT;;UACA,IAAIG,WAAW,KAAK,KAAK,IAAIE,QAAQ,KAAK,KAAK,EAAE;YAC/CL,iBAAiB,GAAG,KAAK;YACzB,MAAM,CAAC;UACT;QACF,CAAC,MAAM,IAAIvB,SAAS,KAAK,OAAO,EAAE;UAChC,IACE0B,WAAW,KAAK,KAAK,IACrBE,QAAQ,IACR,EACEA,QAAQ,CAACC,OAAO,CAACF,WAAW,CAAC,CAAC,CAACG,QAAQ,CAACJ,WAAW,CAAC,IACnDE,QAAQ,CAACG,SAAS,IAAIH,QAAQ,CAACG,SAAS,CAACJ,WAAW,CAAC,CAAC,CAACG,QAAQ,CAACJ,WAAW,CAAE,CAC/E,EACD;YACAH,iBAAiB,GAAG,KAAK;YACzB;UACF;QACF,CAAC,MAAM;UACL;UACA,IAAIK,QAAQ,KAAKF,WAAW,EAAE;YAC5BH,iBAAiB,GAAG,KAAK;YACzB,MAAM,CAAC;UACT;QACF;MACF;;MAEA;MACA,IAAItC,sBAAsB,KAAK,CAACqC,GAAG,CAACU,MAAM,IAAIV,GAAG,CAACU,MAAM,CAACZ,MAAM,KAAK,CAAC,CAAC,EAAE;QACtEG,iBAAiB,GAAG,KAAK;MAC3B;;MAEA;MACA,OAAOA,iBAAiB;IAC1B,CAAC,CAAC;EACJ,CAAC;EAED,MAAMU,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAIxD,OAAO,EAAE;MACX,oBAAOR,OAAA;QAAAiE,QAAA,EAAG;MAA0C;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAC1D,CAAC,MAAM;MACL,IAAI/D,aAAa,CAAC6C,MAAM,GAAG,CAAC,EAAE;QAC5B;QACA,OAAO7C,aAAa,CAACgE,GAAG,CAAEjB,GAAG,iBAC3BrD,OAAA,CAACH,OAAO;UAENwD,GAAG,EAAEA,GAAI;UACTlD,cAAc,EAAEA,cAAe;UAC/BC,mBAAmB,EAAEA,mBAAoB;UACzCmE,UAAU,EAAErE,YAAY,CAACsE,IAAI,CAAEC,WAAW,IAAKA,WAAW,CAACC,EAAE,KAAKrB,GAAG,CAACqB,EAAE;QAAE,GAJrErB,GAAG,CAACqB,EAAE;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAKZ,CACF,CAAC;MACJ,CAAC,MAAM;QACL;QACAvD,aAAa,CAAC,CAAC,CAAC;QAChB,oBAAOd,OAAA;UAAAiE,QAAA,EAAG;QAA4B;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAC5C;IACF;EACF,CAAC;EAGD,MAAMM,yBAAyB,GAAGA,CAAA,KAAM;IACtC,IAAI9D,UAAU,GAAG,CAAC,EAAE;MAClB,MAAM+D,OAAO,GAAG,EAAE;MAClB;MACA,MAAMC,SAAS,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAErE,WAAW,GAAGoE,IAAI,CAACE,KAAK,CAACjE,oBAAoB,GAAG,CAAC,CAAC,CAAC;MACjF,MAAMkE,OAAO,GAAGH,IAAI,CAACI,GAAG,CAACrE,UAAU,EAAEgE,SAAS,GAAG9D,oBAAoB,GAAG,CAAC,CAAC;;MAE1E;MACA,KAAK,IAAIa,IAAI,GAAGiD,SAAS,EAAEjD,IAAI,IAAIqD,OAAO,EAAErD,IAAI,EAAE,EAAE;QAClDgD,OAAO,CAACO,IAAI,eACVnF,OAAA;UAEEoF,OAAO,EAAEA,CAAA,KAAMzC,gBAAgB,CAACf,IAAI,CAAE,CAAC;UAAA;UACvCyD,SAAS,EAAE3E,WAAW,KAAKkB,IAAI,GAAG,QAAQ,GAAG,EAAG,CAAC;UAAA;UAAAqC,QAAA,GAEhDrC,IAAI,EAAC,GAAC;QAAA,GAJFA,IAAI;UAAAsC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAKH,CACV,CAAC;MACH;MAEA,OAAOO,OAAO,CAAC,CAAC;IAClB,CAAC,MAAM;MACL;MACA,OAAO,IAAI;IACb;EACF,CAAC;EAED,MAAMU,4BAA4B,GAAG,MAAAA,CAAA,KAAY;IACjDrE,yBAAyB,CAAC,CAACD,sBAAsB,CAAC;;IAElD;IACAL,cAAc,CAAC,CAAC,CAAC;;IAEjB;IACA,MAAMuC,eAAe,GAAGb,YAAY,CAAC/B,aAAa,EAAEa,eAAe,CAAC;;IAEpE;IACA,IAAIoE,YAAY,GAAGrC,eAAe;IAElC,IAAIlC,sBAAsB,EAAE;MAC1BuE,YAAY,GAAGrC,eAAe,CAACE,MAAM,CAAEC,GAAG,IAAKA,GAAG,CAACU,MAAM,IAAIV,GAAG,CAACU,MAAM,CAACZ,MAAM,GAAG,CAAC,CAAC;IACrF;IAEA5C,gBAAgB,CAACgF,YAAY,CAAC;EAChC,CAAC;EAIC,oBACEvF,OAAA;IAAKqF,SAAS,EAAC,WAAW;IAAApB,QAAA,gBACxBjE,OAAA;MAAKqF,SAAS,EAAC,SAAS;MAAApB,QAAA,eACtBjE,OAAA;QAAKqF,SAAS,EAAC,SAAS;QAAApB,QAAA,eACtBjE,OAAA,CAACF,MAAM;UAAC0F,cAAc,EAAEzC;QAAmB;UAAAmB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3C;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eACNrE,OAAA;MAAKqF,SAAS,EAAC,SAAS;MAAApB,QAAA,gBACtBjE,OAAA;QAAKqF,SAAS,EAAC,aAAa;QAAApB,QAAA,eAC1BjE,OAAA;UAAAiE,QAAA,gBACEjE,OAAA;YACEqB,IAAI,EAAC,UAAU;YACfoE,OAAO,EAAEzE,sBAAuB;YAChC0E,QAAQ,EAAEJ;UAA6B;YAAApB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACxC,CAAC,8BAEJ;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,eACNrE,OAAA;QAAKqF,SAAS,EAAC,eAAe;QAAApB,QAAA,EAC3BD,cAAc,CAAC;MAAC;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACd,CAAC,eACNrE,OAAA;QAAKqF,SAAS,EAAC,uBAAuB;QAAApB,QAAA,EACnCU,yBAAyB,CAAC;MAAC;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAChE,EAAA,CAjRQJ,QAAQ;AAAA0F,EAAA,GAAR1F,QAAQ;AAmRjB,eAAeA,QAAQ;AAAC,IAAA0F,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}