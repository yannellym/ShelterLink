{"ast":null,"code":"var _jsxFileName = \"/Users/yannellym/Desktop/iwantapet/frontend/src/components/MainPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../styles/MainPage.css';\nimport PetCard from './PetCard';\nimport Filter from './Filter';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MainPage({\n  favoritePets,\n  addToFavorites,\n  removeFromFavorites\n}) {\n  _s();\n  // State variables\n  const [searchResults, setSearchResults] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 100;\n  const [cachedData, setCachedData] = useState([]);\n  const [totalPages, setTotalPages] = useState(0);\n  const maxPaginationButtons = 10;\n\n  // Filters state\n  const [selectedFilters, setSelectedFilters] = useState({\n    type: 'any',\n    breed: 'any',\n    age: 'any',\n    gender: 'any',\n    size: 'any',\n    coat: 'any'\n  });\n\n  // Function to fetch pets for a specific page\n  const fetchPetsForPage = async (page, filters) => {\n    try {\n      let endpoint = `http://localhost:3002/api/petfinder?page=${page}&perPage=${itemsPerPage}`;\n\n      // Add filter parameters to the API request\n      for (const filterKey in filters) {\n        if (filters[filterKey] !== 'any') {\n          endpoint += `&${filterKey}=${filters[filterKey]}`;\n        }\n      }\n      const response = await fetch(endpoint);\n      const data = await response.json();\n      console.log('API Response:', data);\n      if (data && data.animals) {\n        setCachedData(data.animals);\n        setSearchResults(data.animals);\n        setLoading(false);\n        setCurrentPage(page);\n        setTotalPages(data.pagination.total_pages);\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error.message);\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    // Fetch pets for the initial page when the component mounts\n    fetchPetsForPage(currentPage);\n  }, []);\n  const handlePageChange = page => {\n    // Set loading to true before changing the page\n    setLoading(true);\n\n    // Delay fetching data and scrolling to the top\n    setTimeout(() => {\n      fetchPetsForPage(page);\n\n      // After the data is loaded, scroll to the top\n      window.scrollTo(0, 0); // Scroll to the top of the page\n    }, 500); // 500 milliseconds (0.5 second) delay\n  };\n\n  const handleFilterChange = async newFilters => {\n    // Update selected filters\n    setSelectedFilters(newFilters);\n\n    // Filter the cached data based on the new filters\n    const filteredResults = applyFilters(cachedData, newFilters);\n\n    // Set the filtered results as the new search results\n    setSearchResults(filteredResults);\n\n    // Check if any filter has changed and the new value is not \"any\"\n    let shouldFetchData = false;\n    for (const filterKey in newFilters) {\n      if (newFilters[filterKey] !== 'any' && !cachedData.some(pet => {\n        var _pet$filterKey;\n        return ((_pet$filterKey = pet[filterKey]) === null || _pet$filterKey === void 0 ? void 0 : _pet$filterKey.toLowerCase()) === newFilters[filterKey].toLowerCase();\n      })) {\n        shouldFetchData = true;\n        break; // Exit the loop early if a filter value is not in the cache\n      }\n    }\n\n    if (shouldFetchData) {\n      // If any selected filter value is not in the cache, make an API request to fetch data\n      try {\n        // Construct the API endpoint based on selected filter values\n        let endpoint = `http://localhost:3002/api/petfinder?page=${currentPage}&perPage=${itemsPerPage}`;\n        for (const filterKey in newFilters) {\n          if (newFilters[filterKey] !== 'any') {\n            endpoint += `&${filterKey}=${newFilters[filterKey]}`;\n          }\n        }\n        const response = await fetch(endpoint);\n        const data = await response.json();\n        console.log('API Response:', data);\n        if (data && data.animals) {\n          // Add the fetched data to the cache\n          setCachedData([...cachedData, ...data.animals]);\n          // Update the search results with the filtered data\n          setSearchResults(applyFilters([...cachedData, ...data.animals], newFilters));\n          setLoading(false);\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error.message);\n        setLoading(false);\n      }\n    }\n  };\n\n  // Function to filter pet data based on selected filters\n  const applyFilters = (data, filters) => {\n    return data.filter(pet => {\n      let matchesAllFilters = true;\n      for (const filterKey in filters) {\n        var _filters$filterKey, _pet$filterKey2;\n        const filterValue = (_filters$filterKey = filters[filterKey]) === null || _filters$filterKey === void 0 ? void 0 : _filters$filterKey.toLowerCase();\n        const petValue = (_pet$filterKey2 = pet[filterKey]) === null || _pet$filterKey2 === void 0 ? void 0 : _pet$filterKey2.toLowerCase();\n        if (filterValue === 'any') {\n          continue;\n        }\n        if (filterKey === 'type') {\n          if (filterValue === 'cat' && petValue !== 'cat') {\n            matchesAllFilters = false;\n            break;\n          }\n          if (filterValue === 'dog' && petValue !== 'dog') {\n            matchesAllFilters = false;\n            break;\n          }\n        } else if (filterKey === 'age') {\n          if (filterValue === 'young' && petValue !== 'baby' && petValue !== 'young') {\n            matchesAllFilters = false;\n            break;\n          }\n          if (filterValue === 'adult' && petValue !== 'adult') {\n            matchesAllFilters = false;\n            break;\n          }\n          if (filterValue === 'senior' && petValue !== 'senior') {\n            matchesAllFilters = false;\n            break;\n          }\n        } else {\n          if (petValue !== filterValue) {\n            matchesAllFilters = false;\n            break;\n          }\n        }\n      }\n      return matchesAllFilters;\n    });\n  };\n\n  // Function to render the list of pet cards based on applied filters\n  const renderPetCards = () => {\n    if (!loading) {\n      // Apply filters to the cached data\n      const filteredResults = applyFilters(cachedData, selectedFilters);\n\n      // Check if there are matching pets after applying filters\n      if (filteredResults.length > 0) {\n        return filteredResults.map(pet => /*#__PURE__*/_jsxDEV(PetCard, {\n          pet: pet,\n          addToFavorites: addToFavorites,\n          removeFromFavorites: removeFromFavorites,\n          isFavorite: favoritePets.some(favoritePet => favoritePet.id === pet.id)\n        }, pet.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 9\n        }, this));\n      } else {\n        // If no matching pets, display a message\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No pets match your criteria.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 14\n        }, this);\n      }\n    } else {\n      // If data is still loading, display a loading message\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 12\n      }, this);\n    }\n  };\n\n  // Function to generate pagination buttons for navigating between pages\n  const generatePaginationButtons = () => {\n    const buttons = [];\n    // Calculate the starting and ending page numbers to display\n    const startPage = Math.max(1, currentPage - Math.floor(maxPaginationButtons / 2));\n    const endPage = Math.min(totalPages, startPage + maxPaginationButtons - 1);\n\n    // Iterate through the pages and create buttons for each page\n    for (let page = startPage; page <= endPage; page++) {\n      buttons.push( /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handlePageChange(page) // Set an onClick handler to change the page\n        ,\n        className: currentPage === page ? 'active' : '' // Apply the 'active' class to the current page\n        ,\n        children: [page, \" \"]\n      }, page, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 7\n      }, this));\n    }\n    return buttons; // Return the generated pagination buttons\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filters\",\n        children: /*#__PURE__*/_jsxDEV(Filter, {\n          onFilterChange: handleFilterChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pet-card-list\",\n        children: renderPetCards()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pagination-horizontal\",\n        children: generatePaginationButtons()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 225,\n    columnNumber: 5\n  }, this);\n}\n_s(MainPage, \"nn/BOexNGV+9A9Bh8LmMhlbi4ok=\");\n_c = MainPage;\nexport default MainPage;\nvar _c;\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"names":["React","useState","useEffect","PetCard","Filter","jsxDEV","_jsxDEV","MainPage","favoritePets","addToFavorites","removeFromFavorites","_s","searchResults","setSearchResults","loading","setLoading","currentPage","setCurrentPage","itemsPerPage","cachedData","setCachedData","totalPages","setTotalPages","maxPaginationButtons","selectedFilters","setSelectedFilters","type","breed","age","gender","size","coat","fetchPetsForPage","page","filters","endpoint","filterKey","response","fetch","data","json","console","log","animals","pagination","total_pages","error","message","handlePageChange","setTimeout","window","scrollTo","handleFilterChange","newFilters","filteredResults","applyFilters","shouldFetchData","some","pet","_pet$filterKey","toLowerCase","filter","matchesAllFilters","_filters$filterKey","_pet$filterKey2","filterValue","petValue","renderPetCards","length","map","isFavorite","favoritePet","id","fileName","_jsxFileName","lineNumber","columnNumber","children","generatePaginationButtons","buttons","startPage","Math","max","floor","endPage","min","push","onClick","className","onFilterChange","_c","$RefreshReg$"],"sources":["/Users/yannellym/Desktop/iwantapet/frontend/src/components/MainPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../styles/MainPage.css';\nimport PetCard from './PetCard';\nimport Filter from './Filter';\n\nfunction MainPage({ favoritePets, addToFavorites, removeFromFavorites }) {\n  // State variables\n  const [searchResults, setSearchResults] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 100;\n  const [cachedData, setCachedData] = useState([]);\n  const [totalPages, setTotalPages] = useState(0);\n  const maxPaginationButtons = 10; \n\n  // Filters state\n  const [selectedFilters, setSelectedFilters] = useState({\n    type: 'any',\n    breed: 'any',\n    age: 'any',\n    gender: 'any',\n    size: 'any',\n    coat: 'any',\n  });\n\n  // Function to fetch pets for a specific page\n  const fetchPetsForPage = async (page, filters) => {\n    try {\n      let endpoint = `http://localhost:3002/api/petfinder?page=${page}&perPage=${itemsPerPage}`;\n      \n      // Add filter parameters to the API request\n      for (const filterKey in filters) {\n        if (filters[filterKey] !== 'any') {\n          endpoint += `&${filterKey}=${filters[filterKey]}`;\n        }\n      }\n      \n      const response = await fetch(endpoint);\n      const data = await response.json();\n  \n      console.log('API Response:', data);\n  \n      if (data && data.animals) {\n        setCachedData(data.animals);\n        setSearchResults(data.animals);\n        setLoading(false);\n        setCurrentPage(page);\n        setTotalPages(data.pagination.total_pages);\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error.message);\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    // Fetch pets for the initial page when the component mounts\n    fetchPetsForPage(currentPage);\n  }, []);\n\n  const handlePageChange = (page) => {\n    // Set loading to true before changing the page\n    setLoading(true);\n\n    // Delay fetching data and scrolling to the top\n    setTimeout(() => {\n      fetchPetsForPage(page);\n\n      // After the data is loaded, scroll to the top\n      window.scrollTo(0, 0); // Scroll to the top of the page\n    }, 500); // 500 milliseconds (0.5 second) delay\n  };\n\n  const handleFilterChange = async (newFilters) => {\n    // Update selected filters\n    setSelectedFilters(newFilters);\n  \n    // Filter the cached data based on the new filters\n    const filteredResults = applyFilters(cachedData, newFilters);\n  \n    // Set the filtered results as the new search results\n    setSearchResults(filteredResults);\n  \n    // Check if any filter has changed and the new value is not \"any\"\n    let shouldFetchData = false;\n    for (const filterKey in newFilters) {\n      if (newFilters[filterKey] !== 'any' && !cachedData.some(pet => pet[filterKey]?.toLowerCase() === newFilters[filterKey].toLowerCase())) {\n        shouldFetchData = true;\n        break; // Exit the loop early if a filter value is not in the cache\n      }\n    }\n  \n    if (shouldFetchData) {\n      // If any selected filter value is not in the cache, make an API request to fetch data\n      try {\n        // Construct the API endpoint based on selected filter values\n        let endpoint = `http://localhost:3002/api/petfinder?page=${currentPage}&perPage=${itemsPerPage}`;\n        for (const filterKey in newFilters) {\n          if (newFilters[filterKey] !== 'any') {\n            endpoint += `&${filterKey}=${newFilters[filterKey]}`;\n          }\n        }\n  \n        const response = await fetch(endpoint);\n        const data = await response.json();\n  \n        console.log('API Response:', data);\n  \n        if (data && data.animals) {\n          // Add the fetched data to the cache\n          setCachedData([...cachedData, ...data.animals]);\n          // Update the search results with the filtered data\n          setSearchResults(applyFilters([...cachedData, ...data.animals], newFilters));\n          setLoading(false);\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error.message);\n        setLoading(false);\n      }\n    }\n  };\n  \n  \n\n// Function to filter pet data based on selected filters\nconst applyFilters = (data, filters) => {\n  return data.filter((pet) => {\n    let matchesAllFilters = true;\n\n    for (const filterKey in filters) {\n      const filterValue = filters[filterKey]?.toLowerCase();\n      const petValue = pet[filterKey]?.toLowerCase();\n\n      if (filterValue === 'any') {\n        continue;\n      }\n\n      if (filterKey === 'type') {\n        if (filterValue === 'cat' && petValue !== 'cat') {\n          matchesAllFilters = false;\n          break;\n        }\n        if (filterValue === 'dog' && petValue !== 'dog') {\n          matchesAllFilters = false;\n          break;\n        }\n      } else if (filterKey === 'age') {\n        if (filterValue === 'young' && petValue !== 'baby' && petValue !== 'young') {\n          matchesAllFilters = false;\n          break;\n        }\n        if (filterValue === 'adult' && petValue !== 'adult') {\n          matchesAllFilters = false;\n          break;\n        }\n        if (filterValue === 'senior' && petValue !== 'senior') {\n          matchesAllFilters = false;\n          break;\n        }\n      } else {\n        if (petValue !== filterValue) {\n          matchesAllFilters = false;\n          break;\n        }\n      }\n    }\n\n    return matchesAllFilters;\n  });\n};\n\n\n// Function to render the list of pet cards based on applied filters\nconst renderPetCards = () => {\n  if (!loading) {\n    // Apply filters to the cached data\n    const filteredResults = applyFilters(cachedData, selectedFilters);\n\n    // Check if there are matching pets after applying filters\n    if (filteredResults.length > 0) {\n      return filteredResults.map((pet) => (\n        <PetCard\n          key={pet.id}\n          pet={pet}\n          addToFavorites={addToFavorites}\n          removeFromFavorites={removeFromFavorites}\n          isFavorite={favoritePets.some((favoritePet) => favoritePet.id === pet.id)}\n        />\n      ));\n    } else {\n      // If no matching pets, display a message\n      return <p>No pets match your criteria.</p>;\n    }\n  } else {\n    // If data is still loading, display a loading message\n    return <p>Loading...</p>;\n  }\n};\n\n// Function to generate pagination buttons for navigating between pages\nconst generatePaginationButtons = () => {\n  const buttons = [];\n  // Calculate the starting and ending page numbers to display\n  const startPage = Math.max(1, currentPage - Math.floor(maxPaginationButtons / 2));\n  const endPage = Math.min(totalPages, startPage + maxPaginationButtons - 1);\n\n  // Iterate through the pages and create buttons for each page\n  for (let page = startPage; page <= endPage; page++) {\n    buttons.push(\n      <button\n        key={page}\n        onClick={() => handlePageChange(page)} // Set an onClick handler to change the page\n        className={currentPage === page ? 'active' : ''} // Apply the 'active' class to the current page\n      >\n        {page} {/* Display the page number as button text */}\n      </button>\n    );\n  }\n\n  return buttons; // Return the generated pagination buttons\n};\n\n\n  return (\n    <div className=\"main-page\">\n      <div className=\"sidebar\">\n        <div className=\"filters\">\n          <Filter onFilterChange={handleFilterChange} />\n        </div>\n      </div>\n      <div className=\"content\">\n        <div className=\"pet-card-list\">\n          {renderPetCards()}\n        </div>\n        <div className=\"pagination-horizontal\">\n          {generatePaginationButtons()}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default MainPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}