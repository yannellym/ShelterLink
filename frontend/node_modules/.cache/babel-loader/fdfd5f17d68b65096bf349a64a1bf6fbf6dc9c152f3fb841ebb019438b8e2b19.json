{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { HttpRequest as __HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { extendedEncodeURIComponent as __extendedEncodeURIComponent } from \"@aws-sdk/smithy-client\";\nexport var serializeAws_restJson1DeleteLexiconCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {};\n          resolvedPath = \"/v1/lexicons/{Name}\";\n          if (input.Name !== undefined) {\n            labelValue = input.Name;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Name.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Name}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Name.\");\n          }\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1DescribeVoicesCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {};\n          resolvedPath = \"/v1/voices\";\n          query = __assign(__assign(__assign(__assign({}, input.Engine !== undefined && {\n            Engine: input.Engine\n          }), input.LanguageCode !== undefined && {\n            LanguageCode: input.LanguageCode\n          }), input.IncludeAdditionalLanguageCodes !== undefined && {\n            IncludeAdditionalLanguageCodes: input.IncludeAdditionalLanguageCodes.toString()\n          }), input.NextToken !== undefined && {\n            NextToken: input.NextToken\n          });\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1GetLexiconCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {};\n          resolvedPath = \"/v1/lexicons/{Name}\";\n          if (input.Name !== undefined) {\n            labelValue = input.Name;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Name.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Name}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Name.\");\n          }\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1GetSpeechSynthesisTaskCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {};\n          resolvedPath = \"/v1/synthesisTasks/{TaskId}\";\n          if (input.TaskId !== undefined) {\n            labelValue = input.TaskId;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: TaskId.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{TaskId}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: TaskId.\");\n          }\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1ListLexiconsCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {};\n          resolvedPath = \"/v1/lexicons\";\n          query = __assign({}, input.NextToken !== undefined && {\n            NextToken: input.NextToken\n          });\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1ListSpeechSynthesisTasksCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {};\n          resolvedPath = \"/v1/synthesisTasks\";\n          query = __assign(__assign(__assign({}, input.MaxResults !== undefined && {\n            MaxResults: input.MaxResults.toString()\n          }), input.NextToken !== undefined && {\n            NextToken: input.NextToken\n          }), input.Status !== undefined && {\n            Status: input.Status\n          });\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1PutLexiconCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"/v1/lexicons/{Name}\";\n          if (input.Name !== undefined) {\n            labelValue = input.Name;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Name.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{Name}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Name.\");\n          }\n          body = JSON.stringify(__assign({}, input.Content !== undefined && input.Content !== null && {\n            Content: input.Content\n          }));\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1StartSpeechSynthesisTaskCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"/v1/synthesisTasks\";\n          body = JSON.stringify(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, input.Engine !== undefined && input.Engine !== null && {\n            Engine: input.Engine\n          }), input.LanguageCode !== undefined && input.LanguageCode !== null && {\n            LanguageCode: input.LanguageCode\n          }), input.LexiconNames !== undefined && input.LexiconNames !== null && {\n            LexiconNames: serializeAws_restJson1LexiconNameList(input.LexiconNames, context)\n          }), input.OutputFormat !== undefined && input.OutputFormat !== null && {\n            OutputFormat: input.OutputFormat\n          }), input.OutputS3BucketName !== undefined && input.OutputS3BucketName !== null && {\n            OutputS3BucketName: input.OutputS3BucketName\n          }), input.OutputS3KeyPrefix !== undefined && input.OutputS3KeyPrefix !== null && {\n            OutputS3KeyPrefix: input.OutputS3KeyPrefix\n          }), input.SampleRate !== undefined && input.SampleRate !== null && {\n            SampleRate: input.SampleRate\n          }), input.SnsTopicArn !== undefined && input.SnsTopicArn !== null && {\n            SnsTopicArn: input.SnsTopicArn\n          }), input.SpeechMarkTypes !== undefined && input.SpeechMarkTypes !== null && {\n            SpeechMarkTypes: serializeAws_restJson1SpeechMarkTypeList(input.SpeechMarkTypes, context)\n          }), input.Text !== undefined && input.Text !== null && {\n            Text: input.Text\n          }), input.TextType !== undefined && input.TextType !== null && {\n            TextType: input.TextType\n          }), input.VoiceId !== undefined && input.VoiceId !== null && {\n            VoiceId: input.VoiceId\n          }));\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1SynthesizeSpeechCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"/v1/speech\";\n          body = JSON.stringify(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, input.Engine !== undefined && input.Engine !== null && {\n            Engine: input.Engine\n          }), input.LanguageCode !== undefined && input.LanguageCode !== null && {\n            LanguageCode: input.LanguageCode\n          }), input.LexiconNames !== undefined && input.LexiconNames !== null && {\n            LexiconNames: serializeAws_restJson1LexiconNameList(input.LexiconNames, context)\n          }), input.OutputFormat !== undefined && input.OutputFormat !== null && {\n            OutputFormat: input.OutputFormat\n          }), input.SampleRate !== undefined && input.SampleRate !== null && {\n            SampleRate: input.SampleRate\n          }), input.SpeechMarkTypes !== undefined && input.SpeechMarkTypes !== null && {\n            SpeechMarkTypes: serializeAws_restJson1SpeechMarkTypeList(input.SpeechMarkTypes, context)\n          }), input.Text !== undefined && input.Text !== null && {\n            Text: input.Text\n          }), input.TextType !== undefined && input.TextType !== null && {\n            TextType: input.TextType\n          }), input.VoiceId !== undefined && input.VoiceId !== null && {\n            VoiceId: input.VoiceId\n          }));\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1DeleteLexiconCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restJson1DeleteLexiconCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1DeleteLexiconCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;\n    var _e;\n    return __generator(this, function (_f) {\n      switch (_f.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _e = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"LexiconNotFoundException\":\n              return [3 /*break*/, 2];\n            case \"com.amazonaws.polly#LexiconNotFoundException\":\n              return [3 /*break*/, 2];\n            case \"ServiceFailureException\":\n              return [3 /*break*/, 4];\n            case \"com.amazonaws.polly#ServiceFailureException\":\n              return [3 /*break*/, 4];\n          }\n          return [3 /*break*/, 6];\n        case 2:\n          _c = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1LexiconNotFoundExceptionResponse(parsedOutput, context)];\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 7];\n        case 4:\n          _d = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 7];\n        case 6:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _f.label = 7;\n        case 7:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1DescribeVoicesCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restJson1DescribeVoicesCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            NextToken: undefined,\n            Voices: undefined\n          };\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          if (data.NextToken !== undefined && data.NextToken !== null) {\n            contents.NextToken = data.NextToken;\n          }\n          if (data.Voices !== undefined && data.Voices !== null) {\n            contents.Voices = deserializeAws_restJson1VoiceList(data.Voices, context);\n          }\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1DescribeVoicesCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;\n    var _e;\n    return __generator(this, function (_f) {\n      switch (_f.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _e = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"InvalidNextTokenException\":\n              return [3 /*break*/, 2];\n            case \"com.amazonaws.polly#InvalidNextTokenException\":\n              return [3 /*break*/, 2];\n            case \"ServiceFailureException\":\n              return [3 /*break*/, 4];\n            case \"com.amazonaws.polly#ServiceFailureException\":\n              return [3 /*break*/, 4];\n          }\n          return [3 /*break*/, 6];\n        case 2:\n          _c = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1InvalidNextTokenExceptionResponse(parsedOutput, context)];\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 7];\n        case 4:\n          _d = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 7];\n        case 6:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _f.label = 7;\n        case 7:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1GetLexiconCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restJson1GetLexiconCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Lexicon: undefined,\n            LexiconAttributes: undefined\n          };\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          if (data.Lexicon !== undefined && data.Lexicon !== null) {\n            contents.Lexicon = deserializeAws_restJson1Lexicon(data.Lexicon, context);\n          }\n          if (data.LexiconAttributes !== undefined && data.LexiconAttributes !== null) {\n            contents.LexiconAttributes = deserializeAws_restJson1LexiconAttributes(data.LexiconAttributes, context);\n          }\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1GetLexiconCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;\n    var _e;\n    return __generator(this, function (_f) {\n      switch (_f.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _e = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"LexiconNotFoundException\":\n              return [3 /*break*/, 2];\n            case \"com.amazonaws.polly#LexiconNotFoundException\":\n              return [3 /*break*/, 2];\n            case \"ServiceFailureException\":\n              return [3 /*break*/, 4];\n            case \"com.amazonaws.polly#ServiceFailureException\":\n              return [3 /*break*/, 4];\n          }\n          return [3 /*break*/, 6];\n        case 2:\n          _c = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1LexiconNotFoundExceptionResponse(parsedOutput, context)];\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 7];\n        case 4:\n          _d = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 7];\n        case 6:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _f.label = 7;\n        case 7:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1GetSpeechSynthesisTaskCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restJson1GetSpeechSynthesisTaskCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            SynthesisTask: undefined\n          };\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          if (data.SynthesisTask !== undefined && data.SynthesisTask !== null) {\n            contents.SynthesisTask = deserializeAws_restJson1SynthesisTask(data.SynthesisTask, context);\n          }\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1GetSpeechSynthesisTaskCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;\n    var _f;\n    return __generator(this, function (_g) {\n      switch (_g.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _f = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"InvalidTaskIdException\":\n              return [3 /*break*/, 2];\n            case \"com.amazonaws.polly#InvalidTaskIdException\":\n              return [3 /*break*/, 2];\n            case \"ServiceFailureException\":\n              return [3 /*break*/, 4];\n            case \"com.amazonaws.polly#ServiceFailureException\":\n              return [3 /*break*/, 4];\n            case \"SynthesisTaskNotFoundException\":\n              return [3 /*break*/, 6];\n            case \"com.amazonaws.polly#SynthesisTaskNotFoundException\":\n              return [3 /*break*/, 6];\n          }\n          return [3 /*break*/, 8];\n        case 2:\n          _c = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1InvalidTaskIdExceptionResponse(parsedOutput, context)];\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_g.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 9];\n        case 4:\n          _d = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_g.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 9];\n        case 6:\n          _e = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1SynthesisTaskNotFoundExceptionResponse(parsedOutput, context)];\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_g.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 9];\n        case 8:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _g.label = 9;\n        case 9:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1ListLexiconsCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restJson1ListLexiconsCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Lexicons: undefined,\n            NextToken: undefined\n          };\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          if (data.Lexicons !== undefined && data.Lexicons !== null) {\n            contents.Lexicons = deserializeAws_restJson1LexiconDescriptionList(data.Lexicons, context);\n          }\n          if (data.NextToken !== undefined && data.NextToken !== null) {\n            contents.NextToken = data.NextToken;\n          }\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1ListLexiconsCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;\n    var _e;\n    return __generator(this, function (_f) {\n      switch (_f.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _e = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"InvalidNextTokenException\":\n              return [3 /*break*/, 2];\n            case \"com.amazonaws.polly#InvalidNextTokenException\":\n              return [3 /*break*/, 2];\n            case \"ServiceFailureException\":\n              return [3 /*break*/, 4];\n            case \"com.amazonaws.polly#ServiceFailureException\":\n              return [3 /*break*/, 4];\n          }\n          return [3 /*break*/, 6];\n        case 2:\n          _c = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1InvalidNextTokenExceptionResponse(parsedOutput, context)];\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 7];\n        case 4:\n          _d = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 7];\n        case 6:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _f.label = 7;\n        case 7:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1ListSpeechSynthesisTasksCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restJson1ListSpeechSynthesisTasksCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            NextToken: undefined,\n            SynthesisTasks: undefined\n          };\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          if (data.NextToken !== undefined && data.NextToken !== null) {\n            contents.NextToken = data.NextToken;\n          }\n          if (data.SynthesisTasks !== undefined && data.SynthesisTasks !== null) {\n            contents.SynthesisTasks = deserializeAws_restJson1SynthesisTasks(data.SynthesisTasks, context);\n          }\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1ListSpeechSynthesisTasksCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;\n    var _e;\n    return __generator(this, function (_f) {\n      switch (_f.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _e = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"InvalidNextTokenException\":\n              return [3 /*break*/, 2];\n            case \"com.amazonaws.polly#InvalidNextTokenException\":\n              return [3 /*break*/, 2];\n            case \"ServiceFailureException\":\n              return [3 /*break*/, 4];\n            case \"com.amazonaws.polly#ServiceFailureException\":\n              return [3 /*break*/, 4];\n          }\n          return [3 /*break*/, 6];\n        case 2:\n          _c = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1InvalidNextTokenExceptionResponse(parsedOutput, context)];\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 7];\n        case 4:\n          _d = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 7];\n        case 6:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _f.label = 7;\n        case 7:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1PutLexiconCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restJson1PutLexiconCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1PutLexiconCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;\n    var _k;\n    return __generator(this, function (_l) {\n      switch (_l.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _k = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_k.body = _l.sent(), _k)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"InvalidLexiconException\":\n              return [3 /*break*/, 2];\n            case \"com.amazonaws.polly#InvalidLexiconException\":\n              return [3 /*break*/, 2];\n            case \"LexiconSizeExceededException\":\n              return [3 /*break*/, 4];\n            case \"com.amazonaws.polly#LexiconSizeExceededException\":\n              return [3 /*break*/, 4];\n            case \"MaxLexemeLengthExceededException\":\n              return [3 /*break*/, 6];\n            case \"com.amazonaws.polly#MaxLexemeLengthExceededException\":\n              return [3 /*break*/, 6];\n            case \"MaxLexiconsNumberExceededException\":\n              return [3 /*break*/, 8];\n            case \"com.amazonaws.polly#MaxLexiconsNumberExceededException\":\n              return [3 /*break*/, 8];\n            case \"ServiceFailureException\":\n              return [3 /*break*/, 10];\n            case \"com.amazonaws.polly#ServiceFailureException\":\n              return [3 /*break*/, 10];\n            case \"UnsupportedPlsAlphabetException\":\n              return [3 /*break*/, 12];\n            case \"com.amazonaws.polly#UnsupportedPlsAlphabetException\":\n              return [3 /*break*/, 12];\n            case \"UnsupportedPlsLanguageException\":\n              return [3 /*break*/, 14];\n            case \"com.amazonaws.polly#UnsupportedPlsLanguageException\":\n              return [3 /*break*/, 14];\n          }\n          return [3 /*break*/, 16];\n        case 2:\n          _c = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1InvalidLexiconExceptionResponse(parsedOutput, context)];\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_l.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 17];\n        case 4:\n          _d = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1LexiconSizeExceededExceptionResponse(parsedOutput, context)];\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_l.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 17];\n        case 6:\n          _e = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1MaxLexemeLengthExceededExceptionResponse(parsedOutput, context)];\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_l.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 17];\n        case 8:\n          _f = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1MaxLexiconsNumberExceededExceptionResponse(parsedOutput, context)];\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_l.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 17];\n        case 10:\n          _g = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_l.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 17];\n        case 12:\n          _h = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1UnsupportedPlsAlphabetExceptionResponse(parsedOutput, context)];\n        case 13:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_l.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 17];\n        case 14:\n          _j = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1UnsupportedPlsLanguageExceptionResponse(parsedOutput, context)];\n        case 15:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_l.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 17];\n        case 16:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _l.label = 17;\n        case 17:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1StartSpeechSynthesisTaskCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restJson1StartSpeechSynthesisTaskCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            SynthesisTask: undefined\n          };\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          if (data.SynthesisTask !== undefined && data.SynthesisTask !== null) {\n            contents.SynthesisTask = deserializeAws_restJson1SynthesisTask(data.SynthesisTask, context);\n          }\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1StartSpeechSynthesisTaskCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, parsedBody, message;\n    var _q;\n    return __generator(this, function (_r) {\n      switch (_r.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _q = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_q.body = _r.sent(), _q)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"EngineNotSupportedException\":\n              return [3 /*break*/, 2];\n            case \"com.amazonaws.polly#EngineNotSupportedException\":\n              return [3 /*break*/, 2];\n            case \"InvalidS3BucketException\":\n              return [3 /*break*/, 4];\n            case \"com.amazonaws.polly#InvalidS3BucketException\":\n              return [3 /*break*/, 4];\n            case \"InvalidS3KeyException\":\n              return [3 /*break*/, 6];\n            case \"com.amazonaws.polly#InvalidS3KeyException\":\n              return [3 /*break*/, 6];\n            case \"InvalidSampleRateException\":\n              return [3 /*break*/, 8];\n            case \"com.amazonaws.polly#InvalidSampleRateException\":\n              return [3 /*break*/, 8];\n            case \"InvalidSnsTopicArnException\":\n              return [3 /*break*/, 10];\n            case \"com.amazonaws.polly#InvalidSnsTopicArnException\":\n              return [3 /*break*/, 10];\n            case \"InvalidSsmlException\":\n              return [3 /*break*/, 12];\n            case \"com.amazonaws.polly#InvalidSsmlException\":\n              return [3 /*break*/, 12];\n            case \"LanguageNotSupportedException\":\n              return [3 /*break*/, 14];\n            case \"com.amazonaws.polly#LanguageNotSupportedException\":\n              return [3 /*break*/, 14];\n            case \"LexiconNotFoundException\":\n              return [3 /*break*/, 16];\n            case \"com.amazonaws.polly#LexiconNotFoundException\":\n              return [3 /*break*/, 16];\n            case \"MarksNotSupportedForFormatException\":\n              return [3 /*break*/, 18];\n            case \"com.amazonaws.polly#MarksNotSupportedForFormatException\":\n              return [3 /*break*/, 18];\n            case \"ServiceFailureException\":\n              return [3 /*break*/, 20];\n            case \"com.amazonaws.polly#ServiceFailureException\":\n              return [3 /*break*/, 20];\n            case \"SsmlMarksNotSupportedForTextTypeException\":\n              return [3 /*break*/, 22];\n            case \"com.amazonaws.polly#SsmlMarksNotSupportedForTextTypeException\":\n              return [3 /*break*/, 22];\n            case \"TextLengthExceededException\":\n              return [3 /*break*/, 24];\n            case \"com.amazonaws.polly#TextLengthExceededException\":\n              return [3 /*break*/, 24];\n          }\n          return [3 /*break*/, 26];\n        case 2:\n          _c = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1EngineNotSupportedExceptionResponse(parsedOutput, context)];\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 27];\n        case 4:\n          _d = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1InvalidS3BucketExceptionResponse(parsedOutput, context)];\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 27];\n        case 6:\n          _e = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1InvalidS3KeyExceptionResponse(parsedOutput, context)];\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 27];\n        case 8:\n          _f = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1InvalidSampleRateExceptionResponse(parsedOutput, context)];\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 27];\n        case 10:\n          _g = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1InvalidSnsTopicArnExceptionResponse(parsedOutput, context)];\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 27];\n        case 12:\n          _h = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1InvalidSsmlExceptionResponse(parsedOutput, context)];\n        case 13:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 27];\n        case 14:\n          _j = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1LanguageNotSupportedExceptionResponse(parsedOutput, context)];\n        case 15:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 27];\n        case 16:\n          _k = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1LexiconNotFoundExceptionResponse(parsedOutput, context)];\n        case 17:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 27];\n        case 18:\n          _l = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1MarksNotSupportedForFormatExceptionResponse(parsedOutput, context)];\n        case 19:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 27];\n        case 20:\n          _m = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];\n        case 21:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 27];\n        case 22:\n          _o = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1SsmlMarksNotSupportedForTextTypeExceptionResponse(parsedOutput, context)];\n        case 23:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 27];\n        case 24:\n          _p = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1TextLengthExceededExceptionResponse(parsedOutput, context)];\n        case 25:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 27];\n        case 26:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _r.label = 27;\n        case 27:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1SynthesizeSpeechCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return [2 /*return*/, deserializeAws_restJson1SynthesizeSpeechCommandError(output, context)];\n      }\n      contents = {\n        $metadata: deserializeMetadata(output),\n        AudioStream: undefined,\n        ContentType: undefined,\n        RequestCharacters: undefined\n      };\n      if (output.headers[\"content-type\"] !== undefined) {\n        contents.ContentType = output.headers[\"content-type\"];\n      }\n      if (output.headers[\"x-amzn-requestcharacters\"] !== undefined) {\n        contents.RequestCharacters = parseInt(output.headers[\"x-amzn-requestcharacters\"], 10);\n      }\n      data = output.body;\n      contents.AudioStream = data;\n      return [2 /*return*/, Promise.resolve(contents)];\n    });\n  });\n};\nvar deserializeAws_restJson1SynthesizeSpeechCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, parsedBody, message;\n    var _m;\n    return __generator(this, function (_o) {\n      switch (_o.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _m = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_m.body = _o.sent(), _m)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"EngineNotSupportedException\":\n              return [3 /*break*/, 2];\n            case \"com.amazonaws.polly#EngineNotSupportedException\":\n              return [3 /*break*/, 2];\n            case \"InvalidSampleRateException\":\n              return [3 /*break*/, 4];\n            case \"com.amazonaws.polly#InvalidSampleRateException\":\n              return [3 /*break*/, 4];\n            case \"InvalidSsmlException\":\n              return [3 /*break*/, 6];\n            case \"com.amazonaws.polly#InvalidSsmlException\":\n              return [3 /*break*/, 6];\n            case \"LanguageNotSupportedException\":\n              return [3 /*break*/, 8];\n            case \"com.amazonaws.polly#LanguageNotSupportedException\":\n              return [3 /*break*/, 8];\n            case \"LexiconNotFoundException\":\n              return [3 /*break*/, 10];\n            case \"com.amazonaws.polly#LexiconNotFoundException\":\n              return [3 /*break*/, 10];\n            case \"MarksNotSupportedForFormatException\":\n              return [3 /*break*/, 12];\n            case \"com.amazonaws.polly#MarksNotSupportedForFormatException\":\n              return [3 /*break*/, 12];\n            case \"ServiceFailureException\":\n              return [3 /*break*/, 14];\n            case \"com.amazonaws.polly#ServiceFailureException\":\n              return [3 /*break*/, 14];\n            case \"SsmlMarksNotSupportedForTextTypeException\":\n              return [3 /*break*/, 16];\n            case \"com.amazonaws.polly#SsmlMarksNotSupportedForTextTypeException\":\n              return [3 /*break*/, 16];\n            case \"TextLengthExceededException\":\n              return [3 /*break*/, 18];\n            case \"com.amazonaws.polly#TextLengthExceededException\":\n              return [3 /*break*/, 18];\n          }\n          return [3 /*break*/, 20];\n        case 2:\n          _c = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1EngineNotSupportedExceptionResponse(parsedOutput, context)];\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 21];\n        case 4:\n          _d = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1InvalidSampleRateExceptionResponse(parsedOutput, context)];\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 21];\n        case 6:\n          _e = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1InvalidSsmlExceptionResponse(parsedOutput, context)];\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 21];\n        case 8:\n          _f = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1LanguageNotSupportedExceptionResponse(parsedOutput, context)];\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 21];\n        case 10:\n          _g = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1LexiconNotFoundExceptionResponse(parsedOutput, context)];\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 21];\n        case 12:\n          _h = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1MarksNotSupportedForFormatExceptionResponse(parsedOutput, context)];\n        case 13:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 21];\n        case 14:\n          _j = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];\n        case 15:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 21];\n        case 16:\n          _k = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1SsmlMarksNotSupportedForTextTypeExceptionResponse(parsedOutput, context)];\n        case 17:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 21];\n        case 18:\n          _l = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1TextLengthExceededExceptionResponse(parsedOutput, context)];\n        case 19:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 21];\n        case 20:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _o.label = 21;\n        case 21:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1EngineNotSupportedExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"EngineNotSupportedException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1InvalidLexiconExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidLexiconException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1InvalidNextTokenExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidNextTokenException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1InvalidS3BucketExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidS3BucketException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1InvalidS3KeyExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidS3KeyException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1InvalidSampleRateExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidSampleRateException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1InvalidSnsTopicArnExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidSnsTopicArnException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1InvalidSsmlExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidSsmlException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1InvalidTaskIdExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidTaskIdException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1LanguageNotSupportedExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"LanguageNotSupportedException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1LexiconNotFoundExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"LexiconNotFoundException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1LexiconSizeExceededExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"LexiconSizeExceededException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1MarksNotSupportedForFormatExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"MarksNotSupportedForFormatException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1MaxLexemeLengthExceededExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"MaxLexemeLengthExceededException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1MaxLexiconsNumberExceededExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"MaxLexiconsNumberExceededException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1ServiceFailureExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"ServiceFailureException\",\n        $fault: \"server\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1SsmlMarksNotSupportedForTextTypeExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"SsmlMarksNotSupportedForTextTypeException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1SynthesisTaskNotFoundExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"SynthesisTaskNotFoundException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1TextLengthExceededExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"TextLengthExceededException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1UnsupportedPlsAlphabetExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"UnsupportedPlsAlphabetException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1UnsupportedPlsLanguageExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"UnsupportedPlsLanguageException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar serializeAws_restJson1LexiconNameList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return entry;\n  });\n};\nvar serializeAws_restJson1SpeechMarkTypeList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return entry;\n  });\n};\nvar deserializeAws_restJson1EngineList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return entry;\n  });\n};\nvar deserializeAws_restJson1LanguageCodeList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return entry;\n  });\n};\nvar deserializeAws_restJson1Lexicon = function (output, context) {\n  return {\n    Content: output.Content !== undefined && output.Content !== null ? output.Content : undefined,\n    Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined\n  };\n};\nvar deserializeAws_restJson1LexiconAttributes = function (output, context) {\n  return {\n    Alphabet: output.Alphabet !== undefined && output.Alphabet !== null ? output.Alphabet : undefined,\n    LanguageCode: output.LanguageCode !== undefined && output.LanguageCode !== null ? output.LanguageCode : undefined,\n    LastModified: output.LastModified !== undefined && output.LastModified !== null ? new Date(Math.round(output.LastModified * 1000)) : undefined,\n    LexemesCount: output.LexemesCount !== undefined && output.LexemesCount !== null ? output.LexemesCount : undefined,\n    LexiconArn: output.LexiconArn !== undefined && output.LexiconArn !== null ? output.LexiconArn : undefined,\n    Size: output.Size !== undefined && output.Size !== null ? output.Size : undefined\n  };\n};\nvar deserializeAws_restJson1LexiconDescription = function (output, context) {\n  return {\n    Attributes: output.Attributes !== undefined && output.Attributes !== null ? deserializeAws_restJson1LexiconAttributes(output.Attributes, context) : undefined,\n    Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined\n  };\n};\nvar deserializeAws_restJson1LexiconDescriptionList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restJson1LexiconDescription(entry, context);\n  });\n};\nvar deserializeAws_restJson1LexiconNameList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return entry;\n  });\n};\nvar deserializeAws_restJson1SpeechMarkTypeList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return entry;\n  });\n};\nvar deserializeAws_restJson1SynthesisTask = function (output, context) {\n  return {\n    CreationTime: output.CreationTime !== undefined && output.CreationTime !== null ? new Date(Math.round(output.CreationTime * 1000)) : undefined,\n    Engine: output.Engine !== undefined && output.Engine !== null ? output.Engine : undefined,\n    LanguageCode: output.LanguageCode !== undefined && output.LanguageCode !== null ? output.LanguageCode : undefined,\n    LexiconNames: output.LexiconNames !== undefined && output.LexiconNames !== null ? deserializeAws_restJson1LexiconNameList(output.LexiconNames, context) : undefined,\n    OutputFormat: output.OutputFormat !== undefined && output.OutputFormat !== null ? output.OutputFormat : undefined,\n    OutputUri: output.OutputUri !== undefined && output.OutputUri !== null ? output.OutputUri : undefined,\n    RequestCharacters: output.RequestCharacters !== undefined && output.RequestCharacters !== null ? output.RequestCharacters : undefined,\n    SampleRate: output.SampleRate !== undefined && output.SampleRate !== null ? output.SampleRate : undefined,\n    SnsTopicArn: output.SnsTopicArn !== undefined && output.SnsTopicArn !== null ? output.SnsTopicArn : undefined,\n    SpeechMarkTypes: output.SpeechMarkTypes !== undefined && output.SpeechMarkTypes !== null ? deserializeAws_restJson1SpeechMarkTypeList(output.SpeechMarkTypes, context) : undefined,\n    TaskId: output.TaskId !== undefined && output.TaskId !== null ? output.TaskId : undefined,\n    TaskStatus: output.TaskStatus !== undefined && output.TaskStatus !== null ? output.TaskStatus : undefined,\n    TaskStatusReason: output.TaskStatusReason !== undefined && output.TaskStatusReason !== null ? output.TaskStatusReason : undefined,\n    TextType: output.TextType !== undefined && output.TextType !== null ? output.TextType : undefined,\n    VoiceId: output.VoiceId !== undefined && output.VoiceId !== null ? output.VoiceId : undefined\n  };\n};\nvar deserializeAws_restJson1SynthesisTasks = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restJson1SynthesisTask(entry, context);\n  });\n};\nvar deserializeAws_restJson1Voice = function (output, context) {\n  return {\n    AdditionalLanguageCodes: output.AdditionalLanguageCodes !== undefined && output.AdditionalLanguageCodes !== null ? deserializeAws_restJson1LanguageCodeList(output.AdditionalLanguageCodes, context) : undefined,\n    Gender: output.Gender !== undefined && output.Gender !== null ? output.Gender : undefined,\n    Id: output.Id !== undefined && output.Id !== null ? output.Id : undefined,\n    LanguageCode: output.LanguageCode !== undefined && output.LanguageCode !== null ? output.LanguageCode : undefined,\n    LanguageName: output.LanguageName !== undefined && output.LanguageName !== null ? output.LanguageName : undefined,\n    Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined,\n    SupportedEngines: output.SupportedEngines !== undefined && output.SupportedEngines !== null ? deserializeAws_restJson1EngineList(output.SupportedEngines, context) : undefined\n  };\n};\nvar deserializeAws_restJson1VoiceList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restJson1Voice(entry, context);\n  });\n};\nvar deserializeMetadata = function (output) {\n  var _a;\n  return {\n    httpStatusCode: output.statusCode,\n    requestId: (_a = output.headers[\"x-amzn-requestid\"]) !== null && _a !== void 0 ? _a : output.headers[\"x-amzn-request-id\"],\n    extendedRequestId: output.headers[\"x-amz-id-2\"],\n    cfId: output.headers[\"x-amz-cf-id\"]\n  };\n};\n// Collect low-level response body stream to Uint8Array.\nvar collectBody = function (streamBody, context) {\n  if (streamBody === void 0) {\n    streamBody = new Uint8Array();\n  }\n  if (streamBody instanceof Uint8Array) {\n    return Promise.resolve(streamBody);\n  }\n  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\n// Encode Uint8Array data into string with utf-8.\nvar collectBodyString = function (streamBody, context) {\n  return collectBody(streamBody, context).then(function (body) {\n    return context.utf8Encoder(body);\n  });\n};\nvar isSerializableHeaderValue = function (value) {\n  return value !== undefined && value !== null && value !== \"\" && (!Object.getOwnPropertyNames(value).includes(\"length\") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes(\"size\") || value.size != 0);\n};\nvar parseBody = function (streamBody, context) {\n  return collectBodyString(streamBody, context).then(function (encoded) {\n    if (encoded.length) {\n      return JSON.parse(encoded);\n    }\n    return {};\n  });\n};\n/**\n * Load an error code for the aws.rest-json-1.1 protocol.\n */\nvar loadRestJsonErrorCode = function (output, data) {\n  var findKey = function (object, key) {\n    return Object.keys(object).find(function (k) {\n      return k.toLowerCase() === key.toLowerCase();\n    });\n  };\n  var sanitizeErrorCode = function (rawValue) {\n    var cleanValue = rawValue;\n    if (cleanValue.indexOf(\":\") >= 0) {\n      cleanValue = cleanValue.split(\":\")[0];\n    }\n    if (cleanValue.indexOf(\"#\") >= 0) {\n      cleanValue = cleanValue.split(\"#\")[1];\n    }\n    return cleanValue;\n  };\n  var headerKey = findKey(output.headers, \"x-amzn-errortype\");\n  if (headerKey !== undefined) {\n    return sanitizeErrorCode(output.headers[headerKey]);\n  }\n  if (data.code !== undefined) {\n    return sanitizeErrorCode(data.code);\n  }\n  if (data[\"__type\"] !== undefined) {\n    return sanitizeErrorCode(data[\"__type\"]);\n  }\n  return \"\";\n};","map":{"version":3,"names":["HttpRequest","__HttpRequest","extendedEncodeURIComponent","__extendedEncodeURIComponent","serializeAws_restJson1DeleteLexiconCommand","input","context","__awaiter","headers","resolvedPath","Name","undefined","labelValue","length","Error","replace","endpoint","_a","_c","sent","hostname","_b","protocol","port","method","path","body","serializeAws_restJson1DescribeVoicesCommand","query","__assign","Engine","LanguageCode","IncludeAdditionalLanguageCodes","toString","NextToken","serializeAws_restJson1GetLexiconCommand","serializeAws_restJson1GetSpeechSynthesisTaskCommand","TaskId","serializeAws_restJson1ListLexiconsCommand","serializeAws_restJson1ListSpeechSynthesisTasksCommand","MaxResults","Status","serializeAws_restJson1PutLexiconCommand","JSON","stringify","Content","serializeAws_restJson1StartSpeechSynthesisTaskCommand","LexiconNames","serializeAws_restJson1LexiconNameList","OutputFormat","OutputS3BucketName","OutputS3KeyPrefix","SampleRate","SnsTopicArn","SpeechMarkTypes","serializeAws_restJson1SpeechMarkTypeList","Text","TextType","VoiceId","serializeAws_restJson1SynthesizeSpeechCommand","deserializeAws_restJson1DeleteLexiconCommand","output","statusCode","deserializeAws_restJson1DeleteLexiconCommandError","contents","$metadata","deserializeMetadata","collectBody","Promise","resolve","parseBody","parsedOutput","apply","concat","_e","_f","errorCode","loadRestJsonErrorCode","deserializeAws_restJson1LexiconNotFoundExceptionResponse","response","name","deserializeAws_restJson1ServiceFailureExceptionResponse","_d","parsedBody","code","Code","message","Message","$fault","reject","Object","assign","deserializeAws_restJson1DescribeVoicesCommand","deserializeAws_restJson1DescribeVoicesCommandError","Voices","data","deserializeAws_restJson1VoiceList","deserializeAws_restJson1InvalidNextTokenExceptionResponse","deserializeAws_restJson1GetLexiconCommand","deserializeAws_restJson1GetLexiconCommandError","Lexicon","LexiconAttributes","deserializeAws_restJson1Lexicon","deserializeAws_restJson1LexiconAttributes","deserializeAws_restJson1GetSpeechSynthesisTaskCommand","deserializeAws_restJson1GetSpeechSynthesisTaskCommandError","SynthesisTask","deserializeAws_restJson1SynthesisTask","_g","deserializeAws_restJson1InvalidTaskIdExceptionResponse","deserializeAws_restJson1SynthesisTaskNotFoundExceptionResponse","deserializeAws_restJson1ListLexiconsCommand","deserializeAws_restJson1ListLexiconsCommandError","Lexicons","deserializeAws_restJson1LexiconDescriptionList","deserializeAws_restJson1ListSpeechSynthesisTasksCommand","deserializeAws_restJson1ListSpeechSynthesisTasksCommandError","SynthesisTasks","deserializeAws_restJson1SynthesisTasks","deserializeAws_restJson1PutLexiconCommand","deserializeAws_restJson1PutLexiconCommandError","_k","_l","deserializeAws_restJson1InvalidLexiconExceptionResponse","deserializeAws_restJson1LexiconSizeExceededExceptionResponse","deserializeAws_restJson1MaxLexemeLengthExceededExceptionResponse","deserializeAws_restJson1MaxLexiconsNumberExceededExceptionResponse","deserializeAws_restJson1UnsupportedPlsAlphabetExceptionResponse","_h","deserializeAws_restJson1UnsupportedPlsLanguageExceptionResponse","_j","deserializeAws_restJson1StartSpeechSynthesisTaskCommand","deserializeAws_restJson1StartSpeechSynthesisTaskCommandError","_q","_r","deserializeAws_restJson1EngineNotSupportedExceptionResponse","deserializeAws_restJson1InvalidS3BucketExceptionResponse","deserializeAws_restJson1InvalidS3KeyExceptionResponse","deserializeAws_restJson1InvalidSampleRateExceptionResponse","deserializeAws_restJson1InvalidSnsTopicArnExceptionResponse","deserializeAws_restJson1InvalidSsmlExceptionResponse","deserializeAws_restJson1LanguageNotSupportedExceptionResponse","deserializeAws_restJson1MarksNotSupportedForFormatExceptionResponse","_m","deserializeAws_restJson1SsmlMarksNotSupportedForTextTypeExceptionResponse","_o","deserializeAws_restJson1TextLengthExceededExceptionResponse","_p","deserializeAws_restJson1SynthesizeSpeechCommand","deserializeAws_restJson1SynthesizeSpeechCommandError","AudioStream","ContentType","RequestCharacters","parseInt","filter","e","map","entry","deserializeAws_restJson1EngineList","deserializeAws_restJson1LanguageCodeList","Alphabet","LastModified","Date","Math","round","LexemesCount","LexiconArn","Size","deserializeAws_restJson1LexiconDescription","Attributes","deserializeAws_restJson1LexiconNameList","deserializeAws_restJson1SpeechMarkTypeList","CreationTime","OutputUri","TaskStatus","TaskStatusReason","deserializeAws_restJson1Voice","AdditionalLanguageCodes","Gender","Id","LanguageName","SupportedEngines","httpStatusCode","requestId","extendedRequestId","cfId","streamBody","Uint8Array","streamCollector","collectBodyString","then","utf8Encoder","isSerializableHeaderValue","value","getOwnPropertyNames","includes","size","encoded","parse","findKey","object","key","keys","find","k","toLowerCase","sanitizeErrorCode","rawValue","cleanValue","indexOf","split","headerKey"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-sdk/client-polly/protocols/Aws_restJson1.ts"],"sourcesContent":["import { DeleteLexiconCommandInput, DeleteLexiconCommandOutput } from \"../commands/DeleteLexiconCommand\";\nimport { DescribeVoicesCommandInput, DescribeVoicesCommandOutput } from \"../commands/DescribeVoicesCommand\";\nimport { GetLexiconCommandInput, GetLexiconCommandOutput } from \"../commands/GetLexiconCommand\";\nimport {\n  GetSpeechSynthesisTaskCommandInput,\n  GetSpeechSynthesisTaskCommandOutput,\n} from \"../commands/GetSpeechSynthesisTaskCommand\";\nimport { ListLexiconsCommandInput, ListLexiconsCommandOutput } from \"../commands/ListLexiconsCommand\";\nimport {\n  ListSpeechSynthesisTasksCommandInput,\n  ListSpeechSynthesisTasksCommandOutput,\n} from \"../commands/ListSpeechSynthesisTasksCommand\";\nimport { PutLexiconCommandInput, PutLexiconCommandOutput } from \"../commands/PutLexiconCommand\";\nimport {\n  StartSpeechSynthesisTaskCommandInput,\n  StartSpeechSynthesisTaskCommandOutput,\n} from \"../commands/StartSpeechSynthesisTaskCommand\";\nimport { SynthesizeSpeechCommandInput, SynthesizeSpeechCommandOutput } from \"../commands/SynthesizeSpeechCommand\";\nimport {\n  Engine,\n  EngineNotSupportedException,\n  InvalidLexiconException,\n  InvalidNextTokenException,\n  InvalidS3BucketException,\n  InvalidS3KeyException,\n  InvalidSampleRateException,\n  InvalidSnsTopicArnException,\n  InvalidSsmlException,\n  InvalidTaskIdException,\n  LanguageCode,\n  LanguageNotSupportedException,\n  Lexicon,\n  LexiconAttributes,\n  LexiconDescription,\n  LexiconNotFoundException,\n  LexiconSizeExceededException,\n  MarksNotSupportedForFormatException,\n  MaxLexemeLengthExceededException,\n  MaxLexiconsNumberExceededException,\n  ServiceFailureException,\n  SpeechMarkType,\n  SsmlMarksNotSupportedForTextTypeException,\n  SynthesisTask,\n  SynthesisTaskNotFoundException,\n  TextLengthExceededException,\n  UnsupportedPlsAlphabetException,\n  UnsupportedPlsLanguageException,\n  Voice,\n} from \"../models/models_0\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport {\n  SmithyException as __SmithyException,\n  extendedEncodeURIComponent as __extendedEncodeURIComponent,\n} from \"@aws-sdk/smithy-client\";\nimport {\n  Endpoint as __Endpoint,\n  MetadataBearer as __MetadataBearer,\n  ResponseMetadata as __ResponseMetadata,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport const serializeAws_restJson1DeleteLexiconCommand = async (\n  input: DeleteLexiconCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {};\n  let resolvedPath = \"/v1/lexicons/{Name}\";\n  if (input.Name !== undefined) {\n    const labelValue: string = input.Name;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Name.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Name}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Name.\");\n  }\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const serializeAws_restJson1DescribeVoicesCommand = async (\n  input: DescribeVoicesCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {};\n  let resolvedPath = \"/v1/voices\";\n  const query: any = {\n    ...(input.Engine !== undefined && { Engine: input.Engine }),\n    ...(input.LanguageCode !== undefined && { LanguageCode: input.LanguageCode }),\n    ...(input.IncludeAdditionalLanguageCodes !== undefined && {\n      IncludeAdditionalLanguageCodes: input.IncludeAdditionalLanguageCodes.toString(),\n    }),\n    ...(input.NextToken !== undefined && { NextToken: input.NextToken }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restJson1GetLexiconCommand = async (\n  input: GetLexiconCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {};\n  let resolvedPath = \"/v1/lexicons/{Name}\";\n  if (input.Name !== undefined) {\n    const labelValue: string = input.Name;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Name.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Name}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Name.\");\n  }\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const serializeAws_restJson1GetSpeechSynthesisTaskCommand = async (\n  input: GetSpeechSynthesisTaskCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {};\n  let resolvedPath = \"/v1/synthesisTasks/{TaskId}\";\n  if (input.TaskId !== undefined) {\n    const labelValue: string = input.TaskId;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: TaskId.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{TaskId}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: TaskId.\");\n  }\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const serializeAws_restJson1ListLexiconsCommand = async (\n  input: ListLexiconsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {};\n  let resolvedPath = \"/v1/lexicons\";\n  const query: any = {\n    ...(input.NextToken !== undefined && { NextToken: input.NextToken }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restJson1ListSpeechSynthesisTasksCommand = async (\n  input: ListSpeechSynthesisTasksCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {};\n  let resolvedPath = \"/v1/synthesisTasks\";\n  const query: any = {\n    ...(input.MaxResults !== undefined && { MaxResults: input.MaxResults.toString() }),\n    ...(input.NextToken !== undefined && { NextToken: input.NextToken }),\n    ...(input.Status !== undefined && { Status: input.Status }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restJson1PutLexiconCommand = async (\n  input: PutLexiconCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/json\",\n  };\n  let resolvedPath = \"/v1/lexicons/{Name}\";\n  if (input.Name !== undefined) {\n    const labelValue: string = input.Name;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Name.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Name}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Name.\");\n  }\n  let body: any;\n  body = JSON.stringify({\n    ...(input.Content !== undefined && input.Content !== null && { Content: input.Content }),\n  });\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const serializeAws_restJson1StartSpeechSynthesisTaskCommand = async (\n  input: StartSpeechSynthesisTaskCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/json\",\n  };\n  let resolvedPath = \"/v1/synthesisTasks\";\n  let body: any;\n  body = JSON.stringify({\n    ...(input.Engine !== undefined && input.Engine !== null && { Engine: input.Engine }),\n    ...(input.LanguageCode !== undefined && input.LanguageCode !== null && { LanguageCode: input.LanguageCode }),\n    ...(input.LexiconNames !== undefined &&\n      input.LexiconNames !== null && {\n        LexiconNames: serializeAws_restJson1LexiconNameList(input.LexiconNames, context),\n      }),\n    ...(input.OutputFormat !== undefined && input.OutputFormat !== null && { OutputFormat: input.OutputFormat }),\n    ...(input.OutputS3BucketName !== undefined &&\n      input.OutputS3BucketName !== null && { OutputS3BucketName: input.OutputS3BucketName }),\n    ...(input.OutputS3KeyPrefix !== undefined &&\n      input.OutputS3KeyPrefix !== null && { OutputS3KeyPrefix: input.OutputS3KeyPrefix }),\n    ...(input.SampleRate !== undefined && input.SampleRate !== null && { SampleRate: input.SampleRate }),\n    ...(input.SnsTopicArn !== undefined && input.SnsTopicArn !== null && { SnsTopicArn: input.SnsTopicArn }),\n    ...(input.SpeechMarkTypes !== undefined &&\n      input.SpeechMarkTypes !== null && {\n        SpeechMarkTypes: serializeAws_restJson1SpeechMarkTypeList(input.SpeechMarkTypes, context),\n      }),\n    ...(input.Text !== undefined && input.Text !== null && { Text: input.Text }),\n    ...(input.TextType !== undefined && input.TextType !== null && { TextType: input.TextType }),\n    ...(input.VoiceId !== undefined && input.VoiceId !== null && { VoiceId: input.VoiceId }),\n  });\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const serializeAws_restJson1SynthesizeSpeechCommand = async (\n  input: SynthesizeSpeechCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/json\",\n  };\n  let resolvedPath = \"/v1/speech\";\n  let body: any;\n  body = JSON.stringify({\n    ...(input.Engine !== undefined && input.Engine !== null && { Engine: input.Engine }),\n    ...(input.LanguageCode !== undefined && input.LanguageCode !== null && { LanguageCode: input.LanguageCode }),\n    ...(input.LexiconNames !== undefined &&\n      input.LexiconNames !== null && {\n        LexiconNames: serializeAws_restJson1LexiconNameList(input.LexiconNames, context),\n      }),\n    ...(input.OutputFormat !== undefined && input.OutputFormat !== null && { OutputFormat: input.OutputFormat }),\n    ...(input.SampleRate !== undefined && input.SampleRate !== null && { SampleRate: input.SampleRate }),\n    ...(input.SpeechMarkTypes !== undefined &&\n      input.SpeechMarkTypes !== null && {\n        SpeechMarkTypes: serializeAws_restJson1SpeechMarkTypeList(input.SpeechMarkTypes, context),\n      }),\n    ...(input.Text !== undefined && input.Text !== null && { Text: input.Text }),\n    ...(input.TextType !== undefined && input.TextType !== null && { TextType: input.TextType }),\n    ...(input.VoiceId !== undefined && input.VoiceId !== null && { VoiceId: input.VoiceId }),\n  });\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const deserializeAws_restJson1DeleteLexiconCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteLexiconCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1DeleteLexiconCommandError(output, context);\n  }\n  const contents: DeleteLexiconCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1DeleteLexiconCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteLexiconCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"LexiconNotFoundException\":\n    case \"com.amazonaws.polly#LexiconNotFoundException\":\n      response = {\n        ...(await deserializeAws_restJson1LexiconNotFoundExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ServiceFailureException\":\n    case \"com.amazonaws.polly#ServiceFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restJson1DescribeVoicesCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DescribeVoicesCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1DescribeVoicesCommandError(output, context);\n  }\n  const contents: DescribeVoicesCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    NextToken: undefined,\n    Voices: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.NextToken !== undefined && data.NextToken !== null) {\n    contents.NextToken = data.NextToken;\n  }\n  if (data.Voices !== undefined && data.Voices !== null) {\n    contents.Voices = deserializeAws_restJson1VoiceList(data.Voices, context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1DescribeVoicesCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DescribeVoicesCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"InvalidNextTokenException\":\n    case \"com.amazonaws.polly#InvalidNextTokenException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidNextTokenExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ServiceFailureException\":\n    case \"com.amazonaws.polly#ServiceFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restJson1GetLexiconCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetLexiconCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1GetLexiconCommandError(output, context);\n  }\n  const contents: GetLexiconCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    Lexicon: undefined,\n    LexiconAttributes: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.Lexicon !== undefined && data.Lexicon !== null) {\n    contents.Lexicon = deserializeAws_restJson1Lexicon(data.Lexicon, context);\n  }\n  if (data.LexiconAttributes !== undefined && data.LexiconAttributes !== null) {\n    contents.LexiconAttributes = deserializeAws_restJson1LexiconAttributes(data.LexiconAttributes, context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1GetLexiconCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetLexiconCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"LexiconNotFoundException\":\n    case \"com.amazonaws.polly#LexiconNotFoundException\":\n      response = {\n        ...(await deserializeAws_restJson1LexiconNotFoundExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ServiceFailureException\":\n    case \"com.amazonaws.polly#ServiceFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restJson1GetSpeechSynthesisTaskCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetSpeechSynthesisTaskCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1GetSpeechSynthesisTaskCommandError(output, context);\n  }\n  const contents: GetSpeechSynthesisTaskCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    SynthesisTask: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.SynthesisTask !== undefined && data.SynthesisTask !== null) {\n    contents.SynthesisTask = deserializeAws_restJson1SynthesisTask(data.SynthesisTask, context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1GetSpeechSynthesisTaskCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetSpeechSynthesisTaskCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"InvalidTaskIdException\":\n    case \"com.amazonaws.polly#InvalidTaskIdException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidTaskIdExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ServiceFailureException\":\n    case \"com.amazonaws.polly#ServiceFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"SynthesisTaskNotFoundException\":\n    case \"com.amazonaws.polly#SynthesisTaskNotFoundException\":\n      response = {\n        ...(await deserializeAws_restJson1SynthesisTaskNotFoundExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restJson1ListLexiconsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListLexiconsCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1ListLexiconsCommandError(output, context);\n  }\n  const contents: ListLexiconsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    Lexicons: undefined,\n    NextToken: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.Lexicons !== undefined && data.Lexicons !== null) {\n    contents.Lexicons = deserializeAws_restJson1LexiconDescriptionList(data.Lexicons, context);\n  }\n  if (data.NextToken !== undefined && data.NextToken !== null) {\n    contents.NextToken = data.NextToken;\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1ListLexiconsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListLexiconsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"InvalidNextTokenException\":\n    case \"com.amazonaws.polly#InvalidNextTokenException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidNextTokenExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ServiceFailureException\":\n    case \"com.amazonaws.polly#ServiceFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restJson1ListSpeechSynthesisTasksCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListSpeechSynthesisTasksCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1ListSpeechSynthesisTasksCommandError(output, context);\n  }\n  const contents: ListSpeechSynthesisTasksCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    NextToken: undefined,\n    SynthesisTasks: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.NextToken !== undefined && data.NextToken !== null) {\n    contents.NextToken = data.NextToken;\n  }\n  if (data.SynthesisTasks !== undefined && data.SynthesisTasks !== null) {\n    contents.SynthesisTasks = deserializeAws_restJson1SynthesisTasks(data.SynthesisTasks, context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1ListSpeechSynthesisTasksCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListSpeechSynthesisTasksCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"InvalidNextTokenException\":\n    case \"com.amazonaws.polly#InvalidNextTokenException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidNextTokenExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ServiceFailureException\":\n    case \"com.amazonaws.polly#ServiceFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restJson1PutLexiconCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutLexiconCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1PutLexiconCommandError(output, context);\n  }\n  const contents: PutLexiconCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1PutLexiconCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutLexiconCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"InvalidLexiconException\":\n    case \"com.amazonaws.polly#InvalidLexiconException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidLexiconExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"LexiconSizeExceededException\":\n    case \"com.amazonaws.polly#LexiconSizeExceededException\":\n      response = {\n        ...(await deserializeAws_restJson1LexiconSizeExceededExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"MaxLexemeLengthExceededException\":\n    case \"com.amazonaws.polly#MaxLexemeLengthExceededException\":\n      response = {\n        ...(await deserializeAws_restJson1MaxLexemeLengthExceededExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"MaxLexiconsNumberExceededException\":\n    case \"com.amazonaws.polly#MaxLexiconsNumberExceededException\":\n      response = {\n        ...(await deserializeAws_restJson1MaxLexiconsNumberExceededExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ServiceFailureException\":\n    case \"com.amazonaws.polly#ServiceFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"UnsupportedPlsAlphabetException\":\n    case \"com.amazonaws.polly#UnsupportedPlsAlphabetException\":\n      response = {\n        ...(await deserializeAws_restJson1UnsupportedPlsAlphabetExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"UnsupportedPlsLanguageException\":\n    case \"com.amazonaws.polly#UnsupportedPlsLanguageException\":\n      response = {\n        ...(await deserializeAws_restJson1UnsupportedPlsLanguageExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restJson1StartSpeechSynthesisTaskCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<StartSpeechSynthesisTaskCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1StartSpeechSynthesisTaskCommandError(output, context);\n  }\n  const contents: StartSpeechSynthesisTaskCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    SynthesisTask: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.SynthesisTask !== undefined && data.SynthesisTask !== null) {\n    contents.SynthesisTask = deserializeAws_restJson1SynthesisTask(data.SynthesisTask, context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1StartSpeechSynthesisTaskCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<StartSpeechSynthesisTaskCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"EngineNotSupportedException\":\n    case \"com.amazonaws.polly#EngineNotSupportedException\":\n      response = {\n        ...(await deserializeAws_restJson1EngineNotSupportedExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"InvalidS3BucketException\":\n    case \"com.amazonaws.polly#InvalidS3BucketException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidS3BucketExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"InvalidS3KeyException\":\n    case \"com.amazonaws.polly#InvalidS3KeyException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidS3KeyExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"InvalidSampleRateException\":\n    case \"com.amazonaws.polly#InvalidSampleRateException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidSampleRateExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"InvalidSnsTopicArnException\":\n    case \"com.amazonaws.polly#InvalidSnsTopicArnException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidSnsTopicArnExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"InvalidSsmlException\":\n    case \"com.amazonaws.polly#InvalidSsmlException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidSsmlExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"LanguageNotSupportedException\":\n    case \"com.amazonaws.polly#LanguageNotSupportedException\":\n      response = {\n        ...(await deserializeAws_restJson1LanguageNotSupportedExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"LexiconNotFoundException\":\n    case \"com.amazonaws.polly#LexiconNotFoundException\":\n      response = {\n        ...(await deserializeAws_restJson1LexiconNotFoundExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"MarksNotSupportedForFormatException\":\n    case \"com.amazonaws.polly#MarksNotSupportedForFormatException\":\n      response = {\n        ...(await deserializeAws_restJson1MarksNotSupportedForFormatExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ServiceFailureException\":\n    case \"com.amazonaws.polly#ServiceFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"SsmlMarksNotSupportedForTextTypeException\":\n    case \"com.amazonaws.polly#SsmlMarksNotSupportedForTextTypeException\":\n      response = {\n        ...(await deserializeAws_restJson1SsmlMarksNotSupportedForTextTypeExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"TextLengthExceededException\":\n    case \"com.amazonaws.polly#TextLengthExceededException\":\n      response = {\n        ...(await deserializeAws_restJson1TextLengthExceededExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restJson1SynthesizeSpeechCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<SynthesizeSpeechCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1SynthesizeSpeechCommandError(output, context);\n  }\n  const contents: SynthesizeSpeechCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    AudioStream: undefined,\n    ContentType: undefined,\n    RequestCharacters: undefined,\n  };\n  if (output.headers[\"content-type\"] !== undefined) {\n    contents.ContentType = output.headers[\"content-type\"];\n  }\n  if (output.headers[\"x-amzn-requestcharacters\"] !== undefined) {\n    contents.RequestCharacters = parseInt(output.headers[\"x-amzn-requestcharacters\"], 10);\n  }\n  const data: any = output.body;\n  contents.AudioStream = data;\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1SynthesizeSpeechCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<SynthesizeSpeechCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"EngineNotSupportedException\":\n    case \"com.amazonaws.polly#EngineNotSupportedException\":\n      response = {\n        ...(await deserializeAws_restJson1EngineNotSupportedExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"InvalidSampleRateException\":\n    case \"com.amazonaws.polly#InvalidSampleRateException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidSampleRateExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"InvalidSsmlException\":\n    case \"com.amazonaws.polly#InvalidSsmlException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidSsmlExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"LanguageNotSupportedException\":\n    case \"com.amazonaws.polly#LanguageNotSupportedException\":\n      response = {\n        ...(await deserializeAws_restJson1LanguageNotSupportedExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"LexiconNotFoundException\":\n    case \"com.amazonaws.polly#LexiconNotFoundException\":\n      response = {\n        ...(await deserializeAws_restJson1LexiconNotFoundExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"MarksNotSupportedForFormatException\":\n    case \"com.amazonaws.polly#MarksNotSupportedForFormatException\":\n      response = {\n        ...(await deserializeAws_restJson1MarksNotSupportedForFormatExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ServiceFailureException\":\n    case \"com.amazonaws.polly#ServiceFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"SsmlMarksNotSupportedForTextTypeException\":\n    case \"com.amazonaws.polly#SsmlMarksNotSupportedForTextTypeException\":\n      response = {\n        ...(await deserializeAws_restJson1SsmlMarksNotSupportedForTextTypeExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"TextLengthExceededException\":\n    case \"com.amazonaws.polly#TextLengthExceededException\":\n      response = {\n        ...(await deserializeAws_restJson1TextLengthExceededExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nconst deserializeAws_restJson1EngineNotSupportedExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<EngineNotSupportedException> => {\n  const contents: EngineNotSupportedException = {\n    name: \"EngineNotSupportedException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1InvalidLexiconExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<InvalidLexiconException> => {\n  const contents: InvalidLexiconException = {\n    name: \"InvalidLexiconException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1InvalidNextTokenExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<InvalidNextTokenException> => {\n  const contents: InvalidNextTokenException = {\n    name: \"InvalidNextTokenException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1InvalidS3BucketExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<InvalidS3BucketException> => {\n  const contents: InvalidS3BucketException = {\n    name: \"InvalidS3BucketException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1InvalidS3KeyExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<InvalidS3KeyException> => {\n  const contents: InvalidS3KeyException = {\n    name: \"InvalidS3KeyException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1InvalidSampleRateExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<InvalidSampleRateException> => {\n  const contents: InvalidSampleRateException = {\n    name: \"InvalidSampleRateException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1InvalidSnsTopicArnExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<InvalidSnsTopicArnException> => {\n  const contents: InvalidSnsTopicArnException = {\n    name: \"InvalidSnsTopicArnException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1InvalidSsmlExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<InvalidSsmlException> => {\n  const contents: InvalidSsmlException = {\n    name: \"InvalidSsmlException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1InvalidTaskIdExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<InvalidTaskIdException> => {\n  const contents: InvalidTaskIdException = {\n    name: \"InvalidTaskIdException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1LanguageNotSupportedExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<LanguageNotSupportedException> => {\n  const contents: LanguageNotSupportedException = {\n    name: \"LanguageNotSupportedException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1LexiconNotFoundExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<LexiconNotFoundException> => {\n  const contents: LexiconNotFoundException = {\n    name: \"LexiconNotFoundException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1LexiconSizeExceededExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<LexiconSizeExceededException> => {\n  const contents: LexiconSizeExceededException = {\n    name: \"LexiconSizeExceededException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1MarksNotSupportedForFormatExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<MarksNotSupportedForFormatException> => {\n  const contents: MarksNotSupportedForFormatException = {\n    name: \"MarksNotSupportedForFormatException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1MaxLexemeLengthExceededExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<MaxLexemeLengthExceededException> => {\n  const contents: MaxLexemeLengthExceededException = {\n    name: \"MaxLexemeLengthExceededException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1MaxLexiconsNumberExceededExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<MaxLexiconsNumberExceededException> => {\n  const contents: MaxLexiconsNumberExceededException = {\n    name: \"MaxLexiconsNumberExceededException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1ServiceFailureExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<ServiceFailureException> => {\n  const contents: ServiceFailureException = {\n    name: \"ServiceFailureException\",\n    $fault: \"server\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1SsmlMarksNotSupportedForTextTypeExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<SsmlMarksNotSupportedForTextTypeException> => {\n  const contents: SsmlMarksNotSupportedForTextTypeException = {\n    name: \"SsmlMarksNotSupportedForTextTypeException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1SynthesisTaskNotFoundExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<SynthesisTaskNotFoundException> => {\n  const contents: SynthesisTaskNotFoundException = {\n    name: \"SynthesisTaskNotFoundException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1TextLengthExceededExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<TextLengthExceededException> => {\n  const contents: TextLengthExceededException = {\n    name: \"TextLengthExceededException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1UnsupportedPlsAlphabetExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<UnsupportedPlsAlphabetException> => {\n  const contents: UnsupportedPlsAlphabetException = {\n    name: \"UnsupportedPlsAlphabetException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1UnsupportedPlsLanguageExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<UnsupportedPlsLanguageException> => {\n  const contents: UnsupportedPlsLanguageException = {\n    name: \"UnsupportedPlsLanguageException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst serializeAws_restJson1LexiconNameList = (input: string[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return entry;\n    });\n};\n\nconst serializeAws_restJson1SpeechMarkTypeList = (input: (SpeechMarkType | string)[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return entry;\n    });\n};\n\nconst deserializeAws_restJson1EngineList = (output: any, context: __SerdeContext): (Engine | string)[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return entry;\n    });\n};\n\nconst deserializeAws_restJson1LanguageCodeList = (output: any, context: __SerdeContext): (LanguageCode | string)[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return entry;\n    });\n};\n\nconst deserializeAws_restJson1Lexicon = (output: any, context: __SerdeContext): Lexicon => {\n  return {\n    Content: output.Content !== undefined && output.Content !== null ? output.Content : undefined,\n    Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined,\n  } as any;\n};\n\nconst deserializeAws_restJson1LexiconAttributes = (output: any, context: __SerdeContext): LexiconAttributes => {\n  return {\n    Alphabet: output.Alphabet !== undefined && output.Alphabet !== null ? output.Alphabet : undefined,\n    LanguageCode: output.LanguageCode !== undefined && output.LanguageCode !== null ? output.LanguageCode : undefined,\n    LastModified:\n      output.LastModified !== undefined && output.LastModified !== null\n        ? new Date(Math.round(output.LastModified * 1000))\n        : undefined,\n    LexemesCount: output.LexemesCount !== undefined && output.LexemesCount !== null ? output.LexemesCount : undefined,\n    LexiconArn: output.LexiconArn !== undefined && output.LexiconArn !== null ? output.LexiconArn : undefined,\n    Size: output.Size !== undefined && output.Size !== null ? output.Size : undefined,\n  } as any;\n};\n\nconst deserializeAws_restJson1LexiconDescription = (output: any, context: __SerdeContext): LexiconDescription => {\n  return {\n    Attributes:\n      output.Attributes !== undefined && output.Attributes !== null\n        ? deserializeAws_restJson1LexiconAttributes(output.Attributes, context)\n        : undefined,\n    Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined,\n  } as any;\n};\n\nconst deserializeAws_restJson1LexiconDescriptionList = (output: any, context: __SerdeContext): LexiconDescription[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restJson1LexiconDescription(entry, context);\n    });\n};\n\nconst deserializeAws_restJson1LexiconNameList = (output: any, context: __SerdeContext): string[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return entry;\n    });\n};\n\nconst deserializeAws_restJson1SpeechMarkTypeList = (\n  output: any,\n  context: __SerdeContext\n): (SpeechMarkType | string)[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return entry;\n    });\n};\n\nconst deserializeAws_restJson1SynthesisTask = (output: any, context: __SerdeContext): SynthesisTask => {\n  return {\n    CreationTime:\n      output.CreationTime !== undefined && output.CreationTime !== null\n        ? new Date(Math.round(output.CreationTime * 1000))\n        : undefined,\n    Engine: output.Engine !== undefined && output.Engine !== null ? output.Engine : undefined,\n    LanguageCode: output.LanguageCode !== undefined && output.LanguageCode !== null ? output.LanguageCode : undefined,\n    LexiconNames:\n      output.LexiconNames !== undefined && output.LexiconNames !== null\n        ? deserializeAws_restJson1LexiconNameList(output.LexiconNames, context)\n        : undefined,\n    OutputFormat: output.OutputFormat !== undefined && output.OutputFormat !== null ? output.OutputFormat : undefined,\n    OutputUri: output.OutputUri !== undefined && output.OutputUri !== null ? output.OutputUri : undefined,\n    RequestCharacters:\n      output.RequestCharacters !== undefined && output.RequestCharacters !== null\n        ? output.RequestCharacters\n        : undefined,\n    SampleRate: output.SampleRate !== undefined && output.SampleRate !== null ? output.SampleRate : undefined,\n    SnsTopicArn: output.SnsTopicArn !== undefined && output.SnsTopicArn !== null ? output.SnsTopicArn : undefined,\n    SpeechMarkTypes:\n      output.SpeechMarkTypes !== undefined && output.SpeechMarkTypes !== null\n        ? deserializeAws_restJson1SpeechMarkTypeList(output.SpeechMarkTypes, context)\n        : undefined,\n    TaskId: output.TaskId !== undefined && output.TaskId !== null ? output.TaskId : undefined,\n    TaskStatus: output.TaskStatus !== undefined && output.TaskStatus !== null ? output.TaskStatus : undefined,\n    TaskStatusReason:\n      output.TaskStatusReason !== undefined && output.TaskStatusReason !== null ? output.TaskStatusReason : undefined,\n    TextType: output.TextType !== undefined && output.TextType !== null ? output.TextType : undefined,\n    VoiceId: output.VoiceId !== undefined && output.VoiceId !== null ? output.VoiceId : undefined,\n  } as any;\n};\n\nconst deserializeAws_restJson1SynthesisTasks = (output: any, context: __SerdeContext): SynthesisTask[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restJson1SynthesisTask(entry, context);\n    });\n};\n\nconst deserializeAws_restJson1Voice = (output: any, context: __SerdeContext): Voice => {\n  return {\n    AdditionalLanguageCodes:\n      output.AdditionalLanguageCodes !== undefined && output.AdditionalLanguageCodes !== null\n        ? deserializeAws_restJson1LanguageCodeList(output.AdditionalLanguageCodes, context)\n        : undefined,\n    Gender: output.Gender !== undefined && output.Gender !== null ? output.Gender : undefined,\n    Id: output.Id !== undefined && output.Id !== null ? output.Id : undefined,\n    LanguageCode: output.LanguageCode !== undefined && output.LanguageCode !== null ? output.LanguageCode : undefined,\n    LanguageName: output.LanguageName !== undefined && output.LanguageName !== null ? output.LanguageName : undefined,\n    Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined,\n    SupportedEngines:\n      output.SupportedEngines !== undefined && output.SupportedEngines !== null\n        ? deserializeAws_restJson1EngineList(output.SupportedEngines, context)\n        : undefined,\n  } as any;\n};\n\nconst deserializeAws_restJson1VoiceList = (output: any, context: __SerdeContext): Voice[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restJson1Voice(entry, context);\n    });\n};\n\nconst deserializeMetadata = (output: __HttpResponse): __ResponseMetadata => ({\n  httpStatusCode: output.statusCode,\n  requestId: output.headers[\"x-amzn-requestid\"] ?? output.headers[\"x-amzn-request-id\"],\n  extendedRequestId: output.headers[\"x-amz-id-2\"],\n  cfId: output.headers[\"x-amz-cf-id\"],\n});\n\n// Collect low-level response body stream to Uint8Array.\nconst collectBody = (streamBody: any = new Uint8Array(), context: __SerdeContext): Promise<Uint8Array> => {\n  if (streamBody instanceof Uint8Array) {\n    return Promise.resolve(streamBody);\n  }\n  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\n\n// Encode Uint8Array data into string with utf-8.\nconst collectBodyString = (streamBody: any, context: __SerdeContext): Promise<string> =>\n  collectBody(streamBody, context).then((body) => context.utf8Encoder(body));\n\nconst isSerializableHeaderValue = (value: any): boolean =>\n  value !== undefined &&\n  value !== null &&\n  value !== \"\" &&\n  (!Object.getOwnPropertyNames(value).includes(\"length\") || value.length != 0) &&\n  (!Object.getOwnPropertyNames(value).includes(\"size\") || value.size != 0);\n\nconst parseBody = (streamBody: any, context: __SerdeContext): any =>\n  collectBodyString(streamBody, context).then((encoded) => {\n    if (encoded.length) {\n      return JSON.parse(encoded);\n    }\n    return {};\n  });\n\n/**\n * Load an error code for the aws.rest-json-1.1 protocol.\n */\nconst loadRestJsonErrorCode = (output: __HttpResponse, data: any): string => {\n  const findKey = (object: any, key: string) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());\n\n  const sanitizeErrorCode = (rawValue: string): string => {\n    let cleanValue = rawValue;\n    if (cleanValue.indexOf(\":\") >= 0) {\n      cleanValue = cleanValue.split(\":\")[0];\n    }\n    if (cleanValue.indexOf(\"#\") >= 0) {\n      cleanValue = cleanValue.split(\"#\")[1];\n    }\n    return cleanValue;\n  };\n\n  const headerKey = findKey(output.headers, \"x-amzn-errortype\");\n  if (headerKey !== undefined) {\n    return sanitizeErrorCode(output.headers[headerKey]);\n  }\n\n  if (data.code !== undefined) {\n    return sanitizeErrorCode(data.code);\n  }\n\n  if (data[\"__type\"] !== undefined) {\n    return sanitizeErrorCode(data[\"__type\"]);\n  }\n\n  return \"\";\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}