{"ast":null,"code":"var _jsxFileName = \"/Users/yannellym/Desktop/iwantapet/frontend/src/components/AllPetsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport '../styles/AllPetsPage.css';\nimport PetCard from './PetCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AllPetsPage() {\n  _s();\n  const {\n    category\n  } = useParams();\n  const [loading, setLoading] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n  const petsPerPage = 40;\n  const [cache, setCache] = useState([]);\n  const fetchAnimalsByType = async (type, page) => {\n    const offset = (page - 1) * petsPerPage;\n    let endpoint;\n    if (type === \"dog\" || type === \"cat\") {\n      // Query dogs and cats\n      endpoint = `http://localhost:3002/api/petfinder?type=${type}&offset=${offset}&limit=${petsPerPage}`;\n    } else if (type === \"other\") {\n      // Query \"horse,\" \"rabbit,\" \"hamster,\" and \"pigeon\"\n      const validTypes = [\"horse\", \"rabbit\", \"hamster\", \"pigeon\"].join(\",\");\n      endpoint = `http://localhost:3002/api/petfinder?type=${validTypes}&offset=${offset}&limit=${petsPerPage}`;\n    } else {\n      // Query all animals\n      endpoint = `http://localhost:3002/api/petfinder?offset=${offset}&limit=${petsPerPage}`;\n    }\n    try {\n      // Continue with your existing code to fetch data from the modified endpoint\n      const response = await fetch(endpoint);\n      const data = await response.json();\n      console.log('API Response:', data);\n      if (data && data.animals) {\n        let pets = data.animals;\n        if (type !== \"dog\" && type !== \"cat\") {\n          // Filter out dogs and cats if the type is not \"dog\" or \"cat\"\n          pets = pets.filter(pet => pet.type !== 'Dog' && pet.type !== 'Cat');\n        }\n        setLoading(false);\n\n        // Check if you have fewer than 20 pets and continue querying for \"other\" animals\n        if (type === \"other\" && pets.length < 20) {\n          const remainingPets = 20 - pets.length;\n          const additionalPets = await fetchAnimalsByType(\"other\", page + 1);\n          pets = pets.concat(additionalPets.slice(0, remainingPets));\n        }\n        setCache(pets);\n        return pets;\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error.message);\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    async function fetchData() {\n      await fetchAnimalsByType(category, currentPage);\n    }\n    fetchData();\n  }, [category, currentPage]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"all-pets-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: `All ${category.charAt(0).toUpperCase() + category.slice(1)}s`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pet-list\",\n      children: cache.map(pet => /*#__PURE__*/_jsxDEV(PetCard, {\n        pet: pet\n      }, pet.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n_s(AllPetsPage, \"ZI7uaPeuqINtAeXCvtnrefX/dFg=\", false, function () {\n  return [useParams];\n});\n_c = AllPetsPage;\nexport default AllPetsPage;\n\n// const fetchAnimalsByType = async (type) => {\n//   const endpoint = `http://localhost:3002/api/petfinder?type=${type}&limit=${petsPerPage}`;\n\n//   try {\n//     const response = await fetch(endpoint);\n//     const data = await response.json();\n\n//     if (data && data.animals) {\n//       return data.animals;\n//     }\n//   } catch (error) {\n//     console.error('Error fetching data:', error.message);\n//   }\n\n//   return [];\n// };\n\n// useEffect(() => {\n//   async function fetchData() {\n//     const allPets = await Promise.all(\n//       otherAnimalTypes.map(animalType => fetchAnimalsByType(animalType))\n//     );\n\n//     // Merge the arrays of animals\n//     const mergedPets = allPets.reduce((accumulator, current) => [...accumulator, ...current], []);\n\n//     setCache(mergedPets);\n//     setLoading(false);\n//   }\n\n//   fetchData();\n// }, []);\nvar _c;\n$RefreshReg$(_c, \"AllPetsPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","PetCard","jsxDEV","_jsxDEV","AllPetsPage","_s","category","loading","setLoading","currentPage","setCurrentPage","petsPerPage","cache","setCache","fetchAnimalsByType","type","page","offset","endpoint","validTypes","join","response","fetch","data","json","console","log","animals","pets","filter","pet","length","remainingPets","additionalPets","concat","slice","error","message","fetchData","className","children","charAt","toUpperCase","fileName","_jsxFileName","lineNumber","columnNumber","map","id","_c","$RefreshReg$"],"sources":["/Users/yannellym/Desktop/iwantapet/frontend/src/components/AllPetsPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport '../styles/AllPetsPage.css';\nimport PetCard from './PetCard';\n\nfunction AllPetsPage() {\n  const { category } = useParams();\n  const [loading, setLoading] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n  const petsPerPage = 40;\n  const [cache, setCache] = useState([]);\n  const fetchAnimalsByType = async (type, page) => {\n    const offset = (page - 1) * petsPerPage;\n    let endpoint;\n  \n    if (type === \"dog\" || type === \"cat\") {\n      // Query dogs and cats\n      endpoint = `http://localhost:3002/api/petfinder?type=${type}&offset=${offset}&limit=${petsPerPage}`;\n    } else if (type === \"other\") {\n      // Query \"horse,\" \"rabbit,\" \"hamster,\" and \"pigeon\"\n      const validTypes = [\"horse\", \"rabbit\", \"hamster\", \"pigeon\"].join(\",\");\n      endpoint = `http://localhost:3002/api/petfinder?type=${validTypes}&offset=${offset}&limit=${petsPerPage}`;\n    } else {\n      // Query all animals\n      endpoint = `http://localhost:3002/api/petfinder?offset=${offset}&limit=${petsPerPage}`;\n    }\n  \n    try {\n      // Continue with your existing code to fetch data from the modified endpoint\n      const response = await fetch(endpoint);\n      const data = await response.json();\n  \n      console.log('API Response:', data);\n  \n      if (data && data.animals) {\n        let pets = data.animals;\n  \n        if (type !== \"dog\" && type !== \"cat\") {\n          // Filter out dogs and cats if the type is not \"dog\" or \"cat\"\n          pets = pets.filter(pet => pet.type !== 'Dog' && pet.type !== 'Cat');\n        }\n  \n        setLoading(false);\n  \n        // Check if you have fewer than 20 pets and continue querying for \"other\" animals\n        if (type === \"other\" && pets.length < 20) {\n          const remainingPets = 20 - pets.length;\n          const additionalPets = await fetchAnimalsByType(\"other\", page + 1);\n          pets = pets.concat(additionalPets.slice(0, remainingPets));\n        }\n  \n        setCache(pets);\n        return pets;\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error.message);\n      setLoading(false);\n    }\n  };\n  \n  \n  \n\n  useEffect(() => {\n    async function fetchData() {\n      await fetchAnimalsByType(category, currentPage);\n    }\n\n    fetchData();\n  }, [category, currentPage]);\n\n  return (\n    <div className=\"all-pets-page\">\n      <h2>{`All ${category.charAt(0).toUpperCase() + category.slice(1)}s`}</h2>\n      {loading ? (\n        <p>Loading...</p>\n      ) : (\n        <div className=\"pet-list\">\n          {cache.map((pet) => (\n            <PetCard key={pet.id} pet={pet} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default AllPetsPage;\n\n\n// const fetchAnimalsByType = async (type) => {\n//   const endpoint = `http://localhost:3002/api/petfinder?type=${type}&limit=${petsPerPage}`;\n\n//   try {\n//     const response = await fetch(endpoint);\n//     const data = await response.json();\n\n//     if (data && data.animals) {\n//       return data.animals;\n//     }\n//   } catch (error) {\n//     console.error('Error fetching data:', error.message);\n//   }\n\n//   return [];\n// };\n\n// useEffect(() => {\n//   async function fetchData() {\n//     const allPets = await Promise.all(\n//       otherAnimalTypes.map(animalType => fetchAnimalsByType(animalType))\n//     );\n    \n//     // Merge the arrays of animals\n//     const mergedPets = allPets.reduce((accumulator, current) => [...accumulator, ...current], []);\n    \n//     setCache(mergedPets);\n//     setLoading(false);\n//   }\n\n//   fetchData();\n// }, []);"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}