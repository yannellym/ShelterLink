{"ast":null,"code":"var _jsxFileName = \"/Users/yannellym/Desktop/iwantapet/frontend/src/components/AllPetsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom'; // Import useNavigate for navigation\nimport '../styles/AllPetsPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AllPetsPage({\n  match\n}) {\n  _s();\n  const {\n    category\n  } = match.params; // Get the category from the route parameter\n  const [pets, setPets] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate(); // Initialize the navigate function\n\n  useEffect(() => {\n    // Define the API endpoint based on the selected category\n    let endpoint = '';\n    if (category === 'dogs') {\n      endpoint = 'https://api.petfinder.com/v2/types/dog';\n    } else if (category === 'cats') {\n      endpoint = 'https://api.petfinder.com/v2/types/cat'; // Replace with the actual endpoint for fetching cats\n    } else if (category === 'other-animals') {\n      endpoint = 'https://api.petfinder.com/v2/animals'; // Replace with the actual endpoint for fetching other animals\n    } else {\n      // Handle invalid categories by navigating to an error page or a default page\n      navigate('/error'); // Example: Navigate to an error page\n      return;\n    }\n    const fetchData = async () => {\n      try {\n        const response = await fetch(endpoint);\n        const data = await response.json();\n        if (data && data.pets) {\n          setPets(data.pets);\n          setLoading(false);\n        }\n      } catch (error) {\n        console.error(`Error fetching ${category} data:`, error);\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [category, navigate]); // Include category and navigate in the dependency array\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"all-pets-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: `All ${category.charAt(0).toUpperCase() + category.slice(1)}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pet-list\",\n      children: pets.map(pet => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: pet.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 15\n        }, this)\n      }, pet.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_s(AllPetsPage, \"EkvBFYASBQv8fUHGV30Gfy4MWK4=\", false, function () {\n  return [useNavigate];\n});\n_c = AllPetsPage;\nexport default AllPetsPage;\nvar _c;\n$RefreshReg$(_c, \"AllPetsPage\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","AllPetsPage","match","_s","category","params","pets","setPets","loading","setLoading","navigate","endpoint","fetchData","response","fetch","data","json","error","console","className","children","charAt","toUpperCase","slice","fileName","_jsxFileName","lineNumber","columnNumber","map","pet","name","id","_c","$RefreshReg$"],"sources":["/Users/yannellym/Desktop/iwantapet/frontend/src/components/AllPetsPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom'; // Import useNavigate for navigation\nimport '../styles/AllPetsPage.css';\n\nfunction AllPetsPage({ match }) {\n  const { category } = match.params; // Get the category from the route parameter\n  const [pets, setPets] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate(); // Initialize the navigate function\n\n  useEffect(() => {\n    // Define the API endpoint based on the selected category\n    let endpoint = '';\n\n    if (category === 'dogs') {\n      endpoint = 'https://api.petfinder.com/v2/types/dog';\n    } else if (category === 'cats') {\n      endpoint = 'https://api.petfinder.com/v2/types/cat'; // Replace with the actual endpoint for fetching cats\n    } else if (category === 'other-animals') {\n      endpoint = 'https://api.petfinder.com/v2/animals'; // Replace with the actual endpoint for fetching other animals\n    } else {\n      // Handle invalid categories by navigating to an error page or a default page\n      navigate('/error'); // Example: Navigate to an error page\n      return;\n    }\n\n    const fetchData = async () => {\n      try {\n        const response = await fetch(endpoint);\n        const data = await response.json();\n\n        if (data && data.pets) {\n          setPets(data.pets);\n          setLoading(false);\n        }\n      } catch (error) {\n        console.error(`Error fetching ${category} data:`, error);\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [category, navigate]); // Include category and navigate in the dependency array\n\n  return (\n    <div className=\"all-pets-page\">\n      <h2>{`All ${category.charAt(0).toUpperCase() + category.slice(1)}`}</h2>\n      {loading ? (\n        <p>Loading...</p>\n      ) : (\n        <div className=\"pet-list\">\n          {pets.map((pet) => (\n            <div key={pet.id}>\n              <h3>{pet.name}</h3>\n              {/* Display other pet information */}\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default AllPetsPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}