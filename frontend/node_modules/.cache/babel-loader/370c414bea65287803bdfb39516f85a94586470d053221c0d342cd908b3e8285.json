{"ast":null,"code":"import { __assign } from \"tslib\";\nexport var AccessDeniedException;\n(function (AccessDeniedException) {\n  AccessDeniedException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(AccessDeniedException || (AccessDeniedException = {}));\nexport var S3Object;\n(function (S3Object) {\n  S3Object.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(S3Object || (S3Object = {}));\nexport var Document;\n(function (Document) {\n  Document.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(Document || (Document = {}));\nexport var FeatureType;\n(function (FeatureType) {\n  FeatureType[\"FORMS\"] = \"FORMS\";\n  FeatureType[\"TABLES\"] = \"TABLES\";\n})(FeatureType || (FeatureType = {}));\nexport var ContentClassifier;\n(function (ContentClassifier) {\n  ContentClassifier[\"FREE_OF_ADULT_CONTENT\"] = \"FreeOfAdultContent\";\n  ContentClassifier[\"FREE_OF_PERSONALLY_IDENTIFIABLE_INFORMATION\"] = \"FreeOfPersonallyIdentifiableInformation\";\n})(ContentClassifier || (ContentClassifier = {}));\nexport var HumanLoopDataAttributes;\n(function (HumanLoopDataAttributes) {\n  HumanLoopDataAttributes.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(HumanLoopDataAttributes || (HumanLoopDataAttributes = {}));\nexport var HumanLoopConfig;\n(function (HumanLoopConfig) {\n  HumanLoopConfig.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(HumanLoopConfig || (HumanLoopConfig = {}));\nexport var AnalyzeDocumentRequest;\n(function (AnalyzeDocumentRequest) {\n  AnalyzeDocumentRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(AnalyzeDocumentRequest || (AnalyzeDocumentRequest = {}));\nexport var BlockType;\n(function (BlockType) {\n  BlockType[\"CELL\"] = \"CELL\";\n  BlockType[\"KEY_VALUE_SET\"] = \"KEY_VALUE_SET\";\n  BlockType[\"LINE\"] = \"LINE\";\n  BlockType[\"PAGE\"] = \"PAGE\";\n  BlockType[\"SELECTION_ELEMENT\"] = \"SELECTION_ELEMENT\";\n  BlockType[\"TABLE\"] = \"TABLE\";\n  BlockType[\"WORD\"] = \"WORD\";\n})(BlockType || (BlockType = {}));\nexport var EntityType;\n(function (EntityType) {\n  EntityType[\"KEY\"] = \"KEY\";\n  EntityType[\"VALUE\"] = \"VALUE\";\n})(EntityType || (EntityType = {}));\nexport var BoundingBox;\n(function (BoundingBox) {\n  BoundingBox.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(BoundingBox || (BoundingBox = {}));\nexport var Point;\n(function (Point) {\n  Point.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(Point || (Point = {}));\nexport var Geometry;\n(function (Geometry) {\n  Geometry.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(Geometry || (Geometry = {}));\nexport var RelationshipType;\n(function (RelationshipType) {\n  RelationshipType[\"CHILD\"] = \"CHILD\";\n  RelationshipType[\"COMPLEX_FEATURES\"] = \"COMPLEX_FEATURES\";\n  RelationshipType[\"VALUE\"] = \"VALUE\";\n})(RelationshipType || (RelationshipType = {}));\nexport var Relationship;\n(function (Relationship) {\n  Relationship.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(Relationship || (Relationship = {}));\nexport var SelectionStatus;\n(function (SelectionStatus) {\n  SelectionStatus[\"NOT_SELECTED\"] = \"NOT_SELECTED\";\n  SelectionStatus[\"SELECTED\"] = \"SELECTED\";\n})(SelectionStatus || (SelectionStatus = {}));\nexport var TextType;\n(function (TextType) {\n  TextType[\"HANDWRITING\"] = \"HANDWRITING\";\n  TextType[\"PRINTED\"] = \"PRINTED\";\n})(TextType || (TextType = {}));\nexport var Block;\n(function (Block) {\n  Block.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(Block || (Block = {}));\nexport var DocumentMetadata;\n(function (DocumentMetadata) {\n  DocumentMetadata.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DocumentMetadata || (DocumentMetadata = {}));\nexport var HumanLoopActivationOutput;\n(function (HumanLoopActivationOutput) {\n  HumanLoopActivationOutput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(HumanLoopActivationOutput || (HumanLoopActivationOutput = {}));\nexport var AnalyzeDocumentResponse;\n(function (AnalyzeDocumentResponse) {\n  AnalyzeDocumentResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(AnalyzeDocumentResponse || (AnalyzeDocumentResponse = {}));\nexport var BadDocumentException;\n(function (BadDocumentException) {\n  BadDocumentException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(BadDocumentException || (BadDocumentException = {}));\nexport var DocumentTooLargeException;\n(function (DocumentTooLargeException) {\n  DocumentTooLargeException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DocumentTooLargeException || (DocumentTooLargeException = {}));\nexport var HumanLoopQuotaExceededException;\n(function (HumanLoopQuotaExceededException) {\n  HumanLoopQuotaExceededException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(HumanLoopQuotaExceededException || (HumanLoopQuotaExceededException = {}));\nexport var InternalServerError;\n(function (InternalServerError) {\n  InternalServerError.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(InternalServerError || (InternalServerError = {}));\nexport var InvalidParameterException;\n(function (InvalidParameterException) {\n  InvalidParameterException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(InvalidParameterException || (InvalidParameterException = {}));\nexport var InvalidS3ObjectException;\n(function (InvalidS3ObjectException) {\n  InvalidS3ObjectException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(InvalidS3ObjectException || (InvalidS3ObjectException = {}));\nexport var ProvisionedThroughputExceededException;\n(function (ProvisionedThroughputExceededException) {\n  ProvisionedThroughputExceededException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ProvisionedThroughputExceededException || (ProvisionedThroughputExceededException = {}));\nexport var ThrottlingException;\n(function (ThrottlingException) {\n  ThrottlingException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ThrottlingException || (ThrottlingException = {}));\nexport var UnsupportedDocumentException;\n(function (UnsupportedDocumentException) {\n  UnsupportedDocumentException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(UnsupportedDocumentException || (UnsupportedDocumentException = {}));\nexport var DetectDocumentTextRequest;\n(function (DetectDocumentTextRequest) {\n  DetectDocumentTextRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DetectDocumentTextRequest || (DetectDocumentTextRequest = {}));\nexport var DetectDocumentTextResponse;\n(function (DetectDocumentTextResponse) {\n  DetectDocumentTextResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DetectDocumentTextResponse || (DetectDocumentTextResponse = {}));\nexport var DocumentLocation;\n(function (DocumentLocation) {\n  DocumentLocation.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DocumentLocation || (DocumentLocation = {}));\nexport var GetDocumentAnalysisRequest;\n(function (GetDocumentAnalysisRequest) {\n  GetDocumentAnalysisRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(GetDocumentAnalysisRequest || (GetDocumentAnalysisRequest = {}));\nexport var JobStatus;\n(function (JobStatus) {\n  JobStatus[\"FAILED\"] = \"FAILED\";\n  JobStatus[\"IN_PROGRESS\"] = \"IN_PROGRESS\";\n  JobStatus[\"PARTIAL_SUCCESS\"] = \"PARTIAL_SUCCESS\";\n  JobStatus[\"SUCCEEDED\"] = \"SUCCEEDED\";\n})(JobStatus || (JobStatus = {}));\nexport var Warning;\n(function (Warning) {\n  Warning.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(Warning || (Warning = {}));\nexport var GetDocumentAnalysisResponse;\n(function (GetDocumentAnalysisResponse) {\n  GetDocumentAnalysisResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(GetDocumentAnalysisResponse || (GetDocumentAnalysisResponse = {}));\nexport var InvalidJobIdException;\n(function (InvalidJobIdException) {\n  InvalidJobIdException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(InvalidJobIdException || (InvalidJobIdException = {}));\nexport var GetDocumentTextDetectionRequest;\n(function (GetDocumentTextDetectionRequest) {\n  GetDocumentTextDetectionRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(GetDocumentTextDetectionRequest || (GetDocumentTextDetectionRequest = {}));\nexport var GetDocumentTextDetectionResponse;\n(function (GetDocumentTextDetectionResponse) {\n  GetDocumentTextDetectionResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(GetDocumentTextDetectionResponse || (GetDocumentTextDetectionResponse = {}));\nexport var IdempotentParameterMismatchException;\n(function (IdempotentParameterMismatchException) {\n  IdempotentParameterMismatchException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(IdempotentParameterMismatchException || (IdempotentParameterMismatchException = {}));\nexport var InvalidKMSKeyException;\n(function (InvalidKMSKeyException) {\n  InvalidKMSKeyException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(InvalidKMSKeyException || (InvalidKMSKeyException = {}));\nexport var LimitExceededException;\n(function (LimitExceededException) {\n  LimitExceededException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(LimitExceededException || (LimitExceededException = {}));\nexport var NotificationChannel;\n(function (NotificationChannel) {\n  NotificationChannel.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(NotificationChannel || (NotificationChannel = {}));\nexport var OutputConfig;\n(function (OutputConfig) {\n  OutputConfig.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(OutputConfig || (OutputConfig = {}));\nexport var StartDocumentAnalysisRequest;\n(function (StartDocumentAnalysisRequest) {\n  StartDocumentAnalysisRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StartDocumentAnalysisRequest || (StartDocumentAnalysisRequest = {}));\nexport var StartDocumentAnalysisResponse;\n(function (StartDocumentAnalysisResponse) {\n  StartDocumentAnalysisResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StartDocumentAnalysisResponse || (StartDocumentAnalysisResponse = {}));\nexport var StartDocumentTextDetectionRequest;\n(function (StartDocumentTextDetectionRequest) {\n  StartDocumentTextDetectionRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StartDocumentTextDetectionRequest || (StartDocumentTextDetectionRequest = {}));\nexport var StartDocumentTextDetectionResponse;\n(function (StartDocumentTextDetectionResponse) {\n  StartDocumentTextDetectionResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StartDocumentTextDetectionResponse || (StartDocumentTextDetectionResponse = {}));","map":{"version":3,"names":["AccessDeniedException","filterSensitiveLog","obj","__assign","S3Object","Document","FeatureType","ContentClassifier","HumanLoopDataAttributes","HumanLoopConfig","AnalyzeDocumentRequest","BlockType","EntityType","BoundingBox","Point","Geometry","RelationshipType","Relationship","SelectionStatus","TextType","Block","DocumentMetadata","HumanLoopActivationOutput","AnalyzeDocumentResponse","BadDocumentException","DocumentTooLargeException","HumanLoopQuotaExceededException","InternalServerError","InvalidParameterException","InvalidS3ObjectException","ProvisionedThroughputExceededException","ThrottlingException","UnsupportedDocumentException","DetectDocumentTextRequest","DetectDocumentTextResponse","DocumentLocation","GetDocumentAnalysisRequest","JobStatus","Warning","GetDocumentAnalysisResponse","InvalidJobIdException","GetDocumentTextDetectionRequest","GetDocumentTextDetectionResponse","IdempotentParameterMismatchException","InvalidKMSKeyException","LimitExceededException","NotificationChannel","OutputConfig","StartDocumentAnalysisRequest","StartDocumentAnalysisResponse","StartDocumentTextDetectionRequest","StartDocumentTextDetectionResponse"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-sdk/client-textract/models/models_0.ts"],"sourcesContent":["import { LazyJsonString as __LazyJsonString, SmithyException as __SmithyException } from \"@aws-sdk/smithy-client\";\nimport { MetadataBearer as $MetadataBearer } from \"@aws-sdk/types\";\n\n/**\n * <p>You aren't authorized to perform the action. Use the Amazon Resource Name (ARN)\n *             of an authorized user or IAM role to perform the operation.</p>\n */\nexport interface AccessDeniedException extends __SmithyException, $MetadataBearer {\n  name: \"AccessDeniedException\";\n  $fault: \"client\";\n  Message?: string;\n  Code?: string;\n}\n\nexport namespace AccessDeniedException {\n  export const filterSensitiveLog = (obj: AccessDeniedException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The S3 bucket name and file name that identifies the document.</p>\n *          <p>The AWS Region for the S3 bucket that contains the document must match the Region that\n *          you use for Amazon Textract operations.</p>\n *\n *          <p>For Amazon Textract to process a file in an S3 bucket, the user must have\n *          permission to access the S3 bucket and file.\n *\n *       </p>\n */\nexport interface S3Object {\n  /**\n   * <p>The name of the S3 bucket.</p>\n   */\n  Bucket?: string;\n\n  /**\n   * <p>The file name of the input document. Synchronous operations can use image files that are\n   *          in JPEG or PNG format. Asynchronous operations also support PDF format files.</p>\n   */\n  Name?: string;\n\n  /**\n   * <p>If the bucket has versioning enabled, you can specify the object version. </p>\n   */\n  Version?: string;\n}\n\nexport namespace S3Object {\n  export const filterSensitiveLog = (obj: S3Object): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The input document, either as bytes or as an S3 object.</p>\n *          <p>You pass image bytes to an Amazon Textract API operation by using the <code>Bytes</code>\n *          property. For example, you would use the <code>Bytes</code> property to pass a document\n *          loaded from a local file system. Image bytes passed by using the <code>Bytes</code>\n *          property must be base64 encoded. Your code might not need to encode document file bytes if\n *          you're using an AWS SDK to call Amazon Textract API operations. </p>\n *          <p>You pass images stored in an S3 bucket to an Amazon Textract API operation by using the\n *             <code>S3Object</code> property. Documents stored in an S3 bucket don't need to be base64\n *          encoded.</p>\n *          <p>The AWS Region for the S3 bucket that contains the S3 object must match the AWS\n *          Region that you use for Amazon Textract operations.</p>\n *          <p>If you use the AWS CLI to call Amazon Textract operations, passing image bytes using\n *          the Bytes property isn't supported. You must first upload the document to an Amazon S3\n *          bucket, and then call the operation using the S3Object property.</p>\n *\n *          <p>For Amazon Textract to process an S3 object, the user must have permission\n *          to access the S3 object. </p>\n */\nexport interface Document {\n  /**\n   * <p>A blob of base64-encoded document bytes. The maximum size of a document that's provided\n   *          in a blob of bytes is 5 MB. The document bytes must be in PNG or JPEG format.</p>\n   *          <p>If you're using an AWS SDK to call Amazon Textract, you might not need to base64-encode\n   *          image bytes passed using the <code>Bytes</code> field. </p>\n   */\n  Bytes?: Uint8Array;\n\n  /**\n   * <p>Identifies an S3 object as the document source. The maximum size of a document that's\n   *          stored in an S3 bucket is 5 MB.</p>\n   */\n  S3Object?: S3Object;\n}\n\nexport namespace Document {\n  export const filterSensitiveLog = (obj: Document): any => ({\n    ...obj,\n  });\n}\n\nexport enum FeatureType {\n  FORMS = \"FORMS\",\n  TABLES = \"TABLES\",\n}\n\nexport enum ContentClassifier {\n  FREE_OF_ADULT_CONTENT = \"FreeOfAdultContent\",\n  FREE_OF_PERSONALLY_IDENTIFIABLE_INFORMATION = \"FreeOfPersonallyIdentifiableInformation\",\n}\n\n/**\n * <p>Allows you to set attributes of the image. Currently, you can declare an image as free of\n *          personally identifiable information and adult content. </p>\n */\nexport interface HumanLoopDataAttributes {\n  /**\n   * <p>Sets whether the input image is free of personally identifiable information or adult content.</p>\n   */\n  ContentClassifiers?: (ContentClassifier | string)[];\n}\n\nexport namespace HumanLoopDataAttributes {\n  export const filterSensitiveLog = (obj: HumanLoopDataAttributes): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Sets up the human review workflow the document will be sent to if one of the conditions is met. You can also set certain attributes\n *          of the image before review. </p>\n */\nexport interface HumanLoopConfig {\n  /**\n   * <p>The name of the human workflow used for this image. This should be kept unique within a region.</p>\n   */\n  HumanLoopName: string | undefined;\n\n  /**\n   * <p>The Amazon Resource Name (ARN) of the flow definition.</p>\n   */\n  FlowDefinitionArn: string | undefined;\n\n  /**\n   * <p>Sets attributes of the input data.</p>\n   */\n  DataAttributes?: HumanLoopDataAttributes;\n}\n\nexport namespace HumanLoopConfig {\n  export const filterSensitiveLog = (obj: HumanLoopConfig): any => ({\n    ...obj,\n  });\n}\n\nexport interface AnalyzeDocumentRequest {\n  /**\n   * <p>The input document as base64-encoded bytes or an Amazon S3 object. If you use the AWS CLI\n   *          to call Amazon Textract operations, you can't pass image bytes. The document must be an image\n   *          in JPEG or PNG format.</p>\n   *          <p>If you're using an AWS SDK to call Amazon Textract, you might not need to base64-encode\n   *          image bytes that are passed using the <code>Bytes</code> field. </p>\n   */\n  Document: Document | undefined;\n\n  /**\n   * <p>A list of the types of analysis to perform. Add TABLES to the list to return information\n   *          about the tables that are detected in the input document. Add FORMS to return detected form data.\n   *          To perform both types of analysis, add TABLES and FORMS to\n   *             <code>FeatureTypes</code>. All lines and words detected in the document are included in\n   *          the response (including text that isn't related to the value of <code>FeatureTypes</code>). </p>\n   */\n  FeatureTypes: (FeatureType | string)[] | undefined;\n\n  /**\n   * <p>Sets the configuration for the human in the loop workflow for analyzing documents.</p>\n   */\n  HumanLoopConfig?: HumanLoopConfig;\n}\n\nexport namespace AnalyzeDocumentRequest {\n  export const filterSensitiveLog = (obj: AnalyzeDocumentRequest): any => ({\n    ...obj,\n  });\n}\n\nexport enum BlockType {\n  CELL = \"CELL\",\n  KEY_VALUE_SET = \"KEY_VALUE_SET\",\n  LINE = \"LINE\",\n  PAGE = \"PAGE\",\n  SELECTION_ELEMENT = \"SELECTION_ELEMENT\",\n  TABLE = \"TABLE\",\n  WORD = \"WORD\",\n}\n\nexport enum EntityType {\n  KEY = \"KEY\",\n  VALUE = \"VALUE\",\n}\n\n/**\n * <p>The bounding box around the detected page, text, key-value pair, table, table cell, or selection element on a\n *          document page. The <code>left</code> (x-coordinate) and <code>top</code> (y-coordinate) are\n *          coordinates that represent the top and left sides of the bounding box. Note that the\n *          upper-left corner of the image is the origin (0,0). </p>\n *          <p>The <code>top</code> and <code>left</code> values returned are ratios of the overall\n *          document page size. For example, if the input image is 700 x 200 pixels, and the top-left\n *          coordinate of the bounding box is 350 x 50 pixels, the API returns a <code>left</code>\n *          value of 0.5 (350/700) and a <code>top</code> value of 0.25 (50/200).</p>\n *          <p>The <code>width</code> and <code>height</code> values represent the dimensions of the\n *          bounding box as a ratio of the overall document page dimension. For example, if the\n *          document page size is 700 x 200 pixels, and the bounding box width is 70 pixels, the width\n *          returned is 0.1. </p>\n */\nexport interface BoundingBox {\n  /**\n   * <p>The width of the bounding box as a ratio of the overall document page\n   *          width.</p>\n   */\n  Width?: number;\n\n  /**\n   * <p>The height of the bounding box as a ratio of the overall document page\n   *          height.</p>\n   */\n  Height?: number;\n\n  /**\n   * <p>The left coordinate of the bounding box as a ratio of overall document page\n   *          width.</p>\n   */\n  Left?: number;\n\n  /**\n   * <p>The top coordinate of the bounding box as a ratio of overall document page\n   *          height.</p>\n   */\n  Top?: number;\n}\n\nexport namespace BoundingBox {\n  export const filterSensitiveLog = (obj: BoundingBox): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The X and Y coordinates of a point on a document page. The X and Y\n *          values that are returned are ratios of the overall document page size. For example, if the\n *          input document is 700 x 200 and the operation returns X=0.5 and Y=0.25, then the point is\n *          at the (350,50) pixel coordinate on the document page.</p>\n *\n *          <p>An array of <code>Point</code> objects, <code>Polygon</code>, is returned\n *          by <a>DetectDocumentText</a>. <code>Polygon</code> represents a fine-grained\n *          polygon around detected text. For more information, see Geometry in the Amazon Textract\n *          Developer Guide. </p>\n */\nexport interface Point {\n  /**\n   * <p>The value of the X coordinate for a point on a <code>Polygon</code>.</p>\n   */\n  X?: number;\n\n  /**\n   * <p>The value of the Y coordinate for a point on a <code>Polygon</code>.</p>\n   */\n  Y?: number;\n}\n\nexport namespace Point {\n  export const filterSensitiveLog = (obj: Point): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Information about where the following items are located on a document page: detected\n *          page, text, key-value pairs, tables, table cells, and selection elements.</p>\n */\nexport interface Geometry {\n  /**\n   * <p>An axis-aligned coarse representation of the location of the recognized item on the\n   *          document page.</p>\n   */\n  BoundingBox?: BoundingBox;\n\n  /**\n   * <p>Within the bounding box, a fine-grained polygon around the recognized item.</p>\n   */\n  Polygon?: Point[];\n}\n\nexport namespace Geometry {\n  export const filterSensitiveLog = (obj: Geometry): any => ({\n    ...obj,\n  });\n}\n\nexport enum RelationshipType {\n  CHILD = \"CHILD\",\n  COMPLEX_FEATURES = \"COMPLEX_FEATURES\",\n  VALUE = \"VALUE\",\n}\n\n/**\n * <p>Information about how blocks are related to each other. A <code>Block</code> object\n *          contains 0 or more <code>Relation</code> objects in a list, <code>Relationships</code>. For\n *          more information, see <a>Block</a>.</p>\n *          <p>The <code>Type</code> element provides the type of the relationship for all blocks in\n *          the <code>IDs</code> array. </p>\n */\nexport interface Relationship {\n  /**\n   * <p>The type of relationship that the blocks in the IDs array have with the current block.\n   *          The relationship can be <code>VALUE</code> or <code>CHILD</code>. A relationship of type\n   *          VALUE is a list that contains the ID of the VALUE block that's associated with the KEY of a key-value pair.\n   *          A relationship of type CHILD is a list of IDs that identify WORD blocks in the case of lines\n   *          Cell blocks in the case of Tables, and WORD blocks in the case of Selection Elements.</p>\n   */\n  Type?: RelationshipType | string;\n\n  /**\n   * <p>An\n   *          array of IDs for related blocks. You can get the type of the relationship from the\n   *             <code>Type</code> element.</p>\n   */\n  Ids?: string[];\n}\n\nexport namespace Relationship {\n  export const filterSensitiveLog = (obj: Relationship): any => ({\n    ...obj,\n  });\n}\n\nexport enum SelectionStatus {\n  NOT_SELECTED = \"NOT_SELECTED\",\n  SELECTED = \"SELECTED\",\n}\n\nexport enum TextType {\n  HANDWRITING = \"HANDWRITING\",\n  PRINTED = \"PRINTED\",\n}\n\n/**\n * <p>A <code>Block</code> represents items that are recognized in a document within a group\n *          of pixels close to each other. The information returned in a <code>Block</code> object\n *          depends on the type of operation. In text detection for documents (for example <a>DetectDocumentText</a>), you get information about the detected words and lines\n *          of text. In text analysis (for example <a>AnalyzeDocument</a>), you can also get\n *          information about the fields, tables, and selection elements that are detected in the\n *          document.</p>\n *          <p>An array of <code>Block</code> objects is returned by both synchronous and asynchronous\n *          operations. In synchronous operations, such as <a>DetectDocumentText</a>, the\n *          array of <code>Block</code> objects is the entire set of results. In asynchronous\n *          operations, such as <a>GetDocumentAnalysis</a>, the array is returned over one\n *          or more responses.</p>\n *          <p>For more information, see <a href=\"https://docs.aws.amazon.com/textract/latest/dg/how-it-works.html\">How Amazon Textract Works</a>.</p>\n */\nexport interface Block {\n  /**\n   * <p>The type of text item that's recognized. In operations for text detection, the following\n   *          types are returned:</p>\n   *          <ul>\n   *             <li>\n   *                <p>\n   *                   <i>PAGE</i> - Contains a list of the LINE <code>Block</code> objects\n   *                that are detected on a document page.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <i>WORD</i> - A word detected on a document page. A word is one or\n   *                more ISO basic Latin script characters that aren't separated by spaces.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <i>LINE</i> - A string of tab-delimited, contiguous words that are\n   *                detected on a document page.</p>\n   *             </li>\n   *          </ul>\n   *          <p>In text analysis operations, the following types are returned:</p>\n   *          <ul>\n   *             <li>\n   *                <p>\n   *                   <i>PAGE</i> - Contains a list of child <code>Block</code> objects\n   *                that are detected on a document page.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <i>KEY_VALUE_SET</i> - Stores the KEY and VALUE <code>Block</code>\n   *                objects for linked text that's detected on a document page. Use the\n   *                   <code>EntityType</code> field to determine if a KEY_VALUE_SET object is a KEY\n   *                   <code>Block</code> object or a VALUE <code>Block</code> object. </p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <i>WORD</i> - A word that's detected on a document page. A word is\n   *                one or more ISO basic Latin script characters that aren't separated by spaces.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <i>LINE</i> - A string of tab-delimited, contiguous words that are\n   *                detected on a document page.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <i>TABLE</i> - A table that's detected on a document page. A table\n   *                is grid-based information with two or more rows or columns, with a cell span of one\n   *                row and one column each. </p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <i>CELL</i> - A cell within a detected table. The cell is the parent\n   *                of the block that contains the text in the cell.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <i>SELECTION_ELEMENT</i> - A selection element such as an option\n   *                button (radio button) or a check box that's detected on a document page. Use the\n   *                value of <code>SelectionStatus</code> to determine the status of the selection\n   *                element.</p>\n   *             </li>\n   *          </ul>\n   */\n  BlockType?: BlockType | string;\n\n  /**\n   * <p>The confidence score that Amazon Textract has in the accuracy of the recognized text and\n   *          the accuracy of the geometry points around the recognized text.</p>\n   */\n  Confidence?: number;\n\n  /**\n   * <p>The word or line of text that's recognized by Amazon Textract. </p>\n   */\n  Text?: string;\n\n  /**\n   * <p>The kind of text that Amazon Textract has detected. Can check for handwritten text and printed text.</p>\n   */\n  TextType?: TextType | string;\n\n  /**\n   * <p>The row in which a table cell is located. The first row position is 1.\n   *             <code>RowIndex</code> isn't returned by <code>DetectDocumentText</code> and\n   *             <code>GetDocumentTextDetection</code>.</p>\n   */\n  RowIndex?: number;\n\n  /**\n   * <p>The column in which a table cell appears. The first column position is 1.\n   *             <code>ColumnIndex</code> isn't returned by <code>DetectDocumentText</code> and\n   *             <code>GetDocumentTextDetection</code>.</p>\n   */\n  ColumnIndex?: number;\n\n  /**\n   * <p>The number of rows that a table cell spans. Currently this value is always 1, even\n   *          if the number of rows spanned is greater than 1. <code>RowSpan</code> isn't returned by\n   *             <code>DetectDocumentText</code> and <code>GetDocumentTextDetection</code>.</p>\n   */\n  RowSpan?: number;\n\n  /**\n   * <p>The number of columns that a table cell spans. Currently this value is always 1, even\n   *          if the number of columns spanned is greater than 1. <code>ColumnSpan</code> isn't returned by\n   *             <code>DetectDocumentText</code> and <code>GetDocumentTextDetection</code>. </p>\n   */\n  ColumnSpan?: number;\n\n  /**\n   * <p>The location of the recognized text on the image. It includes an axis-aligned, coarse\n   *          bounding box that surrounds the text, and a finer-grain polygon for more accurate spatial\n   *          information. </p>\n   */\n  Geometry?: Geometry;\n\n  /**\n   * <p>The identifier for the recognized text. The identifier is only unique for a single\n   *          operation. </p>\n   */\n  Id?: string;\n\n  /**\n   * <p>A list of child blocks of the current block. For example, a LINE object has child blocks\n   *          for each WORD block that's part of the line of text. There aren't Relationship objects in\n   *          the list for relationships that don't exist, such as when the current block has no child\n   *          blocks. The list size can be the following:</p>\n   *          <ul>\n   *             <li>\n   *                <p>0 - The block has no child blocks.</p>\n   *             </li>\n   *             <li>\n   *                <p>1 - The block has child blocks.</p>\n   *             </li>\n   *          </ul>\n   */\n  Relationships?: Relationship[];\n\n  /**\n   * <p>The type of entity. The following can be returned:</p>\n   *          <ul>\n   *             <li>\n   *                <p>\n   *                   <i>KEY</i> - An identifier for a field on the document.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <i>VALUE</i> - The field text.</p>\n   *             </li>\n   *          </ul>\n   *          <p>\n   *             <code>EntityTypes</code> isn't returned by <code>DetectDocumentText</code> and\n   *             <code>GetDocumentTextDetection</code>.</p>\n   */\n  EntityTypes?: (EntityType | string)[];\n\n  /**\n   * <p>The selection status of a selection element, such as an option button or check box. </p>\n   */\n  SelectionStatus?: SelectionStatus | string;\n\n  /**\n   * <p>The page on which a block was detected. <code>Page</code> is returned by asynchronous\n   *          operations. Page values greater than 1 are only returned for multipage documents that are\n   *          in PDF format. A scanned image (JPEG/PNG), even if it contains multiple document pages, is\n   *          considered to be a single-page document. The value of <code>Page</code> is always 1.\n   *          Synchronous operations don't return <code>Page</code> because every input document is\n   *          considered to be a single-page document.</p>\n   */\n  Page?: number;\n}\n\nexport namespace Block {\n  export const filterSensitiveLog = (obj: Block): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Information about the input document.</p>\n */\nexport interface DocumentMetadata {\n  /**\n   * <p>The number of pages that are detected in the document.</p>\n   */\n  Pages?: number;\n}\n\nexport namespace DocumentMetadata {\n  export const filterSensitiveLog = (obj: DocumentMetadata): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Shows the results of the human in the loop evaluation. If there is no HumanLoopArn, the input\n *          did not trigger human review.</p>\n */\nexport interface HumanLoopActivationOutput {\n  /**\n   * <p>The Amazon Resource Name (ARN) of the HumanLoop created.</p>\n   */\n  HumanLoopArn?: string;\n\n  /**\n   * <p>Shows if and why human review was needed.</p>\n   */\n  HumanLoopActivationReasons?: string[];\n\n  /**\n   * <p>Shows the result of condition evaluations, including those conditions which activated a human review.</p>\n   */\n  HumanLoopActivationConditionsEvaluationResults?: __LazyJsonString | string;\n}\n\nexport namespace HumanLoopActivationOutput {\n  export const filterSensitiveLog = (obj: HumanLoopActivationOutput): any => ({\n    ...obj,\n  });\n}\n\nexport interface AnalyzeDocumentResponse {\n  /**\n   * <p>Metadata about the analyzed document. An example is the number of pages.</p>\n   */\n  DocumentMetadata?: DocumentMetadata;\n\n  /**\n   * <p>The items that are detected and analyzed by <code>AnalyzeDocument</code>.</p>\n   */\n  Blocks?: Block[];\n\n  /**\n   * <p>Shows the results of the human in the loop evaluation.</p>\n   */\n  HumanLoopActivationOutput?: HumanLoopActivationOutput;\n\n  /**\n   * <p>The version of the model used to analyze the document.</p>\n   */\n  AnalyzeDocumentModelVersion?: string;\n}\n\nexport namespace AnalyzeDocumentResponse {\n  export const filterSensitiveLog = (obj: AnalyzeDocumentResponse): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Amazon Textract isn't able to read the document. For more information on the document\n *          limits in Amazon Textract, see <a>limits</a>.</p>\n */\nexport interface BadDocumentException extends __SmithyException, $MetadataBearer {\n  name: \"BadDocumentException\";\n  $fault: \"client\";\n  Message?: string;\n  Code?: string;\n}\n\nexport namespace BadDocumentException {\n  export const filterSensitiveLog = (obj: BadDocumentException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The document can't be processed because it's too large. The maximum document size for\n *          synchronous operations 10 MB. The maximum document size for asynchronous operations is 500\n *          MB for PDF files.</p>\n */\nexport interface DocumentTooLargeException extends __SmithyException, $MetadataBearer {\n  name: \"DocumentTooLargeException\";\n  $fault: \"client\";\n  Message?: string;\n  Code?: string;\n}\n\nexport namespace DocumentTooLargeException {\n  export const filterSensitiveLog = (obj: DocumentTooLargeException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Indicates you have exceeded the maximum number of active human in the loop workflows available</p>\n */\nexport interface HumanLoopQuotaExceededException extends __SmithyException, $MetadataBearer {\n  name: \"HumanLoopQuotaExceededException\";\n  $fault: \"client\";\n  /**\n   * <p>The resource type.</p>\n   */\n  ResourceType?: string;\n\n  /**\n   * <p>The quota code.</p>\n   */\n  QuotaCode?: string;\n\n  /**\n   * <p>The service code.</p>\n   */\n  ServiceCode?: string;\n\n  Message?: string;\n  Code?: string;\n}\n\nexport namespace HumanLoopQuotaExceededException {\n  export const filterSensitiveLog = (obj: HumanLoopQuotaExceededException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Amazon Textract experienced a service issue. Try your call again.</p>\n */\nexport interface InternalServerError extends __SmithyException, $MetadataBearer {\n  name: \"InternalServerError\";\n  $fault: \"server\";\n  Message?: string;\n  Code?: string;\n}\n\nexport namespace InternalServerError {\n  export const filterSensitiveLog = (obj: InternalServerError): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>An input parameter violated a constraint. For example, in synchronous operations,\n *        an <code>InvalidParameterException</code> exception occurs\n *       when neither of the <code>S3Object</code> or <code>Bytes</code> values are supplied in the <code>Document</code>\n *       request parameter.\n *        Validate your parameter before calling the API operation again.</p>\n */\nexport interface InvalidParameterException extends __SmithyException, $MetadataBearer {\n  name: \"InvalidParameterException\";\n  $fault: \"client\";\n  Message?: string;\n  Code?: string;\n}\n\nexport namespace InvalidParameterException {\n  export const filterSensitiveLog = (obj: InvalidParameterException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Amazon Textract is unable to access the S3 object that's specified in the request.\n *          for more information, <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html\">Configure Access to Amazon S3</a>\n *          For troubleshooting information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/troubleshooting.html\">Troubleshooting Amazon S3</a>\n *          </p>\n */\nexport interface InvalidS3ObjectException extends __SmithyException, $MetadataBearer {\n  name: \"InvalidS3ObjectException\";\n  $fault: \"client\";\n  Message?: string;\n  Code?: string;\n}\n\nexport namespace InvalidS3ObjectException {\n  export const filterSensitiveLog = (obj: InvalidS3ObjectException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The number of requests exceeded your throughput limit. If you want to increase this limit,\n *          contact Amazon Textract.</p>\n */\nexport interface ProvisionedThroughputExceededException extends __SmithyException, $MetadataBearer {\n  name: \"ProvisionedThroughputExceededException\";\n  $fault: \"client\";\n  Message?: string;\n  Code?: string;\n}\n\nexport namespace ProvisionedThroughputExceededException {\n  export const filterSensitiveLog = (obj: ProvisionedThroughputExceededException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Amazon Textract is temporarily unable to process the request. Try your call again.</p>\n */\nexport interface ThrottlingException extends __SmithyException, $MetadataBearer {\n  name: \"ThrottlingException\";\n  $fault: \"server\";\n  Message?: string;\n  Code?: string;\n}\n\nexport namespace ThrottlingException {\n  export const filterSensitiveLog = (obj: ThrottlingException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The format of the input document isn't supported. Documents for synchronous operations can be in\n *          PNG or JPEG format. Documents for asynchronous operations can also be in PDF format.</p>\n */\nexport interface UnsupportedDocumentException extends __SmithyException, $MetadataBearer {\n  name: \"UnsupportedDocumentException\";\n  $fault: \"client\";\n  Message?: string;\n  Code?: string;\n}\n\nexport namespace UnsupportedDocumentException {\n  export const filterSensitiveLog = (obj: UnsupportedDocumentException): any => ({\n    ...obj,\n  });\n}\n\nexport interface DetectDocumentTextRequest {\n  /**\n   * <p>The input document as base64-encoded bytes or an Amazon S3 object. If you use the AWS CLI\n   *          to call Amazon Textract operations, you can't pass image bytes. The document must be an image\n   *       in JPEG or PNG format.</p>\n   *          <p>If you're using an AWS SDK to call Amazon Textract, you might not need to base64-encode\n   *          image bytes that are passed using the <code>Bytes</code> field. </p>\n   */\n  Document: Document | undefined;\n}\n\nexport namespace DetectDocumentTextRequest {\n  export const filterSensitiveLog = (obj: DetectDocumentTextRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface DetectDocumentTextResponse {\n  /**\n   * <p>Metadata about the document. It contains the number of pages that are detected in the\n   *          document.</p>\n   */\n  DocumentMetadata?: DocumentMetadata;\n\n  /**\n   * <p>An array of <code>Block</code> objects that contain the text that's detected in the\n   *          document.</p>\n   */\n  Blocks?: Block[];\n\n  /**\n   * <p></p>\n   */\n  DetectDocumentTextModelVersion?: string;\n}\n\nexport namespace DetectDocumentTextResponse {\n  export const filterSensitiveLog = (obj: DetectDocumentTextResponse): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The Amazon S3 bucket that contains the document to be processed. It's used by asynchronous\n *          operations such as <a>StartDocumentTextDetection</a>.</p>\n *          <p>The input document can be an image file in JPEG or PNG format. It can also be a file in\n *          PDF format.</p>\n */\nexport interface DocumentLocation {\n  /**\n   * <p>The Amazon S3 bucket that contains the input document.</p>\n   */\n  S3Object?: S3Object;\n}\n\nexport namespace DocumentLocation {\n  export const filterSensitiveLog = (obj: DocumentLocation): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetDocumentAnalysisRequest {\n  /**\n   * <p>A unique identifier for the text-detection job. The <code>JobId</code> is returned from\n   *          <code>StartDocumentAnalysis</code>. A <code>JobId</code> value is only valid for 7 days.</p>\n   */\n  JobId: string | undefined;\n\n  /**\n   * <p>The maximum number of results to return per paginated call. The largest value that you\n   *          can specify is 1,000. If you specify a value greater than 1,000, a maximum of 1,000 results\n   *          is returned. The default value is 1,000.</p>\n   */\n  MaxResults?: number;\n\n  /**\n   * <p>If the previous response was incomplete (because there are more blocks to retrieve), Amazon Textract returns a pagination\n   *          token in the response. You can use this pagination token to retrieve the next set of blocks.</p>\n   */\n  NextToken?: string;\n}\n\nexport namespace GetDocumentAnalysisRequest {\n  export const filterSensitiveLog = (obj: GetDocumentAnalysisRequest): any => ({\n    ...obj,\n  });\n}\n\nexport enum JobStatus {\n  FAILED = \"FAILED\",\n  IN_PROGRESS = \"IN_PROGRESS\",\n  PARTIAL_SUCCESS = \"PARTIAL_SUCCESS\",\n  SUCCEEDED = \"SUCCEEDED\",\n}\n\n/**\n * <p>A warning about an issue that occurred during asynchronous text analysis (<a>StartDocumentAnalysis</a>) or asynchronous document text detection (<a>StartDocumentTextDetection</a>). </p>\n */\nexport interface Warning {\n  /**\n   * <p>The error code for the warning.</p>\n   */\n  ErrorCode?: string;\n\n  /**\n   * <p>A list of the pages that the warning applies to.</p>\n   */\n  Pages?: number[];\n}\n\nexport namespace Warning {\n  export const filterSensitiveLog = (obj: Warning): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetDocumentAnalysisResponse {\n  /**\n   * <p>Information about a document that Amazon Textract processed. <code>DocumentMetadata</code> is\n   *          returned in every page of paginated responses from an Amazon Textract video operation.</p>\n   */\n  DocumentMetadata?: DocumentMetadata;\n\n  /**\n   * <p>The current status of the text detection job.</p>\n   */\n  JobStatus?: JobStatus | string;\n\n  /**\n   * <p>If the response is truncated, Amazon Textract returns this token. You can use this token in\n   *          the subsequent request to retrieve the next set of text detection results.</p>\n   */\n  NextToken?: string;\n\n  /**\n   * <p>The results of the text-analysis operation.</p>\n   */\n  Blocks?: Block[];\n\n  /**\n   * <p>A list of warnings that occurred during the document-analysis operation.</p>\n   */\n  Warnings?: Warning[];\n\n  /**\n   * <p>Returns if the detection job could not be completed. Contains explanation for what error occured.</p>\n   */\n  StatusMessage?: string;\n\n  /**\n   * <p></p>\n   */\n  AnalyzeDocumentModelVersion?: string;\n}\n\nexport namespace GetDocumentAnalysisResponse {\n  export const filterSensitiveLog = (obj: GetDocumentAnalysisResponse): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>An invalid job identifier was passed to <a>GetDocumentAnalysis</a> or to\n *       <a>GetDocumentAnalysis</a>.</p>\n */\nexport interface InvalidJobIdException extends __SmithyException, $MetadataBearer {\n  name: \"InvalidJobIdException\";\n  $fault: \"client\";\n  Message?: string;\n  Code?: string;\n}\n\nexport namespace InvalidJobIdException {\n  export const filterSensitiveLog = (obj: InvalidJobIdException): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetDocumentTextDetectionRequest {\n  /**\n   * <p>A unique identifier for the text detection job. The <code>JobId</code> is returned from\n   *          <code>StartDocumentTextDetection</code>. A <code>JobId</code> value is only valid for 7 days.</p>\n   */\n  JobId: string | undefined;\n\n  /**\n   * <p>The maximum number of results to return per paginated call. The largest value you can\n   *          specify is 1,000. If you specify a value greater than 1,000, a maximum of 1,000 results is\n   *          returned. The default value is 1,000.</p>\n   */\n  MaxResults?: number;\n\n  /**\n   * <p>If the previous response was incomplete (because there are more blocks to retrieve), Amazon Textract returns a pagination\n   *          token in the response. You can use this pagination token to retrieve the next set of blocks.</p>\n   */\n  NextToken?: string;\n}\n\nexport namespace GetDocumentTextDetectionRequest {\n  export const filterSensitiveLog = (obj: GetDocumentTextDetectionRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetDocumentTextDetectionResponse {\n  /**\n   * <p>Information about a document that Amazon Textract processed. <code>DocumentMetadata</code> is\n   *          returned in every page of paginated responses from an Amazon Textract video operation.</p>\n   */\n  DocumentMetadata?: DocumentMetadata;\n\n  /**\n   * <p>The current status of the text detection job.</p>\n   */\n  JobStatus?: JobStatus | string;\n\n  /**\n   * <p>If the response is truncated, Amazon Textract returns this token. You can use this token in\n   *          the subsequent request to retrieve the next set of text-detection results.</p>\n   */\n  NextToken?: string;\n\n  /**\n   * <p>The results of the text-detection operation.</p>\n   */\n  Blocks?: Block[];\n\n  /**\n   * <p>A list of warnings that occurred during the text-detection operation for the\n   *          document.</p>\n   */\n  Warnings?: Warning[];\n\n  /**\n   * <p>Returns if the detection job could not be completed. Contains explanation for what error occured. </p>\n   */\n  StatusMessage?: string;\n\n  /**\n   * <p></p>\n   */\n  DetectDocumentTextModelVersion?: string;\n}\n\nexport namespace GetDocumentTextDetectionResponse {\n  export const filterSensitiveLog = (obj: GetDocumentTextDetectionResponse): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>A <code>ClientRequestToken</code> input parameter was reused with an operation, but at\n *          least one of the other input parameters is different from the previous call to the\n *          operation. </p>\n */\nexport interface IdempotentParameterMismatchException extends __SmithyException, $MetadataBearer {\n  name: \"IdempotentParameterMismatchException\";\n  $fault: \"client\";\n  Message?: string;\n  Code?: string;\n}\n\nexport namespace IdempotentParameterMismatchException {\n  export const filterSensitiveLog = (obj: IdempotentParameterMismatchException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p> Indicates you do not have decrypt permissions with the KMS key entered, or the KMS key\n *         was entered incorrectly. </p>\n */\nexport interface InvalidKMSKeyException extends __SmithyException, $MetadataBearer {\n  name: \"InvalidKMSKeyException\";\n  $fault: \"client\";\n  Message?: string;\n  Code?: string;\n}\n\nexport namespace InvalidKMSKeyException {\n  export const filterSensitiveLog = (obj: InvalidKMSKeyException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>An Amazon Textract service limit was exceeded. For example, if you start too many\n *          asynchronous jobs concurrently, calls to start operations\n *             (<code>StartDocumentTextDetection</code>, for example) raise a LimitExceededException\n *          exception (HTTP status code: 400) until the number of concurrently running jobs is below\n *          the Amazon Textract service limit. </p>\n */\nexport interface LimitExceededException extends __SmithyException, $MetadataBearer {\n  name: \"LimitExceededException\";\n  $fault: \"client\";\n  Message?: string;\n  Code?: string;\n}\n\nexport namespace LimitExceededException {\n  export const filterSensitiveLog = (obj: LimitExceededException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The Amazon Simple Notification Service (Amazon SNS) topic to which Amazon Textract publishes the completion status of\n *          an asynchronous document operation, such as <a>StartDocumentTextDetection</a>. </p>\n */\nexport interface NotificationChannel {\n  /**\n   * <p>The Amazon SNS topic that Amazon Textract posts the completion status to.</p>\n   */\n  SNSTopicArn: string | undefined;\n\n  /**\n   * <p>The Amazon Resource Name (ARN) of an IAM role that gives Amazon Textract publishing permissions to the Amazon SNS topic. </p>\n   */\n  RoleArn: string | undefined;\n}\n\nexport namespace NotificationChannel {\n  export const filterSensitiveLog = (obj: NotificationChannel): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Sets whether or not your output will go to a user created bucket.\n *          Used to set the name of the bucket, and the prefix on the output\n *          file.</p>\n */\nexport interface OutputConfig {\n  /**\n   * <p>The name of the bucket your output will go to.</p>\n   */\n  S3Bucket: string | undefined;\n\n  /**\n   * <p>The prefix of the object key that the output will be saved to. When\n   *          not enabled, the prefix will be “textract_output\".</p>\n   */\n  S3Prefix?: string;\n}\n\nexport namespace OutputConfig {\n  export const filterSensitiveLog = (obj: OutputConfig): any => ({\n    ...obj,\n  });\n}\n\nexport interface StartDocumentAnalysisRequest {\n  /**\n   * <p>The location of the document to be processed.</p>\n   */\n  DocumentLocation: DocumentLocation | undefined;\n\n  /**\n   * <p>A list of the types of analysis to perform. Add TABLES to the list to return information\n   *          about the tables that are detected in the input document. Add FORMS to return detected\n   *          form data. To perform both types of analysis, add TABLES\n   *          and FORMS to <code>FeatureTypes</code>. All lines and words detected in the document are\n   *          included in the response (including text that isn't related to the value of\n   *             <code>FeatureTypes</code>). </p>\n   */\n  FeatureTypes: (FeatureType | string)[] | undefined;\n\n  /**\n   * <p>The idempotent token that you use to identify the start request. If you use the same\n   *          token with multiple <code>StartDocumentAnalysis</code> requests, the same\n   *             <code>JobId</code> is returned. Use <code>ClientRequestToken</code> to prevent the same\n   *          job from being accidentally started more than once. For more information, see\n   *          <a href=\"https://docs.aws.amazon.com/textract/latest/dg/api-async.html\">Calling Amazon Textract Asynchronous Operations</a>.</p>\n   */\n  ClientRequestToken?: string;\n\n  /**\n   * <p>An identifier that you specify that's included in the completion notification published\n   *          to the Amazon SNS topic. For example, you can use <code>JobTag</code> to identify the type of\n   *          document that the completion notification corresponds to (such as a tax form or a\n   *          receipt).</p>\n   */\n  JobTag?: string;\n\n  /**\n   * <p>The Amazon SNS topic ARN that you want Amazon Textract to publish the completion status of the\n   *          operation to. </p>\n   */\n  NotificationChannel?: NotificationChannel;\n\n  /**\n   * <p>Sets if the output will go to a customer defined bucket. By default, Amazon Textract will save\n   *          the results internally to be accessed by the GetDocumentAnalysis operation.</p>\n   */\n  OutputConfig?: OutputConfig;\n\n  /**\n   * <p>The KMS key used to encrypt the inference results. This can be\n   *          in either Key ID or Key Alias format. When a KMS key is provided, the\n   *          KMS key will be used for server-side encryption of the objects in the\n   *          customer bucket. When this parameter is not enabled, the result will\n   *          be encrypted server side,using SSE-S3.</p>\n   */\n  KMSKeyId?: string;\n}\n\nexport namespace StartDocumentAnalysisRequest {\n  export const filterSensitiveLog = (obj: StartDocumentAnalysisRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface StartDocumentAnalysisResponse {\n  /**\n   * <p>The identifier for the document text detection job. Use <code>JobId</code> to identify\n   *          the job in a subsequent call to <code>GetDocumentAnalysis</code>. A <code>JobId</code> value\n   *          is only valid for 7 days.</p>\n   */\n  JobId?: string;\n}\n\nexport namespace StartDocumentAnalysisResponse {\n  export const filterSensitiveLog = (obj: StartDocumentAnalysisResponse): any => ({\n    ...obj,\n  });\n}\n\nexport interface StartDocumentTextDetectionRequest {\n  /**\n   * <p>The location of the document to be processed.</p>\n   */\n  DocumentLocation: DocumentLocation | undefined;\n\n  /**\n   * <p>The idempotent token that's used to identify the start request. If you use the same\n   *          token with multiple <code>StartDocumentTextDetection</code> requests, the same\n   *             <code>JobId</code> is returned. Use <code>ClientRequestToken</code> to prevent the same\n   *          job from being accidentally started more than once. For more information, see\n   *          <a href=\"https://docs.aws.amazon.com/textract/latest/dg/api-async.html\">Calling Amazon Textract Asynchronous Operations</a>.</p>\n   */\n  ClientRequestToken?: string;\n\n  /**\n   * <p>An identifier that you specify that's included in the completion notification published\n   *          to the Amazon SNS topic. For example, you can use <code>JobTag</code> to identify the type of\n   *          document that the completion notification corresponds to (such as a tax form or a\n   *          receipt).</p>\n   */\n  JobTag?: string;\n\n  /**\n   * <p>The Amazon SNS topic ARN that you want Amazon Textract to publish the completion status of the\n   *          operation to. </p>\n   */\n  NotificationChannel?: NotificationChannel;\n\n  /**\n   * <p>Sets if the output will go to a customer defined bucket. By default Amazon Textract will\n   *          save the results internally to be accessed with the GetDocumentTextDetection operation.</p>\n   */\n  OutputConfig?: OutputConfig;\n\n  /**\n   * <p>The KMS key used to encrypt the inference results. This can be\n   *          in either Key ID or Key Alias format. When a KMS key is provided, the\n   *          KMS key will be used for server-side encryption of the objects in the\n   *          customer bucket. When this parameter is not enabled, the result will\n   *          be encrypted server side,using SSE-S3.</p>\n   */\n  KMSKeyId?: string;\n}\n\nexport namespace StartDocumentTextDetectionRequest {\n  export const filterSensitiveLog = (obj: StartDocumentTextDetectionRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface StartDocumentTextDetectionResponse {\n  /**\n   * <p>The identifier of the text detection job for the document. Use <code>JobId</code> to\n   *          identify the job in a subsequent call to <code>GetDocumentTextDetection</code>.\n   *          A <code>JobId</code> value is only valid for 7 days.</p>\n   */\n  JobId?: string;\n}\n\nexport namespace StartDocumentTextDetectionResponse {\n  export const filterSensitiveLog = (obj: StartDocumentTextDetectionResponse): any => ({\n    ...obj,\n  });\n}\n"],"mappings":";AAcA,OAAM,IAAWA,qBAAqB;AAAtC,WAAiBA,qBAAqB;EACvBA,qBAAA,CAAAC,kBAAkB,GAAG,UAACC,GAA0B;IAAU,OAAAC,QAAA,KAClED,GAAG;EAD+D,CAErE;AACJ,CAAC,EAJgBF,qBAAqB,KAArBA,qBAAqB;AAkCtC,OAAM,IAAWI,QAAQ;AAAzB,WAAiBA,QAAQ;EACVA,QAAA,CAAAH,kBAAkB,GAAG,UAACC,GAAa;IAAU,OAAAC,QAAA,KACrDD,GAAG;EADkD,CAExD;AACJ,CAAC,EAJgBE,QAAQ,KAARA,QAAQ;AAyCzB,OAAM,IAAWC,QAAQ;AAAzB,WAAiBA,QAAQ;EACVA,QAAA,CAAAJ,kBAAkB,GAAG,UAACC,GAAa;IAAU,OAAAC,QAAA,KACrDD,GAAG;EADkD,CAExD;AACJ,CAAC,EAJgBG,QAAQ,KAARA,QAAQ;AAMzB,WAAYC,WAGX;AAHD,WAAYA,WAAW;EACrBA,WAAA,mBAAe;EACfA,WAAA,qBAAiB;AACnB,CAAC,EAHWA,WAAW,KAAXA,WAAW;AAKvB,WAAYC,iBAGX;AAHD,WAAYA,iBAAiB;EAC3BA,iBAAA,gDAA4C;EAC5CA,iBAAA,2FAAuF;AACzF,CAAC,EAHWA,iBAAiB,KAAjBA,iBAAiB;AAgB7B,OAAM,IAAWC,uBAAuB;AAAxC,WAAiBA,uBAAuB;EACzBA,uBAAA,CAAAP,kBAAkB,GAAG,UAACC,GAA4B;IAAU,OAAAC,QAAA,KACpED,GAAG;EADiE,CAEvE;AACJ,CAAC,EAJgBM,uBAAuB,KAAvBA,uBAAuB;AA2BxC,OAAM,IAAWC,eAAe;AAAhC,WAAiBA,eAAe;EACjBA,eAAA,CAAAR,kBAAkB,GAAG,UAACC,GAAoB;IAAU,OAAAC,QAAA,KAC5DD,GAAG;EADyD,CAE/D;AACJ,CAAC,EAJgBO,eAAe,KAAfA,eAAe;AA+BhC,OAAM,IAAWC,sBAAsB;AAAvC,WAAiBA,sBAAsB;EACxBA,sBAAA,CAAAT,kBAAkB,GAAG,UAACC,GAA2B;IAAU,OAAAC,QAAA,KACnED,GAAG;EADgE,CAEtE;AACJ,CAAC,EAJgBQ,sBAAsB,KAAtBA,sBAAsB;AAMvC,WAAYC,SAQX;AARD,WAAYA,SAAS;EACnBA,SAAA,iBAAa;EACbA,SAAA,mCAA+B;EAC/BA,SAAA,iBAAa;EACbA,SAAA,iBAAa;EACbA,SAAA,2CAAuC;EACvCA,SAAA,mBAAe;EACfA,SAAA,iBAAa;AACf,CAAC,EARWA,SAAS,KAATA,SAAS;AAUrB,WAAYC,UAGX;AAHD,WAAYA,UAAU;EACpBA,UAAA,eAAW;EACXA,UAAA,mBAAe;AACjB,CAAC,EAHWA,UAAU,KAAVA,UAAU;AA6CtB,OAAM,IAAWC,WAAW;AAA5B,WAAiBA,WAAW;EACbA,WAAA,CAAAZ,kBAAkB,GAAG,UAACC,GAAgB;IAAU,OAAAC,QAAA,KACxDD,GAAG;EADqD,CAE3D;AACJ,CAAC,EAJgBW,WAAW,KAAXA,WAAW;AA6B5B,OAAM,IAAWC,KAAK;AAAtB,WAAiBA,KAAK;EACPA,KAAA,CAAAb,kBAAkB,GAAG,UAACC,GAAU;IAAU,OAAAC,QAAA,KAClDD,GAAG;EAD+C,CAErD;AACJ,CAAC,EAJgBY,KAAK,KAALA,KAAK;AAuBtB,OAAM,IAAWC,QAAQ;AAAzB,WAAiBA,QAAQ;EACVA,QAAA,CAAAd,kBAAkB,GAAG,UAACC,GAAa;IAAU,OAAAC,QAAA,KACrDD,GAAG;EADkD,CAExD;AACJ,CAAC,EAJgBa,QAAQ,KAARA,QAAQ;AAMzB,WAAYC,gBAIX;AAJD,WAAYA,gBAAgB;EAC1BA,gBAAA,mBAAe;EACfA,gBAAA,yCAAqC;EACrCA,gBAAA,mBAAe;AACjB,CAAC,EAJWA,gBAAgB,KAAhBA,gBAAgB;AA+B5B,OAAM,IAAWC,YAAY;AAA7B,WAAiBA,YAAY;EACdA,YAAA,CAAAhB,kBAAkB,GAAG,UAACC,GAAiB;IAAU,OAAAC,QAAA,KACzDD,GAAG;EADsD,CAE5D;AACJ,CAAC,EAJgBe,YAAY,KAAZA,YAAY;AAM7B,WAAYC,eAGX;AAHD,WAAYA,eAAe;EACzBA,eAAA,iCAA6B;EAC7BA,eAAA,yBAAqB;AACvB,CAAC,EAHWA,eAAe,KAAfA,eAAe;AAK3B,WAAYC,QAGX;AAHD,WAAYA,QAAQ;EAClBA,QAAA,+BAA2B;EAC3BA,QAAA,uBAAmB;AACrB,CAAC,EAHWA,QAAQ,KAARA,QAAQ;AAiMpB,OAAM,IAAWC,KAAK;AAAtB,WAAiBA,KAAK;EACPA,KAAA,CAAAnB,kBAAkB,GAAG,UAACC,GAAU;IAAU,OAAAC,QAAA,KAClDD,GAAG;EAD+C,CAErD;AACJ,CAAC,EAJgBkB,KAAK,KAALA,KAAK;AAgBtB,OAAM,IAAWC,gBAAgB;AAAjC,WAAiBA,gBAAgB;EAClBA,gBAAA,CAAApB,kBAAkB,GAAG,UAACC,GAAqB;IAAU,OAAAC,QAAA,KAC7DD,GAAG;EAD0D,CAEhE;AACJ,CAAC,EAJgBmB,gBAAgB,KAAhBA,gBAAgB;AA2BjC,OAAM,IAAWC,yBAAyB;AAA1C,WAAiBA,yBAAyB;EAC3BA,yBAAA,CAAArB,kBAAkB,GAAG,UAACC,GAA8B;IAAU,OAAAC,QAAA,KACtED,GAAG;EADmE,CAEzE;AACJ,CAAC,EAJgBoB,yBAAyB,KAAzBA,yBAAyB;AA4B1C,OAAM,IAAWC,uBAAuB;AAAxC,WAAiBA,uBAAuB;EACzBA,uBAAA,CAAAtB,kBAAkB,GAAG,UAACC,GAA4B;IAAU,OAAAC,QAAA,KACpED,GAAG;EADiE,CAEvE;AACJ,CAAC,EAJgBqB,uBAAuB,KAAvBA,uBAAuB;AAiBxC,OAAM,IAAWC,oBAAoB;AAArC,WAAiBA,oBAAoB;EACtBA,oBAAA,CAAAvB,kBAAkB,GAAG,UAACC,GAAyB;IAAU,OAAAC,QAAA,KACjED,GAAG;EAD8D,CAEpE;AACJ,CAAC,EAJgBsB,oBAAoB,KAApBA,oBAAoB;AAkBrC,OAAM,IAAWC,yBAAyB;AAA1C,WAAiBA,yBAAyB;EAC3BA,yBAAA,CAAAxB,kBAAkB,GAAG,UAACC,GAA8B;IAAU,OAAAC,QAAA,KACtED,GAAG;EADmE,CAEzE;AACJ,CAAC,EAJgBuB,yBAAyB,KAAzBA,yBAAyB;AA+B1C,OAAM,IAAWC,+BAA+B;AAAhD,WAAiBA,+BAA+B;EACjCA,+BAAA,CAAAzB,kBAAkB,GAAG,UAACC,GAAoC;IAAU,OAAAC,QAAA,KAC5ED,GAAG;EADyE,CAE/E;AACJ,CAAC,EAJgBwB,+BAA+B,KAA/BA,+BAA+B;AAgBhD,OAAM,IAAWC,mBAAmB;AAApC,WAAiBA,mBAAmB;EACrBA,mBAAA,CAAA1B,kBAAkB,GAAG,UAACC,GAAwB;IAAU,OAAAC,QAAA,KAChED,GAAG;EAD6D,CAEnE;AACJ,CAAC,EAJgByB,mBAAmB,KAAnBA,mBAAmB;AAoBpC,OAAM,IAAWC,yBAAyB;AAA1C,WAAiBA,yBAAyB;EAC3BA,yBAAA,CAAA3B,kBAAkB,GAAG,UAACC,GAA8B;IAAU,OAAAC,QAAA,KACtED,GAAG;EADmE,CAEzE;AACJ,CAAC,EAJgB0B,yBAAyB,KAAzBA,yBAAyB;AAmB1C,OAAM,IAAWC,wBAAwB;AAAzC,WAAiBA,wBAAwB;EAC1BA,wBAAA,CAAA5B,kBAAkB,GAAG,UAACC,GAA6B;IAAU,OAAAC,QAAA,KACrED,GAAG;EADkE,CAExE;AACJ,CAAC,EAJgB2B,wBAAwB,KAAxBA,wBAAwB;AAiBzC,OAAM,IAAWC,sCAAsC;AAAvD,WAAiBA,sCAAsC;EACxCA,sCAAA,CAAA7B,kBAAkB,GAAG,UAACC,GAA2C;IAAU,OAAAC,QAAA,KACnFD,GAAG;EADgF,CAEtF;AACJ,CAAC,EAJgB4B,sCAAsC,KAAtCA,sCAAsC;AAgBvD,OAAM,IAAWC,mBAAmB;AAApC,WAAiBA,mBAAmB;EACrBA,mBAAA,CAAA9B,kBAAkB,GAAG,UAACC,GAAwB;IAAU,OAAAC,QAAA,KAChED,GAAG;EAD6D,CAEnE;AACJ,CAAC,EAJgB6B,mBAAmB,KAAnBA,mBAAmB;AAiBpC,OAAM,IAAWC,4BAA4B;AAA7C,WAAiBA,4BAA4B;EAC9BA,4BAAA,CAAA/B,kBAAkB,GAAG,UAACC,GAAiC;IAAU,OAAAC,QAAA,KACzED,GAAG;EADsE,CAE5E;AACJ,CAAC,EAJgB8B,4BAA4B,KAA5BA,4BAA4B;AAiB7C,OAAM,IAAWC,yBAAyB;AAA1C,WAAiBA,yBAAyB;EAC3BA,yBAAA,CAAAhC,kBAAkB,GAAG,UAACC,GAA8B;IAAU,OAAAC,QAAA,KACtED,GAAG;EADmE,CAEzE;AACJ,CAAC,EAJgB+B,yBAAyB,KAAzBA,yBAAyB;AAyB1C,OAAM,IAAWC,0BAA0B;AAA3C,WAAiBA,0BAA0B;EAC5BA,0BAAA,CAAAjC,kBAAkB,GAAG,UAACC,GAA+B;IAAU,OAAAC,QAAA,KACvED,GAAG;EADoE,CAE1E;AACJ,CAAC,EAJgBgC,0BAA0B,KAA1BA,0BAA0B;AAmB3C,OAAM,IAAWC,gBAAgB;AAAjC,WAAiBA,gBAAgB;EAClBA,gBAAA,CAAAlC,kBAAkB,GAAG,UAACC,GAAqB;IAAU,OAAAC,QAAA,KAC7DD,GAAG;EAD0D,CAEhE;AACJ,CAAC,EAJgBiC,gBAAgB,KAAhBA,gBAAgB;AA2BjC,OAAM,IAAWC,0BAA0B;AAA3C,WAAiBA,0BAA0B;EAC5BA,0BAAA,CAAAnC,kBAAkB,GAAG,UAACC,GAA+B;IAAU,OAAAC,QAAA,KACvED,GAAG;EADoE,CAE1E;AACJ,CAAC,EAJgBkC,0BAA0B,KAA1BA,0BAA0B;AAM3C,WAAYC,SAKX;AALD,WAAYA,SAAS;EACnBA,SAAA,qBAAiB;EACjBA,SAAA,+BAA2B;EAC3BA,SAAA,uCAAmC;EACnCA,SAAA,2BAAuB;AACzB,CAAC,EALWA,SAAS,KAATA,SAAS;AAsBrB,OAAM,IAAWC,OAAO;AAAxB,WAAiBA,OAAO;EACTA,OAAA,CAAArC,kBAAkB,GAAG,UAACC,GAAY;IAAU,OAAAC,QAAA,KACpDD,GAAG;EADiD,CAEvD;AACJ,CAAC,EAJgBoC,OAAO,KAAPA,OAAO;AA6CxB,OAAM,IAAWC,2BAA2B;AAA5C,WAAiBA,2BAA2B;EAC7BA,2BAAA,CAAAtC,kBAAkB,GAAG,UAACC,GAAgC;IAAU,OAAAC,QAAA,KACxED,GAAG;EADqE,CAE3E;AACJ,CAAC,EAJgBqC,2BAA2B,KAA3BA,2BAA2B;AAiB5C,OAAM,IAAWC,qBAAqB;AAAtC,WAAiBA,qBAAqB;EACvBA,qBAAA,CAAAvC,kBAAkB,GAAG,UAACC,GAA0B;IAAU,OAAAC,QAAA,KAClED,GAAG;EAD+D,CAErE;AACJ,CAAC,EAJgBsC,qBAAqB,KAArBA,qBAAqB;AA2BtC,OAAM,IAAWC,+BAA+B;AAAhD,WAAiBA,+BAA+B;EACjCA,+BAAA,CAAAxC,kBAAkB,GAAG,UAACC,GAAoC;IAAU,OAAAC,QAAA,KAC5ED,GAAG;EADyE,CAE/E;AACJ,CAAC,EAJgBuC,+BAA+B,KAA/BA,+BAA+B;AA8ChD,OAAM,IAAWC,gCAAgC;AAAjD,WAAiBA,gCAAgC;EAClCA,gCAAA,CAAAzC,kBAAkB,GAAG,UAACC,GAAqC;IAAU,OAAAC,QAAA,KAC7ED,GAAG;EAD0E,CAEhF;AACJ,CAAC,EAJgBwC,gCAAgC,KAAhCA,gCAAgC;AAkBjD,OAAM,IAAWC,oCAAoC;AAArD,WAAiBA,oCAAoC;EACtCA,oCAAA,CAAA1C,kBAAkB,GAAG,UAACC,GAAyC;IAAU,OAAAC,QAAA,KACjFD,GAAG;EAD8E,CAEpF;AACJ,CAAC,EAJgByC,oCAAoC,KAApCA,oCAAoC;AAiBrD,OAAM,IAAWC,sBAAsB;AAAvC,WAAiBA,sBAAsB;EACxBA,sBAAA,CAAA3C,kBAAkB,GAAG,UAACC,GAA2B;IAAU,OAAAC,QAAA,KACnED,GAAG;EADgE,CAEtE;AACJ,CAAC,EAJgB0C,sBAAsB,KAAtBA,sBAAsB;AAoBvC,OAAM,IAAWC,sBAAsB;AAAvC,WAAiBA,sBAAsB;EACxBA,sBAAA,CAAA5C,kBAAkB,GAAG,UAACC,GAA2B;IAAU,OAAAC,QAAA,KACnED,GAAG;EADgE,CAEtE;AACJ,CAAC,EAJgB2C,sBAAsB,KAAtBA,sBAAsB;AAsBvC,OAAM,IAAWC,mBAAmB;AAApC,WAAiBA,mBAAmB;EACrBA,mBAAA,CAAA7C,kBAAkB,GAAG,UAACC,GAAwB;IAAU,OAAAC,QAAA,KAChED,GAAG;EAD6D,CAEnE;AACJ,CAAC,EAJgB4C,mBAAmB,KAAnBA,mBAAmB;AAwBpC,OAAM,IAAWC,YAAY;AAA7B,WAAiBA,YAAY;EACdA,YAAA,CAAA9C,kBAAkB,GAAG,UAACC,GAAiB;IAAU,OAAAC,QAAA,KACzDD,GAAG;EADsD,CAE5D;AACJ,CAAC,EAJgB6C,YAAY,KAAZA,YAAY;AA6D7B,OAAM,IAAWC,4BAA4B;AAA7C,WAAiBA,4BAA4B;EAC9BA,4BAAA,CAAA/C,kBAAkB,GAAG,UAACC,GAAiC;IAAU,OAAAC,QAAA,KACzED,GAAG;EADsE,CAE5E;AACJ,CAAC,EAJgB8C,4BAA4B,KAA5BA,4BAA4B;AAe7C,OAAM,IAAWC,6BAA6B;AAA9C,WAAiBA,6BAA6B;EAC/BA,6BAAA,CAAAhD,kBAAkB,GAAG,UAACC,GAAkC;IAAU,OAAAC,QAAA,KAC1ED,GAAG;EADuE,CAE7E;AACJ,CAAC,EAJgB+C,6BAA6B,KAA7BA,6BAA6B;AAmD9C,OAAM,IAAWC,iCAAiC;AAAlD,WAAiBA,iCAAiC;EACnCA,iCAAA,CAAAjD,kBAAkB,GAAG,UAACC,GAAsC;IAAU,OAAAC,QAAA,KAC9ED,GAAG;EAD2E,CAEjF;AACJ,CAAC,EAJgBgD,iCAAiC,KAAjCA,iCAAiC;AAelD,OAAM,IAAWC,kCAAkC;AAAnD,WAAiBA,kCAAkC;EACpCA,kCAAA,CAAAlD,kBAAkB,GAAG,UAACC,GAAuC;IAAU,OAAAC,QAAA,KAC/ED,GAAG;EAD4E,CAElF;AACJ,CAAC,EAJgBiD,kCAAkC,KAAlCA,kCAAkC"},"metadata":{},"sourceType":"module","externalDependencies":[]}