{"ast":null,"code":"import { __extends } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { InternalGraphQLAPIClass } from './internals';\nexport var graphqlOperation = function (query, variables, authToken) {\n  if (variables === void 0) {\n    variables = {};\n  }\n  return {\n    query: query,\n    variables: variables,\n    authToken: authToken\n  };\n};\n/**\n * Export Cloud Logic APIs\n */\nvar GraphQLAPIClass = /** @class */function (_super) {\n  __extends(GraphQLAPIClass, _super);\n  function GraphQLAPIClass() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  GraphQLAPIClass.prototype.getModuleName = function () {\n    return 'GraphQLAPI';\n  };\n  /**\n   * Executes a GraphQL operation\n   *\n   * @param options - GraphQL Options\n   * @param [additionalHeaders] - headers to merge in after any `graphql_headers` set in the config\n   * @returns An Observable if the query is a subscription query, else a promise of the graphql result.\n   */\n  GraphQLAPIClass.prototype.graphql = function (options, additionalHeaders) {\n    return _super.prototype.graphql.call(this, options, additionalHeaders);\n  };\n  return GraphQLAPIClass;\n}(InternalGraphQLAPIClass);\nexport { GraphQLAPIClass };\nexport var GraphQLAPI = new GraphQLAPIClass(null);\nAmplify.register(GraphQLAPI);","map":{"version":3,"names":["Amplify","InternalGraphQLAPIClass","graphqlOperation","query","variables","authToken","GraphQLAPIClass","_super","__extends","prototype","getModuleName","graphql","options","additionalHeaders","call","GraphQLAPI","register"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-amplify/api-graphql/src/GraphQLAPI.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { GraphQLOptions, GraphQLResult } from './types';\nimport { InternalGraphQLAPIClass } from './internals';\nimport Observable from 'zen-observable-ts';\n\nexport const graphqlOperation = (\n\tquery,\n\tvariables = {},\n\tauthToken?: string\n) => ({\n\tquery,\n\tvariables,\n\tauthToken,\n});\n\n/**\n * Export Cloud Logic APIs\n */\nexport class GraphQLAPIClass extends InternalGraphQLAPIClass {\n\tpublic getModuleName() {\n\t\treturn 'GraphQLAPI';\n\t}\n\n\t/**\n\t * Executes a GraphQL operation\n\t *\n\t * @param options - GraphQL Options\n\t * @param [additionalHeaders] - headers to merge in after any `graphql_headers` set in the config\n\t * @returns An Observable if the query is a subscription query, else a promise of the graphql result.\n\t */\n\tgraphql<T = any>(\n\t\toptions: GraphQLOptions,\n\t\tadditionalHeaders?: { [key: string]: string }\n\t): Observable<GraphQLResult<T>> | Promise<GraphQLResult<T>> {\n\t\treturn super.graphql(options, additionalHeaders);\n\t}\n}\n\nexport const GraphQLAPI = new GraphQLAPIClass(null);\nAmplify.register(GraphQLAPI);\n"],"mappings":";AAAA;AACA;AACA,SAASA,OAAO,QAAQ,mBAAmB;AAE3C,SAASC,uBAAuB,QAAQ,aAAa;AAGrD,OAAO,IAAMC,gBAAgB,GAAG,SAAAA,CAC/BC,KAAK,EACLC,SAAc,EACdC,SAAkB;EADlB,IAAAD,SAAA;IAAAA,SAAA,KAAc;EAAA;EAEV,OAAC;IACLD,KAAK,EAAAA,KAAA;IACLC,SAAS,EAAAA,SAAA;IACTC,SAAS,EAAAA;GACT;AAJI,CAIH;AAEF;;;AAGA,IAAAC,eAAA,0BAAAC,MAAA;EAAqCC,SAAA,CAAAF,eAAA,EAAAC,MAAA;EAArC,SAAAD,gBAAA;;EAkBA;EAjBQA,eAAA,CAAAG,SAAA,CAAAC,aAAa,GAApB;IACC,OAAO,YAAY;EACpB,CAAC;EAED;;;;;;;EAOAJ,eAAA,CAAAG,SAAA,CAAAE,OAAO,GAAP,UACCC,OAAuB,EACvBC,iBAA6C;IAE7C,OAAON,MAAA,CAAAE,SAAA,CAAME,OAAO,CAAAG,IAAA,OAACF,OAAO,EAAEC,iBAAiB,CAAC;EACjD,CAAC;EACF,OAAAP,eAAC;AAAD,CAAC,CAlBoCL,uBAAuB;;AAoB5D,OAAO,IAAMc,UAAU,GAAG,IAAIT,eAAe,CAAC,IAAI,CAAC;AACnDN,OAAO,CAACgB,QAAQ,CAACD,UAAU,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}