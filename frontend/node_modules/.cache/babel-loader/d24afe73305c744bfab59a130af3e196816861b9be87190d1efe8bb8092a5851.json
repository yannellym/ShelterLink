{"ast":null,"code":"var _jsxFileName = \"/Users/yannellym/Desktop/iwantapet/frontend/src/components/AllPetsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport '../styles/AllPetsPage.css';\nimport PetCard from './PetCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction AllPetsPage() {\n  _s();\n  const {\n    category\n  } = useParams();\n  const [loading, setLoading] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n  const petsPerPage = 20;\n  const cache = new Array(petsPerPage * 2); // Double the cache size for better coverage\n\n  const fetchAnimalsByType = async (type, page) => {\n    const offset = (page - 1) * petsPerPage;\n\n    // Check if the data for this page already exists in the cache\n    if (cache.length > offset) {\n      const displayedPets = cache.slice(offset, offset + petsPerPage);\n      setLoading(false);\n      return displayedPets;\n    } else {\n      try {\n        const response = await fetch(`http://localhost:3002/api/petfinder?type=${type}&offset=${offset}&limit=${petsPerPage}`);\n        const data = await response.json();\n        console.log('API Response:', data);\n        if (data && data.animals) {\n          const pets = data.animals;\n\n          // Update the cache with the fetched data\n          const uniquePets = pets.filter(newPet => {\n            // Check if the pet's ID already exists in the cache\n            return !cache.some(cachedPet => cachedPet.id === newPet.id);\n          });\n          cache.splice(offset, petsPerPage, ...uniquePets);\n          setLoading(false);\n          return uniquePets;\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error.message);\n        setLoading(false);\n      }\n    }\n  };\n  useEffect(() => {\n    fetchAnimalsByType(category, currentPage);\n  }, [category, currentPage]);\n  const totalPets = cache.length; // Total pets in cache\n\n  const totalPages = Math.ceil(totalPets / petsPerPage);\n  const paginationNumbers = Array.from({\n    length: Math.max(9, totalPages)\n  }, (_, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: () => setCurrentPage(index + 1),\n    children: index + 1\n  }, index + 1, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this));\n  const offset = (currentPage - 1) * petsPerPage;\n  const displayedPets = cache.slice(offset, offset + petsPerPage);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"all-pets-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: `All ${category.charAt(0).toUpperCase() + category.slice(1)}s`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pet-list\",\n        children: displayedPets.map((pet, index) => /*#__PURE__*/_jsxDEV(PetCard, {\n          pet: pet\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pagination\",\n        children: paginationNumbers\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n_s(AllPetsPage, \"PQ7R8gAeaGh5X8pNyuJ0JzeeG2c=\", false, function () {\n  return [useParams];\n});\n_c = AllPetsPage;\nexport default AllPetsPage;\nvar _c;\n$RefreshReg$(_c, \"AllPetsPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","PetCard","jsxDEV","_jsxDEV","Fragment","_Fragment","AllPetsPage","_s","category","loading","setLoading","currentPage","setCurrentPage","petsPerPage","cache","Array","fetchAnimalsByType","type","page","offset","length","displayedPets","slice","response","fetch","data","json","console","log","animals","pets","uniquePets","filter","newPet","some","cachedPet","id","splice","error","message","totalPets","totalPages","Math","ceil","paginationNumbers","from","max","_","index","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","className","charAt","toUpperCase","map","pet","_c","$RefreshReg$"],"sources":["/Users/yannellym/Desktop/iwantapet/frontend/src/components/AllPetsPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport '../styles/AllPetsPage.css';\nimport PetCard from './PetCard';\n\nfunction AllPetsPage() {\n  const { category } = useParams();\n  const [loading, setLoading] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n  const petsPerPage = 20;\n  const cache = new Array(petsPerPage * 2); // Double the cache size for better coverage\n\n  const fetchAnimalsByType = async (type, page) => {\n    const offset = (page - 1) * petsPerPage;\n    \n    // Check if the data for this page already exists in the cache\n    if (cache.length > offset) {\n      const displayedPets = cache.slice(offset, offset + petsPerPage);\n      setLoading(false);\n      return displayedPets;\n    } else {\n      try {\n        const response = await fetch(\n          `http://localhost:3002/api/petfinder?type=${type}&offset=${offset}&limit=${petsPerPage}`\n        );\n        const data = await response.json();\n  \n        console.log('API Response:', data);\n  \n        if (data && data.animals) {\n          const pets = data.animals;\n  \n          // Update the cache with the fetched data\n          const uniquePets = pets.filter((newPet) => {\n            // Check if the pet's ID already exists in the cache\n            return !cache.some((cachedPet) => cachedPet.id === newPet.id);\n          });\n  \n          cache.splice(offset, petsPerPage, ...uniquePets);\n  \n          setLoading(false);\n          return uniquePets;\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error.message);\n        setLoading(false);\n      }\n    }\n  };\n  \n  useEffect(() => {\n    fetchAnimalsByType(category, currentPage);\n  }, [category, currentPage]);\n\n  const totalPets = cache.length; // Total pets in cache\n\n  const totalPages = Math.ceil(totalPets / petsPerPage);\n\n  const paginationNumbers = Array.from({ length: Math.max(9, totalPages) }, (_, index) => (\n    <button key={index + 1} onClick={() => setCurrentPage(index + 1)}>\n      {index + 1}\n    </button>\n  ));\n\n  const offset = (currentPage - 1) * petsPerPage;\n  const displayedPets = cache.slice(offset, offset + petsPerPage);\n\n  return (\n    <div className=\"all-pets-page\">\n      <h2>{`All ${category.charAt(0).toUpperCase() + category.slice(1)}s`}</h2>\n      {loading ? (\n        <p>Loading...</p>\n      ) : (\n        <>\n          <div className=\"pet-list\">\n            {displayedPets.map((pet, index) => (\n              <PetCard key={index} pet={pet} />\n            ))}\n          </div>\n          <div className=\"pagination\">{paginationNumbers}</div>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default AllPetsPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}