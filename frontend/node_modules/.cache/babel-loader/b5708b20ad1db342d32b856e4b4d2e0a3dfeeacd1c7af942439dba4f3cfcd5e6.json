{"ast":null,"code":"import { __read, __values } from \"tslib\";\nexport function parseQueryString(querystring) {\n  var e_1, _a;\n  var query = {};\n  querystring = querystring.replace(/^\\?/, \"\");\n  if (querystring) {\n    try {\n      for (var _b = __values(querystring.split(\"&\")), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var pair = _c.value;\n        var _d = __read(pair.split(\"=\"), 2),\n          key = _d[0],\n          _e = _d[1],\n          value = _e === void 0 ? null : _e;\n        key = decodeURIComponent(key);\n        if (value) {\n          value = decodeURIComponent(value);\n        }\n        if (!(key in query)) {\n          query[key] = value;\n        } else if (Array.isArray(query[key])) {\n          query[key].push(value);\n        } else {\n          query[key] = [query[key], value];\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  }\n  return query;\n}","map":{"version":3,"names":["parseQueryString","querystring","query","replace","_b","__values","split","_c","next","done","pair","value","_d","__read","key","_e","decodeURIComponent","Array","isArray","push"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-sdk/querystring-parser/src/index.ts"],"sourcesContent":["import { QueryParameterBag } from \"@aws-sdk/types\";\n\nexport function parseQueryString(querystring: string): QueryParameterBag {\n  const query: QueryParameterBag = {};\n  querystring = querystring.replace(/^\\?/, \"\");\n\n  if (querystring) {\n    for (const pair of querystring.split(\"&\")) {\n      let [key, value = null] = pair.split(\"=\");\n      key = decodeURIComponent(key);\n      if (value) {\n        value = decodeURIComponent(value);\n      }\n      if (!(key in query)) {\n        query[key] = value;\n      } else if (Array.isArray(query[key])) {\n        (query[key] as Array<string>).push(value as string);\n      } else {\n        query[key] = [query[key] as string, value as string];\n      }\n    }\n  }\n\n  return query;\n}\n"],"mappings":";AAEA,OAAM,SAAUA,gBAAgBA,CAACC,WAAmB;;EAClD,IAAMC,KAAK,GAAsB,EAAE;EACnCD,WAAW,GAAGA,WAAW,CAACE,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;EAE5C,IAAIF,WAAW,EAAE;;MACf,KAAmB,IAAAG,EAAA,GAAAC,QAAA,CAAAJ,WAAW,CAACK,KAAK,CAAC,GAAG,CAAC,GAAAC,EAAA,GAAAH,EAAA,CAAAI,IAAA,KAAAD,EAAA,CAAAE,IAAA,EAAAF,EAAA,GAAAH,EAAA,CAAAI,IAAA,IAAE;QAAtC,IAAME,IAAI,GAAAH,EAAA,CAAAI,KAAA;QACT,IAAAC,EAAA,GAAAC,MAAA,CAAsBH,IAAI,CAACJ,KAAK,CAAC,GAAG,CAAC;UAApCQ,GAAG,GAAAF,EAAA;UAAEG,EAAA,GAAAH,EAAA,GAAY;UAAZD,KAAK,GAAAI,EAAA,cAAG,IAAI,GAAAA,EAAmB;QACzCD,GAAG,GAAGE,kBAAkB,CAACF,GAAG,CAAC;QAC7B,IAAIH,KAAK,EAAE;UACTA,KAAK,GAAGK,kBAAkB,CAACL,KAAK,CAAC;;QAEnC,IAAI,EAAEG,GAAG,IAAIZ,KAAK,CAAC,EAAE;UACnBA,KAAK,CAACY,GAAG,CAAC,GAAGH,KAAK;SACnB,MAAM,IAAIM,KAAK,CAACC,OAAO,CAAChB,KAAK,CAACY,GAAG,CAAC,CAAC,EAAE;UACnCZ,KAAK,CAACY,GAAG,CAAmB,CAACK,IAAI,CAACR,KAAe,CAAC;SACpD,MAAM;UACLT,KAAK,CAACY,GAAG,CAAC,GAAG,CAACZ,KAAK,CAACY,GAAG,CAAW,EAAEH,KAAe,CAAC;;;;;;;;;;;;;;;EAK1D,OAAOT,KAAK;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}