{"ast":null,"code":"import { __awaiter, __generator, __read, __spread } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AnalyticsAction, ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { putEvents } from '@aws-amplify/core/internals/aws-clients/pinpoint';\nimport { isAppInForeground } from '../utils/AppUtils';\nimport { getAnalyticsUserAgentString } from '../utils/UserAgent';\nvar logger = new Logger('EventsBuffer');\nvar RETRYABLE_CODES = [429, 500];\nvar ACCEPTED_CODES = [202];\nvar EventsBuffer = /** @class */function () {\n  function EventsBuffer(config) {\n    this._pause = false;\n    this._flush = false;\n    logger.debug('Instantiating buffer with config:', config);\n    this._buffer = [];\n    this._config = config;\n    this._sendBatch = this._sendBatch.bind(this);\n    this._startLoop();\n  }\n  EventsBuffer.prototype.push = function (event) {\n    var _a;\n    // if the buffer is currently at the configured limit, pushing would exceed it\n    if (this._buffer.length >= this._config.bufferSize) {\n      logger.debug('Exceeded analytics events buffer size');\n      return event.handlers.reject(new Error('Exceeded the size of analytics events buffer'));\n    }\n    var eventId = event.params.event.eventId;\n    var bufferElement = (_a = {}, _a[eventId] = event, _a);\n    this._buffer.push(bufferElement);\n  };\n  EventsBuffer.prototype.pause = function () {\n    this._pause = true;\n  };\n  EventsBuffer.prototype.resume = function () {\n    this._pause = false;\n  };\n  EventsBuffer.prototype.flush = function () {\n    this._flush = true;\n  };\n  EventsBuffer.prototype._startLoop = function () {\n    if (this._interval) {\n      clearInterval(this._interval);\n    }\n    var flushInterval = this._config.flushInterval;\n    this._interval = setInterval(this._sendBatch, flushInterval);\n  };\n  EventsBuffer.prototype._sendBatch = function () {\n    var bufferLength = this._buffer.length;\n    if (this._flush && !bufferLength) {\n      clearInterval(this._interval);\n    }\n    // Do not send the batch of events if\n    // the Buffer is paused or is empty or the App is not in the foreground\n    // Apps should be in the foreground since\n    // the OS may restrict access to the network in the background\n    if (this._pause || !bufferLength || !isAppInForeground()) {\n      return;\n    }\n    var flushSize = this._config.flushSize;\n    var batchSize = Math.min(flushSize, bufferLength);\n    var bufferSubset = this._buffer.splice(0, batchSize);\n    this._putEvents(bufferSubset);\n  };\n  EventsBuffer.prototype._putEvents = function (buffer) {\n    return __awaiter(this, void 0, void 0, function () {\n      var eventMap, batchEventParams, _a, credentials, region, data, err_1;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            eventMap = this._bufferToMap(buffer);\n            batchEventParams = this._generateBatchEventParams(eventMap);\n            _b.label = 1;\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n            _a = this._config, credentials = _a.credentials, region = _a.region;\n            return [4 /*yield*/, putEvents({\n              credentials: credentials,\n              region: region,\n              userAgentValue: getAnalyticsUserAgentString(AnalyticsAction.Record)\n            }, batchEventParams)];\n          case 2:\n            data = _b.sent();\n            this._processPutEventsSuccessResponse(data, eventMap);\n            return [3 /*break*/, 4];\n          case 3:\n            err_1 = _b.sent();\n            return [2 /*return*/, this._handlePutEventsFailure(err_1, eventMap)];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  EventsBuffer.prototype._generateBatchEventParams = function (eventMap) {\n    var batchEventParams = {\n      ApplicationId: '',\n      EventsRequest: {\n        BatchItem: {}\n      }\n    };\n    Object.values(eventMap).forEach(function (item) {\n      var params = item.params;\n      var event = params.event,\n        timestamp = params.timestamp,\n        config = params.config;\n      var name = event.name,\n        attributes = event.attributes,\n        metrics = event.metrics,\n        eventId = event.eventId,\n        session = event.session;\n      var appId = config.appId,\n        endpointId = config.endpointId;\n      var batchItem = batchEventParams.EventsRequest.BatchItem;\n      batchEventParams.ApplicationId = batchEventParams.ApplicationId || appId;\n      if (!batchItem[endpointId]) {\n        batchItem[endpointId] = {\n          Endpoint: {},\n          Events: {}\n        };\n      }\n      batchItem[endpointId].Events[eventId] = {\n        EventType: name,\n        Timestamp: new Date(timestamp).toISOString(),\n        Attributes: attributes,\n        Metrics: metrics,\n        Session: session\n      };\n    });\n    return batchEventParams;\n  };\n  EventsBuffer.prototype._handlePutEventsFailure = function (err, eventMap) {\n    logger.debug('_putEvents Failed: ', err);\n    var statusCode = err.$metadata && err.$metadata.httpStatusCode;\n    if (RETRYABLE_CODES.includes(statusCode)) {\n      var retryableEvents = Object.values(eventMap);\n      this._retry(retryableEvents);\n      return;\n    }\n  };\n  EventsBuffer.prototype._processPutEventsSuccessResponse = function (data, eventMap) {\n    var _a;\n    var _b = ((_a = data.EventsResponse) !== null && _a !== void 0 ? _a : {}).Results,\n      Results = _b === void 0 ? {} : _b;\n    var retryableEvents = [];\n    Object.entries(Results).forEach(function (_a) {\n      var _b = __read(_a, 2),\n        endpointId = _b[0],\n        endpointValues = _b[1];\n      var _c;\n      var responses = (_c = endpointValues.EventsItemResponse) !== null && _c !== void 0 ? _c : {};\n      Object.entries(responses).forEach(function (_a) {\n        var _b, _c;\n        var _d = __read(_a, 2),\n          eventId = _d[0],\n          eventValues = _d[1];\n        var eventObject = eventMap[eventId];\n        if (!eventObject) {\n          return;\n        }\n        var _e = eventValues !== null && eventValues !== void 0 ? eventValues : {},\n          StatusCode = _e.StatusCode,\n          Message = _e.Message;\n        // manually crafting handlers response to keep API consistant\n        var response = {\n          EventsResponse: {\n            Results: (_b = {}, _b[endpointId] = {\n              EventsItemResponse: (_c = {}, _c[eventId] = {\n                StatusCode: StatusCode,\n                Message: Message\n              }, _c)\n            }, _b)\n          }\n        };\n        if (StatusCode && ACCEPTED_CODES.includes(StatusCode)) {\n          eventObject.handlers.resolve(response);\n          return;\n        }\n        if (StatusCode && RETRYABLE_CODES.includes(StatusCode)) {\n          retryableEvents.push(eventObject);\n          return;\n        }\n        var name = eventObject.params.event.name;\n        logger.error(\"event \" + eventId + \" : \" + name + \" failed with error: \" + Message);\n        return eventObject.handlers.reject(response);\n      });\n    });\n    if (retryableEvents.length) {\n      this._retry(retryableEvents);\n    }\n  };\n  EventsBuffer.prototype._retry = function (retryableEvents) {\n    var _a;\n    // retryable events that haven't reached the resendLimit\n    var eligibleEvents = [];\n    retryableEvents.forEach(function (event) {\n      var _a;\n      var params = event.params;\n      var _b = params.event,\n        eventId = _b.eventId,\n        name = _b.name;\n      if (params.resendLimit-- > 0) {\n        logger.debug(\"resending event \" + eventId + \" : \" + name + \" with \" + params.resendLimit + \" retry attempts remaining\");\n        eligibleEvents.push((_a = {}, _a[eventId] = event, _a));\n        return;\n      }\n      logger.debug(\"no retry attempts remaining for event \" + eventId + \" : \" + name);\n    });\n    // add the events to the front of the buffer\n    (_a = this._buffer).unshift.apply(_a, __spread(eligibleEvents));\n  };\n  // convert buffer to map, i.e. { eventId1: { params, handler }, eventId2: { params, handlers } }\n  // this allows us to easily access the handlers after receiving a batch response\n  EventsBuffer.prototype._bufferToMap = function (buffer) {\n    return buffer.reduce(function (acc, curVal) {\n      var _a = __read(Object.entries(curVal), 1),\n        _b = __read(_a[0], 2),\n        key = _b[0],\n        value = _b[1];\n      acc[key] = value;\n      return acc;\n    }, {});\n  };\n  return EventsBuffer;\n}();\nexport default EventsBuffer;","map":{"version":3,"names":["AnalyticsAction","ConsoleLogger","Logger","putEvents","isAppInForeground","getAnalyticsUserAgentString","logger","RETRYABLE_CODES","ACCEPTED_CODES","EventsBuffer","config","_pause","_flush","debug","_buffer","_config","_sendBatch","bind","_startLoop","prototype","push","event","length","bufferSize","handlers","reject","Error","eventId","params","bufferElement","_a","pause","resume","flush","_interval","clearInterval","flushInterval","setInterval","bufferLength","flushSize","batchSize","Math","min","bufferSubset","splice","_putEvents","buffer","eventMap","_bufferToMap","batchEventParams","_generateBatchEventParams","credentials","region","userAgentValue","Record","data","_b","sent","_processPutEventsSuccessResponse","_handlePutEventsFailure","err_1","ApplicationId","EventsRequest","BatchItem","Object","values","forEach","item","timestamp","name","attributes","metrics","session","appId","endpointId","batchItem","Endpoint","Events","EventType","Timestamp","Date","toISOString","Attributes","Metrics","Session","err","statusCode","$metadata","httpStatusCode","includes","retryableEvents","_retry","EventsResponse","Results","entries","__read","endpointValues","responses","_c","EventsItemResponse","_d","eventValues","eventObject","_e","StatusCode","Message","response","resolve","error","eligibleEvents","resendLimit","unshift","apply","__spread","reduce","acc","curVal","key","value"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-amplify/analytics/src/Providers/EventBuffer.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AnalyticsAction, ConsoleLogger as Logger } from '@aws-amplify/core';\nimport {\n\tputEvents,\n\tPutEventsInput,\n\tPutEventsOutput,\n} from '@aws-amplify/core/internals/aws-clients/pinpoint';\nimport { EventBuffer, EventObject, EventMap } from '../types';\nimport { isAppInForeground } from '../utils/AppUtils';\nimport { getAnalyticsUserAgentString } from '../utils/UserAgent';\n\nconst logger = new Logger('EventsBuffer');\nconst RETRYABLE_CODES = [429, 500];\nconst ACCEPTED_CODES = [202];\n\ntype EventsBufferConfig = {\n\tbufferSize: number;\n\tflushSize: number;\n\tflushInterval: number;\n\tresendLimit: number;\n};\n\nexport default class EventsBuffer {\n\tprivate _config;\n\tprivate _interval;\n\tprivate _buffer: EventBuffer;\n\tprivate _pause = false;\n\tprivate _flush = false;\n\n\tconstructor(config: EventsBufferConfig) {\n\t\tlogger.debug('Instantiating buffer with config:', config);\n\t\tthis._buffer = [];\n\t\tthis._config = config;\n\n\t\tthis._sendBatch = this._sendBatch.bind(this);\n\n\t\tthis._startLoop();\n\t}\n\n\tpublic push(event: EventObject) {\n\t\t// if the buffer is currently at the configured limit, pushing would exceed it\n\t\tif (this._buffer.length >= this._config.bufferSize) {\n\t\t\tlogger.debug('Exceeded analytics events buffer size');\n\t\t\treturn event.handlers.reject(\n\t\t\t\tnew Error('Exceeded the size of analytics events buffer')\n\t\t\t);\n\t\t}\n\n\t\tconst { eventId } = event.params.event;\n\t\tconst bufferElement = { [eventId]: event };\n\t\tthis._buffer.push(bufferElement);\n\t}\n\n\tpublic pause() {\n\t\tthis._pause = true;\n\t}\n\n\tpublic resume() {\n\t\tthis._pause = false;\n\t}\n\n\tpublic flush() {\n\t\tthis._flush = true;\n\t}\n\n\tprivate _startLoop() {\n\t\tif (this._interval) {\n\t\t\tclearInterval(this._interval);\n\t\t}\n\n\t\tconst { flushInterval } = this._config;\n\n\t\tthis._interval = setInterval(this._sendBatch, flushInterval);\n\t}\n\n\tprivate _sendBatch() {\n\t\tconst bufferLength = this._buffer.length;\n\n\t\tif (this._flush && !bufferLength) {\n\t\t\tclearInterval(this._interval);\n\t\t}\n\n\t\t// Do not send the batch of events if\n\t\t// the Buffer is paused or is empty or the App is not in the foreground\n\t\t// Apps should be in the foreground since\n\t\t// the OS may restrict access to the network in the background\n\t\tif (this._pause || !bufferLength || !isAppInForeground()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { flushSize } = this._config;\n\n\t\tconst batchSize = Math.min(flushSize, bufferLength);\n\t\tconst bufferSubset = this._buffer.splice(0, batchSize);\n\n\t\tthis._putEvents(bufferSubset);\n\t}\n\n\tprivate async _putEvents(buffer: EventBuffer) {\n\t\tconst eventMap: EventMap = this._bufferToMap(buffer);\n\t\tconst batchEventParams = this._generateBatchEventParams(eventMap);\n\n\t\ttry {\n\t\t\tconst { credentials, region } = this._config;\n\t\t\tconst data: PutEventsOutput = await putEvents(\n\t\t\t\t{\n\t\t\t\t\tcredentials,\n\t\t\t\t\tregion,\n\t\t\t\t\tuserAgentValue: getAnalyticsUserAgentString(AnalyticsAction.Record),\n\t\t\t\t},\n\t\t\t\tbatchEventParams\n\t\t\t);\n\t\t\tthis._processPutEventsSuccessResponse(data, eventMap);\n\t\t} catch (err) {\n\t\t\treturn this._handlePutEventsFailure(err, eventMap);\n\t\t}\n\t}\n\n\tprivate _generateBatchEventParams(eventMap: EventMap): PutEventsInput {\n\t\tconst batchEventParams = {\n\t\t\tApplicationId: '',\n\t\t\tEventsRequest: {\n\t\t\t\tBatchItem: {},\n\t\t\t},\n\t\t};\n\n\t\tObject.values(eventMap).forEach(item => {\n\t\t\tconst { params } = item;\n\t\t\tconst { event, timestamp, config } = params;\n\t\t\tconst { name, attributes, metrics, eventId, session } = event;\n\t\t\tconst { appId, endpointId } = config;\n\n\t\t\tconst batchItem = batchEventParams.EventsRequest.BatchItem;\n\n\t\t\tbatchEventParams.ApplicationId = batchEventParams.ApplicationId || appId;\n\n\t\t\tif (!batchItem[endpointId]) {\n\t\t\t\tbatchItem[endpointId] = {\n\t\t\t\t\tEndpoint: {},\n\t\t\t\t\tEvents: {},\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tbatchItem[endpointId].Events[eventId] = {\n\t\t\t\tEventType: name,\n\t\t\t\tTimestamp: new Date(timestamp).toISOString(),\n\t\t\t\tAttributes: attributes,\n\t\t\t\tMetrics: metrics,\n\t\t\t\tSession: session,\n\t\t\t};\n\t\t});\n\n\t\treturn batchEventParams;\n\t}\n\n\tprivate _handlePutEventsFailure(err, eventMap: EventMap) {\n\t\tlogger.debug('_putEvents Failed: ', err);\n\t\tconst statusCode = err.$metadata && err.$metadata.httpStatusCode;\n\n\t\tif (RETRYABLE_CODES.includes(statusCode)) {\n\t\t\tconst retryableEvents = Object.values(eventMap);\n\t\t\tthis._retry(retryableEvents);\n\t\t\treturn;\n\t\t}\n\t}\n\n\tprivate _processPutEventsSuccessResponse(\n\t\tdata: PutEventsOutput,\n\t\teventMap: EventMap\n\t) {\n\t\tconst { Results = {} } = data.EventsResponse ?? {};\n\t\tconst retryableEvents: EventObject[] = [];\n\n\t\tObject.entries(Results).forEach(([endpointId, endpointValues]) => {\n\t\t\tconst responses = endpointValues.EventsItemResponse ?? {};\n\n\t\t\tObject.entries(responses).forEach(([eventId, eventValues]) => {\n\t\t\t\tconst eventObject = eventMap[eventId];\n\t\t\t\tif (!eventObject) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst { StatusCode, Message } = eventValues ?? {};\n\n\t\t\t\t// manually crafting handlers response to keep API consistant\n\t\t\t\tconst response = {\n\t\t\t\t\tEventsResponse: {\n\t\t\t\t\t\tResults: {\n\t\t\t\t\t\t\t[endpointId]: {\n\t\t\t\t\t\t\t\tEventsItemResponse: {\n\t\t\t\t\t\t\t\t\t[eventId]: { StatusCode, Message },\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\t\tif (StatusCode && ACCEPTED_CODES.includes(StatusCode)) {\n\t\t\t\t\teventObject.handlers.resolve(response);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (StatusCode && RETRYABLE_CODES.includes(StatusCode)) {\n\t\t\t\t\tretryableEvents.push(eventObject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst { name } = eventObject.params.event;\n\n\t\t\t\tlogger.error(\n\t\t\t\t\t`event ${eventId} : ${name} failed with error: ${Message}`\n\t\t\t\t);\n\t\t\t\treturn eventObject.handlers.reject(response);\n\t\t\t});\n\t\t});\n\n\t\tif (retryableEvents.length) {\n\t\t\tthis._retry(retryableEvents);\n\t\t}\n\t}\n\n\tprivate _retry(retryableEvents: EventObject[]) {\n\t\t// retryable events that haven't reached the resendLimit\n\t\tconst eligibleEvents: EventBuffer = [];\n\n\t\tretryableEvents.forEach((event: EventObject) => {\n\t\t\tconst { params } = event;\n\t\t\tconst { eventId, name } = params.event;\n\n\t\t\tif (params.resendLimit-- > 0) {\n\t\t\t\tlogger.debug(\n\t\t\t\t\t`resending event ${eventId} : ${name} with ${params.resendLimit} retry attempts remaining`\n\t\t\t\t);\n\t\t\t\teligibleEvents.push({ [eventId]: event });\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlogger.debug(\n\t\t\t\t`no retry attempts remaining for event ${eventId} : ${name}`\n\t\t\t);\n\t\t});\n\n\t\t// add the events to the front of the buffer\n\t\tthis._buffer.unshift(...eligibleEvents);\n\t}\n\n\t// convert buffer to map, i.e. { eventId1: { params, handler }, eventId2: { params, handlers } }\n\t// this allows us to easily access the handlers after receiving a batch response\n\tprivate _bufferToMap(buffer: EventBuffer) {\n\t\treturn buffer.reduce((acc, curVal) => {\n\t\t\tconst [[key, value]] = Object.entries(curVal);\n\t\t\tacc[key] = value;\n\t\t\treturn acc;\n\t\t}, {});\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}