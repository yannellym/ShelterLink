{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { SENSITIVE_STRING } from \"@aws-sdk/smithy-client\";\nexport var DeleteLexiconInput;\n(function (DeleteLexiconInput) {\n  DeleteLexiconInput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DeleteLexiconInput || (DeleteLexiconInput = {}));\nexport var DeleteLexiconOutput;\n(function (DeleteLexiconOutput) {\n  DeleteLexiconOutput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DeleteLexiconOutput || (DeleteLexiconOutput = {}));\nexport var LexiconNotFoundException;\n(function (LexiconNotFoundException) {\n  LexiconNotFoundException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(LexiconNotFoundException || (LexiconNotFoundException = {}));\nexport var ServiceFailureException;\n(function (ServiceFailureException) {\n  ServiceFailureException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ServiceFailureException || (ServiceFailureException = {}));\nexport var Engine;\n(function (Engine) {\n  Engine[\"NEURAL\"] = \"neural\";\n  Engine[\"STANDARD\"] = \"standard\";\n})(Engine || (Engine = {}));\nexport var DescribeVoicesInput;\n(function (DescribeVoicesInput) {\n  DescribeVoicesInput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DescribeVoicesInput || (DescribeVoicesInput = {}));\nexport var Voice;\n(function (Voice) {\n  Voice.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(Voice || (Voice = {}));\nexport var DescribeVoicesOutput;\n(function (DescribeVoicesOutput) {\n  DescribeVoicesOutput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DescribeVoicesOutput || (DescribeVoicesOutput = {}));\nexport var InvalidNextTokenException;\n(function (InvalidNextTokenException) {\n  InvalidNextTokenException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(InvalidNextTokenException || (InvalidNextTokenException = {}));\nexport var EngineNotSupportedException;\n(function (EngineNotSupportedException) {\n  EngineNotSupportedException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(EngineNotSupportedException || (EngineNotSupportedException = {}));\nexport var GetLexiconInput;\n(function (GetLexiconInput) {\n  GetLexiconInput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(GetLexiconInput || (GetLexiconInput = {}));\nexport var Lexicon;\n(function (Lexicon) {\n  Lexicon.filterSensitiveLog = function (obj) {\n    return __assign(__assign({}, obj), obj.Content && {\n      Content: SENSITIVE_STRING\n    });\n  };\n})(Lexicon || (Lexicon = {}));\nexport var LexiconAttributes;\n(function (LexiconAttributes) {\n  LexiconAttributes.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(LexiconAttributes || (LexiconAttributes = {}));\nexport var GetLexiconOutput;\n(function (GetLexiconOutput) {\n  GetLexiconOutput.filterSensitiveLog = function (obj) {\n    return __assign(__assign({}, obj), obj.Lexicon && {\n      Lexicon: Lexicon.filterSensitiveLog(obj.Lexicon)\n    });\n  };\n})(GetLexiconOutput || (GetLexiconOutput = {}));\nexport var GetSpeechSynthesisTaskInput;\n(function (GetSpeechSynthesisTaskInput) {\n  GetSpeechSynthesisTaskInput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(GetSpeechSynthesisTaskInput || (GetSpeechSynthesisTaskInput = {}));\nexport var OutputFormat;\n(function (OutputFormat) {\n  OutputFormat[\"JSON\"] = \"json\";\n  OutputFormat[\"MP3\"] = \"mp3\";\n  OutputFormat[\"OGG_VORBIS\"] = \"ogg_vorbis\";\n  OutputFormat[\"PCM\"] = \"pcm\";\n})(OutputFormat || (OutputFormat = {}));\nexport var SpeechMarkType;\n(function (SpeechMarkType) {\n  SpeechMarkType[\"SENTENCE\"] = \"sentence\";\n  SpeechMarkType[\"SSML\"] = \"ssml\";\n  SpeechMarkType[\"VISEME\"] = \"viseme\";\n  SpeechMarkType[\"WORD\"] = \"word\";\n})(SpeechMarkType || (SpeechMarkType = {}));\nexport var TaskStatus;\n(function (TaskStatus) {\n  TaskStatus[\"COMPLETED\"] = \"completed\";\n  TaskStatus[\"FAILED\"] = \"failed\";\n  TaskStatus[\"IN_PROGRESS\"] = \"inProgress\";\n  TaskStatus[\"SCHEDULED\"] = \"scheduled\";\n})(TaskStatus || (TaskStatus = {}));\nexport var TextType;\n(function (TextType) {\n  TextType[\"SSML\"] = \"ssml\";\n  TextType[\"TEXT\"] = \"text\";\n})(TextType || (TextType = {}));\nexport var SynthesisTask;\n(function (SynthesisTask) {\n  SynthesisTask.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(SynthesisTask || (SynthesisTask = {}));\nexport var GetSpeechSynthesisTaskOutput;\n(function (GetSpeechSynthesisTaskOutput) {\n  GetSpeechSynthesisTaskOutput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(GetSpeechSynthesisTaskOutput || (GetSpeechSynthesisTaskOutput = {}));\nexport var InvalidTaskIdException;\n(function (InvalidTaskIdException) {\n  InvalidTaskIdException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(InvalidTaskIdException || (InvalidTaskIdException = {}));\nexport var SynthesisTaskNotFoundException;\n(function (SynthesisTaskNotFoundException) {\n  SynthesisTaskNotFoundException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(SynthesisTaskNotFoundException || (SynthesisTaskNotFoundException = {}));\nexport var InvalidLexiconException;\n(function (InvalidLexiconException) {\n  InvalidLexiconException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(InvalidLexiconException || (InvalidLexiconException = {}));\nexport var InvalidS3BucketException;\n(function (InvalidS3BucketException) {\n  InvalidS3BucketException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(InvalidS3BucketException || (InvalidS3BucketException = {}));\nexport var InvalidS3KeyException;\n(function (InvalidS3KeyException) {\n  InvalidS3KeyException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(InvalidS3KeyException || (InvalidS3KeyException = {}));\nexport var InvalidSampleRateException;\n(function (InvalidSampleRateException) {\n  InvalidSampleRateException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(InvalidSampleRateException || (InvalidSampleRateException = {}));\nexport var InvalidSnsTopicArnException;\n(function (InvalidSnsTopicArnException) {\n  InvalidSnsTopicArnException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(InvalidSnsTopicArnException || (InvalidSnsTopicArnException = {}));\nexport var InvalidSsmlException;\n(function (InvalidSsmlException) {\n  InvalidSsmlException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(InvalidSsmlException || (InvalidSsmlException = {}));\nexport var LanguageNotSupportedException;\n(function (LanguageNotSupportedException) {\n  LanguageNotSupportedException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(LanguageNotSupportedException || (LanguageNotSupportedException = {}));\nexport var LexiconDescription;\n(function (LexiconDescription) {\n  LexiconDescription.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(LexiconDescription || (LexiconDescription = {}));\nexport var LexiconSizeExceededException;\n(function (LexiconSizeExceededException) {\n  LexiconSizeExceededException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(LexiconSizeExceededException || (LexiconSizeExceededException = {}));\nexport var ListLexiconsInput;\n(function (ListLexiconsInput) {\n  ListLexiconsInput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ListLexiconsInput || (ListLexiconsInput = {}));\nexport var ListLexiconsOutput;\n(function (ListLexiconsOutput) {\n  ListLexiconsOutput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ListLexiconsOutput || (ListLexiconsOutput = {}));\nexport var ListSpeechSynthesisTasksInput;\n(function (ListSpeechSynthesisTasksInput) {\n  ListSpeechSynthesisTasksInput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ListSpeechSynthesisTasksInput || (ListSpeechSynthesisTasksInput = {}));\nexport var ListSpeechSynthesisTasksOutput;\n(function (ListSpeechSynthesisTasksOutput) {\n  ListSpeechSynthesisTasksOutput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ListSpeechSynthesisTasksOutput || (ListSpeechSynthesisTasksOutput = {}));\nexport var MarksNotSupportedForFormatException;\n(function (MarksNotSupportedForFormatException) {\n  MarksNotSupportedForFormatException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(MarksNotSupportedForFormatException || (MarksNotSupportedForFormatException = {}));\nexport var MaxLexemeLengthExceededException;\n(function (MaxLexemeLengthExceededException) {\n  MaxLexemeLengthExceededException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(MaxLexemeLengthExceededException || (MaxLexemeLengthExceededException = {}));\nexport var MaxLexiconsNumberExceededException;\n(function (MaxLexiconsNumberExceededException) {\n  MaxLexiconsNumberExceededException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(MaxLexiconsNumberExceededException || (MaxLexiconsNumberExceededException = {}));\nexport var PutLexiconInput;\n(function (PutLexiconInput) {\n  PutLexiconInput.filterSensitiveLog = function (obj) {\n    return __assign(__assign({}, obj), obj.Content && {\n      Content: SENSITIVE_STRING\n    });\n  };\n})(PutLexiconInput || (PutLexiconInput = {}));\nexport var PutLexiconOutput;\n(function (PutLexiconOutput) {\n  PutLexiconOutput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(PutLexiconOutput || (PutLexiconOutput = {}));\nexport var UnsupportedPlsAlphabetException;\n(function (UnsupportedPlsAlphabetException) {\n  UnsupportedPlsAlphabetException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(UnsupportedPlsAlphabetException || (UnsupportedPlsAlphabetException = {}));\nexport var UnsupportedPlsLanguageException;\n(function (UnsupportedPlsLanguageException) {\n  UnsupportedPlsLanguageException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(UnsupportedPlsLanguageException || (UnsupportedPlsLanguageException = {}));\nexport var SsmlMarksNotSupportedForTextTypeException;\n(function (SsmlMarksNotSupportedForTextTypeException) {\n  SsmlMarksNotSupportedForTextTypeException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(SsmlMarksNotSupportedForTextTypeException || (SsmlMarksNotSupportedForTextTypeException = {}));\nexport var StartSpeechSynthesisTaskInput;\n(function (StartSpeechSynthesisTaskInput) {\n  StartSpeechSynthesisTaskInput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StartSpeechSynthesisTaskInput || (StartSpeechSynthesisTaskInput = {}));\nexport var StartSpeechSynthesisTaskOutput;\n(function (StartSpeechSynthesisTaskOutput) {\n  StartSpeechSynthesisTaskOutput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StartSpeechSynthesisTaskOutput || (StartSpeechSynthesisTaskOutput = {}));\nexport var TextLengthExceededException;\n(function (TextLengthExceededException) {\n  TextLengthExceededException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(TextLengthExceededException || (TextLengthExceededException = {}));\nexport var SynthesizeSpeechInput;\n(function (SynthesizeSpeechInput) {\n  SynthesizeSpeechInput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(SynthesizeSpeechInput || (SynthesizeSpeechInput = {}));\nexport var SynthesizeSpeechOutput;\n(function (SynthesizeSpeechOutput) {\n  SynthesizeSpeechOutput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(SynthesizeSpeechOutput || (SynthesizeSpeechOutput = {}));","map":{"version":3,"names":["SENSITIVE_STRING","DeleteLexiconInput","filterSensitiveLog","obj","__assign","DeleteLexiconOutput","LexiconNotFoundException","ServiceFailureException","Engine","DescribeVoicesInput","Voice","DescribeVoicesOutput","InvalidNextTokenException","EngineNotSupportedException","GetLexiconInput","Lexicon","Content","LexiconAttributes","GetLexiconOutput","GetSpeechSynthesisTaskInput","OutputFormat","SpeechMarkType","TaskStatus","TextType","SynthesisTask","GetSpeechSynthesisTaskOutput","InvalidTaskIdException","SynthesisTaskNotFoundException","InvalidLexiconException","InvalidS3BucketException","InvalidS3KeyException","InvalidSampleRateException","InvalidSnsTopicArnException","InvalidSsmlException","LanguageNotSupportedException","LexiconDescription","LexiconSizeExceededException","ListLexiconsInput","ListLexiconsOutput","ListSpeechSynthesisTasksInput","ListSpeechSynthesisTasksOutput","MarksNotSupportedForFormatException","MaxLexemeLengthExceededException","MaxLexiconsNumberExceededException","PutLexiconInput","PutLexiconOutput","UnsupportedPlsAlphabetException","UnsupportedPlsLanguageException","SsmlMarksNotSupportedForTextTypeException","StartSpeechSynthesisTaskInput","StartSpeechSynthesisTaskOutput","TextLengthExceededException","SynthesizeSpeechInput","SynthesizeSpeechOutput"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-sdk/client-polly/models/models_0.ts"],"sourcesContent":["import { SENSITIVE_STRING, SmithyException as __SmithyException } from \"@aws-sdk/smithy-client\";\nimport { MetadataBearer as $MetadataBearer } from \"@aws-sdk/types\";\nimport { Readable } from \"stream\";\n\nexport interface DeleteLexiconInput {\n  /**\n   * <p>The name of the lexicon to delete. Must be an existing lexicon in the region.</p>\n   */\n  Name: string | undefined;\n}\n\nexport namespace DeleteLexiconInput {\n  export const filterSensitiveLog = (obj: DeleteLexiconInput): any => ({\n    ...obj,\n  });\n}\n\nexport interface DeleteLexiconOutput {}\n\nexport namespace DeleteLexiconOutput {\n  export const filterSensitiveLog = (obj: DeleteLexiconOutput): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Amazon Polly can't find the specified lexicon. This could be caused by a lexicon that\n *       is missing, its name is misspelled or specifying a lexicon that is in a different\n *       region.</p>\n *          <p>Verify that the lexicon exists, is in the region (see <a>ListLexicons</a>)\n *       and that you spelled its name is spelled correctly. Then try again.</p>\n */\nexport interface LexiconNotFoundException extends __SmithyException, $MetadataBearer {\n  name: \"LexiconNotFoundException\";\n  $fault: \"client\";\n  message?: string;\n}\n\nexport namespace LexiconNotFoundException {\n  export const filterSensitiveLog = (obj: LexiconNotFoundException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>An unknown condition has caused a service failure.</p>\n */\nexport interface ServiceFailureException extends __SmithyException, $MetadataBearer {\n  name: \"ServiceFailureException\";\n  $fault: \"server\";\n  message?: string;\n}\n\nexport namespace ServiceFailureException {\n  export const filterSensitiveLog = (obj: ServiceFailureException): any => ({\n    ...obj,\n  });\n}\n\nexport enum Engine {\n  NEURAL = \"neural\",\n  STANDARD = \"standard\",\n}\n\nexport type LanguageCode =\n  | \"arb\"\n  | \"cmn-CN\"\n  | \"cy-GB\"\n  | \"da-DK\"\n  | \"de-DE\"\n  | \"en-AU\"\n  | \"en-GB\"\n  | \"en-GB-WLS\"\n  | \"en-IN\"\n  | \"en-US\"\n  | \"es-ES\"\n  | \"es-MX\"\n  | \"es-US\"\n  | \"fr-CA\"\n  | \"fr-FR\"\n  | \"hi-IN\"\n  | \"is-IS\"\n  | \"it-IT\"\n  | \"ja-JP\"\n  | \"ko-KR\"\n  | \"nb-NO\"\n  | \"nl-NL\"\n  | \"pl-PL\"\n  | \"pt-BR\"\n  | \"pt-PT\"\n  | \"ro-RO\"\n  | \"ru-RU\"\n  | \"sv-SE\"\n  | \"tr-TR\";\n\nexport interface DescribeVoicesInput {\n  /**\n   * <p>Specifies the engine (<code>standard</code> or <code>neural</code>) used by Amazon Polly\n   *       when processing input text for speech synthesis. </p>\n   */\n  Engine?: Engine | string;\n\n  /**\n   * <p> The language identification tag (ISO 639 code for the language name-ISO 3166 country\n   *       code) for filtering the list of voices returned. If you don't specify this optional parameter,\n   *       all available voices are returned. </p>\n   */\n  LanguageCode?: LanguageCode | string;\n\n  /**\n   * <p>Boolean value indicating whether to return any bilingual voices that use the specified\n   *       language as an additional language. For instance, if you request all languages that use US\n   *       English (es-US), and there is an Italian voice that speaks both Italian (it-IT) and US\n   *       English, that voice will be included if you specify <code>yes</code> but not if you specify\n   *         <code>no</code>.</p>\n   */\n  IncludeAdditionalLanguageCodes?: boolean;\n\n  /**\n   * <p>An opaque pagination token returned from the previous <code>DescribeVoices</code>\n   *       operation. If present, this indicates where to continue the listing.</p>\n   */\n  NextToken?: string;\n}\n\nexport namespace DescribeVoicesInput {\n  export const filterSensitiveLog = (obj: DescribeVoicesInput): any => ({\n    ...obj,\n  });\n}\n\nexport type Gender = \"Female\" | \"Male\";\n\nexport type VoiceId =\n  | \"Aditi\"\n  | \"Amy\"\n  | \"Astrid\"\n  | \"Bianca\"\n  | \"Brian\"\n  | \"Camila\"\n  | \"Carla\"\n  | \"Carmen\"\n  | \"Celine\"\n  | \"Chantal\"\n  | \"Conchita\"\n  | \"Cristiano\"\n  | \"Dora\"\n  | \"Emma\"\n  | \"Enrique\"\n  | \"Ewa\"\n  | \"Filiz\"\n  | \"Geraint\"\n  | \"Giorgio\"\n  | \"Gwyneth\"\n  | \"Hans\"\n  | \"Ines\"\n  | \"Ivy\"\n  | \"Jacek\"\n  | \"Jan\"\n  | \"Joanna\"\n  | \"Joey\"\n  | \"Justin\"\n  | \"Karl\"\n  | \"Kendra\"\n  | \"Kevin\"\n  | \"Kimberly\"\n  | \"Lea\"\n  | \"Liv\"\n  | \"Lotte\"\n  | \"Lucia\"\n  | \"Lupe\"\n  | \"Mads\"\n  | \"Maja\"\n  | \"Marlene\"\n  | \"Mathieu\"\n  | \"Matthew\"\n  | \"Maxim\"\n  | \"Mia\"\n  | \"Miguel\"\n  | \"Mizuki\"\n  | \"Naja\"\n  | \"Nicole\"\n  | \"Olivia\"\n  | \"Penelope\"\n  | \"Raveena\"\n  | \"Ricardo\"\n  | \"Ruben\"\n  | \"Russell\"\n  | \"Salli\"\n  | \"Seoyeon\"\n  | \"Takumi\"\n  | \"Tatyana\"\n  | \"Vicki\"\n  | \"Vitoria\"\n  | \"Zeina\"\n  | \"Zhiyu\";\n\n/**\n * <p>Description of the voice.</p>\n */\nexport interface Voice {\n  /**\n   * <p>Gender of the voice.</p>\n   */\n  Gender?: Gender | string;\n\n  /**\n   * <p>Amazon Polly assigned voice ID. This is the ID that you specify when calling the\n   *         <code>SynthesizeSpeech</code> operation.</p>\n   */\n  Id?: VoiceId | string;\n\n  /**\n   * <p>Language code of the voice.</p>\n   */\n  LanguageCode?: LanguageCode | string;\n\n  /**\n   * <p>Human readable name of the language in English.</p>\n   */\n  LanguageName?: string;\n\n  /**\n   * <p>Name of the voice (for example, Salli, Kendra, etc.). This provides a human readable\n   *       voice name that you might display in your application.</p>\n   */\n  Name?: string;\n\n  /**\n   * <p>Additional codes for languages available for the specified voice in addition to its\n   *       default language. </p>\n   *          <p>For example, the default language for Aditi is Indian English (en-IN) because it was first\n   *       used for that language. Since Aditi is bilingual and fluent in both Indian English and Hindi,\n   *       this parameter would show the code <code>hi-IN</code>.</p>\n   */\n  AdditionalLanguageCodes?: (LanguageCode | string)[];\n\n  /**\n   * <p>Specifies which engines (<code>standard</code> or <code>neural</code>) that are supported\n   *       by a given voice.</p>\n   */\n  SupportedEngines?: (Engine | string)[];\n}\n\nexport namespace Voice {\n  export const filterSensitiveLog = (obj: Voice): any => ({\n    ...obj,\n  });\n}\n\nexport interface DescribeVoicesOutput {\n  /**\n   * <p>A list of voices with their properties.</p>\n   */\n  Voices?: Voice[];\n\n  /**\n   * <p>The pagination token to use in the next request to continue the listing of voices.\n   *         <code>NextToken</code> is returned only if the response is truncated.</p>\n   */\n  NextToken?: string;\n}\n\nexport namespace DescribeVoicesOutput {\n  export const filterSensitiveLog = (obj: DescribeVoicesOutput): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The NextToken is invalid. Verify that it's spelled correctly, and then try\n *       again.</p>\n */\nexport interface InvalidNextTokenException extends __SmithyException, $MetadataBearer {\n  name: \"InvalidNextTokenException\";\n  $fault: \"client\";\n  message?: string;\n}\n\nexport namespace InvalidNextTokenException {\n  export const filterSensitiveLog = (obj: InvalidNextTokenException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>This engine is not compatible with the voice that you have designated. Choose a new voice\n *       that is compatible with the engine or change the engine and restart the operation.</p>\n */\nexport interface EngineNotSupportedException extends __SmithyException, $MetadataBearer {\n  name: \"EngineNotSupportedException\";\n  $fault: \"client\";\n  message?: string;\n}\n\nexport namespace EngineNotSupportedException {\n  export const filterSensitiveLog = (obj: EngineNotSupportedException): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetLexiconInput {\n  /**\n   * <p>Name of the lexicon.</p>\n   */\n  Name: string | undefined;\n}\n\nexport namespace GetLexiconInput {\n  export const filterSensitiveLog = (obj: GetLexiconInput): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Provides lexicon name and lexicon content in string format. For more information, see\n *         <a href=\"https://www.w3.org/TR/pronunciation-lexicon/\">Pronunciation Lexicon\n *         Specification (PLS) Version 1.0</a>.</p>\n */\nexport interface Lexicon {\n  /**\n   * <p>Lexicon content in string format. The content of a lexicon must be in PLS\n   *       format.</p>\n   */\n  Content?: string;\n\n  /**\n   * <p>Name of the lexicon.</p>\n   */\n  Name?: string;\n}\n\nexport namespace Lexicon {\n  export const filterSensitiveLog = (obj: Lexicon): any => ({\n    ...obj,\n    ...(obj.Content && { Content: SENSITIVE_STRING }),\n  });\n}\n\n/**\n * <p>Contains metadata describing the lexicon such as the number of lexemes, language code,\n *       and so on. For more information, see <a href=\"https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html\">Managing\n *         Lexicons</a>.</p>\n */\nexport interface LexiconAttributes {\n  /**\n   * <p>Phonetic alphabet used in the lexicon. Valid values are <code>ipa</code> and\n   *         <code>x-sampa</code>.</p>\n   */\n  Alphabet?: string;\n\n  /**\n   * <p>Language code that the lexicon applies to. A lexicon with a language code such as \"en\"\n   *       would be applied to all English languages (en-GB, en-US, en-AUS, en-WLS, and so on.</p>\n   */\n  LanguageCode?: LanguageCode | string;\n\n  /**\n   * <p>Date lexicon was last modified (a timestamp value).</p>\n   */\n  LastModified?: Date;\n\n  /**\n   * <p>Amazon Resource Name (ARN) of the lexicon.</p>\n   */\n  LexiconArn?: string;\n\n  /**\n   * <p>Number of lexemes in the lexicon.</p>\n   */\n  LexemesCount?: number;\n\n  /**\n   * <p>Total size of the lexicon, in characters.</p>\n   */\n  Size?: number;\n}\n\nexport namespace LexiconAttributes {\n  export const filterSensitiveLog = (obj: LexiconAttributes): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetLexiconOutput {\n  /**\n   * <p>Lexicon object that provides name and the string content of the lexicon. </p>\n   */\n  Lexicon?: Lexicon;\n\n  /**\n   * <p>Metadata of the lexicon, including phonetic alphabetic used, language code, lexicon\n   *       ARN, number of lexemes defined in the lexicon, and size of lexicon in bytes.</p>\n   */\n  LexiconAttributes?: LexiconAttributes;\n}\n\nexport namespace GetLexiconOutput {\n  export const filterSensitiveLog = (obj: GetLexiconOutput): any => ({\n    ...obj,\n    ...(obj.Lexicon && { Lexicon: Lexicon.filterSensitiveLog(obj.Lexicon) }),\n  });\n}\n\nexport interface GetSpeechSynthesisTaskInput {\n  /**\n   * <p>The Amazon Polly generated identifier for a speech synthesis task.</p>\n   */\n  TaskId: string | undefined;\n}\n\nexport namespace GetSpeechSynthesisTaskInput {\n  export const filterSensitiveLog = (obj: GetSpeechSynthesisTaskInput): any => ({\n    ...obj,\n  });\n}\n\nexport enum OutputFormat {\n  JSON = \"json\",\n  MP3 = \"mp3\",\n  OGG_VORBIS = \"ogg_vorbis\",\n  PCM = \"pcm\",\n}\n\nexport enum SpeechMarkType {\n  SENTENCE = \"sentence\",\n  SSML = \"ssml\",\n  VISEME = \"viseme\",\n  WORD = \"word\",\n}\n\nexport enum TaskStatus {\n  COMPLETED = \"completed\",\n  FAILED = \"failed\",\n  IN_PROGRESS = \"inProgress\",\n  SCHEDULED = \"scheduled\",\n}\n\nexport enum TextType {\n  SSML = \"ssml\",\n  TEXT = \"text\",\n}\n\n/**\n * <p>SynthesisTask object that provides information about a speech synthesis task.</p>\n */\nexport interface SynthesisTask {\n  /**\n   * <p>Specifies the engine (<code>standard</code> or <code>neural</code>) for Amazon Polly to\n   *       use when processing input text for speech synthesis. Using a voice that is not supported for\n   *       the engine selected will result in an error.</p>\n   */\n  Engine?: Engine | string;\n\n  /**\n   * <p>The Amazon Polly generated identifier for a speech synthesis task.</p>\n   */\n  TaskId?: string;\n\n  /**\n   * <p>Current status of the individual speech synthesis task.</p>\n   */\n  TaskStatus?: TaskStatus | string;\n\n  /**\n   * <p>Reason for the current status of a specific speech synthesis task, including errors if the\n   *       task has failed.</p>\n   */\n  TaskStatusReason?: string;\n\n  /**\n   * <p>Pathway for the output speech file.</p>\n   */\n  OutputUri?: string;\n\n  /**\n   * <p>Timestamp for the time the synthesis task was started.</p>\n   */\n  CreationTime?: Date;\n\n  /**\n   * <p>Number of billable characters synthesized.</p>\n   */\n  RequestCharacters?: number;\n\n  /**\n   * <p>ARN for the SNS topic optionally used for providing status notification for a speech\n   *       synthesis task.</p>\n   */\n  SnsTopicArn?: string;\n\n  /**\n   * <p>List of one or more pronunciation lexicon names you want the service to apply during\n   *       synthesis. Lexicons are applied only if the language of the lexicon is the same as the\n   *       language of the voice. </p>\n   */\n  LexiconNames?: string[];\n\n  /**\n   * <p>The format in which the returned output will be encoded. For audio stream, this will be\n   *       mp3, ogg_vorbis, or pcm. For speech marks, this will be json. </p>\n   */\n  OutputFormat?: OutputFormat | string;\n\n  /**\n   * <p>The audio frequency specified in Hz.</p>\n   *          <p>The valid values for mp3 and ogg_vorbis are \"8000\", \"16000\", \"22050\", and \"24000\". The\n   *       default value for standard voices is \"22050\". The default value for neural voices is\n   *       \"24000\".</p>\n   *          <p>Valid values for pcm are \"8000\" and \"16000\" The default value is \"16000\". </p>\n   */\n  SampleRate?: string;\n\n  /**\n   * <p>The type of speech marks returned for the input text.</p>\n   */\n  SpeechMarkTypes?: (SpeechMarkType | string)[];\n\n  /**\n   * <p>Specifies whether the input text is plain text or SSML. The default value is plain text.\n   *     </p>\n   */\n  TextType?: TextType | string;\n\n  /**\n   * <p>Voice ID to use for the synthesis. </p>\n   */\n  VoiceId?: VoiceId | string;\n\n  /**\n   * <p>Optional language code for a synthesis task. This is only necessary if using a bilingual\n   *       voice, such as Aditi, which can be used for either Indian English (en-IN) or Hindi (hi-IN). </p>\n   *          <p>If a bilingual voice is used and no language code is specified, Amazon Polly will use the\n   *       default language of the bilingual voice. The default language for any voice is the one\n   *       returned by the <a href=\"https://docs.aws.amazon.com/polly/latest/dg/API_DescribeVoices.html\">DescribeVoices</a> operation for the <code>LanguageCode</code> parameter. For example,\n   *       if no language code is specified, Aditi will use Indian English rather than Hindi.</p>\n   */\n  LanguageCode?: LanguageCode | string;\n}\n\nexport namespace SynthesisTask {\n  export const filterSensitiveLog = (obj: SynthesisTask): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetSpeechSynthesisTaskOutput {\n  /**\n   * <p>SynthesisTask object that provides information from the requested task, including output\n   *       format, creation time, task status, and so on.</p>\n   */\n  SynthesisTask?: SynthesisTask;\n}\n\nexport namespace GetSpeechSynthesisTaskOutput {\n  export const filterSensitiveLog = (obj: GetSpeechSynthesisTaskOutput): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The provided Task ID is not valid. Please provide a valid Task ID and try again.</p>\n */\nexport interface InvalidTaskIdException extends __SmithyException, $MetadataBearer {\n  name: \"InvalidTaskIdException\";\n  $fault: \"client\";\n  message?: string;\n}\n\nexport namespace InvalidTaskIdException {\n  export const filterSensitiveLog = (obj: InvalidTaskIdException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The Speech Synthesis task with requested Task ID cannot be found.</p>\n */\nexport interface SynthesisTaskNotFoundException extends __SmithyException, $MetadataBearer {\n  name: \"SynthesisTaskNotFoundException\";\n  $fault: \"client\";\n  message?: string;\n}\n\nexport namespace SynthesisTaskNotFoundException {\n  export const filterSensitiveLog = (obj: SynthesisTaskNotFoundException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Amazon Polly can't find the specified lexicon. Verify that the lexicon's name is\n *       spelled correctly, and then try again.</p>\n */\nexport interface InvalidLexiconException extends __SmithyException, $MetadataBearer {\n  name: \"InvalidLexiconException\";\n  $fault: \"client\";\n  message?: string;\n}\n\nexport namespace InvalidLexiconException {\n  export const filterSensitiveLog = (obj: InvalidLexiconException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The provided Amazon S3 bucket name is invalid. Please check your input with S3 bucket\n *       naming requirements and try again.</p>\n */\nexport interface InvalidS3BucketException extends __SmithyException, $MetadataBearer {\n  name: \"InvalidS3BucketException\";\n  $fault: \"client\";\n  message?: string;\n}\n\nexport namespace InvalidS3BucketException {\n  export const filterSensitiveLog = (obj: InvalidS3BucketException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The provided Amazon S3 key prefix is invalid. Please provide a valid S3 object key\n *       name.</p>\n */\nexport interface InvalidS3KeyException extends __SmithyException, $MetadataBearer {\n  name: \"InvalidS3KeyException\";\n  $fault: \"client\";\n  message?: string;\n}\n\nexport namespace InvalidS3KeyException {\n  export const filterSensitiveLog = (obj: InvalidS3KeyException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The specified sample rate is not valid.</p>\n */\nexport interface InvalidSampleRateException extends __SmithyException, $MetadataBearer {\n  name: \"InvalidSampleRateException\";\n  $fault: \"client\";\n  message?: string;\n}\n\nexport namespace InvalidSampleRateException {\n  export const filterSensitiveLog = (obj: InvalidSampleRateException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The provided SNS topic ARN is invalid. Please provide a valid SNS topic ARN and try\n *       again.</p>\n */\nexport interface InvalidSnsTopicArnException extends __SmithyException, $MetadataBearer {\n  name: \"InvalidSnsTopicArnException\";\n  $fault: \"client\";\n  message?: string;\n}\n\nexport namespace InvalidSnsTopicArnException {\n  export const filterSensitiveLog = (obj: InvalidSnsTopicArnException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The SSML you provided is invalid. Verify the SSML syntax, spelling of tags and values,\n *       and then try again.</p>\n */\nexport interface InvalidSsmlException extends __SmithyException, $MetadataBearer {\n  name: \"InvalidSsmlException\";\n  $fault: \"client\";\n  message?: string;\n}\n\nexport namespace InvalidSsmlException {\n  export const filterSensitiveLog = (obj: InvalidSsmlException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The language specified is not currently supported by Amazon Polly in this capacity.</p>\n */\nexport interface LanguageNotSupportedException extends __SmithyException, $MetadataBearer {\n  name: \"LanguageNotSupportedException\";\n  $fault: \"client\";\n  message?: string;\n}\n\nexport namespace LanguageNotSupportedException {\n  export const filterSensitiveLog = (obj: LanguageNotSupportedException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Describes the content of the lexicon.</p>\n */\nexport interface LexiconDescription {\n  /**\n   * <p>Name of the lexicon.</p>\n   */\n  Name?: string;\n\n  /**\n   * <p>Provides lexicon metadata.</p>\n   */\n  Attributes?: LexiconAttributes;\n}\n\nexport namespace LexiconDescription {\n  export const filterSensitiveLog = (obj: LexiconDescription): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The maximum size of the specified lexicon would be exceeded by this\n *       operation.</p>\n */\nexport interface LexiconSizeExceededException extends __SmithyException, $MetadataBearer {\n  name: \"LexiconSizeExceededException\";\n  $fault: \"client\";\n  message?: string;\n}\n\nexport namespace LexiconSizeExceededException {\n  export const filterSensitiveLog = (obj: LexiconSizeExceededException): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListLexiconsInput {\n  /**\n   * <p>An opaque pagination token returned from previous <code>ListLexicons</code> operation.\n   *       If present, indicates where to continue the list of lexicons.</p>\n   */\n  NextToken?: string;\n}\n\nexport namespace ListLexiconsInput {\n  export const filterSensitiveLog = (obj: ListLexiconsInput): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListLexiconsOutput {\n  /**\n   * <p>A list of lexicon names and attributes.</p>\n   */\n  Lexicons?: LexiconDescription[];\n\n  /**\n   * <p>The pagination token to use in the next request to continue the listing of lexicons.\n   *         <code>NextToken</code> is returned only if the response is truncated.</p>\n   */\n  NextToken?: string;\n}\n\nexport namespace ListLexiconsOutput {\n  export const filterSensitiveLog = (obj: ListLexiconsOutput): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListSpeechSynthesisTasksInput {\n  /**\n   * <p>Maximum number of speech synthesis tasks returned in a List operation.</p>\n   */\n  MaxResults?: number;\n\n  /**\n   * <p>The pagination token to use in the next request to continue the listing of speech\n   *       synthesis tasks. </p>\n   */\n  NextToken?: string;\n\n  /**\n   * <p>Status of the speech synthesis tasks returned in a List operation</p>\n   */\n  Status?: TaskStatus | string;\n}\n\nexport namespace ListSpeechSynthesisTasksInput {\n  export const filterSensitiveLog = (obj: ListSpeechSynthesisTasksInput): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListSpeechSynthesisTasksOutput {\n  /**\n   * <p>An opaque pagination token returned from the previous List operation in this request. If\n   *       present, this indicates where to continue the listing.</p>\n   */\n  NextToken?: string;\n\n  /**\n   * <p>List of SynthesisTask objects that provides information from the specified task in the\n   *       list request, including output format, creation time, task status, and so on.</p>\n   */\n  SynthesisTasks?: SynthesisTask[];\n}\n\nexport namespace ListSpeechSynthesisTasksOutput {\n  export const filterSensitiveLog = (obj: ListSpeechSynthesisTasksOutput): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Speech marks are not supported for the <code>OutputFormat</code> selected. Speech marks\n *       are only available for content in <code>json</code> format.</p>\n */\nexport interface MarksNotSupportedForFormatException extends __SmithyException, $MetadataBearer {\n  name: \"MarksNotSupportedForFormatException\";\n  $fault: \"client\";\n  message?: string;\n}\n\nexport namespace MarksNotSupportedForFormatException {\n  export const filterSensitiveLog = (obj: MarksNotSupportedForFormatException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The maximum size of the lexeme would be exceeded by this operation.</p>\n */\nexport interface MaxLexemeLengthExceededException extends __SmithyException, $MetadataBearer {\n  name: \"MaxLexemeLengthExceededException\";\n  $fault: \"client\";\n  message?: string;\n}\n\nexport namespace MaxLexemeLengthExceededException {\n  export const filterSensitiveLog = (obj: MaxLexemeLengthExceededException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The maximum number of lexicons would be exceeded by this operation.</p>\n */\nexport interface MaxLexiconsNumberExceededException extends __SmithyException, $MetadataBearer {\n  name: \"MaxLexiconsNumberExceededException\";\n  $fault: \"client\";\n  message?: string;\n}\n\nexport namespace MaxLexiconsNumberExceededException {\n  export const filterSensitiveLog = (obj: MaxLexiconsNumberExceededException): any => ({\n    ...obj,\n  });\n}\n\nexport interface PutLexiconInput {\n  /**\n   * <p>Name of the lexicon. The name must follow the regular express format [0-9A-Za-z]{1,20}.\n   *       That is, the name is a case-sensitive alphanumeric string up to 20 characters long. </p>\n   */\n  Name: string | undefined;\n\n  /**\n   * <p>Content of the PLS lexicon as string data.</p>\n   */\n  Content: string | undefined;\n}\n\nexport namespace PutLexiconInput {\n  export const filterSensitiveLog = (obj: PutLexiconInput): any => ({\n    ...obj,\n    ...(obj.Content && { Content: SENSITIVE_STRING }),\n  });\n}\n\nexport interface PutLexiconOutput {}\n\nexport namespace PutLexiconOutput {\n  export const filterSensitiveLog = (obj: PutLexiconOutput): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The alphabet specified by the lexicon is not a supported alphabet. Valid values are\n *         <code>x-sampa</code> and <code>ipa</code>.</p>\n */\nexport interface UnsupportedPlsAlphabetException extends __SmithyException, $MetadataBearer {\n  name: \"UnsupportedPlsAlphabetException\";\n  $fault: \"client\";\n  message?: string;\n}\n\nexport namespace UnsupportedPlsAlphabetException {\n  export const filterSensitiveLog = (obj: UnsupportedPlsAlphabetException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The language specified in the lexicon is unsupported. For a list of supported\n *       languages, see <a href=\"https://docs.aws.amazon.com/polly/latest/dg/API_LexiconAttributes.html\">Lexicon\n *         Attributes</a>.</p>\n */\nexport interface UnsupportedPlsLanguageException extends __SmithyException, $MetadataBearer {\n  name: \"UnsupportedPlsLanguageException\";\n  $fault: \"client\";\n  message?: string;\n}\n\nexport namespace UnsupportedPlsLanguageException {\n  export const filterSensitiveLog = (obj: UnsupportedPlsLanguageException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>SSML speech marks are not supported for plain text-type input.</p>\n */\nexport interface SsmlMarksNotSupportedForTextTypeException extends __SmithyException, $MetadataBearer {\n  name: \"SsmlMarksNotSupportedForTextTypeException\";\n  $fault: \"client\";\n  message?: string;\n}\n\nexport namespace SsmlMarksNotSupportedForTextTypeException {\n  export const filterSensitiveLog = (obj: SsmlMarksNotSupportedForTextTypeException): any => ({\n    ...obj,\n  });\n}\n\nexport interface StartSpeechSynthesisTaskInput {\n  /**\n   * <p>Specifies the engine (<code>standard</code> or <code>neural</code>) for Amazon Polly to\n   *       use when processing input text for speech synthesis. Using a voice that is not supported for\n   *       the engine selected will result in an error.</p>\n   */\n  Engine?: Engine | string;\n\n  /**\n   * <p>Optional language code for the Speech Synthesis request. This is only necessary if using a\n   *       bilingual voice, such as Aditi, which can be used for either Indian English (en-IN) or Hindi\n   *       (hi-IN). </p>\n   *          <p>If a bilingual voice is used and no language code is specified, Amazon Polly will use the\n   *       default language of the bilingual voice. The default language for any voice is the one\n   *       returned by the <a href=\"https://docs.aws.amazon.com/polly/latest/dg/API_DescribeVoices.html\">DescribeVoices</a> operation for the <code>LanguageCode</code> parameter. For example,\n   *       if no language code is specified, Aditi will use Indian English rather than Hindi.</p>\n   */\n  LanguageCode?: LanguageCode | string;\n\n  /**\n   * <p>List of one or more pronunciation lexicon names you want the service to apply during\n   *       synthesis. Lexicons are applied only if the language of the lexicon is the same as the\n   *       language of the voice. </p>\n   */\n  LexiconNames?: string[];\n\n  /**\n   * <p>The format in which the returned output will be encoded. For audio stream, this will be\n   *       mp3, ogg_vorbis, or pcm. For speech marks, this will be json. </p>\n   */\n  OutputFormat: OutputFormat | string | undefined;\n\n  /**\n   * <p>Amazon S3 bucket name to which the output file will be saved.</p>\n   */\n  OutputS3BucketName: string | undefined;\n\n  /**\n   * <p>The Amazon S3 key prefix for the output speech file.</p>\n   */\n  OutputS3KeyPrefix?: string;\n\n  /**\n   * <p>The audio frequency specified in Hz.</p>\n   *          <p>The valid values for mp3 and ogg_vorbis are \"8000\", \"16000\", \"22050\", and \"24000\". The\n   *       default value for standard voices is \"22050\". The default value for neural voices is\n   *       \"24000\".</p>\n   *          <p>Valid values for pcm are \"8000\" and \"16000\" The default value is \"16000\". </p>\n   */\n  SampleRate?: string;\n\n  /**\n   * <p>ARN for the SNS topic optionally used for providing status notification for a speech\n   *       synthesis task.</p>\n   */\n  SnsTopicArn?: string;\n\n  /**\n   * <p>The type of speech marks returned for the input text.</p>\n   */\n  SpeechMarkTypes?: (SpeechMarkType | string)[];\n\n  /**\n   * <p>The input text to synthesize. If you specify ssml as the TextType, follow the SSML format\n   *       for the input text. </p>\n   */\n  Text: string | undefined;\n\n  /**\n   * <p>Specifies whether the input text is plain text or SSML. The default value is plain text.\n   *     </p>\n   */\n  TextType?: TextType | string;\n\n  /**\n   * <p>Voice ID to use for the synthesis. </p>\n   */\n  VoiceId: VoiceId | string | undefined;\n}\n\nexport namespace StartSpeechSynthesisTaskInput {\n  export const filterSensitiveLog = (obj: StartSpeechSynthesisTaskInput): any => ({\n    ...obj,\n  });\n}\n\nexport interface StartSpeechSynthesisTaskOutput {\n  /**\n   * <p>SynthesisTask object that provides information and attributes about a newly submitted\n   *       speech synthesis task.</p>\n   */\n  SynthesisTask?: SynthesisTask;\n}\n\nexport namespace StartSpeechSynthesisTaskOutput {\n  export const filterSensitiveLog = (obj: StartSpeechSynthesisTaskOutput): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The value of the \"Text\" parameter is longer than the accepted limits. For the\n *         <code>SynthesizeSpeech</code> API, the limit for input text is a maximum of 6000 characters\n *       total, of which no more than 3000 can be billed characters. For the\n *         <code>StartSpeechSynthesisTask</code> API, the maximum is 200,000 characters, of which no\n *       more than 100,000 can be billed characters. SSML tags are not counted as billed\n *       characters.</p>\n */\nexport interface TextLengthExceededException extends __SmithyException, $MetadataBearer {\n  name: \"TextLengthExceededException\";\n  $fault: \"client\";\n  message?: string;\n}\n\nexport namespace TextLengthExceededException {\n  export const filterSensitiveLog = (obj: TextLengthExceededException): any => ({\n    ...obj,\n  });\n}\n\nexport interface SynthesizeSpeechInput {\n  /**\n   * <p>Specifies the engine (<code>standard</code> or <code>neural</code>) for Amazon Polly to\n   *       use when processing input text for speech synthesis. For information on Amazon Polly voices and which voices are available in standard-only, NTTS-only, and\n   *       both standard and NTTS formats, see <a href=\"https://docs.aws.amazon.com/polly/latest/dg/voicelist.html\">Available Voices</a>.</p>\n   *          <p>\n   *             <b>NTTS-only voices</b>\n   *          </p>\n   *          <p>When using NTTS-only voices such as Kevin (en-US), this parameter is required and must be\n   *       set to <code>neural</code>. If the engine is not specified, or is set to <code>standard</code>,\n   *       this will result in an error. </p>\n   *          <p>Type: String</p>\n   *          <p>Valid Values: <code>standard</code>  |  <code>neural</code>\n   *          </p>\n   *          <p>Required: Yes</p>\n   *\n   *          <p>\n   *             <b>Standard voices</b>\n   *          </p>\n   *          <p>For standard voices, this is not required; the engine parameter defaults to\n   *       <code>standard</code>. If the engine is not specified, or is set to <code>standard</code> and\n   *       an NTTS-only voice is selected, this will result in an error. </p>\n   */\n  Engine?: Engine | string;\n\n  /**\n   * <p>Optional language code for the Synthesize Speech request. This is only necessary if using\n   *       a bilingual voice, such as Aditi, which can be used for either Indian English (en-IN) or Hindi\n   *       (hi-IN). </p>\n   *          <p>If a bilingual voice is used and no language code is specified, Amazon Polly will use the\n   *       default language of the bilingual voice. The default language for any voice is the one\n   *       returned by the <a href=\"https://docs.aws.amazon.com/polly/latest/dg/API_DescribeVoices.html\">DescribeVoices</a> operation for the <code>LanguageCode</code> parameter. For example,\n   *       if no language code is specified, Aditi will use Indian English rather than Hindi.</p>\n   */\n  LanguageCode?: LanguageCode | string;\n\n  /**\n   * <p>List of one or more pronunciation lexicon names you want the service to apply during\n   *       synthesis. Lexicons are applied only if the language of the lexicon is the same as the\n   *       language of the voice. For information about storing lexicons, see <a href=\"https://docs.aws.amazon.com/polly/latest/dg/API_PutLexicon.html\">PutLexicon</a>.</p>\n   */\n  LexiconNames?: string[];\n\n  /**\n   * <p> The format in which the returned output will be encoded. For audio stream, this will\n   *       be mp3, ogg_vorbis, or pcm. For speech marks, this will be json. </p>\n   *          <p>When pcm is used, the content returned is audio/pcm in a signed 16-bit, 1 channel\n   *       (mono), little-endian format. </p>\n   */\n  OutputFormat: OutputFormat | string | undefined;\n\n  /**\n   * <p>The audio frequency specified in Hz.</p>\n   *          <p>The valid values for mp3 and ogg_vorbis are \"8000\", \"16000\", \"22050\", and \"24000\". The\n   *       default value for standard voices is \"22050\". The default value for neural voices is\n   *       \"24000\".</p>\n   *          <p>Valid values for pcm are \"8000\" and \"16000\" The default value is \"16000\". </p>\n   */\n  SampleRate?: string;\n\n  /**\n   * <p>The type of speech marks returned for the input text.</p>\n   */\n  SpeechMarkTypes?: (SpeechMarkType | string)[];\n\n  /**\n   * <p> Input text to synthesize. If you specify <code>ssml</code> as the\n   *         <code>TextType</code>, follow the SSML format for the input text. </p>\n   */\n  Text: string | undefined;\n\n  /**\n   * <p> Specifies whether the input text is plain text or SSML. The default value is plain\n   *       text. For more information, see <a href=\"https://docs.aws.amazon.com/polly/latest/dg/ssml.html\">Using SSML</a>.</p>\n   */\n  TextType?: TextType | string;\n\n  /**\n   * <p> Voice ID to use for the synthesis. You can get a list of available voice IDs by\n   *       calling the <a href=\"https://docs.aws.amazon.com/polly/latest/dg/API_DescribeVoices.html\">DescribeVoices</a> operation. </p>\n   */\n  VoiceId: VoiceId | string | undefined;\n}\n\nexport namespace SynthesizeSpeechInput {\n  export const filterSensitiveLog = (obj: SynthesizeSpeechInput): any => ({\n    ...obj,\n  });\n}\n\nexport interface SynthesizeSpeechOutput {\n  /**\n   * <p> Stream containing the synthesized speech. </p>\n   */\n  AudioStream?: Readable | ReadableStream | Blob;\n\n  /**\n   * <p> Specifies the type audio stream. This should reflect the <code>OutputFormat</code>\n   *       parameter in your request. </p>\n   *          <ul>\n   *             <li>\n   *                <p> If you request <code>mp3</code> as the <code>OutputFormat</code>, the\n   *             <code>ContentType</code> returned is audio/mpeg. </p>\n   *             </li>\n   *             <li>\n   *                <p> If you request <code>ogg_vorbis</code> as the <code>OutputFormat</code>, the\n   *             <code>ContentType</code> returned is audio/ogg. </p>\n   *             </li>\n   *             <li>\n   *                <p> If you request <code>pcm</code> as the <code>OutputFormat</code>, the\n   *             <code>ContentType</code> returned is audio/pcm in a signed 16-bit, 1 channel (mono),\n   *           little-endian format. </p>\n   *             </li>\n   *             <li>\n   *                <p>If you request <code>json</code> as the <code>OutputFormat</code>, the\n   *             <code>ContentType</code> returned is audio/json.</p>\n   *             </li>\n   *          </ul>\n   *          <p> </p>\n   */\n  ContentType?: string;\n\n  /**\n   * <p>Number of characters synthesized.</p>\n   */\n  RequestCharacters?: number;\n}\n\nexport namespace SynthesizeSpeechOutput {\n  export const filterSensitiveLog = (obj: SynthesizeSpeechOutput): any => ({\n    ...obj,\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}