{"ast":null,"code":"import { __values } from \"tslib\";\nimport { ProviderError } from \"./ProviderError\";\n/**\n * Compose a single credential provider function from multiple credential\n * providers. The first provider in the argument list will always be invoked;\n * subsequent providers in the list will be invoked in the order in which the\n * were received if the preceding provider did not successfully resolve.\n *\n * If no providers were received or no provider resolves successfully, the\n * returned promise will be rejected.\n */\nexport function chain() {\n  var providers = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    providers[_i] = arguments[_i];\n  }\n  return function () {\n    var e_1, _a;\n    var promise = Promise.reject(new ProviderError(\"No providers in chain\"));\n    var _loop_1 = function (provider) {\n      promise = promise.catch(function (err) {\n        if (err === null || err === void 0 ? void 0 : err.tryNextLink) {\n          return provider();\n        }\n        throw err;\n      });\n    };\n    try {\n      for (var providers_1 = __values(providers), providers_1_1 = providers_1.next(); !providers_1_1.done; providers_1_1 = providers_1.next()) {\n        var provider = providers_1_1.value;\n        _loop_1(provider);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (providers_1_1 && !providers_1_1.done && (_a = providers_1.return)) _a.call(providers_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    return promise;\n  };\n}","map":{"version":3,"names":["ProviderError","chain","providers","_i","arguments","length","promise","Promise","reject","provider","catch","err","tryNextLink","providers_1","__values","providers_1_1","next","done","value"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-sdk/property-provider/src/chain.ts"],"sourcesContent":["import { Provider } from \"@aws-sdk/types\";\n\nimport { ProviderError } from \"./ProviderError\";\n\n/**\n * Compose a single credential provider function from multiple credential\n * providers. The first provider in the argument list will always be invoked;\n * subsequent providers in the list will be invoked in the order in which the\n * were received if the preceding provider did not successfully resolve.\n *\n * If no providers were received or no provider resolves successfully, the\n * returned promise will be rejected.\n */\nexport function chain<T>(...providers: Array<Provider<T>>): Provider<T> {\n  return () => {\n    let promise: Promise<T> = Promise.reject(new ProviderError(\"No providers in chain\"));\n    for (const provider of providers) {\n      promise = promise.catch((err: any) => {\n        if (err?.tryNextLink) {\n          return provider();\n        }\n\n        throw err;\n      });\n    }\n\n    return promise;\n  };\n}\n"],"mappings":";AAEA,SAASA,aAAa,QAAQ,iBAAiB;AAE/C;;;;;;;;;AASA,OAAM,SAAUC,KAAKA,CAAA;EAAI,IAAAC,SAAA;OAAA,IAAAC,EAAA,IAAgC,EAAhCA,EAAA,GAAAC,SAAA,CAAAC,MAAgC,EAAhCF,EAAA,EAAgC;IAAhCD,SAAA,CAAAC,EAAA,IAAAC,SAAA,CAAAD,EAAA;;EACvB,OAAO;;IACL,IAAIG,OAAO,GAAeC,OAAO,CAACC,MAAM,CAAC,IAAIR,aAAa,CAAC,uBAAuB,CAAC,CAAC;4BACzES,QAAQ;MACjBH,OAAO,GAAGA,OAAO,CAACI,KAAK,CAAC,UAACC,GAAQ;QAC/B,IAAIA,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEC,WAAW,EAAE;UACpB,OAAOH,QAAQ,EAAE;;QAGnB,MAAME,GAAG;MACX,CAAC,CAAC;;;MAPJ,KAAuB,IAAAE,WAAA,GAAAC,QAAA,CAAAZ,SAAS,GAAAa,aAAA,GAAAF,WAAA,CAAAG,IAAA,KAAAD,aAAA,CAAAE,IAAA,EAAAF,aAAA,GAAAF,WAAA,CAAAG,IAAA;QAA3B,IAAMP,QAAQ,GAAAM,aAAA,CAAAG,KAAA;gBAART,QAAQ;;;;;;;;;;;;;IAUnB,OAAOH,OAAO;EAChB,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}