{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexport var MAX_DELAY_MS = 5000;\nexport var NON_RETRYABLE_CODES = [400, 401, 403];\nexport var CONNECTION_STATE_CHANGE = 'ConnectionStateChange';\nexport var MESSAGE_TYPES;\n(function (MESSAGE_TYPES) {\n  /**\n   * Client -> Server message.\n   * This message type is the first message after handshake and this will initialize AWS AppSync RealTime communication\n   */\n  MESSAGE_TYPES[\"GQL_CONNECTION_INIT\"] = \"connection_init\";\n  /**\n   * Server -> Client message\n   * This message type is in case there is an issue with AWS AppSync RealTime when establishing connection\n   */\n  MESSAGE_TYPES[\"GQL_CONNECTION_ERROR\"] = \"connection_error\";\n  /**\n   * Server -> Client message.\n   * This message type is for the ack response from AWS AppSync RealTime for GQL_CONNECTION_INIT message\n   */\n  MESSAGE_TYPES[\"GQL_CONNECTION_ACK\"] = \"connection_ack\";\n  /**\n   * Client -> Server message.\n   * This message type is for register subscriptions with AWS AppSync RealTime\n   */\n  MESSAGE_TYPES[\"GQL_START\"] = \"start\";\n  /**\n   * Server -> Client message.\n   * This message type is for the ack response from AWS AppSync RealTime for GQL_START message\n   */\n  MESSAGE_TYPES[\"GQL_START_ACK\"] = \"start_ack\";\n  /**\n   * Server -> Client message.\n   * This message type is for subscription message from AWS AppSync RealTime\n   */\n  MESSAGE_TYPES[\"GQL_DATA\"] = \"data\";\n  /**\n   * Server -> Client message.\n   * This message type helps the client to know is still receiving messages from AWS AppSync RealTime\n   */\n  MESSAGE_TYPES[\"GQL_CONNECTION_KEEP_ALIVE\"] = \"ka\";\n  /**\n   * Client -> Server message.\n   * This message type is for unregister subscriptions with AWS AppSync RealTime\n   */\n  MESSAGE_TYPES[\"GQL_STOP\"] = \"stop\";\n  /**\n   * Server -> Client message.\n   * This message type is for the ack response from AWS AppSync RealTime for GQL_STOP message\n   */\n  MESSAGE_TYPES[\"GQL_COMPLETE\"] = \"complete\";\n  /**\n   * Server -> Client message.\n   * This message type is for sending error messages from AWS AppSync RealTime to the client\n   */\n  MESSAGE_TYPES[\"GQL_ERROR\"] = \"error\";\n})(MESSAGE_TYPES || (MESSAGE_TYPES = {}));\nexport var SUBSCRIPTION_STATUS;\n(function (SUBSCRIPTION_STATUS) {\n  SUBSCRIPTION_STATUS[SUBSCRIPTION_STATUS[\"PENDING\"] = 0] = \"PENDING\";\n  SUBSCRIPTION_STATUS[SUBSCRIPTION_STATUS[\"CONNECTED\"] = 1] = \"CONNECTED\";\n  SUBSCRIPTION_STATUS[SUBSCRIPTION_STATUS[\"FAILED\"] = 2] = \"FAILED\";\n})(SUBSCRIPTION_STATUS || (SUBSCRIPTION_STATUS = {}));\nexport var SOCKET_STATUS;\n(function (SOCKET_STATUS) {\n  SOCKET_STATUS[SOCKET_STATUS[\"CLOSED\"] = 0] = \"CLOSED\";\n  SOCKET_STATUS[SOCKET_STATUS[\"READY\"] = 1] = \"READY\";\n  SOCKET_STATUS[SOCKET_STATUS[\"CONNECTING\"] = 2] = \"CONNECTING\";\n})(SOCKET_STATUS || (SOCKET_STATUS = {}));\nexport var AMPLIFY_SYMBOL = typeof Symbol !== 'undefined' && typeof Symbol.for === 'function' ? Symbol.for('amplify_default') : '@@amplify_default';\nexport var AWS_APPSYNC_REALTIME_HEADERS = {\n  accept: 'application/json, text/javascript',\n  'content-encoding': 'amz-1.0',\n  'content-type': 'application/json; charset=UTF-8'\n};\n/**\n * Time in milleseconds to wait for GQL_CONNECTION_INIT message\n */\nexport var CONNECTION_INIT_TIMEOUT = 15000;\n/**\n * Time in milleseconds to wait for GQL_START_ACK message\n */\nexport var START_ACK_TIMEOUT = 15000;\n/**\n * Default Time in milleseconds to wait for GQL_CONNECTION_KEEP_ALIVE message\n */\nexport var DEFAULT_KEEP_ALIVE_TIMEOUT = 5 * 60 * 1000;\n/**\n * Default Time in milleseconds to alert for missed GQL_CONNECTION_KEEP_ALIVE message\n */\nexport var DEFAULT_KEEP_ALIVE_ALERT_TIMEOUT = 65 * 1000;\n/**\n * Default delay time in milleseconds between when reconnect is triggered vs when it is attempted\n */\nexport var RECONNECT_DELAY = 5 * 1000;\n/**\n * Default interval time in milleseconds between when reconnect is re-attempted\n */\nexport var RECONNECT_INTERVAL = 60 * 1000;","map":{"version":3,"names":["MAX_DELAY_MS","NON_RETRYABLE_CODES","CONNECTION_STATE_CHANGE","MESSAGE_TYPES","SUBSCRIPTION_STATUS","SOCKET_STATUS","AMPLIFY_SYMBOL","Symbol","for","AWS_APPSYNC_REALTIME_HEADERS","accept","CONNECTION_INIT_TIMEOUT","START_ACK_TIMEOUT","DEFAULT_KEEP_ALIVE_TIMEOUT","DEFAULT_KEEP_ALIVE_ALERT_TIMEOUT","RECONNECT_DELAY","RECONNECT_INTERVAL"],"sources":["../../src/Providers/constants.ts"],"sourcesContent":[null],"mappings":"AAAA;AACA;AACA,OAAO,IAAMA,YAAY,GAAG,IAAI;AAEhC,OAAO,IAAMC,mBAAmB,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;AAElD,OAAO,IAAMC,uBAAuB,GAAG,uBAAuB;AAE9D,WAAYC,aAmDX;AAnDD,WAAYA,aAAa;EACxB;;;;EAIAA,aAAA,2CAAuC;EACvC;;;;EAIAA,aAAA,6CAAyC;EACzC;;;;EAIAA,aAAA,yCAAqC;EACrC;;;;EAIAA,aAAA,uBAAmB;EACnB;;;;EAIAA,aAAA,+BAA2B;EAC3B;;;;EAIAA,aAAA,qBAAiB;EACjB;;;;EAIAA,aAAA,oCAAgC;EAChC;;;;EAIAA,aAAA,qBAAiB;EACjB;;;;EAIAA,aAAA,6BAAyB;EACzB;;;;EAIAA,aAAA,uBAAmB;AACpB,CAAC,EAnDWA,aAAa,KAAbA,aAAa;AAqDzB,WAAYC,mBAIX;AAJD,WAAYA,mBAAmB;EAC9BA,mBAAA,CAAAA,mBAAA,4BAAO;EACPA,mBAAA,CAAAA,mBAAA,gCAAS;EACTA,mBAAA,CAAAA,mBAAA,0BAAM;AACP,CAAC,EAJWA,mBAAmB,KAAnBA,mBAAmB;AAM/B,WAAYC,aAIX;AAJD,WAAYA,aAAa;EACxBA,aAAA,CAAAA,aAAA,0BAAM;EACNA,aAAA,CAAAA,aAAA,wBAAK;EACLA,aAAA,CAAAA,aAAA,kCAAU;AACX,CAAC,EAJWA,aAAa,KAAbA,aAAa;AAMzB,OAAO,IAAMC,cAAc,GAC1B,OAAOC,MAAM,KAAK,WAAW,IAAI,OAAOA,MAAM,CAACC,GAAG,KAAK,UAAU,GAC9DD,MAAM,CAACC,GAAG,CAAC,iBAAiB,CAAC,GAC7B,mBACO;AAEX,OAAO,IAAMC,4BAA4B,GAAG;EAC3CC,MAAM,EAAE,mCAAmC;EAC3C,kBAAkB,EAAE,SAAS;EAC7B,cAAc,EAAE;CAChB;AAED;;;AAGA,OAAO,IAAMC,uBAAuB,GAAG,KAAK;AAE5C;;;AAGA,OAAO,IAAMC,iBAAiB,GAAG,KAAK;AAEtC;;;AAGA,OAAO,IAAMC,0BAA0B,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI;AAEvD;;;AAGA,OAAO,IAAMC,gCAAgC,GAAG,EAAE,GAAG,IAAI;AAEzD;;;AAGA,OAAO,IAAMC,eAAe,GAAG,CAAC,GAAG,IAAI;AAEvC;;;AAGA,OAAO,IAAMC,kBAAkB,GAAG,EAAE,GAAG,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}