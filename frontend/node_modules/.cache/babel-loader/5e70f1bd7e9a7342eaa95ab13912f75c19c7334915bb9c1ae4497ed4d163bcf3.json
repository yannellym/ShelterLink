{"ast":null,"code":"var _jsxFileName = \"/Users/yannellym/Desktop/iwantapet/frontend/src/components/AllPetsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport '../styles/AllPetsPage.css';\nimport PetCard from './PetCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction AllPetsPage() {\n  _s();\n  const {\n    category\n  } = useParams();\n  const [allPets, setAllPets] = useState([]); // Store all pets\n  const [displayedPets, setDisplayedPets] = useState([]); // Store pets to display on the current page\n  const [loading, setLoading] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1); // Start at page 1\n  const petsPerPage = 20;\n  const fetchAnimalsByType = async (type, offset) => {\n    try {\n      const response = await fetch(`http://localhost:3002/api/petfinder?type=${type}&offset=${offset}&limit=${petsPerPage}`);\n      const data = await response.json();\n      console.log('API Response:', data);\n      if (data && data.animals) {\n        setAllPets(data.animals);\n        setLoading(false);\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error.message);\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    const offset = (currentPage - 1) * petsPerPage;\n    fetchAnimalsByType(category, offset);\n  }, [category, currentPage]);\n  useEffect(() => {\n    // When allPets changes, update displayedPets\n    const start = (currentPage - 1) * petsPerPage;\n    const end = start + petsPerPage;\n    setDisplayedPets(allPets.slice(start, end));\n  }, [allPets, currentPage, petsPerPage]);\n  const totalPets = allPets.length;\n  const paginate = pageNumber => {\n    setCurrentPage(pageNumber);\n  };\n  console.log('Number of pets:', totalPets);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"all-pets-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: `All ${category.charAt(0).toUpperCase() + category.slice(1)}s`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pet-list\",\n        children: displayedPets.map(pet => /*#__PURE__*/_jsxDEV(PetCard, {\n          pet: pet\n        }, pet.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pagination\",\n        children: Array.from({\n          length: Math.max(9, Math.ceil(totalPets / petsPerPage))\n        }, (_, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => paginate(index + 1),\n          children: index + 1\n        }, index + 1, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n_s(AllPetsPage, \"2m0MEMNCcTm05CdcmzsDtQug6VY=\", false, function () {\n  return [useParams];\n});\n_c = AllPetsPage;\nexport default AllPetsPage;\nvar _c;\n$RefreshReg$(_c, \"AllPetsPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","PetCard","jsxDEV","_jsxDEV","Fragment","_Fragment","AllPetsPage","_s","category","allPets","setAllPets","displayedPets","setDisplayedPets","loading","setLoading","currentPage","setCurrentPage","petsPerPage","fetchAnimalsByType","type","offset","response","fetch","data","json","console","log","animals","error","message","start","end","slice","totalPets","length","paginate","pageNumber","className","children","charAt","toUpperCase","fileName","_jsxFileName","lineNumber","columnNumber","map","pet","id","Array","from","Math","max","ceil","_","index","onClick","_c","$RefreshReg$"],"sources":["/Users/yannellym/Desktop/iwantapet/frontend/src/components/AllPetsPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport '../styles/AllPetsPage.css';\nimport PetCard from './PetCard';\n\nfunction AllPetsPage() {\n  const { category } = useParams();\n  const [allPets, setAllPets] = useState([]); // Store all pets\n  const [displayedPets, setDisplayedPets] = useState([]); // Store pets to display on the current page\n  const [loading, setLoading] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1); // Start at page 1\n  const petsPerPage = 20;\n\n  const fetchAnimalsByType = async (type, offset) => {\n    try {\n      const response = await fetch(`http://localhost:3002/api/petfinder?type=${type}&offset=${offset}&limit=${petsPerPage}`);\n      const data = await response.json();\n\n      console.log('API Response:', data);\n\n      if (data && data.animals) {\n        setAllPets(data.animals);\n        setLoading(false);\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error.message);\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    const offset = (currentPage - 1) * petsPerPage;\n    fetchAnimalsByType(category, offset);\n  }, [category, currentPage]);\n\n  useEffect(() => {\n    // When allPets changes, update displayedPets\n    const start = (currentPage - 1) * petsPerPage;\n    const end = start + petsPerPage;\n    setDisplayedPets(allPets.slice(start, end));\n  }, [allPets, currentPage, petsPerPage]);\n\n  const totalPets = allPets.length;\n\n  const paginate = (pageNumber) => {\n    setCurrentPage(pageNumber);\n  };\n\n  console.log('Number of pets:', totalPets);\n\n  return (\n    <div className=\"all-pets-page\">\n      <h2>{`All ${category.charAt(0).toUpperCase() + category.slice(1)}s`}</h2>\n      {loading ? (\n        <p>Loading...</p>\n      ) : (\n        <>\n          <div className=\"pet-list\">\n            {displayedPets.map((pet) => (\n              <PetCard key={pet.id} pet={pet} />\n            ))}\n          </div>\n          <div className=\"pagination\">\n            {Array.from({ length: Math.max(9, Math.ceil(totalPets / petsPerPage)) }, (_, index) => (\n              <button key={index + 1} onClick={() => paginate(index + 1)}>\n                {index + 1}\n              </button>\n            ))}\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default AllPetsPage;\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}