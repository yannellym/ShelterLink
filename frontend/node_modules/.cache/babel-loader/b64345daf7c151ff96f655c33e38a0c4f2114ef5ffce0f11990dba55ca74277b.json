{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { DEFAULT_MAX_ATTEMPTS, DEFAULT_RETRY_MODE, StandardRetryStrategy } from \"./defaultStrategy\";\nexport var ENV_MAX_ATTEMPTS = \"AWS_MAX_ATTEMPTS\";\nexport var CONFIG_MAX_ATTEMPTS = \"max_attempts\";\nexport var NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {\n  environmentVariableSelector: function (env) {\n    var value = env[ENV_MAX_ATTEMPTS];\n    if (!value) return undefined;\n    var maxAttempt = parseInt(value);\n    if (Number.isNaN(maxAttempt)) {\n      throw new Error(\"Environment variable \" + ENV_MAX_ATTEMPTS + \" mast be a number, got \\\"\" + value + \"\\\"\");\n    }\n    return maxAttempt;\n  },\n  configFileSelector: function (profile) {\n    var value = profile[CONFIG_MAX_ATTEMPTS];\n    if (!value) return undefined;\n    var maxAttempt = parseInt(value);\n    if (Number.isNaN(maxAttempt)) {\n      throw new Error(\"Shared config file entry \" + CONFIG_MAX_ATTEMPTS + \" mast be a number, got \\\"\" + value + \"\\\"\");\n    }\n    return maxAttempt;\n  },\n  default: DEFAULT_MAX_ATTEMPTS\n};\nexport var resolveRetryConfig = function (input) {\n  var maxAttempts = normalizeMaxAttempts(input.maxAttempts);\n  return __assign(__assign({}, input), {\n    maxAttempts: maxAttempts,\n    retryStrategy: input.retryStrategy || new StandardRetryStrategy(maxAttempts)\n  });\n};\nvar normalizeMaxAttempts = function (maxAttempts) {\n  if (maxAttempts === void 0) {\n    maxAttempts = DEFAULT_MAX_ATTEMPTS;\n  }\n  if (typeof maxAttempts === \"number\") {\n    var promisified_1 = Promise.resolve(maxAttempts);\n    return function () {\n      return promisified_1;\n    };\n  }\n  return maxAttempts;\n};\nexport var ENV_RETRY_MODE = \"AWS_RETRY_MODE\";\nexport var CONFIG_RETRY_MODE = \"retry_mode\";\nexport var NODE_RETRY_MODE_CONFIG_OPTIONS = {\n  environmentVariableSelector: function (env) {\n    return env[ENV_RETRY_MODE];\n  },\n  configFileSelector: function (profile) {\n    return profile[CONFIG_RETRY_MODE];\n  },\n  default: DEFAULT_RETRY_MODE\n};","map":{"version":3,"names":["DEFAULT_MAX_ATTEMPTS","DEFAULT_RETRY_MODE","StandardRetryStrategy","ENV_MAX_ATTEMPTS","CONFIG_MAX_ATTEMPTS","NODE_MAX_ATTEMPT_CONFIG_OPTIONS","environmentVariableSelector","env","value","undefined","maxAttempt","parseInt","Number","isNaN","Error","configFileSelector","profile","default","resolveRetryConfig","input","maxAttempts","normalizeMaxAttempts","__assign","retryStrategy","promisified_1","Promise","resolve","ENV_RETRY_MODE","CONFIG_RETRY_MODE","NODE_RETRY_MODE_CONFIG_OPTIONS"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-sdk/middleware-retry/src/configurations.ts"],"sourcesContent":["import { LoadedConfigSelectors } from \"@aws-sdk/node-config-provider\";\nimport { Provider, RetryStrategy } from \"@aws-sdk/types\";\n\nimport { DEFAULT_MAX_ATTEMPTS, DEFAULT_RETRY_MODE, StandardRetryStrategy } from \"./defaultStrategy\";\n\nexport const ENV_MAX_ATTEMPTS = \"AWS_MAX_ATTEMPTS\";\nexport const CONFIG_MAX_ATTEMPTS = \"max_attempts\";\n\nexport const NODE_MAX_ATTEMPT_CONFIG_OPTIONS: LoadedConfigSelectors<number> = {\n  environmentVariableSelector: (env) => {\n    const value = env[ENV_MAX_ATTEMPTS];\n    if (!value) return undefined;\n    const maxAttempt = parseInt(value);\n    if (Number.isNaN(maxAttempt)) {\n      throw new Error(`Environment variable ${ENV_MAX_ATTEMPTS} mast be a number, got \"${value}\"`);\n    }\n    return maxAttempt;\n  },\n  configFileSelector: (profile) => {\n    const value = profile[CONFIG_MAX_ATTEMPTS];\n    if (!value) return undefined;\n    const maxAttempt = parseInt(value);\n    if (Number.isNaN(maxAttempt)) {\n      throw new Error(`Shared config file entry ${CONFIG_MAX_ATTEMPTS} mast be a number, got \"${value}\"`);\n    }\n    return maxAttempt;\n  },\n  default: DEFAULT_MAX_ATTEMPTS,\n};\n\nexport interface RetryInputConfig {\n  /**\n   * The maximum number of times requests that encounter retryable failures should be attempted.\n   */\n  maxAttempts?: number | Provider<number>;\n  /**\n   * The strategy to retry the request. Using built-in exponential backoff strategy by default.\n   */\n  retryStrategy?: RetryStrategy;\n}\n\ninterface PreviouslyResolved {}\nexport interface RetryResolvedConfig {\n  maxAttempts: Provider<number>;\n  retryStrategy: RetryStrategy;\n}\n\nexport const resolveRetryConfig = <T>(input: T & PreviouslyResolved & RetryInputConfig): T & RetryResolvedConfig => {\n  const maxAttempts = normalizeMaxAttempts(input.maxAttempts);\n  return {\n    ...input,\n    maxAttempts,\n    retryStrategy: input.retryStrategy || new StandardRetryStrategy(maxAttempts),\n  };\n};\n\nconst normalizeMaxAttempts = (maxAttempts: number | Provider<number> = DEFAULT_MAX_ATTEMPTS): Provider<number> => {\n  if (typeof maxAttempts === \"number\") {\n    const promisified = Promise.resolve(maxAttempts);\n    return () => promisified;\n  }\n  return maxAttempts;\n};\n\nexport const ENV_RETRY_MODE = \"AWS_RETRY_MODE\";\nexport const CONFIG_RETRY_MODE = \"retry_mode\";\n\nexport const NODE_RETRY_MODE_CONFIG_OPTIONS: LoadedConfigSelectors<string> = {\n  environmentVariableSelector: (env) => env[ENV_RETRY_MODE],\n  configFileSelector: (profile) => profile[CONFIG_RETRY_MODE],\n  default: DEFAULT_RETRY_MODE,\n};\n"],"mappings":";AAGA,SAASA,oBAAoB,EAAEC,kBAAkB,EAAEC,qBAAqB,QAAQ,mBAAmB;AAEnG,OAAO,IAAMC,gBAAgB,GAAG,kBAAkB;AAClD,OAAO,IAAMC,mBAAmB,GAAG,cAAc;AAEjD,OAAO,IAAMC,+BAA+B,GAAkC;EAC5EC,2BAA2B,EAAE,SAAAA,CAACC,GAAG;IAC/B,IAAMC,KAAK,GAAGD,GAAG,CAACJ,gBAAgB,CAAC;IACnC,IAAI,CAACK,KAAK,EAAE,OAAOC,SAAS;IAC5B,IAAMC,UAAU,GAAGC,QAAQ,CAACH,KAAK,CAAC;IAClC,IAAII,MAAM,CAACC,KAAK,CAACH,UAAU,CAAC,EAAE;MAC5B,MAAM,IAAII,KAAK,CAAC,0BAAwBX,gBAAgB,iCAA2BK,KAAK,OAAG,CAAC;;IAE9F,OAAOE,UAAU;EACnB,CAAC;EACDK,kBAAkB,EAAE,SAAAA,CAACC,OAAO;IAC1B,IAAMR,KAAK,GAAGQ,OAAO,CAACZ,mBAAmB,CAAC;IAC1C,IAAI,CAACI,KAAK,EAAE,OAAOC,SAAS;IAC5B,IAAMC,UAAU,GAAGC,QAAQ,CAACH,KAAK,CAAC;IAClC,IAAII,MAAM,CAACC,KAAK,CAACH,UAAU,CAAC,EAAE;MAC5B,MAAM,IAAII,KAAK,CAAC,8BAA4BV,mBAAmB,iCAA2BI,KAAK,OAAG,CAAC;;IAErG,OAAOE,UAAU;EACnB,CAAC;EACDO,OAAO,EAAEjB;CACV;AAmBD,OAAO,IAAMkB,kBAAkB,GAAG,SAAAA,CAAIC,KAAgD;EACpF,IAAMC,WAAW,GAAGC,oBAAoB,CAACF,KAAK,CAACC,WAAW,CAAC;EAC3D,OAAAE,QAAA,CAAAA,QAAA,KACKH,KAAK;IACRC,WAAW,EAAAA,WAAA;IACXG,aAAa,EAAEJ,KAAK,CAACI,aAAa,IAAI,IAAIrB,qBAAqB,CAACkB,WAAW;EAAC;AAEhF,CAAC;AAED,IAAMC,oBAAoB,GAAG,SAAAA,CAACD,WAA6D;EAA7D,IAAAA,WAAA;IAAAA,WAAA,GAAApB,oBAA6D;EAAA;EACzF,IAAI,OAAOoB,WAAW,KAAK,QAAQ,EAAE;IACnC,IAAMI,aAAW,GAAGC,OAAO,CAACC,OAAO,CAACN,WAAW,CAAC;IAChD,OAAO;MAAM,OAAAI,aAAW;IAAX,CAAW;;EAE1B,OAAOJ,WAAW;AACpB,CAAC;AAED,OAAO,IAAMO,cAAc,GAAG,gBAAgB;AAC9C,OAAO,IAAMC,iBAAiB,GAAG,YAAY;AAE7C,OAAO,IAAMC,8BAA8B,GAAkC;EAC3EvB,2BAA2B,EAAE,SAAAA,CAACC,GAAG;IAAK,OAAAA,GAAG,CAACoB,cAAc,CAAC;EAAnB,CAAmB;EACzDZ,kBAAkB,EAAE,SAAAA,CAACC,OAAO;IAAK,OAAAA,OAAO,CAACY,iBAAiB,CAAC;EAA1B,CAA0B;EAC3DX,OAAO,EAAEhB;CACV"},"metadata":{},"sourceType":"module","externalDependencies":[]}