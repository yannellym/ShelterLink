{"ast":null,"code":"var _jsxFileName = \"/Users/yannellym/Desktop/iwantapet/frontend/src/components/AllPetsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport '../styles/AllPetsPage.css';\nimport PetCard from './PetCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AllPetsPage() {\n  _s();\n  const {\n    category\n  } = useParams();\n  const [loading, setLoading] = useState(true);\n  const [animals, setAnimals] = useState([]); // Store data directly\n  const petsPerPage = 20; // Change the number of pets per page\n  const otherAnimalTypes = [\"horse\", \"bird\", \"barnyard\"];\n  const [currentPage, setCurrentPage] = useState(1);\n  const [paginationData, setPaginationData] = useState(null);\n  const fetchAnimalsByCategory = async (category, page) => {\n    let endpoint;\n    if (category === \"dog\" || category === \"cat\") {\n      // API call for \"dog\" or \"cat\" with pagination\n      endpoint = `http://localhost:3002/api/petfinder?type=${category}&limit=${petsPerPage}&page=${page}`;\n    } else if (category === \"other\") {\n      // API call for \"other\" category\n      endpoint = `http://localhost:3002/api/petfinder?type=${category}&limit=${petsPerPage}&page=${page}`;\n    }\n    try {\n      const response = await fetch(endpoint);\n      const data = await response.json();\n      console.log(\"new data\", data);\n      if (data && data.animals) {\n        console.log(\"Received data:\", data);\n        setAnimals(data.animals); // Store data directly\n        setPaginationData(data.pagination); // Store pagination data\n        setLoading(false);\n      } else {\n        console.error(\"No animals data received.\");\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error.message);\n    }\n  };\n  useEffect(() => {\n    async function fetchData() {\n      await fetchAnimalsByCategory(category, currentPage);\n    }\n    fetchData();\n  }, [category, currentPage]);\n\n  // Function to handle page change\n  const handlePageChange = newPage => {\n    if (newPage >= 1 && newPage <= paginationData.total_pages) {\n      setCurrentPage(newPage);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"all-pets-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: `All ${category.charAt(0).toUpperCase() + category.slice(1)}s`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pet-list\",\n      children: animals.map(animal => /*#__PURE__*/_jsxDEV(PetCard, {\n        pet: animal\n      }, animal.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pagination\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handlePageChange(currentPage - 1),\n        disabled: currentPage === 1,\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: `Page ${currentPage} of ${paginationData.total_pages}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handlePageChange(currentPage + 1),\n        disabled: currentPage === paginationData.total_pages,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n_s(AllPetsPage, \"pGOD3MQ1e93gDcOpii1XxvOhVSE=\", false, function () {\n  return [useParams];\n});\n_c = AllPetsPage;\nexport default AllPetsPage;\nvar _c;\n$RefreshReg$(_c, \"AllPetsPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","PetCard","jsxDEV","_jsxDEV","AllPetsPage","_s","category","loading","setLoading","animals","setAnimals","petsPerPage","otherAnimalTypes","currentPage","setCurrentPage","paginationData","setPaginationData","fetchAnimalsByCategory","page","endpoint","response","fetch","data","json","console","log","pagination","error","message","fetchData","handlePageChange","newPage","total_pages","className","children","charAt","toUpperCase","slice","fileName","_jsxFileName","lineNumber","columnNumber","map","animal","pet","id","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/yannellym/Desktop/iwantapet/frontend/src/components/AllPetsPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport '../styles/AllPetsPage.css';\nimport PetCard from './PetCard';\n\nfunction AllPetsPage() {\n  const { category } = useParams();\n  const [loading, setLoading] = useState(true);\n  const [animals, setAnimals] = useState([]); // Store data directly\n  const petsPerPage = 20; // Change the number of pets per page\n  const otherAnimalTypes = [\"horse\", \"bird\", \"barnyard\"];\n  const [currentPage, setCurrentPage] = useState(1);\n  const [paginationData, setPaginationData] = useState(null);\n\n  const fetchAnimalsByCategory = async (category, page) => {\n    let endpoint;\n\n    if (category === \"dog\" || category === \"cat\") {\n      // API call for \"dog\" or \"cat\" with pagination\n      endpoint = `http://localhost:3002/api/petfinder?type=${category}&limit=${petsPerPage}&page=${page}`;\n    } else if (category === \"other\") {\n      // API call for \"other\" category\n      endpoint = `http://localhost:3002/api/petfinder?type=${category}&limit=${petsPerPage}&page=${page}`;\n    }\n\n    try {\n      const response = await fetch(endpoint);\n      const data = await response.json();\n      console.log(\"new data\", data);\n\n      if (data && data.animals) {\n        console.log(\"Received data:\", data);\n        setAnimals(data.animals); // Store data directly\n        setPaginationData(data.pagination); // Store pagination data\n        setLoading(false);\n      } else {\n        console.error(\"No animals data received.\");\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error.message);\n    }\n  };\n\n  useEffect(() => {\n    async function fetchData() {\n      await fetchAnimalsByCategory(category, currentPage);\n    }\n\n    fetchData();\n  }, [category, currentPage]);\n\n  // Function to handle page change\n  const handlePageChange = (newPage) => {\n    if (newPage >= 1 && newPage <= paginationData.total_pages) {\n      setCurrentPage(newPage);\n    }\n  };\n\n  return (\n    <div className=\"all-pets-page\">\n      <h2>{`All ${category.charAt(0).toUpperCase() + category.slice(1)}s`}</h2>\n      {loading ? (\n        <p>Loading...</p>\n      ) : (\n        <div className=\"pet-list\">\n          {animals.map((animal) => (\n            <PetCard key={animal.id} pet={animal} />\n          ))}\n        </div>\n      )}\n      <div className=\"pagination\">\n        <button\n          onClick={() => handlePageChange(currentPage - 1)}\n          disabled={currentPage === 1}\n        >\n          Previous\n        </button>\n        <span>{`Page ${currentPage} of ${paginationData.total_pages}`}</span>\n        <button\n          onClick={() => handlePageChange(currentPage + 1)}\n          disabled={currentPage === paginationData.total_pages}\n        >\n          Next\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default AllPetsPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}