{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { DescribeStreamCommand } from \"../commands/DescribeStreamCommand\";\nimport { WaiterState, createWaiter } from \"@aws-sdk/util-waiter\";\nvar checkState = function (client, input) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var result, exception_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          _a.trys.push([0, 2,, 3]);\n          return [4 /*yield*/, client.send(new DescribeStreamCommand(input))];\n        case 1:\n          result = _a.sent();\n          return [3 /*break*/, 3];\n        case 2:\n          exception_1 = _a.sent();\n          if (exception_1.name && exception_1.name == \"ResourceNotFoundException\") {\n            return [2 /*return*/, {\n              state: WaiterState.SUCCESS\n            }];\n          }\n          return [3 /*break*/, 3];\n        case 3:\n          return [2 /*return*/, {\n            state: WaiterState.RETRY\n          }];\n      }\n    });\n  });\n};\n/**\n *\n *  @param params : Waiter configuration options.\n *  @param input : the input to DescribeStreamCommand for polling.\n */\nexport var waitForStreamNotExists = function (params, input) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var serviceDefaults;\n    return __generator(this, function (_a) {\n      serviceDefaults = {\n        minDelay: 10,\n        maxDelay: 120\n      };\n      return [2 /*return*/, createWaiter(__assign(__assign({}, serviceDefaults), params), input, checkState)];\n    });\n  });\n};","map":{"version":3,"names":["DescribeStreamCommand","WaiterState","createWaiter","checkState","client","input","__awaiter","send","result","_a","sent","exception_1","name","state","SUCCESS","RETRY","waitForStreamNotExists","params","serviceDefaults","minDelay","maxDelay","__assign"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-sdk/client-kinesis/waiters/waitForStreamNotExists.ts"],"sourcesContent":["import { KinesisClient } from \"../KinesisClient\";\nimport { DescribeStreamCommand, DescribeStreamCommandInput } from \"../commands/DescribeStreamCommand\";\nimport { WaiterConfiguration, WaiterResult, WaiterState, createWaiter } from \"@aws-sdk/util-waiter\";\n\nconst checkState = async (client: KinesisClient, input: DescribeStreamCommandInput): Promise<WaiterResult> => {\n  try {\n    let result: any = await client.send(new DescribeStreamCommand(input));\n  } catch (exception) {\n    if (exception.name && exception.name == \"ResourceNotFoundException\") {\n      return { state: WaiterState.SUCCESS };\n    }\n  }\n  return { state: WaiterState.RETRY };\n};\n/**\n *\n *  @param params : Waiter configuration options.\n *  @param input : the input to DescribeStreamCommand for polling.\n */\nexport const waitForStreamNotExists = async (\n  params: WaiterConfiguration<KinesisClient>,\n  input: DescribeStreamCommandInput\n): Promise<WaiterResult> => {\n  const serviceDefaults = { minDelay: 10, maxDelay: 120 };\n  return createWaiter({ ...serviceDefaults, ...params }, input, checkState);\n};\n"],"mappings":";AACA,SAASA,qBAAqB,QAAoC,mCAAmC;AACrG,SAA4CC,WAAW,EAAEC,YAAY,QAAQ,sBAAsB;AAEnG,IAAMC,UAAU,GAAG,SAAAA,CAAOC,MAAqB,EAAEC,KAAiC;EAAA,OAAAC,SAAA;;;;;;UAE5D,qBAAMF,MAAM,CAACG,IAAI,CAAC,IAAIP,qBAAqB,CAACK,KAAK,CAAC,CAAC;;UAAjEG,MAAM,GAAQC,EAAA,CAAAC,IAAA,EAAmD;;;;UAErE,IAAIC,WAAS,CAACC,IAAI,IAAID,WAAS,CAACC,IAAI,IAAI,2BAA2B,EAAE;YACnE,sBAAO;cAAEC,KAAK,EAAEZ,WAAW,CAACa;YAAO,CAAE;;;;UAGzC,sBAAO;YAAED,KAAK,EAAEZ,WAAW,CAACc;UAAK,CAAE;;;;CACpC;AACD;;;;;AAKA,OAAO,IAAMC,sBAAsB,GAAG,SAAAA,CACpCC,MAA0C,EAC1CZ,KAAiC;EAAA,OAAAC,SAAA;;;MAE3BY,eAAe,GAAG;QAAEC,QAAQ,EAAE,EAAE;QAAEC,QAAQ,EAAE;MAAG,CAAE;MACvD,sBAAOlB,YAAY,CAAAmB,QAAA,CAAAA,QAAA,KAAMH,eAAe,GAAKD,MAAM,GAAIZ,KAAK,EAAEF,UAAU,CAAC;;;CAC1E"},"metadata":{},"sourceType":"module","externalDependencies":[]}