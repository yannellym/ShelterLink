{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __extends } from \"tslib\";\nimport { AnalyticsAction, ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { AWSKinesisProvider } from './AWSKinesisProvider';\nimport { PutRecordBatchCommand, FirehoseClient } from '@aws-sdk/client-firehose';\nimport { fromUtf8 } from '@aws-sdk/util-utf8-browser';\nimport { getAnalyticsUserAgent } from '../utils/UserAgent';\nvar logger = new Logger('AWSKineisFirehoseProvider');\nvar AWSKinesisFirehoseProvider = /** @class */function (_super) {\n  __extends(AWSKinesisFirehoseProvider, _super);\n  function AWSKinesisFirehoseProvider(config) {\n    return _super.call(this, config) || this;\n  }\n  /**\n   * get provider name of the plugin\n   */\n  AWSKinesisFirehoseProvider.prototype.getProviderName = function () {\n    return 'AWSKinesisFirehose';\n  };\n  AWSKinesisFirehoseProvider.prototype._sendEvents = function (group) {\n    var _this = this;\n    if (group.length === 0) {\n      return;\n    }\n    var _a = group[0],\n      config = _a.config,\n      credentials = _a.credentials;\n    var initClients = this._init(config, credentials);\n    if (!initClients) return false;\n    var records = {};\n    group.map(function (params) {\n      // split by streamName\n      var evt = params.event;\n      var streamName = evt.streamName,\n        data = evt.data;\n      if (records[streamName] === undefined) {\n        records[streamName] = [];\n      }\n      var bufferData = data && typeof data !== 'string' ? JSON.stringify(data) : data;\n      var Data = fromUtf8(bufferData);\n      var record = {\n        Data: Data\n      };\n      records[streamName].push(record);\n    });\n    Object.keys(records).map(function (streamName) {\n      logger.debug('putting records to kinesis', streamName, 'with records', records[streamName]);\n      _this._kinesisFirehose.send(new PutRecordBatchCommand({\n        Records: records[streamName],\n        DeliveryStreamName: streamName\n      })).then(function (res) {\n        return logger.debug('Upload records to stream', streamName);\n      }).catch(function (err) {\n        return logger.debug('Failed to upload records to Kinesis', err);\n      });\n    });\n  };\n  AWSKinesisFirehoseProvider.prototype._init = function (config, credentials) {\n    logger.debug('init clients');\n    if (this._kinesisFirehose && this._config.credentials && this._config.credentials.sessionToken === credentials.sessionToken && this._config.credentials.identityId === credentials.identityId) {\n      logger.debug('no change for analytics config, directly return from init');\n      return true;\n    }\n    this._config.credentials = credentials;\n    var region = config.region;\n    return this._initFirehose(region, credentials);\n  };\n  AWSKinesisFirehoseProvider.prototype._initFirehose = function (region, credentials) {\n    logger.debug('initialize kinesis firehose with credentials', credentials);\n    this._kinesisFirehose = new FirehoseClient({\n      apiVersion: '2015-08-04',\n      region: region,\n      credentials: credentials,\n      customUserAgent: getAnalyticsUserAgent(AnalyticsAction.Record)\n    });\n    return true;\n  };\n  return AWSKinesisFirehoseProvider;\n}(AWSKinesisProvider);\nexport { AWSKinesisFirehoseProvider };","map":{"version":3,"names":["AnalyticsAction","ConsoleLogger","Logger","AWSKinesisProvider","PutRecordBatchCommand","FirehoseClient","fromUtf8","getAnalyticsUserAgent","logger","AWSKinesisFirehoseProvider","_super","__extends","config","call","prototype","getProviderName","_sendEvents","group","_this","length","_a","credentials","initClients","_init","records","map","params","evt","event","streamName","data","undefined","bufferData","JSON","stringify","Data","record","push","Object","keys","debug","_kinesisFirehose","send","Records","DeliveryStreamName","then","res","catch","err","_config","sessionToken","identityId","region","_initFirehose","apiVersion","customUserAgent","Record"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-amplify/analytics/src/Providers/AWSKinesisFirehoseProvider.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AnalyticsAction, ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { AWSKinesisProvider } from './AWSKinesisProvider';\nimport {\n\tPutRecordBatchCommand,\n\tFirehoseClient,\n} from '@aws-sdk/client-firehose';\nimport { fromUtf8 } from '@aws-sdk/util-utf8-browser';\nimport { getAnalyticsUserAgent } from '../utils/UserAgent';\n\nconst logger = new Logger('AWSKineisFirehoseProvider');\n\nexport class AWSKinesisFirehoseProvider extends AWSKinesisProvider {\n\tprivate _kinesisFirehose: FirehoseClient;\n\n\tconstructor(config?) {\n\t\tsuper(config);\n\t}\n\n\t/**\n\t * get provider name of the plugin\n\t */\n\tpublic getProviderName(): string {\n\t\treturn 'AWSKinesisFirehose';\n\t}\n\n\tprotected _sendEvents(group) {\n\t\tif (group.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { config, credentials } = group[0];\n\n\t\tconst initClients = this._init(config, credentials);\n\t\tif (!initClients) return false;\n\n\t\tconst records = {};\n\n\t\tgroup.map(params => {\n\t\t\t// split by streamName\n\t\t\tconst evt = params.event;\n\t\t\tconst { streamName, data } = evt;\n\t\t\tif (records[streamName] === undefined) {\n\t\t\t\trecords[streamName] = [];\n\t\t\t}\n\n\t\t\tconst bufferData =\n\t\t\t\tdata && typeof data !== 'string' ? JSON.stringify(data) : data;\n\t\t\tconst Data = fromUtf8(bufferData);\n\t\t\tconst record = { Data };\n\t\t\trecords[streamName].push(record);\n\t\t});\n\n\t\tObject.keys(records).map(streamName => {\n\t\t\tlogger.debug(\n\t\t\t\t'putting records to kinesis',\n\t\t\t\tstreamName,\n\t\t\t\t'with records',\n\t\t\t\trecords[streamName]\n\t\t\t);\n\n\t\t\tthis._kinesisFirehose\n\t\t\t\t.send(\n\t\t\t\t\tnew PutRecordBatchCommand({\n\t\t\t\t\t\tRecords: records[streamName],\n\t\t\t\t\t\tDeliveryStreamName: streamName,\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t\t.then(res => logger.debug('Upload records to stream', streamName))\n\t\t\t\t.catch(err => logger.debug('Failed to upload records to Kinesis', err));\n\t\t});\n\t}\n\n\tprotected _init(config, credentials) {\n\t\tlogger.debug('init clients');\n\n\t\tif (\n\t\t\tthis._kinesisFirehose &&\n\t\t\tthis._config.credentials &&\n\t\t\tthis._config.credentials.sessionToken === credentials.sessionToken &&\n\t\t\tthis._config.credentials.identityId === credentials.identityId\n\t\t) {\n\t\t\tlogger.debug('no change for analytics config, directly return from init');\n\t\t\treturn true;\n\t\t}\n\n\t\tthis._config.credentials = credentials;\n\t\tconst { region } = config;\n\n\t\treturn this._initFirehose(region, credentials);\n\t}\n\n\tprivate _initFirehose(region, credentials) {\n\t\tlogger.debug('initialize kinesis firehose with credentials', credentials);\n\t\tthis._kinesisFirehose = new FirehoseClient({\n\t\t\tapiVersion: '2015-08-04',\n\t\t\tregion,\n\t\t\tcredentials,\n\t\t\tcustomUserAgent: getAnalyticsUserAgent(AnalyticsAction.Record),\n\t\t});\n\t\treturn true;\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}