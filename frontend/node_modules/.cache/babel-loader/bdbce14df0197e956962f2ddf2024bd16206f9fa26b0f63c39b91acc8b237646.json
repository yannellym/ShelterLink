{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { Amplify, ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { AWSLexProvider } from './Providers';\nvar logger = new Logger('Interactions');\nvar InteractionsClass = /** @class */function () {\n  /**\n   * Initialize PubSub with AWS configurations\n   *\n   * @param {InteractionsOptions} options - Configuration object for Interactions\n   */\n  function InteractionsClass(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    this._options = options;\n    logger.debug('Interactions Options', this._options);\n    this._pluggables = {};\n  }\n  InteractionsClass.prototype.getModuleName = function () {\n    return 'Interactions';\n  };\n  /**\n   *\n   * @param {InteractionsOptions} options - Configuration object for Interactions\n   * @return {InteractionsOptions} - The current configuration\n   */\n  InteractionsClass.prototype.configure = function (options) {\n    var _this = this;\n    var opt = options ? options.Interactions || options : {};\n    logger.debug('configure Interactions', {\n      opt: opt\n    });\n    this._options = __assign(__assign({\n      bots: {}\n    }, opt), opt.Interactions);\n    var aws_bots_config = this._options.aws_bots_config;\n    var bots_config = this._options.bots;\n    if (!Object.keys(bots_config).length && aws_bots_config) {\n      // Convert aws_bots_config to bots object\n      if (Array.isArray(aws_bots_config)) {\n        aws_bots_config.forEach(function (bot) {\n          _this._options.bots[bot.name] = bot;\n        });\n      }\n    }\n    // configure bots to their specific providers\n    Object.keys(bots_config).forEach(function (botKey) {\n      var _a;\n      var bot = bots_config[botKey];\n      var providerName = bot.providerName || 'AWSLexProvider';\n      // add default provider if required\n      if (!_this._pluggables.AWSLexProvider && providerName === 'AWSLexProvider') {\n        _this._pluggables.AWSLexProvider = new AWSLexProvider();\n      }\n      // configure bot with it's respective provider\n      if (_this._pluggables[providerName]) {\n        _this._pluggables[providerName].configure((_a = {}, _a[bot.name] = bot, _a));\n      } else {\n        logger.debug(\"bot \" + bot.name + \" was not configured as \" + providerName + \" provider was not found\");\n      }\n    });\n    return this._options;\n  };\n  InteractionsClass.prototype.addPluggable = function (pluggable) {\n    var _this = this;\n    if (pluggable && pluggable.getCategory() === 'Interactions') {\n      if (!this._pluggables[pluggable.getProviderName()]) {\n        // configure bots for the new plugin\n        Object.keys(this._options.bots).filter(function (botKey) {\n          return _this._options.bots[botKey].providerName === pluggable.getProviderName();\n        }).forEach(function (botKey) {\n          var _a;\n          var bot = _this._options.bots[botKey];\n          pluggable.configure((_a = {}, _a[bot.name] = bot, _a));\n        });\n        this._pluggables[pluggable.getProviderName()] = pluggable;\n        return;\n      } else {\n        throw new Error('Pluggable ' + pluggable.getProviderName() + ' already plugged');\n      }\n    }\n  };\n  InteractionsClass.prototype.send = function (botname, message) {\n    return __awaiter(this, void 0, void 0, function () {\n      var botProvider;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this._options.bots || !this._options.bots[botname]) {\n              return [2 /*return*/, Promise.reject('Bot ' + botname + ' does not exist')];\n            }\n            botProvider = this._options.bots[botname].providerName || 'AWSLexProvider';\n            if (!this._pluggables[botProvider]) {\n              return [2 /*return*/, Promise.reject('Bot ' + botProvider + ' does not have valid pluggin did you try addPluggable first?')];\n            }\n            return [4 /*yield*/, this._pluggables[botProvider].sendMessage(botname, message)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  InteractionsClass.prototype.onComplete = function (botname, callback) {\n    if (!this._options.bots || !this._options.bots[botname]) {\n      throw new Error('Bot ' + botname + ' does not exist');\n    }\n    var botProvider = this._options.bots[botname].providerName || 'AWSLexProvider';\n    if (!this._pluggables[botProvider]) {\n      throw new Error('Bot ' + botProvider + ' does not have valid pluggin did you try addPluggable first?');\n    }\n    this._pluggables[botProvider].onComplete(botname, callback);\n  };\n  return InteractionsClass;\n}();\nexport { InteractionsClass };\nexport var Interactions = new InteractionsClass();\nAmplify.register(Interactions);","map":{"version":3,"names":["__assign","__awaiter","__generator","Amplify","ConsoleLogger","Logger","AWSLexProvider","logger","InteractionsClass","options","_options","debug","_pluggables","prototype","getModuleName","configure","_this","opt","Interactions","bots","aws_bots_config","bots_config","Object","keys","length","Array","isArray","forEach","bot","name","botKey","_a","providerName","addPluggable","pluggable","getCategory","getProviderName","filter","Error","send","botname","message","botProvider","label","Promise","reject","sendMessage","sent","onComplete","callback","register"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-amplify/interactions/lib-esm/Interactions.js"],"sourcesContent":["import { __assign, __awaiter, __generator } from \"tslib\";\nimport { Amplify, ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { AWSLexProvider } from './Providers';\nvar logger = new Logger('Interactions');\nvar InteractionsClass = /** @class */ (function () {\n    /**\n     * Initialize PubSub with AWS configurations\n     *\n     * @param {InteractionsOptions} options - Configuration object for Interactions\n     */\n    function InteractionsClass(options) {\n        if (options === void 0) { options = {}; }\n        this._options = options;\n        logger.debug('Interactions Options', this._options);\n        this._pluggables = {};\n    }\n    InteractionsClass.prototype.getModuleName = function () {\n        return 'Interactions';\n    };\n    /**\n     *\n     * @param {InteractionsOptions} options - Configuration object for Interactions\n     * @return {InteractionsOptions} - The current configuration\n     */\n    InteractionsClass.prototype.configure = function (options) {\n        var _this = this;\n        var opt = options ? options.Interactions || options : {};\n        logger.debug('configure Interactions', { opt: opt });\n        this._options = __assign(__assign({ bots: {} }, opt), opt.Interactions);\n        var aws_bots_config = this._options.aws_bots_config;\n        var bots_config = this._options.bots;\n        if (!Object.keys(bots_config).length && aws_bots_config) {\n            // Convert aws_bots_config to bots object\n            if (Array.isArray(aws_bots_config)) {\n                aws_bots_config.forEach(function (bot) {\n                    _this._options.bots[bot.name] = bot;\n                });\n            }\n        }\n        // configure bots to their specific providers\n        Object.keys(bots_config).forEach(function (botKey) {\n            var _a;\n            var bot = bots_config[botKey];\n            var providerName = bot.providerName || 'AWSLexProvider';\n            // add default provider if required\n            if (!_this._pluggables.AWSLexProvider &&\n                providerName === 'AWSLexProvider') {\n                _this._pluggables.AWSLexProvider = new AWSLexProvider();\n            }\n            // configure bot with it's respective provider\n            if (_this._pluggables[providerName]) {\n                _this._pluggables[providerName].configure((_a = {}, _a[bot.name] = bot, _a));\n            }\n            else {\n                logger.debug(\"bot \" + bot.name + \" was not configured as \" + providerName + \" provider was not found\");\n            }\n        });\n        return this._options;\n    };\n    InteractionsClass.prototype.addPluggable = function (pluggable) {\n        var _this = this;\n        if (pluggable && pluggable.getCategory() === 'Interactions') {\n            if (!this._pluggables[pluggable.getProviderName()]) {\n                // configure bots for the new plugin\n                Object.keys(this._options.bots)\n                    .filter(function (botKey) {\n                    return _this._options.bots[botKey].providerName ===\n                        pluggable.getProviderName();\n                })\n                    .forEach(function (botKey) {\n                    var _a;\n                    var bot = _this._options.bots[botKey];\n                    pluggable.configure((_a = {}, _a[bot.name] = bot, _a));\n                });\n                this._pluggables[pluggable.getProviderName()] = pluggable;\n                return;\n            }\n            else {\n                throw new Error('Pluggable ' + pluggable.getProviderName() + ' already plugged');\n            }\n        }\n    };\n    InteractionsClass.prototype.send = function (botname, message) {\n        return __awaiter(this, void 0, void 0, function () {\n            var botProvider;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this._options.bots || !this._options.bots[botname]) {\n                            return [2 /*return*/, Promise.reject('Bot ' + botname + ' does not exist')];\n                        }\n                        botProvider = this._options.bots[botname].providerName || 'AWSLexProvider';\n                        if (!this._pluggables[botProvider]) {\n                            return [2 /*return*/, Promise.reject('Bot ' +\n                                    botProvider +\n                                    ' does not have valid pluggin did you try addPluggable first?')];\n                        }\n                        return [4 /*yield*/, this._pluggables[botProvider].sendMessage(botname, message)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    InteractionsClass.prototype.onComplete = function (botname, callback) {\n        if (!this._options.bots || !this._options.bots[botname]) {\n            throw new Error('Bot ' + botname + ' does not exist');\n        }\n        var botProvider = this._options.bots[botname].providerName || 'AWSLexProvider';\n        if (!this._pluggables[botProvider]) {\n            throw new Error('Bot ' +\n                botProvider +\n                ' does not have valid pluggin did you try addPluggable first?');\n        }\n        this._pluggables[botProvider].onComplete(botname, callback);\n    };\n    return InteractionsClass;\n}());\nexport { InteractionsClass };\nexport var Interactions = new InteractionsClass();\nAmplify.register(Interactions);\n//# sourceMappingURL=Interactions.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}