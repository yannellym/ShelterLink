{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { DetectLabelsRequest, DetectLabelsResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1DetectLabelsCommand, serializeAws_json1_1DetectLabelsCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Detects instances of real-world entities within an image (JPEG or PNG)\n *        provided as input. This includes objects like flower, tree, and table; events like\n *        wedding, graduation, and birthday party; and concepts like landscape, evening, and nature.\n *      </p>\n *\n *          <p>For an example, see Analyzing Images Stored in an Amazon S3 Bucket in the Amazon Rekognition Developer Guide.</p>\n *          <note>\n *\n *             <p>\n *                <code>DetectLabels</code> does not support the detection of activities. However, activity detection\n *         is supported for label detection in videos. For more information, see StartLabelDetection in the Amazon Rekognition Developer Guide.</p>\n *          </note>\n *\n *          <p>You pass the input image as base64-encoded image bytes or as a reference to an image in\n *       an Amazon S3 bucket. If you use the\n *       AWS\n *       CLI to call Amazon Rekognition operations, passing image bytes is not\n *       supported. The image must be either a PNG or JPEG formatted file. </p>\n *          <p> For each object, scene, and concept the API returns one or more labels. Each label\n *       provides the object name, and the level of confidence that the image contains the object. For\n *       example, suppose the input image has a lighthouse, the sea, and a rock. The response includes\n *       all three labels, one for each object. </p>\n *\n *          <p>\n *             <code>{Name: lighthouse, Confidence: 98.4629}</code>\n *          </p>\n *          <p>\n *             <code>{Name: rock,Confidence: 79.2097}</code>\n *          </p>\n *          <p>\n *             <code> {Name: sea,Confidence: 75.061}</code>\n *          </p>\n *          <p>In the preceding example, the operation returns one label for each of the three\n *       objects. The operation can also return multiple labels for the same object in the image. For\n *       example, if the input image shows a flower (for example, a tulip), the operation might return\n *       the following three labels. </p>\n *          <p>\n *             <code>{Name: flower,Confidence: 99.0562}</code>\n *          </p>\n *          <p>\n *             <code>{Name: plant,Confidence: 99.0562}</code>\n *          </p>\n *          <p>\n *             <code>{Name: tulip,Confidence: 99.0562}</code>\n *          </p>\n *\n *          <p>In this example, the detection algorithm more precisely identifies the flower as a\n *       tulip.</p>\n *          <p>In response, the API returns an array of labels. In addition, the response also\n *       includes the orientation correction. Optionally, you can specify <code>MinConfidence</code> to\n *       control the confidence threshold for the labels returned. The default is 55%. You can also add\n *       the <code>MaxLabels</code> parameter to limit the number of labels returned. </p>\n *          <note>\n *             <p>If the object detected is a person, the operation doesn't provide the same facial\n *         details that the <a>DetectFaces</a> operation provides.</p>\n *          </note>\n *          <p>\n *             <code>DetectLabels</code> returns bounding boxes for instances of common object labels in an array of\n *       <a>Instance</a> objects. An <code>Instance</code> object contains a\n *       <a>BoundingBox</a> object, for the location of the label on the image. It also includes\n *       the confidence by which the bounding box was detected.</p>\n *          <p>\n *             <code>DetectLabels</code> also returns a hierarchical taxonomy of detected labels. For example,\n *       a detected car might be assigned the label <i>car</i>. The label <i>car</i>\n *       has two parent labels: <i>Vehicle</i> (its parent) and <i>Transportation</i> (its\n *       grandparent).\n *       The response returns the entire list of ancestors for a label. Each ancestor is a unique label in the response.\n *       In the previous example, <i>Car</i>, <i>Vehicle</i>, and <i>Transportation</i>\n *       are returned as unique labels in the response.\n *       </p>\n *          <p>This is a stateless API operation. That is, the operation does not persist any\n *       data.</p>\n *          <p>This operation requires permissions to perform the\n *         <code>rekognition:DetectLabels</code> action. </p>\n */\nvar DetectLabelsCommand = /** @class */function (_super) {\n  __extends(DetectLabelsCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function DetectLabelsCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  DetectLabelsCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"DetectLabelsCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: DetectLabelsRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: DetectLabelsResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  DetectLabelsCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1DetectLabelsCommand(input, context);\n  };\n  DetectLabelsCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1DetectLabelsCommand(output, context);\n  };\n  return DetectLabelsCommand;\n}($Command);\nexport { DetectLabelsCommand };","map":{"version":3,"names":["DetectLabelsRequest","DetectLabelsResponse","deserializeAws_json1_1DetectLabelsCommand","serializeAws_json1_1DetectLabelsCommand","getSerdePlugin","Command","$Command","DetectLabelsCommand","_super","__extends","input","_this","call","prototype","resolveMiddleware","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","logger","clientName","commandName","handlerExecutionContext","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","requestHandler","resolve","request","handle","context","output"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-sdk/client-rekognition/commands/DetectLabelsCommand.ts"],"sourcesContent":["import { RekognitionClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../RekognitionClient\";\nimport { DetectLabelsRequest, DetectLabelsResponse } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1DetectLabelsCommand,\n  serializeAws_json1_1DetectLabelsCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type DetectLabelsCommandInput = DetectLabelsRequest;\nexport type DetectLabelsCommandOutput = DetectLabelsResponse & __MetadataBearer;\n\n/**\n * <p>Detects instances of real-world entities within an image (JPEG or PNG)\n *        provided as input. This includes objects like flower, tree, and table; events like\n *        wedding, graduation, and birthday party; and concepts like landscape, evening, and nature.\n *      </p>\n *\n *          <p>For an example, see Analyzing Images Stored in an Amazon S3 Bucket in the Amazon Rekognition Developer Guide.</p>\n *          <note>\n *\n *             <p>\n *                <code>DetectLabels</code> does not support the detection of activities. However, activity detection\n *         is supported for label detection in videos. For more information, see StartLabelDetection in the Amazon Rekognition Developer Guide.</p>\n *          </note>\n *\n *          <p>You pass the input image as base64-encoded image bytes or as a reference to an image in\n *       an Amazon S3 bucket. If you use the\n *       AWS\n *       CLI to call Amazon Rekognition operations, passing image bytes is not\n *       supported. The image must be either a PNG or JPEG formatted file. </p>\n *          <p> For each object, scene, and concept the API returns one or more labels. Each label\n *       provides the object name, and the level of confidence that the image contains the object. For\n *       example, suppose the input image has a lighthouse, the sea, and a rock. The response includes\n *       all three labels, one for each object. </p>\n *\n *          <p>\n *             <code>{Name: lighthouse, Confidence: 98.4629}</code>\n *          </p>\n *          <p>\n *             <code>{Name: rock,Confidence: 79.2097}</code>\n *          </p>\n *          <p>\n *             <code> {Name: sea,Confidence: 75.061}</code>\n *          </p>\n *          <p>In the preceding example, the operation returns one label for each of the three\n *       objects. The operation can also return multiple labels for the same object in the image. For\n *       example, if the input image shows a flower (for example, a tulip), the operation might return\n *       the following three labels. </p>\n *          <p>\n *             <code>{Name: flower,Confidence: 99.0562}</code>\n *          </p>\n *          <p>\n *             <code>{Name: plant,Confidence: 99.0562}</code>\n *          </p>\n *          <p>\n *             <code>{Name: tulip,Confidence: 99.0562}</code>\n *          </p>\n *\n *          <p>In this example, the detection algorithm more precisely identifies the flower as a\n *       tulip.</p>\n *          <p>In response, the API returns an array of labels. In addition, the response also\n *       includes the orientation correction. Optionally, you can specify <code>MinConfidence</code> to\n *       control the confidence threshold for the labels returned. The default is 55%. You can also add\n *       the <code>MaxLabels</code> parameter to limit the number of labels returned. </p>\n *          <note>\n *             <p>If the object detected is a person, the operation doesn't provide the same facial\n *         details that the <a>DetectFaces</a> operation provides.</p>\n *          </note>\n *          <p>\n *             <code>DetectLabels</code> returns bounding boxes for instances of common object labels in an array of\n *       <a>Instance</a> objects. An <code>Instance</code> object contains a\n *       <a>BoundingBox</a> object, for the location of the label on the image. It also includes\n *       the confidence by which the bounding box was detected.</p>\n *          <p>\n *             <code>DetectLabels</code> also returns a hierarchical taxonomy of detected labels. For example,\n *       a detected car might be assigned the label <i>car</i>. The label <i>car</i>\n *       has two parent labels: <i>Vehicle</i> (its parent) and <i>Transportation</i> (its\n *       grandparent).\n *       The response returns the entire list of ancestors for a label. Each ancestor is a unique label in the response.\n *       In the previous example, <i>Car</i>, <i>Vehicle</i>, and <i>Transportation</i>\n *       are returned as unique labels in the response.\n *       </p>\n *          <p>This is a stateless API operation. That is, the operation does not persist any\n *       data.</p>\n *          <p>This operation requires permissions to perform the\n *         <code>rekognition:DetectLabels</code> action. </p>\n */\nexport class DetectLabelsCommand extends $Command<\n  DetectLabelsCommandInput,\n  DetectLabelsCommandOutput,\n  RekognitionClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: DetectLabelsCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: RekognitionClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<DetectLabelsCommandInput, DetectLabelsCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"RekognitionClient\";\n    const commandName = \"DetectLabelsCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: DetectLabelsRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: DetectLabelsResponse.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: DetectLabelsCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1DetectLabelsCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<DetectLabelsCommandOutput> {\n    return deserializeAws_json1_1DetectLabelsCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"],"mappings":";AACA,SAASA,mBAAmB,EAAEC,oBAAoB,QAAQ,oBAAoB;AAC9E,SACEC,yCAAyC,EACzCC,uCAAuC,QAClC,0BAA0B;AACjC,SAASC,cAAc,QAAQ,2BAA2B;AAE1D,SAASC,OAAO,IAAIC,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4EA,IAAAC,mBAAA,0BAAAC,MAAA;EAAyCC,SAAA,CAAAF,mBAAA,EAAAC,MAAA;EAKvC;EACA;EAEA,SAAAD,oBAAqBG,KAA+B;IAApD,IAAAC,KAAA;IACE;IACAH,MAAA,CAAAI,IAAA,MAAO;IAFYD,KAAA,CAAAD,KAAK,GAALA,KAAK;;IAGxB;EACF;EAEA;;;EAGAH,mBAAA,CAAAM,SAAA,CAAAC,iBAAiB,GAAjB,UACEC,WAAmE,EACnEC,aAA8C,EAC9CC,OAA8B;IAE9B,IAAI,CAACC,eAAe,CAACC,GAAG,CAACf,cAAc,CAACY,aAAa,EAAE,IAAI,CAACI,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CAAC;IAEzF,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAM,CAAC,IAAI,CAACL,eAAe,CAAC;IAE9C,IAAAM,MAAM,GAAKR,aAAa,CAAAQ,MAAlB;IACd,IAAMC,UAAU,GAAG,mBAAmB;IACtC,IAAMC,WAAW,GAAG,qBAAqB;IACzC,IAAMC,uBAAuB,GAA4B;MACvDH,MAAM,EAAAA,MAAA;MACNC,UAAU,EAAAA,UAAA;MACVC,WAAW,EAAAA,WAAA;MACXE,uBAAuB,EAAE5B,mBAAmB,CAAC6B,kBAAkB;MAC/DC,wBAAwB,EAAE7B,oBAAoB,CAAC4B;KAChD;IACO,IAAAE,cAAc,GAAKf,aAAa,CAAAe,cAAlB;IACtB,OAAOT,KAAK,CAACU,OAAO,CAClB,UAACC,OAAsC;MACrC,OAAAF,cAAc,CAACG,MAAM,CAACD,OAAO,CAACA,OAAwB,EAAEhB,OAAO,IAAI,EAAE,CAAC;IAAtE,CAAsE,EACxEU,uBAAuB,CACxB;EACH,CAAC;EAEOpB,mBAAA,CAAAM,SAAA,CAAAO,SAAS,GAAjB,UAAkBV,KAA+B,EAAEyB,OAAuB;IACxE,OAAOhC,uCAAuC,CAACO,KAAK,EAAEyB,OAAO,CAAC;EAChE,CAAC;EAEO5B,mBAAA,CAAAM,SAAA,CAAAQ,WAAW,GAAnB,UAAoBe,MAAsB,EAAED,OAAuB;IACjE,OAAOjC,yCAAyC,CAACkC,MAAM,EAAED,OAAO,CAAC;EACnE,CAAC;EAIH,OAAA5B,mBAAC;AAAD,CAAC,CAtDwCD,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}