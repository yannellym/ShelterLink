{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AbstractConvertPredictionsProvider } from '../types/Providers/AbstractConvertPredictionsProvider';\nimport { TranslateClient, TranslateTextCommand } from '@aws-sdk/client-translate';\nimport { PollyClient, SynthesizeSpeechCommand } from '@aws-sdk/client-polly';\nimport { isBytesSource } from '../types';\nimport { Credentials, ConsoleLogger as Logger, Signer, getAmplifyUserAgentObject, Category, PredictionsAction } from '@aws-amplify/core';\nimport { EventStreamMarshaller } from '@aws-sdk/eventstream-marshaller';\nimport { fromUtf8, toUtf8 } from '@aws-sdk/util-utf8-node';\nimport { Buffer } from 'buffer';\nvar logger = new Logger('AmazonAIConvertPredictionsProvider');\nvar eventBuilder = new EventStreamMarshaller(toUtf8, fromUtf8);\nvar LANGUAGES_CODE_IN_8KHZ = ['fr-FR', 'en-AU', 'en-GB', 'fr-CA'];\nvar AmazonAIConvertPredictionsProvider = /** @class */function (_super) {\n  __extends(AmazonAIConvertPredictionsProvider, _super);\n  function AmazonAIConvertPredictionsProvider() {\n    var _this = _super.call(this) || this;\n    _this.inputSampleRate = 44100;\n    return _this;\n  }\n  AmazonAIConvertPredictionsProvider.prototype.getProviderName = function () {\n    return 'AmazonAIConvertPredictionsProvider';\n  };\n  AmazonAIConvertPredictionsProvider.prototype.translateText = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, _b, _c, _d, _e, sourceLanguage, _f, targetLanguage, _g, region, credentials, sourceLanguageCode, targetLanguageCode, translateTextCommand, data, err_1;\n      return __generator(this, function (_h) {\n        switch (_h.label) {\n          case 0:\n            logger.debug('Starting translation');\n            _a = this._config.translateText, _b = _a === void 0 ? {} : _a, _c = _b.defaults, _d = _c === void 0 ? {} : _c, _e = _d.sourceLanguage, sourceLanguage = _e === void 0 ? '' : _e, _f = _d.targetLanguage, targetLanguage = _f === void 0 ? '' : _f, _g = _b.region, region = _g === void 0 ? '' : _g;\n            if (!region) {\n              return [2 /*return*/, Promise.reject('region not configured for transcription')];\n            }\n            return [4 /*yield*/, Credentials.get()];\n          case 1:\n            credentials = _h.sent();\n            if (!credentials) {\n              return [2 /*return*/, Promise.reject('No credentials')];\n            }\n            sourceLanguageCode = input.translateText.source.language || sourceLanguage;\n            targetLanguageCode = input.translateText.targetLanguage || targetLanguage;\n            if (!sourceLanguageCode || !targetLanguageCode) {\n              return [2 /*return*/, Promise.reject('Please provide both source and target language')];\n            }\n            this.translateClient = new TranslateClient({\n              region: region,\n              credentials: credentials,\n              customUserAgent: getAmplifyUserAgentObject({\n                category: Category.Predictions,\n                action: PredictionsAction.Convert\n              })\n            });\n            translateTextCommand = new TranslateTextCommand({\n              SourceLanguageCode: sourceLanguageCode,\n              TargetLanguageCode: targetLanguageCode,\n              Text: input.translateText.source.text\n            });\n            _h.label = 2;\n          case 2:\n            _h.trys.push([2, 4,, 5]);\n            return [4 /*yield*/, this.translateClient.send(translateTextCommand)];\n          case 3:\n            data = _h.sent();\n            return [2 /*return*/, {\n              text: data.TranslatedText,\n              language: data.TargetLanguageCode\n            }];\n          case 4:\n            err_1 = _h.sent();\n            return [2 /*return*/, Promise.reject(err_1)];\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.convertTextToSpeech = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, _a, _b, _c, _d, VoiceId, _e, region, voiceId, synthesizeSpeechCommand, data, response, arrayBuffer, blob, url, err_2;\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            return [4 /*yield*/, Credentials.get()];\n          case 1:\n            credentials = _f.sent();\n            if (!credentials) {\n              return [2 /*return*/, Promise.reject('No credentials')];\n            }\n            _a = this._config.speechGenerator, _b = _a === void 0 ? {} : _a, _c = _b.defaults, _d = (_c === void 0 ? {} : _c).VoiceId, VoiceId = _d === void 0 ? '' : _d, _e = _b.region, region = _e === void 0 ? '' : _e;\n            if (!input.textToSpeech.source) {\n              return [2 /*return*/, Promise.reject('Source needs to be provided in the input')];\n            }\n            voiceId = input.textToSpeech.voiceId || VoiceId;\n            if (!region) {\n              return [2 /*return*/, Promise.reject('Region was undefined. Did you enable speech generator using amplify CLI?')];\n            }\n            if (!voiceId) {\n              return [2 /*return*/, Promise.reject('VoiceId was undefined.')];\n            }\n            this.pollyClient = new PollyClient({\n              region: region,\n              credentials: credentials,\n              customUserAgent: getAmplifyUserAgentObject({\n                category: Category.Predictions,\n                action: PredictionsAction.Convert\n              })\n            });\n            synthesizeSpeechCommand = new SynthesizeSpeechCommand({\n              OutputFormat: 'mp3',\n              Text: input.textToSpeech.source.text,\n              VoiceId: voiceId,\n              TextType: 'text',\n              SampleRate: '24000'\n            });\n            _f.label = 2;\n          case 2:\n            _f.trys.push([2, 5,, 6]);\n            return [4 /*yield*/, this.pollyClient.send(synthesizeSpeechCommand)];\n          case 3:\n            data = _f.sent();\n            response = new Response(data.AudioStream);\n            return [4 /*yield*/, response.arrayBuffer()];\n          case 4:\n            arrayBuffer = _f.sent();\n            blob = new Blob([arrayBuffer], {\n              type: data.ContentType\n            });\n            url = URL.createObjectURL(blob);\n            return [2 /*return*/, {\n              speech: {\n                url: url\n              },\n              audioStream: arrayBuffer,\n              text: input.textToSpeech.source.text\n            }];\n          case 5:\n            err_2 = _f.sent();\n            return [2 /*return*/, Promise.reject(err_2)];\n          case 6:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.convertSpeechToText = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, _a, _b, _c, _d, languageCode, _e, region, _f, source, _g, language, connection, fullText, err_3, err_4;\n      return __generator(this, function (_h) {\n        switch (_h.label) {\n          case 0:\n            _h.trys.push([0, 7,, 8]);\n            logger.debug('starting transcription..');\n            return [4 /*yield*/, Credentials.get()];\n          case 1:\n            credentials = _h.sent();\n            if (!credentials) {\n              return [2 /*return*/, Promise.reject('No credentials')];\n            }\n            _a = this._config.transcription, _b = _a === void 0 ? {} : _a, _c = _b.defaults, _d = (_c === void 0 ? {} : _c).language, languageCode = _d === void 0 ? '' : _d, _e = _b.region, region = _e === void 0 ? '' : _e;\n            if (!region) {\n              return [2 /*return*/, Promise.reject('region not configured for transcription')];\n            }\n            if (!languageCode) {\n              return [2 /*return*/, Promise.reject('languageCode not configured or provided for transcription')];\n            }\n            _f = input.transcription, source = _f.source, _g = _f.language, language = _g === void 0 ? languageCode : _g;\n            if (!isBytesSource(source)) return [3 /*break*/, 6];\n            return [4 /*yield*/, this.openConnectionWithTranscribe({\n              credentials: credentials,\n              region: region,\n              languageCode: language\n            })];\n          case 2:\n            connection = _h.sent();\n            _h.label = 3;\n          case 3:\n            _h.trys.push([3, 5,, 6]);\n            return [4 /*yield*/, this.sendDataToTranscribe({\n              connection: connection,\n              raw: source.bytes,\n              languageCode: language\n            })];\n          case 4:\n            fullText = _h.sent();\n            return [2 /*return*/, {\n              transcription: {\n                fullText: fullText\n              }\n            }];\n          case 5:\n            err_3 = _h.sent();\n            return [2 /*return*/, Promise.reject(err_3)];\n          case 6:\n            return [2 /*return*/, Promise.reject('Source types other than byte source are not supported.')];\n          case 7:\n            err_4 = _h.sent();\n            return [2 /*return*/, Promise.reject(err_4.name + ': ' + err_4.message)];\n          case 8:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AmazonAIConvertPredictionsProvider.serializeDataFromTranscribe = function (message) {\n    var decodedMessage = '';\n    var transcribeMessage = eventBuilder.unmarshall(Buffer.from(message.data));\n    var transcribeMessageJson = JSON.parse(toUtf8(transcribeMessage.body));\n    if (transcribeMessage.headers[':message-type'].value === 'exception') {\n      logger.debug('exception', JSON.stringify(transcribeMessageJson.Message, null, 2));\n      throw new Error(transcribeMessageJson.Message);\n    } else if (transcribeMessage.headers[':message-type'].value === 'event') {\n      if (transcribeMessageJson.Transcript.Results.length > 0) {\n        if (transcribeMessageJson.Transcript.Results[0].Alternatives.length > 0) {\n          if (transcribeMessageJson.Transcript.Results[0].Alternatives[0].Transcript.length > 0) {\n            if (transcribeMessageJson.Transcript.Results[0].IsPartial === false) {\n              decodedMessage = transcribeMessageJson.Transcript.Results[0].Alternatives[0].Transcript + '\\n';\n              logger.debug({\n                decodedMessage: decodedMessage\n              });\n            } else {\n              logger.debug({\n                transcript: transcribeMessageJson.Transcript.Results[0].Alternatives[0]\n              });\n            }\n          }\n        }\n      }\n    }\n    return decodedMessage;\n  };\n  AmazonAIConvertPredictionsProvider.prototype.sendDataToTranscribe = function (_a) {\n    var _this = this;\n    var connection = _a.connection,\n      raw = _a.raw,\n      languageCode = _a.languageCode;\n    return new Promise(function (res, rej) {\n      var fullText = '';\n      connection.onmessage = function (message) {\n        try {\n          var decodedMessage = AmazonAIConvertPredictionsProvider.serializeDataFromTranscribe(message);\n          if (decodedMessage) {\n            fullText += decodedMessage + ' ';\n          }\n        } catch (err) {\n          logger.debug(err);\n          rej(err.message);\n        }\n      };\n      connection.onerror = function (errorEvent) {\n        logger.debug({\n          errorEvent: errorEvent\n        });\n        rej('failed to transcribe, network error');\n      };\n      connection.onclose = function (closeEvent) {\n        logger.debug({\n          closeEvent: closeEvent\n        });\n        return res(fullText.trim());\n      };\n      logger.debug({\n        raw: raw\n      });\n      if (Array.isArray(raw)) {\n        for (var i = 0; i < raw.length - 1023; i += 1024) {\n          var data = raw.slice(i, i + 1024);\n          _this.sendEncodedDataToTranscribe(connection, data, languageCode);\n        }\n      } else {\n        // If Buffer\n        _this.sendEncodedDataToTranscribe(connection, raw, languageCode);\n      }\n      // sending end frame\n      var endFrameEventMessage = _this.getAudioEventMessage(Buffer.from([]));\n      var endFrameBinary = eventBuilder.marshall(endFrameEventMessage);\n      connection.send(endFrameBinary);\n    });\n  };\n  AmazonAIConvertPredictionsProvider.prototype.sendEncodedDataToTranscribe = function (connection, data, languageCode) {\n    var downsampledBuffer = this.downsampleBuffer({\n      buffer: data,\n      outputSampleRate: LANGUAGES_CODE_IN_8KHZ.includes(languageCode) ? 8000 : 16000\n    });\n    var pcmEncodedBuffer = this.pcmEncode(downsampledBuffer);\n    var audioEventMessage = this.getAudioEventMessage(Buffer.from(pcmEncodedBuffer));\n    var binary = eventBuilder.marshall(audioEventMessage);\n    connection.send(binary);\n  };\n  AmazonAIConvertPredictionsProvider.prototype.getAudioEventMessage = function (buffer) {\n    var audioEventMessage = {\n      body: buffer,\n      headers: {\n        ':message-type': {\n          type: 'string',\n          value: 'event'\n        },\n        ':event-type': {\n          type: 'string',\n          value: 'AudioEvent'\n        }\n      }\n    };\n    return audioEventMessage;\n  };\n  AmazonAIConvertPredictionsProvider.prototype.pcmEncode = function (input) {\n    var offset = 0;\n    var buffer = new ArrayBuffer(input.length * 2);\n    var view = new DataView(buffer);\n    for (var i = 0; i < input.length; i++, offset += 2) {\n      var s = Math.max(-1, Math.min(1, input[i]));\n      view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7fff, true);\n    }\n    return buffer;\n  };\n  AmazonAIConvertPredictionsProvider.prototype.downsampleBuffer = function (_a) {\n    var buffer = _a.buffer,\n      _b = _a.outputSampleRate,\n      outputSampleRate = _b === void 0 ? 16000 : _b;\n    if (outputSampleRate === this.inputSampleRate) {\n      return buffer;\n    }\n    var sampleRateRatio = this.inputSampleRate / outputSampleRate;\n    var newLength = Math.round(buffer.length / sampleRateRatio);\n    var result = new Float32Array(newLength);\n    var offsetResult = 0;\n    var offsetBuffer = 0;\n    while (offsetResult < result.length) {\n      var nextOffsetBuffer = Math.round((offsetResult + 1) * sampleRateRatio);\n      var accum = 0,\n        count = 0;\n      for (var i = offsetBuffer; i < nextOffsetBuffer && i < buffer.length; i++) {\n        accum += buffer[i];\n        count++;\n      }\n      result[offsetResult] = accum / count;\n      offsetResult++;\n      offsetBuffer = nextOffsetBuffer;\n    }\n    return result;\n  };\n  AmazonAIConvertPredictionsProvider.prototype.openConnectionWithTranscribe = function (_a) {\n    var _this = this;\n    var userCredentials = _a.credentials,\n      region = _a.region,\n      languageCode = _a.languageCode;\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var access_key, secret_key, session_token, credentials, signedUrl, connection;\n        return __generator(this, function (_a) {\n          access_key = userCredentials.accessKeyId, secret_key = userCredentials.secretAccessKey, session_token = userCredentials.sessionToken;\n          credentials = {\n            access_key: access_key,\n            secret_key: secret_key,\n            session_token: session_token\n          };\n          signedUrl = this.generateTranscribeUrl({\n            credentials: credentials,\n            region: region,\n            languageCode: languageCode\n          });\n          logger.debug('connecting...');\n          connection = new WebSocket(signedUrl);\n          connection.binaryType = 'arraybuffer';\n          connection.onopen = function () {\n            logger.debug('connected');\n            res(connection);\n          };\n          return [2 /*return*/];\n        });\n      });\n    });\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.generateTranscribeUrl = function (_a) {\n    var credentials = _a.credentials,\n      region = _a.region,\n      languageCode = _a.languageCode;\n    var url = [\"wss://transcribestreaming.\" + region + \".amazonaws.com:8443\", '/stream-transcription-websocket?', \"media-encoding=pcm&\", \"sample-rate=\" + (LANGUAGES_CODE_IN_8KHZ.includes(languageCode) ? '8000' : '16000') + \"&\", \"language-code=\" + languageCode].join('');\n    var signedUrl = Signer.signUrl(url, credentials, {\n      region: region,\n      service: 'transcribe'\n    }, 300);\n    return signedUrl;\n  };\n  return AmazonAIConvertPredictionsProvider;\n}(AbstractConvertPredictionsProvider);\nexport { AmazonAIConvertPredictionsProvider };","map":{"version":3,"names":["AbstractConvertPredictionsProvider","TranslateClient","TranslateTextCommand","PollyClient","SynthesizeSpeechCommand","isBytesSource","Credentials","ConsoleLogger","Logger","Signer","getAmplifyUserAgentObject","Category","PredictionsAction","EventStreamMarshaller","fromUtf8","toUtf8","Buffer","logger","eventBuilder","LANGUAGES_CODE_IN_8KHZ","AmazonAIConvertPredictionsProvider","_super","__extends","_this","call","inputSampleRate","prototype","getProviderName","translateText","input","debug","_a","_config","_b","_c","defaults","_d","_e","sourceLanguage","_f","targetLanguage","_g","region","Promise","reject","get","credentials","_h","sent","sourceLanguageCode","source","language","targetLanguageCode","translateClient","customUserAgent","category","Predictions","action","Convert","translateTextCommand","SourceLanguageCode","TargetLanguageCode","Text","text","send","data","TranslatedText","err_1","convertTextToSpeech","speechGenerator","VoiceId","textToSpeech","voiceId","pollyClient","synthesizeSpeechCommand","OutputFormat","TextType","SampleRate","response","Response","AudioStream","arrayBuffer","blob","Blob","type","ContentType","url","URL","createObjectURL","speech","audioStream","err_2","convertSpeechToText","transcription","languageCode","openConnectionWithTranscribe","connection","sendDataToTranscribe","raw","bytes","fullText","err_3","err_4","name","message","serializeDataFromTranscribe","decodedMessage","transcribeMessage","unmarshall","from","transcribeMessageJson","JSON","parse","body","headers","value","stringify","Message","Error","Transcript","Results","length","Alternatives","IsPartial","transcript","res","rej","onmessage","err","onerror","errorEvent","onclose","closeEvent","trim","Array","isArray","i","slice","sendEncodedDataToTranscribe","endFrameEventMessage","getAudioEventMessage","endFrameBinary","marshall","downsampledBuffer","downsampleBuffer","buffer","outputSampleRate","includes","pcmEncodedBuffer","pcmEncode","audioEventMessage","binary","offset","ArrayBuffer","view","DataView","s","Math","max","min","setInt16","sampleRateRatio","newLength","round","result","Float32Array","offsetResult","offsetBuffer","nextOffsetBuffer","accum","count","userCredentials","__awaiter","access_key","accessKeyId","secret_key","secretAccessKey","session_token","sessionToken","signedUrl","generateTranscribeUrl","WebSocket","binaryType","onopen","join","signUrl","service"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-amplify/predictions/src/Providers/AmazonAIConvertPredictionsProvider.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AbstractConvertPredictionsProvider } from '../types/Providers/AbstractConvertPredictionsProvider';\nimport {\n\tTranslateClient,\n\tTranslateTextCommand,\n} from '@aws-sdk/client-translate';\nimport { PollyClient, SynthesizeSpeechCommand } from '@aws-sdk/client-polly';\nimport {\n\tTranslateTextInput,\n\tTextToSpeechInput,\n\tSpeechToTextInput,\n\tTranslateTextOutput,\n\tTextToSpeechOutput,\n\tSpeechToTextOutput,\n\tisBytesSource,\n} from '../types';\nimport {\n\tCredentials,\n\tConsoleLogger as Logger,\n\tSigner,\n\tgetAmplifyUserAgentObject,\n\tCategory,\n\tPredictionsAction,\n} from '@aws-amplify/core';\nimport {\n\tEventStreamMarshaller,\n\tMessageHeaderValue,\n} from '@aws-sdk/eventstream-marshaller';\nimport { fromUtf8, toUtf8 } from '@aws-sdk/util-utf8-node';\nimport { Buffer } from 'buffer';\n\nconst logger = new Logger('AmazonAIConvertPredictionsProvider');\nconst eventBuilder = new EventStreamMarshaller(toUtf8, fromUtf8);\n\nconst LANGUAGES_CODE_IN_8KHZ = ['fr-FR', 'en-AU', 'en-GB', 'fr-CA'];\n\nexport class AmazonAIConvertPredictionsProvider extends AbstractConvertPredictionsProvider {\n\tprivate translateClient: TranslateClient;\n\tprivate pollyClient: PollyClient;\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tgetProviderName() {\n\t\treturn 'AmazonAIConvertPredictionsProvider';\n\t}\n\n\tprotected async translateText(\n\t\tinput: TranslateTextInput\n\t): Promise<TranslateTextOutput> {\n\t\tlogger.debug('Starting translation');\n\t\tconst {\n\t\t\ttranslateText: {\n\t\t\t\tdefaults: { sourceLanguage = '', targetLanguage = '' } = {},\n\t\t\t\tregion = '',\n\t\t\t} = {},\n\t\t} = this._config;\n\n\t\tif (!region) {\n\t\t\treturn Promise.reject('region not configured for transcription');\n\t\t}\n\n\t\tconst credentials = await Credentials.get();\n\t\tif (!credentials) {\n\t\t\treturn Promise.reject('No credentials');\n\t\t}\n\t\tconst sourceLanguageCode =\n\t\t\tinput.translateText.source.language || sourceLanguage;\n\t\tconst targetLanguageCode =\n\t\t\tinput.translateText.targetLanguage || targetLanguage;\n\t\tif (!sourceLanguageCode || !targetLanguageCode) {\n\t\t\treturn Promise.reject('Please provide both source and target language');\n\t\t}\n\n\t\tthis.translateClient = new TranslateClient({\n\t\t\tregion,\n\t\t\tcredentials,\n\t\t\tcustomUserAgent: getAmplifyUserAgentObject({\n\t\t\t\tcategory: Category.Predictions,\n\t\t\t\taction: PredictionsAction.Convert,\n\t\t\t}),\n\t\t});\n\t\tconst translateTextCommand = new TranslateTextCommand({\n\t\t\tSourceLanguageCode: sourceLanguageCode,\n\t\t\tTargetLanguageCode: targetLanguageCode,\n\t\t\tText: input.translateText.source.text,\n\t\t});\n\t\ttry {\n\t\t\tconst data = await this.translateClient.send(translateTextCommand);\n\t\t\treturn {\n\t\t\t\ttext: data.TranslatedText,\n\t\t\t\tlanguage: data.TargetLanguageCode,\n\t\t\t} as TranslateTextOutput;\n\t\t} catch (err) {\n\t\t\treturn Promise.reject(err);\n\t\t}\n\t}\n\n\tprotected async convertTextToSpeech(\n\t\tinput: TextToSpeechInput\n\t): Promise<TextToSpeechOutput> {\n\t\tconst credentials = await Credentials.get();\n\t\tif (!credentials) {\n\t\t\treturn Promise.reject('No credentials');\n\t\t}\n\t\tconst {\n\t\t\tspeechGenerator: { defaults: { VoiceId = '' } = {}, region = '' } = {},\n\t\t} = this._config;\n\n\t\tif (!input.textToSpeech.source) {\n\t\t\treturn Promise.reject('Source needs to be provided in the input');\n\t\t}\n\t\tconst voiceId = input.textToSpeech.voiceId || VoiceId;\n\t\tif (!region) {\n\t\t\treturn Promise.reject(\n\t\t\t\t'Region was undefined. Did you enable speech generator using amplify CLI?'\n\t\t\t);\n\t\t}\n\n\t\tif (!voiceId) {\n\t\t\treturn Promise.reject('VoiceId was undefined.');\n\t\t}\n\n\t\tthis.pollyClient = new PollyClient({\n\t\t\tregion,\n\t\t\tcredentials,\n\t\t\tcustomUserAgent: getAmplifyUserAgentObject({\n\t\t\t\tcategory: Category.Predictions,\n\t\t\t\taction: PredictionsAction.Convert,\n\t\t\t}),\n\t\t});\n\t\tconst synthesizeSpeechCommand = new SynthesizeSpeechCommand({\n\t\t\tOutputFormat: 'mp3',\n\t\t\tText: input.textToSpeech.source.text,\n\t\t\tVoiceId: voiceId,\n\t\t\tTextType: 'text',\n\t\t\tSampleRate: '24000',\n\t\t\t// tslint:disable-next-line: align\n\t\t});\n\t\ttry {\n\t\t\tconst data = await this.pollyClient.send(synthesizeSpeechCommand);\n\t\t\tconst response = new Response(data.AudioStream as ReadableStream);\n\t\t\tconst arrayBuffer = await response.arrayBuffer();\n\t\t\tconst blob = new Blob([arrayBuffer], {\n\t\t\t\ttype: data.ContentType,\n\t\t\t});\n\t\t\tconst url = URL.createObjectURL(blob);\n\t\t\treturn {\n\t\t\t\tspeech: { url },\n\t\t\t\taudioStream: arrayBuffer,\n\t\t\t\ttext: input.textToSpeech.source.text,\n\t\t\t} as TextToSpeechOutput;\n\t\t} catch (err) {\n\t\t\treturn Promise.reject(err);\n\t\t}\n\t}\n\n\tprotected async convertSpeechToText(\n\t\tinput: SpeechToTextInput\n\t): Promise<SpeechToTextOutput> {\n\t\ttry {\n\t\t\tlogger.debug('starting transcription..');\n\t\t\tconst credentials = await Credentials.get();\n\t\t\tif (!credentials) {\n\t\t\t\treturn Promise.reject('No credentials');\n\t\t\t}\n\t\t\tconst {\n\t\t\t\ttranscription: {\n\t\t\t\t\tdefaults: { language: languageCode = '' } = {},\n\t\t\t\t\tregion = '',\n\t\t\t\t} = {},\n\t\t\t} = this._config;\n\t\t\tif (!region) {\n\t\t\t\treturn Promise.reject('region not configured for transcription');\n\t\t\t}\n\t\t\tif (!languageCode) {\n\t\t\t\treturn Promise.reject(\n\t\t\t\t\t'languageCode not configured or provided for transcription'\n\t\t\t\t);\n\t\t\t}\n\t\t\tconst {\n\t\t\t\ttranscription: { source, language = languageCode },\n\t\t\t} = input;\n\n\t\t\tif (isBytesSource(source)) {\n\t\t\t\tconst connection = await this.openConnectionWithTranscribe({\n\t\t\t\t\tcredentials,\n\t\t\t\t\tregion,\n\t\t\t\t\tlanguageCode: language,\n\t\t\t\t});\n\n\t\t\t\ttry {\n\t\t\t\t\tconst fullText = await this.sendDataToTranscribe({\n\t\t\t\t\t\tconnection,\n\t\t\t\t\t\traw: source.bytes,\n\t\t\t\t\t\tlanguageCode: language,\n\t\t\t\t\t});\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttranscription: {\n\t\t\t\t\t\t\tfullText,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t} catch (err) {\n\t\t\t\t\treturn Promise.reject(err);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn Promise.reject(\n\t\t\t\t'Source types other than byte source are not supported.'\n\t\t\t);\n\t\t} catch (err) {\n\t\t\treturn Promise.reject(err.name + ': ' + err.message);\n\t\t}\n\t}\n\n\tpublic static serializeDataFromTranscribe(message) {\n\t\tlet decodedMessage = '';\n\t\tconst transcribeMessage = eventBuilder.unmarshall(\n\t\t\tBuffer.from(message.data)\n\t\t);\n\t\tconst transcribeMessageJson = JSON.parse(toUtf8(transcribeMessage.body));\n\t\tif (transcribeMessage.headers[':message-type'].value === 'exception') {\n\t\t\tlogger.debug(\n\t\t\t\t'exception',\n\t\t\t\tJSON.stringify(transcribeMessageJson.Message, null, 2)\n\t\t\t);\n\t\t\tthrow new Error(transcribeMessageJson.Message);\n\t\t} else if (transcribeMessage.headers[':message-type'].value === 'event') {\n\t\t\tif (transcribeMessageJson.Transcript.Results.length > 0) {\n\t\t\t\tif (\n\t\t\t\t\ttranscribeMessageJson.Transcript.Results[0].Alternatives.length > 0\n\t\t\t\t) {\n\t\t\t\t\tif (\n\t\t\t\t\t\ttranscribeMessageJson.Transcript.Results[0].Alternatives[0]\n\t\t\t\t\t\t\t.Transcript.length > 0\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\ttranscribeMessageJson.Transcript.Results[0].IsPartial === false\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tdecodedMessage =\n\t\t\t\t\t\t\t\ttranscribeMessageJson.Transcript.Results[0].Alternatives[0]\n\t\t\t\t\t\t\t\t\t.Transcript + '\\n';\n\t\t\t\t\t\t\tlogger.debug({ decodedMessage });\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlogger.debug({\n\t\t\t\t\t\t\t\ttranscript:\n\t\t\t\t\t\t\t\t\ttranscribeMessageJson.Transcript.Results[0].Alternatives[0],\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn decodedMessage;\n\t}\n\n\tprivate sendDataToTranscribe({\n\t\tconnection,\n\t\traw,\n\t\tlanguageCode,\n\t}): Promise<string> {\n\t\treturn new Promise((res, rej) => {\n\t\t\tlet fullText = '';\n\t\t\tconnection.onmessage = message => {\n\t\t\t\ttry {\n\t\t\t\t\tconst decodedMessage =\n\t\t\t\t\t\tAmazonAIConvertPredictionsProvider.serializeDataFromTranscribe(\n\t\t\t\t\t\t\tmessage\n\t\t\t\t\t\t);\n\t\t\t\t\tif (decodedMessage) {\n\t\t\t\t\t\tfullText += decodedMessage + ' ';\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\tlogger.debug(err);\n\t\t\t\t\trej(err.message);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconnection.onerror = errorEvent => {\n\t\t\t\tlogger.debug({ errorEvent });\n\t\t\t\trej('failed to transcribe, network error');\n\t\t\t};\n\n\t\t\tconnection.onclose = closeEvent => {\n\t\t\t\tlogger.debug({ closeEvent });\n\t\t\t\treturn res(fullText.trim());\n\t\t\t};\n\n\t\t\tlogger.debug({ raw });\n\n\t\t\tif (Array.isArray(raw)) {\n\t\t\t\tfor (let i = 0; i < raw.length - 1023; i += 1024) {\n\t\t\t\t\tconst data = raw.slice(i, i + 1024);\n\t\t\t\t\tthis.sendEncodedDataToTranscribe(connection, data, languageCode);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// If Buffer\n\t\t\t\tthis.sendEncodedDataToTranscribe(connection, raw, languageCode);\n\t\t\t}\n\n\t\t\t// sending end frame\n\t\t\tconst endFrameEventMessage = this.getAudioEventMessage(Buffer.from([]));\n\t\t\tconst endFrameBinary = eventBuilder.marshall(endFrameEventMessage);\n\t\t\tconnection.send(endFrameBinary);\n\t\t});\n\t}\n\n\tprivate sendEncodedDataToTranscribe(connection, data, languageCode) {\n\t\tconst downsampledBuffer = this.downsampleBuffer({\n\t\t\tbuffer: data,\n\t\t\toutputSampleRate: LANGUAGES_CODE_IN_8KHZ.includes(languageCode)\n\t\t\t\t? 8000\n\t\t\t\t: 16000,\n\t\t});\n\t\tconst pcmEncodedBuffer = this.pcmEncode(downsampledBuffer);\n\t\tconst audioEventMessage = this.getAudioEventMessage(\n\t\t\tBuffer.from(pcmEncodedBuffer)\n\t\t);\n\t\tconst binary = eventBuilder.marshall(audioEventMessage);\n\t\tconnection.send(binary);\n\t}\n\n\tprivate getAudioEventMessage(buffer) {\n\t\tconst audioEventMessage = {\n\t\t\tbody: buffer as Uint8Array,\n\t\t\theaders: {\n\t\t\t\t':message-type': {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tvalue: 'event',\n\t\t\t\t} as MessageHeaderValue,\n\t\t\t\t':event-type': {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tvalue: 'AudioEvent',\n\t\t\t\t} as MessageHeaderValue,\n\t\t\t},\n\t\t};\n\n\t\treturn audioEventMessage;\n\t}\n\n\tprivate pcmEncode(input) {\n\t\tlet offset = 0;\n\t\tconst buffer = new ArrayBuffer(input.length * 2);\n\t\tconst view = new DataView(buffer);\n\t\tfor (let i = 0; i < input.length; i++, offset += 2) {\n\t\t\tconst s = Math.max(-1, Math.min(1, input[i]));\n\t\t\tview.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7fff, true);\n\t\t}\n\t\treturn buffer;\n\t}\n\n\tprivate inputSampleRate = 44100;\n\n\tprivate downsampleBuffer({ buffer, outputSampleRate = 16000 }) {\n\t\tif (outputSampleRate === this.inputSampleRate) {\n\t\t\treturn buffer;\n\t\t}\n\n\t\tconst sampleRateRatio = this.inputSampleRate / outputSampleRate;\n\t\tconst newLength = Math.round(buffer.length / sampleRateRatio);\n\t\tconst result = new Float32Array(newLength);\n\t\tlet offsetResult = 0;\n\t\tlet offsetBuffer = 0;\n\t\twhile (offsetResult < result.length) {\n\t\t\tconst nextOffsetBuffer = Math.round((offsetResult + 1) * sampleRateRatio);\n\t\t\tlet accum = 0,\n\t\t\t\tcount = 0;\n\t\t\tfor (\n\t\t\t\tlet i = offsetBuffer;\n\t\t\t\ti < nextOffsetBuffer && i < buffer.length;\n\t\t\t\ti++\n\t\t\t) {\n\t\t\t\taccum += buffer[i];\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tresult[offsetResult] = accum / count;\n\t\t\toffsetResult++;\n\t\t\toffsetBuffer = nextOffsetBuffer;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate openConnectionWithTranscribe({\n\t\tcredentials: userCredentials,\n\t\tregion,\n\t\tlanguageCode,\n\t}): Promise<WebSocket> {\n\t\treturn new Promise(async (res, rej) => {\n\t\t\tconst {\n\t\t\t\taccessKeyId: access_key,\n\t\t\t\tsecretAccessKey: secret_key,\n\t\t\t\tsessionToken: session_token,\n\t\t\t} = userCredentials;\n\n\t\t\tconst credentials = {\n\t\t\t\taccess_key,\n\t\t\t\tsecret_key,\n\t\t\t\tsession_token,\n\t\t\t};\n\n\t\t\tconst signedUrl = this.generateTranscribeUrl({\n\t\t\t\tcredentials,\n\t\t\t\tregion,\n\t\t\t\tlanguageCode,\n\t\t\t});\n\n\t\t\tlogger.debug('connecting...');\n\t\t\tconst connection = new WebSocket(signedUrl);\n\n\t\t\tconnection.binaryType = 'arraybuffer';\n\t\t\tconnection.onopen = () => {\n\t\t\t\tlogger.debug('connected');\n\t\t\t\tres(connection);\n\t\t\t};\n\t\t});\n\t}\n\n\tprivate generateTranscribeUrl({ credentials, region, languageCode }): string {\n\t\tconst url = [\n\t\t\t`wss://transcribestreaming.${region}.amazonaws.com:8443`,\n\t\t\t'/stream-transcription-websocket?',\n\t\t\t`media-encoding=pcm&`,\n\t\t\t`sample-rate=${\n\t\t\t\tLANGUAGES_CODE_IN_8KHZ.includes(languageCode) ? '8000' : '16000'\n\t\t\t}&`,\n\t\t\t`language-code=${languageCode}`,\n\t\t].join('');\n\n\t\tconst signedUrl = Signer.signUrl(\n\t\t\turl,\n\t\t\tcredentials,\n\t\t\t{ region, service: 'transcribe' },\n\t\t\t300\n\t\t);\n\n\t\treturn signedUrl;\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}