{"ast":null,"code":"var _jsxFileName = \"/Users/yannellym/Desktop/iwantapet/frontend/src/components/AllPetsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport '../styles/AllPetsPage.css';\nimport PetCard from './PetCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AllPetsPage() {\n  _s();\n  const {\n    category\n  } = useParams();\n  const [loading, setLoading] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n  const petsPerPage = 40;\n  const [cache, setCache] = useState([]);\n  const otherAnimalTypes = [\"horse\", \"bird\", \"barnyard\"];\n  const fetchAnimalsByType = async type => {\n    const endpoint = `http://localhost:3002/api/petfinder?type=${type}&limit=${petsPerPage}`;\n    try {\n      const response = await fetch(endpoint);\n      const data = await response.json();\n      if (data && data.animals) {\n        data.animals = data.animals.filter(animal => animal.photos.length > 0);\n        return data.animals;\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error.message);\n    }\n    return [];\n  };\n  useEffect(() => {\n    async function fetchData() {\n      const allPets = await Promise.all(otherAnimalTypes.map(animalType => fetchAnimalsByType(animalType)));\n\n      // Merge the arrays of animals\n      const mergedPets = allPets.reduce((accumulator, current) => [...accumulator, ...current], []);\n      setCache(mergedPets);\n      setLoading(false);\n    }\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"all-pets-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: `All ${category.charAt(0).toUpperCase() + category.slice(1)}s`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pet-list\",\n      children: cache.map(pet => /*#__PURE__*/_jsxDEV(PetCard, {\n        pet: pet\n      }, pet.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(AllPetsPage, \"ZI7uaPeuqINtAeXCvtnrefX/dFg=\", false, function () {\n  return [useParams];\n});\n_c = AllPetsPage;\nexport default AllPetsPage;\n\n// const fetchAnimalsByType = async (type) => {\n//   const endpoint = `http://localhost:3002/api/petfinder?type=${type}&limit=${petsPerPage}`;\n\n//   try {\n//     const response = await fetch(endpoint);\n//     const data = await response.json();\n\n//     if (data && data.animals) {\n//       return data.animals;\n//     }\n//   } catch (error) {\n//     console.error('Error fetching data:', error.message);\n//   }\n\n//   return [];\n// };\n\n// useEffect(() => {\n//   async function fetchData() {\n//     const allPets = await Promise.all(\n//       otherAnimalTypes.map(animalType => fetchAnimalsByType(animalType))\n//     );\n\n//     // Merge the arrays of animals\n//     const mergedPets = allPets.reduce((accumulator, current) => [...accumulator, ...current], []);\n\n//     setCache(mergedPets);\n//     setLoading(false);\n//   }\n\n//   fetchData();\n// }, []);\nvar _c;\n$RefreshReg$(_c, \"AllPetsPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","PetCard","jsxDEV","_jsxDEV","AllPetsPage","_s","category","loading","setLoading","currentPage","setCurrentPage","petsPerPage","cache","setCache","otherAnimalTypes","fetchAnimalsByType","type","endpoint","response","fetch","data","json","animals","filter","animal","photos","length","error","console","message","fetchData","allPets","Promise","all","map","animalType","mergedPets","reduce","accumulator","current","className","children","charAt","toUpperCase","slice","fileName","_jsxFileName","lineNumber","columnNumber","pet","id","_c","$RefreshReg$"],"sources":["/Users/yannellym/Desktop/iwantapet/frontend/src/components/AllPetsPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport '../styles/AllPetsPage.css';\nimport PetCard from './PetCard';\n\nfunction AllPetsPage() {\n  const { category } = useParams();\n  const [loading, setLoading] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n  const petsPerPage = 40;\n  const [cache, setCache] = useState([]);\n  const otherAnimalTypes = [\"horse\", \"bird\", \"barnyard\"]\n  \n  const fetchAnimalsByType = async (type) => {\n      const endpoint = `http://localhost:3002/api/petfinder?type=${type}&limit=${petsPerPage}`;\n    \n      try {\n        const response = await fetch(endpoint);\n        const data = await response.json();\n    \n        if (data && data.animals) {\n          data.animals = data.animals.filter((animal) => animal.photos.length > 0);\n          return data.animals;\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error.message);\n      }\n    \n      return [];\n    };\n    \n    useEffect(() => {\n      async function fetchData() {\n        const allPets = await Promise.all(\n          otherAnimalTypes.map(animalType => fetchAnimalsByType(animalType))\n        );\n        \n        // Merge the arrays of animals\n        const mergedPets = allPets.reduce((accumulator, current) => [...accumulator, ...current], []);\n        \n        setCache(mergedPets);\n        setLoading(false);\n      }\n    \n      fetchData();\n    }, []);\n\n  return (\n    <div className=\"all-pets-page\">\n      <h2>{`All ${category.charAt(0).toUpperCase() + category.slice(1)}s`}</h2>\n      {loading ? (\n        <p>Loading...</p>\n      ) : (\n        <div className=\"pet-list\">\n          {cache.map((pet) => (\n            <PetCard key={pet.id} pet={pet} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default AllPetsPage;\n\n\n// const fetchAnimalsByType = async (type) => {\n//   const endpoint = `http://localhost:3002/api/petfinder?type=${type}&limit=${petsPerPage}`;\n\n//   try {\n//     const response = await fetch(endpoint);\n//     const data = await response.json();\n\n//     if (data && data.animals) {\n//       return data.animals;\n//     }\n//   } catch (error) {\n//     console.error('Error fetching data:', error.message);\n//   }\n\n//   return [];\n// };\n\n// useEffect(() => {\n//   async function fetchData() {\n//     const allPets = await Promise.all(\n//       otherAnimalTypes.map(animalType => fetchAnimalsByType(animalType))\n//     );\n    \n//     // Merge the arrays of animals\n//     const mergedPets = allPets.reduce((accumulator, current) => [...accumulator, ...current], []);\n    \n//     setCache(mergedPets);\n//     setLoading(false);\n//   }\n\n//   fetchData();\n// }, []);"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAO,2BAA2B;AAClC,OAAOC,OAAO,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAM;IAAEC;EAAS,CAAC,GAAGN,SAAS,CAAC,CAAC;EAChC,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAMa,WAAW,GAAG,EAAE;EACtB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMgB,gBAAgB,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,UAAU,CAAC;EAEtD,MAAMC,kBAAkB,GAAG,MAAOC,IAAI,IAAK;IACvC,MAAMC,QAAQ,GAAI,4CAA2CD,IAAK,UAASL,WAAY,EAAC;IAExF,IAAI;MACF,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAACF,QAAQ,CAAC;MACtC,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAElC,IAAID,IAAI,IAAIA,IAAI,CAACE,OAAO,EAAE;QACxBF,IAAI,CAACE,OAAO,GAAGF,IAAI,CAACE,OAAO,CAACC,MAAM,CAAEC,MAAM,IAAKA,MAAM,CAACC,MAAM,CAACC,MAAM,GAAG,CAAC,CAAC;QACxE,OAAON,IAAI,CAACE,OAAO;MACrB;IACF,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAACE,OAAO,CAAC;IACtD;IAEA,OAAO,EAAE;EACX,CAAC;EAED9B,SAAS,CAAC,MAAM;IACd,eAAe+B,SAASA,CAAA,EAAG;MACzB,MAAMC,OAAO,GAAG,MAAMC,OAAO,CAACC,GAAG,CAC/BnB,gBAAgB,CAACoB,GAAG,CAACC,UAAU,IAAIpB,kBAAkB,CAACoB,UAAU,CAAC,CACnE,CAAC;;MAED;MACA,MAAMC,UAAU,GAAGL,OAAO,CAACM,MAAM,CAAC,CAACC,WAAW,EAAEC,OAAO,KAAK,CAAC,GAAGD,WAAW,EAAE,GAAGC,OAAO,CAAC,EAAE,EAAE,CAAC;MAE7F1B,QAAQ,CAACuB,UAAU,CAAC;MACpB5B,UAAU,CAAC,KAAK,CAAC;IACnB;IAEAsB,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAER,oBACE3B,OAAA;IAAKqC,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAC5BtC,OAAA;MAAAsC,QAAA,EAAM,OAAMnC,QAAQ,CAACoC,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGrC,QAAQ,CAACsC,KAAK,CAAC,CAAC,CAAE;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EACxEzC,OAAO,gBACNJ,OAAA;MAAAsC,QAAA,EAAG;IAAU;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBAEjB7C,OAAA;MAAKqC,SAAS,EAAC,UAAU;MAAAC,QAAA,EACtB7B,KAAK,CAACsB,GAAG,CAAEe,GAAG,iBACb9C,OAAA,CAACF,OAAO;QAAcgD,GAAG,EAAEA;MAAI,GAAjBA,GAAG,CAACC,EAAE;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAa,CAClC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAC3C,EAAA,CAxDQD,WAAW;EAAA,QACGJ,SAAS;AAAA;AAAAmD,EAAA,GADvB/C,WAAW;AA0DpB,eAAeA,WAAW;;AAG1B;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AAAA,IAAA+C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}