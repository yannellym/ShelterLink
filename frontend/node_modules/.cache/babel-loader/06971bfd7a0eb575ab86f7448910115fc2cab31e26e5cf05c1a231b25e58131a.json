{"ast":null,"code":"var _jsxFileName = \"/Users/yannellym/Desktop/iwantapet/frontend/src/components/AllPetsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport '../styles/AllPetsPage.css';\nimport PetCard from './PetCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction AllPetsPage() {\n  _s();\n  const {\n    category\n  } = useParams();\n  const [allPets, setAllPets] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n  const petsPerPage = 20;\n  const cache = Array.from({\n    length: 100\n  }, () => []); // Initialize a cache with an array for each page\n\n  const fetchAnimalsByType = async (type, page) => {\n    const offset = (page - 1) * petsPerPage;\n    if (cache[page - 1].length > 0) {\n      // If data for this page exists in the cache, use it\n      setAllPets(cache[page - 1]);\n    } else {\n      try {\n        const response = await fetch(`http://localhost:3002/api/petfinder?type=${type}&offset=${offset}&limit=${petsPerPage}`);\n        const data = await response.json();\n        console.log('API Response:', data);\n        if (data && data.animals) {\n          const pets = data.animals;\n\n          // Update the cache with the fetched data\n          cache[page - 1] = pets;\n          setAllPets(pets);\n          setLoading(false);\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error.message);\n        setLoading(false);\n      }\n    }\n  };\n  useEffect(() => {\n    fetchAnimalsByType(category, currentPage);\n  }, [category, currentPage]);\n  const totalPets = allPets.length;\n  const paginate = pageNumber => {\n    setCurrentPage(pageNumber);\n  };\n  const totalPages = Math.ceil(totalPets / petsPerPage);\n  const paginationNumbers = Array.from({\n    length: Math.max(9, totalPages)\n  }, (_, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: () => paginate(index + 1),\n    children: index + 1\n  }, index + 1, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"all-pets-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: `All ${category.charAt(0).toUpperCase() + category.slice(1)}s`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pet-list\",\n        children: allPets.map(pet => /*#__PURE__*/_jsxDEV(PetCard, {\n          pet: pet\n        }, pet.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pagination\",\n        children: paginationNumbers\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(AllPetsPage, \"qM1iyX35qxqJo+nOKU/3nUKDBtY=\", false, function () {\n  return [useParams];\n});\n_c = AllPetsPage;\nexport default AllPetsPage;\nvar _c;\n$RefreshReg$(_c, \"AllPetsPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","PetCard","jsxDEV","_jsxDEV","Fragment","_Fragment","AllPetsPage","_s","category","allPets","setAllPets","loading","setLoading","currentPage","setCurrentPage","petsPerPage","cache","Array","from","length","fetchAnimalsByType","type","page","offset","response","fetch","data","json","console","log","animals","pets","error","message","totalPets","paginate","pageNumber","totalPages","Math","ceil","paginationNumbers","max","_","index","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","className","charAt","toUpperCase","slice","map","pet","id","_c","$RefreshReg$"],"sources":["/Users/yannellym/Desktop/iwantapet/frontend/src/components/AllPetsPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport '../styles/AllPetsPage.css';\nimport PetCard from './PetCard';\n\nfunction AllPetsPage() {\n  const { category } = useParams();\n  const [allPets, setAllPets] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n  const petsPerPage = 20;\n  const cache = Array.from({ length: 100 }, () => []); // Initialize a cache with an array for each page\n\n  const fetchAnimalsByType = async (type, page) => {\n    const offset = (page - 1) * petsPerPage;\n    if (cache[page - 1].length > 0) {\n      // If data for this page exists in the cache, use it\n      setAllPets(cache[page - 1]);\n    } else {\n      try {\n        const response = await fetch(\n          `http://localhost:3002/api/petfinder?type=${type}&offset=${offset}&limit=${petsPerPage}`\n        );\n        const data = await response.json();\n\n        console.log('API Response:', data);\n\n        if (data && data.animals) {\n          const pets = data.animals;\n\n          // Update the cache with the fetched data\n          cache[page - 1] = pets;\n\n          setAllPets(pets);\n          setLoading(false);\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error.message);\n        setLoading(false);\n      }\n    }\n  };\n\n  useEffect(() => {\n    fetchAnimalsByType(category, currentPage);\n  }, [category, currentPage]);\n\n  const totalPets = allPets.length;\n\n  const paginate = (pageNumber) => {\n    setCurrentPage(pageNumber);\n  };\n\n  const totalPages = Math.ceil(totalPets / petsPerPage);\n\n  const paginationNumbers = Array.from({ length: Math.max(9, totalPages) }, (_, index) => (\n    <button key={index + 1} onClick={() => paginate(index + 1)}>\n      {index + 1}\n    </button>\n  ));\n\n  return (\n    <div className=\"all-pets-page\">\n      <h2>{`All ${category.charAt(0).toUpperCase() + category.slice(1)}s`}</h2>\n      {loading ? (\n        <p>Loading...</p>\n      ) : (\n        <>\n          <div className=\"pet-list\">\n            {allPets.map((pet) => (\n              <PetCard key={pet.id} pet={pet} />\n            ))}\n          </div>\n          <div className=\"pagination\">\n            {paginationNumbers}\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default AllPetsPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}