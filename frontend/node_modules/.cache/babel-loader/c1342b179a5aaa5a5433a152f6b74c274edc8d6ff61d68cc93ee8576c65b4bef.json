{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { GetShardIteratorInput, GetShardIteratorOutput } from \"../models/models_0\";\nimport { deserializeAws_json1_1GetShardIteratorCommand, serializeAws_json1_1GetShardIteratorCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Gets an Amazon Kinesis shard iterator. A shard iterator expires 5 minutes after it\n *             is returned to the requester.</p>\n *         <p>A shard iterator specifies the shard position from which to start reading data\n *             records sequentially. The position is specified using the sequence number of a data\n *             record in a shard. A sequence number is the identifier associated with every record\n *             ingested in the stream, and is assigned when a record is put into the stream. Each\n *             stream has one or more shards.</p>\n *         <p>You must specify the shard iterator type. For example, you can set the\n *                 <code>ShardIteratorType</code> parameter to read exactly from the position denoted\n *             by a specific sequence number by using the <code>AT_SEQUENCE_NUMBER</code> shard\n *             iterator type. Alternatively, the parameter can read right after the sequence number by\n *             using the <code>AFTER_SEQUENCE_NUMBER</code> shard iterator type, using sequence numbers\n *             returned by earlier calls to <a>PutRecord</a>, <a>PutRecords</a>,\n *                 <a>GetRecords</a>, or <a>DescribeStream</a>. In the request,\n *             you can specify the shard iterator type <code>AT_TIMESTAMP</code> to read records from\n *             an arbitrary point in time, <code>TRIM_HORIZON</code> to cause\n *                 <code>ShardIterator</code> to point to the last untrimmed record in the shard in the\n *             system (the oldest data record in the shard), or <code>LATEST</code> so that you always\n *             read the most recent data in the shard. </p>\n *         <p>When you read repeatedly from a stream, use a <a>GetShardIterator</a>\n *             request to get the first shard iterator for use in your first <a>GetRecords</a> request and for subsequent reads use the shard iterator returned by the <a>GetRecords</a> request in <code>NextShardIterator</code>. A new shard\n *             iterator is returned by every <a>GetRecords</a> request in\n *                 <code>NextShardIterator</code>, which you use in the <code>ShardIterator</code>\n *             parameter of the next <a>GetRecords</a> request. </p>\n *         <p>If a <a>GetShardIterator</a> request is made too often, you receive a\n *                 <code>ProvisionedThroughputExceededException</code>. For more information about\n *             throughput limits, see <a>GetRecords</a>, and <a href=\"https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html\">Streams Limits</a> in the\n *                 <i>Amazon Kinesis Data Streams Developer Guide</i>.</p>\n *         <p>If the shard is closed, <a>GetShardIterator</a> returns a valid iterator\n *             for the last sequence number of the shard. A shard can be closed as a result of using\n *                 <a>SplitShard</a> or <a>MergeShards</a>.</p>\n *         <p>\n *             <a>GetShardIterator</a> has a limit of five transactions per second per\n *             account per open shard.</p>\n */\nvar GetShardIteratorCommand = /** @class */function (_super) {\n  __extends(GetShardIteratorCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function GetShardIteratorCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  GetShardIteratorCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"KinesisClient\";\n    var commandName = \"GetShardIteratorCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: GetShardIteratorInput.filterSensitiveLog,\n      outputFilterSensitiveLog: GetShardIteratorOutput.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  GetShardIteratorCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1GetShardIteratorCommand(input, context);\n  };\n  GetShardIteratorCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1GetShardIteratorCommand(output, context);\n  };\n  return GetShardIteratorCommand;\n}($Command);\nexport { GetShardIteratorCommand };","map":{"version":3,"names":["GetShardIteratorInput","GetShardIteratorOutput","deserializeAws_json1_1GetShardIteratorCommand","serializeAws_json1_1GetShardIteratorCommand","getSerdePlugin","Command","$Command","GetShardIteratorCommand","_super","__extends","input","_this","call","prototype","resolveMiddleware","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","logger","clientName","commandName","handlerExecutionContext","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","requestHandler","resolve","request","handle","context","output"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-sdk/client-kinesis/commands/GetShardIteratorCommand.ts"],"sourcesContent":["import { KinesisClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../KinesisClient\";\nimport { GetShardIteratorInput, GetShardIteratorOutput } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1GetShardIteratorCommand,\n  serializeAws_json1_1GetShardIteratorCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type GetShardIteratorCommandInput = GetShardIteratorInput;\nexport type GetShardIteratorCommandOutput = GetShardIteratorOutput & __MetadataBearer;\n\n/**\n * <p>Gets an Amazon Kinesis shard iterator. A shard iterator expires 5 minutes after it\n *             is returned to the requester.</p>\n *         <p>A shard iterator specifies the shard position from which to start reading data\n *             records sequentially. The position is specified using the sequence number of a data\n *             record in a shard. A sequence number is the identifier associated with every record\n *             ingested in the stream, and is assigned when a record is put into the stream. Each\n *             stream has one or more shards.</p>\n *         <p>You must specify the shard iterator type. For example, you can set the\n *                 <code>ShardIteratorType</code> parameter to read exactly from the position denoted\n *             by a specific sequence number by using the <code>AT_SEQUENCE_NUMBER</code> shard\n *             iterator type. Alternatively, the parameter can read right after the sequence number by\n *             using the <code>AFTER_SEQUENCE_NUMBER</code> shard iterator type, using sequence numbers\n *             returned by earlier calls to <a>PutRecord</a>, <a>PutRecords</a>,\n *                 <a>GetRecords</a>, or <a>DescribeStream</a>. In the request,\n *             you can specify the shard iterator type <code>AT_TIMESTAMP</code> to read records from\n *             an arbitrary point in time, <code>TRIM_HORIZON</code> to cause\n *                 <code>ShardIterator</code> to point to the last untrimmed record in the shard in the\n *             system (the oldest data record in the shard), or <code>LATEST</code> so that you always\n *             read the most recent data in the shard. </p>\n *         <p>When you read repeatedly from a stream, use a <a>GetShardIterator</a>\n *             request to get the first shard iterator for use in your first <a>GetRecords</a> request and for subsequent reads use the shard iterator returned by the <a>GetRecords</a> request in <code>NextShardIterator</code>. A new shard\n *             iterator is returned by every <a>GetRecords</a> request in\n *                 <code>NextShardIterator</code>, which you use in the <code>ShardIterator</code>\n *             parameter of the next <a>GetRecords</a> request. </p>\n *         <p>If a <a>GetShardIterator</a> request is made too often, you receive a\n *                 <code>ProvisionedThroughputExceededException</code>. For more information about\n *             throughput limits, see <a>GetRecords</a>, and <a href=\"https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html\">Streams Limits</a> in the\n *                 <i>Amazon Kinesis Data Streams Developer Guide</i>.</p>\n *         <p>If the shard is closed, <a>GetShardIterator</a> returns a valid iterator\n *             for the last sequence number of the shard. A shard can be closed as a result of using\n *                 <a>SplitShard</a> or <a>MergeShards</a>.</p>\n *         <p>\n *             <a>GetShardIterator</a> has a limit of five transactions per second per\n *             account per open shard.</p>\n */\nexport class GetShardIteratorCommand extends $Command<\n  GetShardIteratorCommandInput,\n  GetShardIteratorCommandOutput,\n  KinesisClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: GetShardIteratorCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: KinesisClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<GetShardIteratorCommandInput, GetShardIteratorCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"KinesisClient\";\n    const commandName = \"GetShardIteratorCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: GetShardIteratorInput.filterSensitiveLog,\n      outputFilterSensitiveLog: GetShardIteratorOutput.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: GetShardIteratorCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1GetShardIteratorCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<GetShardIteratorCommandOutput> {\n    return deserializeAws_json1_1GetShardIteratorCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"],"mappings":";AACA,SAASA,qBAAqB,EAAEC,sBAAsB,QAAQ,oBAAoB;AAClF,SACEC,6CAA6C,EAC7CC,2CAA2C,QACtC,0BAA0B;AACjC,SAASC,cAAc,QAAQ,2BAA2B;AAE1D,SAASC,OAAO,IAAIC,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA,IAAAC,uBAAA,0BAAAC,MAAA;EAA6CC,SAAA,CAAAF,uBAAA,EAAAC,MAAA;EAK3C;EACA;EAEA,SAAAD,wBAAqBG,KAAmC;IAAxD,IAAAC,KAAA;IACE;IACAH,MAAA,CAAAI,IAAA,MAAO;IAFYD,KAAA,CAAAD,KAAK,GAALA,KAAK;;IAGxB;EACF;EAEA;;;EAGAH,uBAAA,CAAAM,SAAA,CAAAC,iBAAiB,GAAjB,UACEC,WAAmE,EACnEC,aAA0C,EAC1CC,OAA8B;IAE9B,IAAI,CAACC,eAAe,CAACC,GAAG,CAACf,cAAc,CAACY,aAAa,EAAE,IAAI,CAACI,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CAAC;IAEzF,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAM,CAAC,IAAI,CAACL,eAAe,CAAC;IAE9C,IAAAM,MAAM,GAAKR,aAAa,CAAAQ,MAAlB;IACd,IAAMC,UAAU,GAAG,eAAe;IAClC,IAAMC,WAAW,GAAG,yBAAyB;IAC7C,IAAMC,uBAAuB,GAA4B;MACvDH,MAAM,EAAAA,MAAA;MACNC,UAAU,EAAAA,UAAA;MACVC,WAAW,EAAAA,WAAA;MACXE,uBAAuB,EAAE5B,qBAAqB,CAAC6B,kBAAkB;MACjEC,wBAAwB,EAAE7B,sBAAsB,CAAC4B;KAClD;IACO,IAAAE,cAAc,GAAKf,aAAa,CAAAe,cAAlB;IACtB,OAAOT,KAAK,CAACU,OAAO,CAClB,UAACC,OAAsC;MACrC,OAAAF,cAAc,CAACG,MAAM,CAACD,OAAO,CAACA,OAAwB,EAAEhB,OAAO,IAAI,EAAE,CAAC;IAAtE,CAAsE,EACxEU,uBAAuB,CACxB;EACH,CAAC;EAEOpB,uBAAA,CAAAM,SAAA,CAAAO,SAAS,GAAjB,UAAkBV,KAAmC,EAAEyB,OAAuB;IAC5E,OAAOhC,2CAA2C,CAACO,KAAK,EAAEyB,OAAO,CAAC;EACpE,CAAC;EAEO5B,uBAAA,CAAAM,SAAA,CAAAQ,WAAW,GAAnB,UAAoBe,MAAsB,EAAED,OAAuB;IACjE,OAAOjC,6CAA6C,CAACkC,MAAM,EAAED,OAAO,CAAC;EACvE,CAAC;EAIH,OAAA5B,uBAAC;AAAD,CAAC,CAtD4CD,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}