{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __awaiter, __generator } from \"tslib\";\nimport { ConsoleLogger as Logger, Credentials, AnalyticsAction } from '@aws-amplify/core';\nimport { KinesisClient, PutRecordsCommand } from '@aws-sdk/client-kinesis';\nimport { fromUtf8 } from '@aws-sdk/util-utf8-browser';\nimport { getAnalyticsUserAgent } from '../utils/UserAgent';\nvar logger = new Logger('AWSKinesisProvider');\n// events buffer\nvar BUFFER_SIZE = 1000;\nvar FLUSH_SIZE = 100;\nvar FLUSH_INTERVAL = 5 * 1000; // 5s\nvar RESEND_LIMIT = 5;\nvar AWSKinesisProvider = /** @class */function () {\n  function AWSKinesisProvider(config) {\n    this._buffer = [];\n    this._config = config || {};\n    this._config.bufferSize = this._config.bufferSize || BUFFER_SIZE;\n    this._config.flushSize = this._config.flushSize || FLUSH_SIZE;\n    this._config.flushInterval = this._config.flushInterval || FLUSH_INTERVAL;\n    this._config.resendLimit = this._config.resendLimit || RESEND_LIMIT;\n    this._setupTimer();\n  }\n  AWSKinesisProvider.prototype._setupTimer = function () {\n    var _this = this;\n    if (this._timer) {\n      clearInterval(this._timer);\n    }\n    var _a = this._config,\n      flushSize = _a.flushSize,\n      flushInterval = _a.flushInterval;\n    this._timer = setInterval(function () {\n      var size = _this._buffer.length < flushSize ? _this._buffer.length : flushSize;\n      var events = [];\n      for (var i = 0; i < size; i += 1) {\n        var params = _this._buffer.shift();\n        events.push(params);\n      }\n      _this._sendFromBuffer(events);\n    }, flushInterval);\n  };\n  /**\n   * get the category of the plugin\n   */\n  AWSKinesisProvider.prototype.getCategory = function () {\n    return 'Analytics';\n  };\n  /**\n   * get provider name of the plugin\n   */\n  AWSKinesisProvider.prototype.getProviderName = function () {\n    return 'AWSKinesis';\n  };\n  /**\n   * configure the plugin\n   * @param {Object} config - configuration\n   */\n  AWSKinesisProvider.prototype.configure = function (config) {\n    logger.debug('configure Analytics', config);\n    var conf = config || {};\n    this._config = Object.assign({}, this._config, conf);\n    this._setupTimer();\n    return this._config;\n  };\n  /**\n   * record an event\n   * @param {Object} params - the params of an event\n   */\n  AWSKinesisProvider.prototype.record = function (params) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this._getCredentials()];\n          case 1:\n            credentials = _b.sent();\n            if (!credentials) return [2 /*return*/, Promise.resolve(false)];\n            Object.assign(params, {\n              config: this._config,\n              credentials: credentials\n            });\n            if ((_a = params.event) === null || _a === void 0 ? void 0 : _a.immediate) {\n              this._sendEvents([params]);\n              return [2 /*return*/, Promise.resolve(true)];\n            } else {\n              return [2 /*return*/, this._putToBuffer(params)];\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSKinesisProvider.prototype.updateEndpoint = function () {\n    logger.debug('updateEndpoint is not implemented in Kinesis provider');\n    return Promise.resolve(true);\n  };\n  /**\n   * @private\n   * @param params - params for the event recording\n   * Put events into buffer\n   */\n  AWSKinesisProvider.prototype._putToBuffer = function (params) {\n    if (this._buffer.length < BUFFER_SIZE) {\n      this._buffer.push(params);\n      return Promise.resolve(true);\n    } else {\n      logger.debug('exceed analytics events buffer size');\n      return Promise.reject(false);\n    }\n  };\n  AWSKinesisProvider.prototype._sendFromBuffer = function (events) {\n    var _this = this;\n    // collapse events by credentials\n    // events = [ {params} ]\n    var eventsGroups = [];\n    var preCred = null;\n    var group = [];\n    for (var i = 0; i < events.length; i += 1) {\n      var cred = events[i].credentials;\n      if (i === 0) {\n        group.push(events[i]);\n        preCred = cred;\n      } else {\n        if (cred.sessionToken === preCred.sessionToken && cred.identityId === preCred.identityId) {\n          logger.debug('no change for cred, put event in the same group');\n          group.push(events[i]);\n        } else {\n          eventsGroups.push(group);\n          group = [];\n          group.push(events[i]);\n          preCred = cred;\n        }\n      }\n    }\n    eventsGroups.push(group);\n    eventsGroups.map(function (evts) {\n      _this._sendEvents(evts);\n    });\n  };\n  AWSKinesisProvider.prototype._sendEvents = function (group) {\n    var _this = this;\n    if (group.length === 0) {\n      return;\n    }\n    var _a = group[0],\n      config = _a.config,\n      credentials = _a.credentials;\n    var initClients = this._init(config, credentials);\n    if (!initClients) return false;\n    var records = {};\n    group.map(function (params) {\n      // spit by streamName\n      var evt = params.event;\n      var streamName = evt.streamName;\n      if (records[streamName] === undefined) {\n        records[streamName] = [];\n      }\n      var bufferData = evt.data && typeof evt.data !== 'string' ? JSON.stringify(evt.data) : evt.data;\n      var Data = fromUtf8(bufferData);\n      var PartitionKey = evt.partitionKey || 'partition-' + credentials.identityId;\n      var record = {\n        Data: Data,\n        PartitionKey: PartitionKey\n      };\n      records[streamName].push(record);\n    });\n    Object.keys(records).map(function (streamName) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var command, err_1;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              logger.debug('putting records to kinesis with records', records[streamName]);\n              _a.label = 1;\n            case 1:\n              _a.trys.push([1, 3,, 4]);\n              command = new PutRecordsCommand({\n                Records: records[streamName],\n                StreamName: streamName\n              });\n              return [4 /*yield*/, this._kinesis.send(command)];\n            case 2:\n              _a.sent();\n              logger.debug('Upload records to stream', streamName);\n              return [3 /*break*/, 4];\n            case 3:\n              err_1 = _a.sent();\n              logger.debug('Failed to upload records to Kinesis', err_1);\n              return [3 /*break*/, 4];\n            case 4:\n              return [2 /*return*/];\n          }\n        });\n      });\n    });\n  };\n\n  AWSKinesisProvider.prototype._init = function (config, credentials) {\n    logger.debug('init clients');\n    if (this._kinesis && this._config.credentials && this._config.credentials.sessionToken === credentials.sessionToken && this._config.credentials.identityId === credentials.identityId) {\n      logger.debug('no change for analytics config, directly return from init');\n      return true;\n    }\n    this._config.credentials = credentials;\n    var region = config.region,\n      endpoint = config.endpoint;\n    return this._initKinesis(region, endpoint, credentials);\n  };\n  AWSKinesisProvider.prototype._initKinesis = function (region, endpoint, credentials) {\n    logger.debug('initialize kinesis with credentials', credentials);\n    this._kinesis = new KinesisClient({\n      region: region,\n      credentials: credentials,\n      customUserAgent: getAnalyticsUserAgent(AnalyticsAction.Record),\n      endpoint: endpoint\n    });\n    return true;\n  };\n  /**\n   * @private\n   * check if current credentials exists\n   */\n  AWSKinesisProvider.prototype._getCredentials = function () {\n    var _this = this;\n    return Credentials.get().then(function (credentials) {\n      if (!credentials) return null;\n      logger.debug('set credentials for analytics', _this._config.credentials);\n      return Credentials.shear(credentials);\n    }).catch(function (err) {\n      logger.debug('ensure credentials error', err);\n      return null;\n    });\n  };\n  return AWSKinesisProvider;\n}();\nexport { AWSKinesisProvider };","map":{"version":3,"names":["ConsoleLogger","Logger","Credentials","AnalyticsAction","KinesisClient","PutRecordsCommand","fromUtf8","getAnalyticsUserAgent","logger","BUFFER_SIZE","FLUSH_SIZE","FLUSH_INTERVAL","RESEND_LIMIT","AWSKinesisProvider","config","_buffer","_config","bufferSize","flushSize","flushInterval","resendLimit","_setupTimer","prototype","_this","_timer","clearInterval","_a","setInterval","size","length","events","i","params","shift","push","_sendFromBuffer","getCategory","getProviderName","configure","debug","conf","Object","assign","record","_getCredentials","credentials","_b","sent","Promise","resolve","event","immediate","_sendEvents","_putToBuffer","updateEndpoint","reject","eventsGroups","preCred","group","cred","sessionToken","identityId","map","evts","initClients","_init","records","evt","streamName","undefined","bufferData","data","JSON","stringify","Data","PartitionKey","partitionKey","keys","__awaiter","command","Records","StreamName","_kinesis","send","err_1","region","endpoint","_initKinesis","customUserAgent","Record","get","then","shear","catch","err"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-amplify/analytics/src/Providers/AWSKinesisProvider.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n\tConsoleLogger as Logger,\n\tCredentials,\n\tAnalyticsAction,\n} from '@aws-amplify/core';\nimport { KinesisClient, PutRecordsCommand } from '@aws-sdk/client-kinesis';\nimport { AnalyticsProvider } from '../types';\nimport { fromUtf8 } from '@aws-sdk/util-utf8-browser';\nimport { getAnalyticsUserAgent } from '../utils/UserAgent';\n\nconst logger = new Logger('AWSKinesisProvider');\n\n// events buffer\nconst BUFFER_SIZE = 1000;\nconst FLUSH_SIZE = 100;\nconst FLUSH_INTERVAL = 5 * 1000; // 5s\nconst RESEND_LIMIT = 5;\n\nexport class AWSKinesisProvider implements AnalyticsProvider {\n\tprotected _config;\n\tprivate _kinesis;\n\tprivate _buffer;\n\tprivate _timer;\n\n\tconstructor(config?) {\n\t\tthis._buffer = [];\n\t\tthis._config = config || {};\n\t\tthis._config.bufferSize = this._config.bufferSize || BUFFER_SIZE;\n\t\tthis._config.flushSize = this._config.flushSize || FLUSH_SIZE;\n\t\tthis._config.flushInterval = this._config.flushInterval || FLUSH_INTERVAL;\n\t\tthis._config.resendLimit = this._config.resendLimit || RESEND_LIMIT;\n\n\t\tthis._setupTimer();\n\t}\n\n\tprivate _setupTimer() {\n\t\tif (this._timer) {\n\t\t\tclearInterval(this._timer);\n\t\t}\n\t\tconst { flushSize, flushInterval } = this._config;\n\t\tthis._timer = setInterval(() => {\n\t\t\tconst size =\n\t\t\t\tthis._buffer.length < flushSize ? this._buffer.length : flushSize;\n\t\t\tconst events = [];\n\t\t\tfor (let i = 0; i < size; i += 1) {\n\t\t\t\tconst params = this._buffer.shift();\n\t\t\t\tevents.push(params);\n\t\t\t}\n\t\t\tthis._sendFromBuffer(events);\n\t\t}, flushInterval);\n\t}\n\n\t/**\n\t * get the category of the plugin\n\t */\n\tpublic getCategory(): string {\n\t\treturn 'Analytics';\n\t}\n\n\t/**\n\t * get provider name of the plugin\n\t */\n\tpublic getProviderName(): string {\n\t\treturn 'AWSKinesis';\n\t}\n\n\t/**\n\t * configure the plugin\n\t * @param {Object} config - configuration\n\t */\n\tpublic configure(config): object {\n\t\tlogger.debug('configure Analytics', config);\n\t\tconst conf = config || {};\n\t\tthis._config = Object.assign({}, this._config, conf);\n\n\t\tthis._setupTimer();\n\t\treturn this._config;\n\t}\n\n\t/**\n\t * record an event\n\t * @param {Object} params - the params of an event\n\t */\n\tpublic async record(params): Promise<boolean> {\n\t\tconst credentials = await this._getCredentials();\n\t\tif (!credentials) return Promise.resolve(false);\n\n\t\tObject.assign(params, { config: this._config, credentials });\n\n\t\tif (params.event?.immediate) {\n\t\t\tthis._sendEvents([params]);\n\n\t\t\treturn Promise.resolve(true);\n\t\t} else {\n\t\t\treturn this._putToBuffer(params);\n\t\t}\n\t}\n\n\tpublic updateEndpoint() {\n\t\tlogger.debug('updateEndpoint is not implemented in Kinesis provider');\n\t\treturn Promise.resolve(true);\n\t}\n\n\t/**\n\t * @private\n\t * @param params - params for the event recording\n\t * Put events into buffer\n\t */\n\tprivate _putToBuffer(params) {\n\t\tif (this._buffer.length < BUFFER_SIZE) {\n\t\t\tthis._buffer.push(params);\n\t\t\treturn Promise.resolve(true);\n\t\t} else {\n\t\t\tlogger.debug('exceed analytics events buffer size');\n\t\t\treturn Promise.reject(false);\n\t\t}\n\t}\n\n\tprivate _sendFromBuffer(events) {\n\t\t// collapse events by credentials\n\t\t// events = [ {params} ]\n\t\tconst eventsGroups = [];\n\t\tlet preCred = null;\n\t\tlet group = [];\n\t\tfor (let i = 0; i < events.length; i += 1) {\n\t\t\tconst cred = events[i].credentials;\n\t\t\tif (i === 0) {\n\t\t\t\tgroup.push(events[i]);\n\t\t\t\tpreCred = cred;\n\t\t\t} else {\n\t\t\t\tif (\n\t\t\t\t\tcred.sessionToken === preCred.sessionToken &&\n\t\t\t\t\tcred.identityId === preCred.identityId\n\t\t\t\t) {\n\t\t\t\t\tlogger.debug('no change for cred, put event in the same group');\n\t\t\t\t\tgroup.push(events[i]);\n\t\t\t\t} else {\n\t\t\t\t\teventsGroups.push(group);\n\t\t\t\t\tgroup = [];\n\t\t\t\t\tgroup.push(events[i]);\n\t\t\t\t\tpreCred = cred;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\teventsGroups.push(group);\n\n\t\teventsGroups.map(evts => {\n\t\t\tthis._sendEvents(evts);\n\t\t});\n\t}\n\n\tprotected _sendEvents(group) {\n\t\tif (group.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { config, credentials } = group[0];\n\n\t\tconst initClients = this._init(config, credentials);\n\t\tif (!initClients) return false;\n\n\t\tconst records = {};\n\n\t\tgroup.map(params => {\n\t\t\t// spit by streamName\n\t\t\tconst evt = params.event;\n\t\t\tconst { streamName } = evt;\n\t\t\tif (records[streamName] === undefined) {\n\t\t\t\trecords[streamName] = [];\n\t\t\t}\n\n\t\t\tconst bufferData =\n\t\t\t\tevt.data && typeof evt.data !== 'string'\n\t\t\t\t\t? JSON.stringify(evt.data)\n\t\t\t\t\t: evt.data;\n\t\t\tconst Data = fromUtf8(bufferData);\n\t\t\tconst PartitionKey =\n\t\t\t\tevt.partitionKey || 'partition-' + credentials.identityId;\n\t\t\tconst record = { Data, PartitionKey };\n\t\t\trecords[streamName].push(record);\n\t\t});\n\n\t\tObject.keys(records).map(async streamName => {\n\t\t\tlogger.debug(\n\t\t\t\t'putting records to kinesis with records',\n\t\t\t\trecords[streamName]\n\t\t\t);\n\t\t\ttry {\n\t\t\t\tconst command: PutRecordsCommand = new PutRecordsCommand({\n\t\t\t\t\tRecords: records[streamName],\n\t\t\t\t\tStreamName: streamName,\n\t\t\t\t});\n\t\t\t\tawait this._kinesis.send(command);\n\t\t\t\tlogger.debug('Upload records to stream', streamName);\n\t\t\t} catch (err) {\n\t\t\t\tlogger.debug('Failed to upload records to Kinesis', err);\n\t\t\t}\n\t\t});\n\t}\n\n\tprotected _init(config, credentials) {\n\t\tlogger.debug('init clients');\n\n\t\tif (\n\t\t\tthis._kinesis &&\n\t\t\tthis._config.credentials &&\n\t\t\tthis._config.credentials.sessionToken === credentials.sessionToken &&\n\t\t\tthis._config.credentials.identityId === credentials.identityId\n\t\t) {\n\t\t\tlogger.debug('no change for analytics config, directly return from init');\n\t\t\treturn true;\n\t\t}\n\n\t\tthis._config.credentials = credentials;\n\t\tconst { region, endpoint } = config;\n\n\t\treturn this._initKinesis(region, endpoint, credentials);\n\t}\n\n\tprivate _initKinesis(region, endpoint, credentials) {\n\t\tlogger.debug('initialize kinesis with credentials', credentials);\n\t\tthis._kinesis = new KinesisClient({\n\t\t\tregion,\n\t\t\tcredentials,\n\t\t\tcustomUserAgent: getAnalyticsUserAgent(AnalyticsAction.Record),\n\t\t\tendpoint,\n\t\t});\n\t\treturn true;\n\t}\n\n\t/**\n\t * @private\n\t * check if current credentials exists\n\t */\n\tprivate _getCredentials() {\n\t\treturn Credentials.get()\n\t\t\t.then(credentials => {\n\t\t\t\tif (!credentials) return null;\n\t\t\t\tlogger.debug('set credentials for analytics', this._config.credentials);\n\t\t\t\treturn Credentials.shear(credentials);\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tlogger.debug('ensure credentials error', err);\n\t\t\t\treturn null;\n\t\t\t});\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}