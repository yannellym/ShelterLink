{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { UpdateShardCountInput, UpdateShardCountOutput } from \"../models/models_0\";\nimport { deserializeAws_json1_1UpdateShardCountCommand, serializeAws_json1_1UpdateShardCountCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Updates the shard count of the specified stream to the specified number of\n *             shards.</p>\n *         <p>Updating the shard count is an asynchronous operation. Upon receiving the request,\n *             Kinesis Data Streams returns immediately and sets the status of the stream to\n *                 <code>UPDATING</code>. After the update is complete, Kinesis Data Streams sets the\n *             status of the stream back to <code>ACTIVE</code>. Depending on the size of the stream,\n *             the scaling action could take a few minutes to complete. You can continue to read and\n *             write data to your stream while its status is <code>UPDATING</code>.</p>\n *         <p>To update the shard count, Kinesis Data Streams performs splits or merges on\n *             individual shards. This can cause short-lived shards to be created, in addition to the\n *             final shards. These short-lived shards count towards your total shard limit for your\n *             account in the Region.</p>\n *         <p>When using this operation, we recommend that you specify a target shard count that\n *             is a multiple of 25% (25%, 50%, 75%, 100%). You can specify any target value within your\n *             shard limit. However, if you specify a target that isn't a multiple of 25%, the scaling\n *             action might take longer to complete. </p>\n *         <p>This operation has the following default limits. By default, you cannot do the\n *             following:</p>\n *         <ul>\n *             <li>\n *                 <p>Scale more than ten times per rolling 24-hour period per stream</p>\n *             </li>\n *             <li>\n *                 <p>Scale up to more than double your current shard count for a\n *                     stream</p>\n *             </li>\n *             <li>\n *                 <p>Scale down below half your current shard count for a stream</p>\n *             </li>\n *             <li>\n *                 <p>Scale up to more than 500 shards in a stream</p>\n *             </li>\n *             <li>\n *                 <p>Scale a stream with more than 500 shards down unless the result is less\n *                     than 500 shards</p>\n *             </li>\n *             <li>\n *                 <p>Scale up to more than the shard limit for your account</p>\n *             </li>\n *          </ul>\n *         <p>For the default limits for an AWS account, see <a href=\"https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html\">Streams Limits</a> in the\n *                 <i>Amazon Kinesis Data Streams Developer Guide</i>. To request an\n *             increase in the call rate limit, the shard limit for this API, or your overall shard\n *             limit, use the <a href=\"https://console.aws.amazon.com/support/v1#/case/create?issueType=service-limit-increase&limitType=service-code-kinesis\">limits form</a>.</p>\n */\nvar UpdateShardCountCommand = /** @class */function (_super) {\n  __extends(UpdateShardCountCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function UpdateShardCountCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  UpdateShardCountCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"KinesisClient\";\n    var commandName = \"UpdateShardCountCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: UpdateShardCountInput.filterSensitiveLog,\n      outputFilterSensitiveLog: UpdateShardCountOutput.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  UpdateShardCountCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1UpdateShardCountCommand(input, context);\n  };\n  UpdateShardCountCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1UpdateShardCountCommand(output, context);\n  };\n  return UpdateShardCountCommand;\n}($Command);\nexport { UpdateShardCountCommand };","map":{"version":3,"names":["UpdateShardCountInput","UpdateShardCountOutput","deserializeAws_json1_1UpdateShardCountCommand","serializeAws_json1_1UpdateShardCountCommand","getSerdePlugin","Command","$Command","UpdateShardCountCommand","_super","__extends","input","_this","call","prototype","resolveMiddleware","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","logger","clientName","commandName","handlerExecutionContext","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","requestHandler","resolve","request","handle","context","output"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-sdk/client-kinesis/commands/UpdateShardCountCommand.ts"],"sourcesContent":["import { KinesisClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../KinesisClient\";\nimport { UpdateShardCountInput, UpdateShardCountOutput } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1UpdateShardCountCommand,\n  serializeAws_json1_1UpdateShardCountCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type UpdateShardCountCommandInput = UpdateShardCountInput;\nexport type UpdateShardCountCommandOutput = UpdateShardCountOutput & __MetadataBearer;\n\n/**\n * <p>Updates the shard count of the specified stream to the specified number of\n *             shards.</p>\n *         <p>Updating the shard count is an asynchronous operation. Upon receiving the request,\n *             Kinesis Data Streams returns immediately and sets the status of the stream to\n *                 <code>UPDATING</code>. After the update is complete, Kinesis Data Streams sets the\n *             status of the stream back to <code>ACTIVE</code>. Depending on the size of the stream,\n *             the scaling action could take a few minutes to complete. You can continue to read and\n *             write data to your stream while its status is <code>UPDATING</code>.</p>\n *         <p>To update the shard count, Kinesis Data Streams performs splits or merges on\n *             individual shards. This can cause short-lived shards to be created, in addition to the\n *             final shards. These short-lived shards count towards your total shard limit for your\n *             account in the Region.</p>\n *         <p>When using this operation, we recommend that you specify a target shard count that\n *             is a multiple of 25% (25%, 50%, 75%, 100%). You can specify any target value within your\n *             shard limit. However, if you specify a target that isn't a multiple of 25%, the scaling\n *             action might take longer to complete. </p>\n *         <p>This operation has the following default limits. By default, you cannot do the\n *             following:</p>\n *         <ul>\n *             <li>\n *                 <p>Scale more than ten times per rolling 24-hour period per stream</p>\n *             </li>\n *             <li>\n *                 <p>Scale up to more than double your current shard count for a\n *                     stream</p>\n *             </li>\n *             <li>\n *                 <p>Scale down below half your current shard count for a stream</p>\n *             </li>\n *             <li>\n *                 <p>Scale up to more than 500 shards in a stream</p>\n *             </li>\n *             <li>\n *                 <p>Scale a stream with more than 500 shards down unless the result is less\n *                     than 500 shards</p>\n *             </li>\n *             <li>\n *                 <p>Scale up to more than the shard limit for your account</p>\n *             </li>\n *          </ul>\n *         <p>For the default limits for an AWS account, see <a href=\"https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html\">Streams Limits</a> in the\n *                 <i>Amazon Kinesis Data Streams Developer Guide</i>. To request an\n *             increase in the call rate limit, the shard limit for this API, or your overall shard\n *             limit, use the <a href=\"https://console.aws.amazon.com/support/v1#/case/create?issueType=service-limit-increase&limitType=service-code-kinesis\">limits form</a>.</p>\n */\nexport class UpdateShardCountCommand extends $Command<\n  UpdateShardCountCommandInput,\n  UpdateShardCountCommandOutput,\n  KinesisClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: UpdateShardCountCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: KinesisClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<UpdateShardCountCommandInput, UpdateShardCountCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"KinesisClient\";\n    const commandName = \"UpdateShardCountCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: UpdateShardCountInput.filterSensitiveLog,\n      outputFilterSensitiveLog: UpdateShardCountOutput.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: UpdateShardCountCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1UpdateShardCountCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<UpdateShardCountCommandOutput> {\n    return deserializeAws_json1_1UpdateShardCountCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"],"mappings":";AACA,SAASA,qBAAqB,EAAEC,sBAAsB,QAAQ,oBAAoB;AAClF,SACEC,6CAA6C,EAC7CC,2CAA2C,QACtC,0BAA0B;AACjC,SAASC,cAAc,QAAQ,2BAA2B;AAE1D,SAASC,OAAO,IAAIC,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CA,IAAAC,uBAAA,0BAAAC,MAAA;EAA6CC,SAAA,CAAAF,uBAAA,EAAAC,MAAA;EAK3C;EACA;EAEA,SAAAD,wBAAqBG,KAAmC;IAAxD,IAAAC,KAAA;IACE;IACAH,MAAA,CAAAI,IAAA,MAAO;IAFYD,KAAA,CAAAD,KAAK,GAALA,KAAK;;IAGxB;EACF;EAEA;;;EAGAH,uBAAA,CAAAM,SAAA,CAAAC,iBAAiB,GAAjB,UACEC,WAAmE,EACnEC,aAA0C,EAC1CC,OAA8B;IAE9B,IAAI,CAACC,eAAe,CAACC,GAAG,CAACf,cAAc,CAACY,aAAa,EAAE,IAAI,CAACI,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CAAC;IAEzF,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAM,CAAC,IAAI,CAACL,eAAe,CAAC;IAE9C,IAAAM,MAAM,GAAKR,aAAa,CAAAQ,MAAlB;IACd,IAAMC,UAAU,GAAG,eAAe;IAClC,IAAMC,WAAW,GAAG,yBAAyB;IAC7C,IAAMC,uBAAuB,GAA4B;MACvDH,MAAM,EAAAA,MAAA;MACNC,UAAU,EAAAA,UAAA;MACVC,WAAW,EAAAA,WAAA;MACXE,uBAAuB,EAAE5B,qBAAqB,CAAC6B,kBAAkB;MACjEC,wBAAwB,EAAE7B,sBAAsB,CAAC4B;KAClD;IACO,IAAAE,cAAc,GAAKf,aAAa,CAAAe,cAAlB;IACtB,OAAOT,KAAK,CAACU,OAAO,CAClB,UAACC,OAAsC;MACrC,OAAAF,cAAc,CAACG,MAAM,CAACD,OAAO,CAACA,OAAwB,EAAEhB,OAAO,IAAI,EAAE,CAAC;IAAtE,CAAsE,EACxEU,uBAAuB,CACxB;EACH,CAAC;EAEOpB,uBAAA,CAAAM,SAAA,CAAAO,SAAS,GAAjB,UAAkBV,KAAmC,EAAEyB,OAAuB;IAC5E,OAAOhC,2CAA2C,CAACO,KAAK,EAAEyB,OAAO,CAAC;EACpE,CAAC;EAEO5B,uBAAA,CAAAM,SAAA,CAAAQ,WAAW,GAAnB,UAAoBe,MAAsB,EAAED,OAAuB;IACjE,OAAOjC,6CAA6C,CAACkC,MAAM,EAAED,OAAO,CAAC;EACvE,CAAC;EAIH,OAAA5B,uBAAC;AAAD,CAAC,CAtD4CD,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}