{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { FirehoseClient } from \"./FirehoseClient\";\nimport { CreateDeliveryStreamCommand } from \"./commands/CreateDeliveryStreamCommand\";\nimport { DeleteDeliveryStreamCommand } from \"./commands/DeleteDeliveryStreamCommand\";\nimport { DescribeDeliveryStreamCommand } from \"./commands/DescribeDeliveryStreamCommand\";\nimport { ListDeliveryStreamsCommand } from \"./commands/ListDeliveryStreamsCommand\";\nimport { ListTagsForDeliveryStreamCommand } from \"./commands/ListTagsForDeliveryStreamCommand\";\nimport { PutRecordBatchCommand } from \"./commands/PutRecordBatchCommand\";\nimport { PutRecordCommand } from \"./commands/PutRecordCommand\";\nimport { StartDeliveryStreamEncryptionCommand } from \"./commands/StartDeliveryStreamEncryptionCommand\";\nimport { StopDeliveryStreamEncryptionCommand } from \"./commands/StopDeliveryStreamEncryptionCommand\";\nimport { TagDeliveryStreamCommand } from \"./commands/TagDeliveryStreamCommand\";\nimport { UntagDeliveryStreamCommand } from \"./commands/UntagDeliveryStreamCommand\";\nimport { UpdateDestinationCommand } from \"./commands/UpdateDestinationCommand\";\n/**\n * <fullname>Amazon Kinesis Data Firehose API Reference</fullname>\n *          <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time\n *          streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon\n *          Elasticsearch Service (Amazon ES), Amazon Redshift, and Splunk.</p>\n */\nvar Firehose = /** @class */function (_super) {\n  __extends(Firehose, _super);\n  function Firehose() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Firehose.prototype.createDeliveryStream = function (args, optionsOrCb, cb) {\n    var command = new CreateDeliveryStreamCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Firehose.prototype.deleteDeliveryStream = function (args, optionsOrCb, cb) {\n    var command = new DeleteDeliveryStreamCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Firehose.prototype.describeDeliveryStream = function (args, optionsOrCb, cb) {\n    var command = new DescribeDeliveryStreamCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Firehose.prototype.listDeliveryStreams = function (args, optionsOrCb, cb) {\n    var command = new ListDeliveryStreamsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Firehose.prototype.listTagsForDeliveryStream = function (args, optionsOrCb, cb) {\n    var command = new ListTagsForDeliveryStreamCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Firehose.prototype.putRecord = function (args, optionsOrCb, cb) {\n    var command = new PutRecordCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Firehose.prototype.putRecordBatch = function (args, optionsOrCb, cb) {\n    var command = new PutRecordBatchCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Firehose.prototype.startDeliveryStreamEncryption = function (args, optionsOrCb, cb) {\n    var command = new StartDeliveryStreamEncryptionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Firehose.prototype.stopDeliveryStreamEncryption = function (args, optionsOrCb, cb) {\n    var command = new StopDeliveryStreamEncryptionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Firehose.prototype.tagDeliveryStream = function (args, optionsOrCb, cb) {\n    var command = new TagDeliveryStreamCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Firehose.prototype.untagDeliveryStream = function (args, optionsOrCb, cb) {\n    var command = new UntagDeliveryStreamCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Firehose.prototype.updateDestination = function (args, optionsOrCb, cb) {\n    var command = new UpdateDestinationCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  return Firehose;\n}(FirehoseClient);\nexport { Firehose };","map":{"version":3,"names":["FirehoseClient","CreateDeliveryStreamCommand","DeleteDeliveryStreamCommand","DescribeDeliveryStreamCommand","ListDeliveryStreamsCommand","ListTagsForDeliveryStreamCommand","PutRecordBatchCommand","PutRecordCommand","StartDeliveryStreamEncryptionCommand","StopDeliveryStreamEncryptionCommand","TagDeliveryStreamCommand","UntagDeliveryStreamCommand","UpdateDestinationCommand","Firehose","_super","__extends","prototype","createDeliveryStream","args","optionsOrCb","cb","command","send","Error","deleteDeliveryStream","describeDeliveryStream","listDeliveryStreams","listTagsForDeliveryStream","putRecord","putRecordBatch","startDeliveryStreamEncryption","stopDeliveryStreamEncryption","tagDeliveryStream","untagDeliveryStream","updateDestination"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-sdk/client-firehose/Firehose.ts"],"sourcesContent":["import { FirehoseClient } from \"./FirehoseClient\";\nimport {\n  CreateDeliveryStreamCommand,\n  CreateDeliveryStreamCommandInput,\n  CreateDeliveryStreamCommandOutput,\n} from \"./commands/CreateDeliveryStreamCommand\";\nimport {\n  DeleteDeliveryStreamCommand,\n  DeleteDeliveryStreamCommandInput,\n  DeleteDeliveryStreamCommandOutput,\n} from \"./commands/DeleteDeliveryStreamCommand\";\nimport {\n  DescribeDeliveryStreamCommand,\n  DescribeDeliveryStreamCommandInput,\n  DescribeDeliveryStreamCommandOutput,\n} from \"./commands/DescribeDeliveryStreamCommand\";\nimport {\n  ListDeliveryStreamsCommand,\n  ListDeliveryStreamsCommandInput,\n  ListDeliveryStreamsCommandOutput,\n} from \"./commands/ListDeliveryStreamsCommand\";\nimport {\n  ListTagsForDeliveryStreamCommand,\n  ListTagsForDeliveryStreamCommandInput,\n  ListTagsForDeliveryStreamCommandOutput,\n} from \"./commands/ListTagsForDeliveryStreamCommand\";\nimport {\n  PutRecordBatchCommand,\n  PutRecordBatchCommandInput,\n  PutRecordBatchCommandOutput,\n} from \"./commands/PutRecordBatchCommand\";\nimport { PutRecordCommand, PutRecordCommandInput, PutRecordCommandOutput } from \"./commands/PutRecordCommand\";\nimport {\n  StartDeliveryStreamEncryptionCommand,\n  StartDeliveryStreamEncryptionCommandInput,\n  StartDeliveryStreamEncryptionCommandOutput,\n} from \"./commands/StartDeliveryStreamEncryptionCommand\";\nimport {\n  StopDeliveryStreamEncryptionCommand,\n  StopDeliveryStreamEncryptionCommandInput,\n  StopDeliveryStreamEncryptionCommandOutput,\n} from \"./commands/StopDeliveryStreamEncryptionCommand\";\nimport {\n  TagDeliveryStreamCommand,\n  TagDeliveryStreamCommandInput,\n  TagDeliveryStreamCommandOutput,\n} from \"./commands/TagDeliveryStreamCommand\";\nimport {\n  UntagDeliveryStreamCommand,\n  UntagDeliveryStreamCommandInput,\n  UntagDeliveryStreamCommandOutput,\n} from \"./commands/UntagDeliveryStreamCommand\";\nimport {\n  UpdateDestinationCommand,\n  UpdateDestinationCommandInput,\n  UpdateDestinationCommandOutput,\n} from \"./commands/UpdateDestinationCommand\";\nimport { HttpHandlerOptions as __HttpHandlerOptions } from \"@aws-sdk/types\";\n\n/**\n * <fullname>Amazon Kinesis Data Firehose API Reference</fullname>\n *          <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time\n *          streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon\n *          Elasticsearch Service (Amazon ES), Amazon Redshift, and Splunk.</p>\n */\nexport class Firehose extends FirehoseClient {\n  /**\n   * <p>Creates a Kinesis Data Firehose delivery stream.</p>\n   *\n   *          <p>By default, you can create up to 50 delivery streams per AWS Region.</p>\n   *          <p>This is an asynchronous operation that immediately returns. The initial status of the\n   *          delivery stream is <code>CREATING</code>. After the delivery stream is created, its status\n   *          is <code>ACTIVE</code> and it now accepts data. If the delivery stream creation fails, the\n   *          status transitions to <code>CREATING_FAILED</code>. Attempts to send data to a delivery\n   *          stream that is not in the <code>ACTIVE</code> state cause an exception. To check the state\n   *          of a delivery stream, use <a>DescribeDeliveryStream</a>.</p>\n   *          <p>If the status of a delivery stream is <code>CREATING_FAILED</code>, this status\n   *          doesn't change, and you can't invoke <code>CreateDeliveryStream</code> again on it.\n   *          However, you can invoke the <a>DeleteDeliveryStream</a> operation to delete\n   *          it.</p>\n   *          <p>A Kinesis Data Firehose delivery stream can be configured to receive records directly\n   *          from providers using <a>PutRecord</a> or <a>PutRecordBatch</a>, or it\n   *          can be configured to use an existing Kinesis stream as its source. To specify a Kinesis\n   *          data stream as input, set the <code>DeliveryStreamType</code> parameter to\n   *             <code>KinesisStreamAsSource</code>, and provide the Kinesis stream Amazon Resource Name\n   *          (ARN) and role ARN in the <code>KinesisStreamSourceConfiguration</code>\n   *          parameter.</p>\n   *          <p>To create a delivery stream with server-side encryption (SSE) enabled, include <a>DeliveryStreamEncryptionConfigurationInput</a> in your request. This is\n   *          optional. You can also invoke <a>StartDeliveryStreamEncryption</a> to turn on\n   *          SSE for an existing delivery stream that doesn't have SSE enabled.</p>\n   *          <p>A delivery stream is configured with a single destination: Amazon S3, Amazon ES,\n   *          Amazon Redshift, or Splunk. You must specify only one of the following destination\n   *          configuration parameters: <code>ExtendedS3DestinationConfiguration</code>,\n   *             <code>S3DestinationConfiguration</code>,\n   *             <code>ElasticsearchDestinationConfiguration</code>,\n   *             <code>RedshiftDestinationConfiguration</code>, or\n   *             <code>SplunkDestinationConfiguration</code>.</p>\n   *          <p>When you specify <code>S3DestinationConfiguration</code>, you can also provide the\n   *          following optional values: BufferingHints, <code>EncryptionConfiguration</code>, and\n   *             <code>CompressionFormat</code>. By default, if no <code>BufferingHints</code> value is\n   *          provided, Kinesis Data Firehose buffers data up to 5 MB or for 5 minutes, whichever\n   *          condition is satisfied first. <code>BufferingHints</code> is a hint, so there are some\n   *          cases where the service cannot adhere to these conditions strictly. For example, record\n   *          boundaries might be such that the size is a little over or under the configured buffering\n   *          size. By default, no encryption is performed. We strongly recommend that you enable\n   *          encryption to ensure secure data storage in Amazon S3.</p>\n   *\n   *          <p>A few notes about Amazon Redshift as a destination:</p>\n   *          <ul>\n   *             <li>\n   *                <p>An Amazon Redshift destination requires an S3 bucket as intermediate location.\n   *                Kinesis Data Firehose first delivers data to Amazon S3 and then uses\n   *                   <code>COPY</code> syntax to load data into an Amazon Redshift table. This is\n   *                specified in the <code>RedshiftDestinationConfiguration.S3Configuration</code>\n   *                parameter.</p>\n   *\n   *             </li>\n   *             <li>\n   *                <p>The compression formats <code>SNAPPY</code> or <code>ZIP</code> cannot be\n   *                specified in <code>RedshiftDestinationConfiguration.S3Configuration</code> because\n   *                the Amazon Redshift <code>COPY</code> operation that reads from the S3 bucket doesn't\n   *                support these compression formats.</p>\n   *             </li>\n   *             <li>\n   *                <p>We strongly recommend that you use the user name and password you provide\n   *                exclusively with Kinesis Data Firehose, and that the permissions for the account are\n   *                restricted for Amazon Redshift <code>INSERT</code> permissions.</p>\n   *\n   *             </li>\n   *          </ul>\n   *          <p>Kinesis Data Firehose assumes the IAM role that is configured as part of the\n   *          destination. The role should allow the Kinesis Data Firehose principal to assume the role,\n   *          and the role should have permissions that allow the service to deliver the data. For more\n   *          information, see <a href=\"https://docs.aws.amazon.com/firehose/latest/dev/controlling-access.html#using-iam-s3\">Grant Kinesis Data\n   *             Firehose Access to an Amazon S3 Destination</a> in the <i>Amazon Kinesis Data\n   *             Firehose Developer Guide</i>.</p>\n   */\n  public createDeliveryStream(\n    args: CreateDeliveryStreamCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<CreateDeliveryStreamCommandOutput>;\n  public createDeliveryStream(\n    args: CreateDeliveryStreamCommandInput,\n    cb: (err: any, data?: CreateDeliveryStreamCommandOutput) => void\n  ): void;\n  public createDeliveryStream(\n    args: CreateDeliveryStreamCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: CreateDeliveryStreamCommandOutput) => void\n  ): void;\n  public createDeliveryStream(\n    args: CreateDeliveryStreamCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: CreateDeliveryStreamCommandOutput) => void),\n    cb?: (err: any, data?: CreateDeliveryStreamCommandOutput) => void\n  ): Promise<CreateDeliveryStreamCommandOutput> | void {\n    const command = new CreateDeliveryStreamCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Deletes a delivery stream and its data.</p>\n   *          <p>To check the state of a delivery stream, use <a>DescribeDeliveryStream</a>. You can delete a delivery stream only if it is in one of the following states:\n   *             <code>ACTIVE</code>, <code>DELETING</code>, <code>CREATING_FAILED</code>, or\n   *             <code>DELETING_FAILED</code>. You can't delete a delivery stream that is in the\n   *             <code>CREATING</code> state. While the deletion request is in process, the delivery\n   *          stream is in the <code>DELETING</code> state.</p>\n   *          <p>While the delivery stream is in the <code>DELETING</code> state, the service might\n   *          continue to accept records, but it doesn't make any guarantees with respect to delivering\n   *          the data. Therefore, as a best practice, first stop any applications that are sending\n   *          records before you delete a delivery stream.</p>\n   */\n  public deleteDeliveryStream(\n    args: DeleteDeliveryStreamCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DeleteDeliveryStreamCommandOutput>;\n  public deleteDeliveryStream(\n    args: DeleteDeliveryStreamCommandInput,\n    cb: (err: any, data?: DeleteDeliveryStreamCommandOutput) => void\n  ): void;\n  public deleteDeliveryStream(\n    args: DeleteDeliveryStreamCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DeleteDeliveryStreamCommandOutput) => void\n  ): void;\n  public deleteDeliveryStream(\n    args: DeleteDeliveryStreamCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DeleteDeliveryStreamCommandOutput) => void),\n    cb?: (err: any, data?: DeleteDeliveryStreamCommandOutput) => void\n  ): Promise<DeleteDeliveryStreamCommandOutput> | void {\n    const command = new DeleteDeliveryStreamCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Describes the specified delivery stream and its status. For example, after your\n   *          delivery stream is created, call <code>DescribeDeliveryStream</code> to see whether the\n   *          delivery stream is <code>ACTIVE</code> and therefore ready for data to be sent to it. </p>\n   *          <p>If the status of a delivery stream is <code>CREATING_FAILED</code>, this status\n   *          doesn't change, and you can't invoke <a>CreateDeliveryStream</a> again on it.\n   *          However, you can invoke the <a>DeleteDeliveryStream</a> operation to delete it.\n   *          If the status is <code>DELETING_FAILED</code>, you can force deletion by invoking <a>DeleteDeliveryStream</a> again but with <a>DeleteDeliveryStreamInput$AllowForceDelete</a> set to true.</p>\n   */\n  public describeDeliveryStream(\n    args: DescribeDeliveryStreamCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DescribeDeliveryStreamCommandOutput>;\n  public describeDeliveryStream(\n    args: DescribeDeliveryStreamCommandInput,\n    cb: (err: any, data?: DescribeDeliveryStreamCommandOutput) => void\n  ): void;\n  public describeDeliveryStream(\n    args: DescribeDeliveryStreamCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DescribeDeliveryStreamCommandOutput) => void\n  ): void;\n  public describeDeliveryStream(\n    args: DescribeDeliveryStreamCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DescribeDeliveryStreamCommandOutput) => void),\n    cb?: (err: any, data?: DescribeDeliveryStreamCommandOutput) => void\n  ): Promise<DescribeDeliveryStreamCommandOutput> | void {\n    const command = new DescribeDeliveryStreamCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Lists your delivery streams in alphabetical order of their names.</p>\n   *          <p>The number of delivery streams might be too large to return using a single call to\n   *             <code>ListDeliveryStreams</code>. You can limit the number of delivery streams returned,\n   *          using the <code>Limit</code> parameter. To determine whether there are more delivery\n   *          streams to list, check the value of <code>HasMoreDeliveryStreams</code> in the output. If\n   *          there are more delivery streams to list, you can request them by calling this operation\n   *          again and setting the <code>ExclusiveStartDeliveryStreamName</code> parameter to the name\n   *          of the last delivery stream returned in the last call.</p>\n   */\n  public listDeliveryStreams(\n    args: ListDeliveryStreamsCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<ListDeliveryStreamsCommandOutput>;\n  public listDeliveryStreams(\n    args: ListDeliveryStreamsCommandInput,\n    cb: (err: any, data?: ListDeliveryStreamsCommandOutput) => void\n  ): void;\n  public listDeliveryStreams(\n    args: ListDeliveryStreamsCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: ListDeliveryStreamsCommandOutput) => void\n  ): void;\n  public listDeliveryStreams(\n    args: ListDeliveryStreamsCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: ListDeliveryStreamsCommandOutput) => void),\n    cb?: (err: any, data?: ListDeliveryStreamsCommandOutput) => void\n  ): Promise<ListDeliveryStreamsCommandOutput> | void {\n    const command = new ListDeliveryStreamsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Lists the tags for the specified delivery stream. This operation has a limit of five\n   *          transactions per second per account. </p>\n   */\n  public listTagsForDeliveryStream(\n    args: ListTagsForDeliveryStreamCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<ListTagsForDeliveryStreamCommandOutput>;\n  public listTagsForDeliveryStream(\n    args: ListTagsForDeliveryStreamCommandInput,\n    cb: (err: any, data?: ListTagsForDeliveryStreamCommandOutput) => void\n  ): void;\n  public listTagsForDeliveryStream(\n    args: ListTagsForDeliveryStreamCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: ListTagsForDeliveryStreamCommandOutput) => void\n  ): void;\n  public listTagsForDeliveryStream(\n    args: ListTagsForDeliveryStreamCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: ListTagsForDeliveryStreamCommandOutput) => void),\n    cb?: (err: any, data?: ListTagsForDeliveryStreamCommandOutput) => void\n  ): Promise<ListTagsForDeliveryStreamCommandOutput> | void {\n    const command = new ListTagsForDeliveryStreamCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Writes a single data record into an Amazon Kinesis Data Firehose delivery stream. To\n   *          write multiple data records into a delivery stream, use <a>PutRecordBatch</a>.\n   *          Applications using these operations are referred to as producers.</p>\n   *          <p>By default, each delivery stream can take in up to 2,000 transactions per second,\n   *          5,000 records per second, or 5 MB per second. If you use <a>PutRecord</a> and\n   *             <a>PutRecordBatch</a>, the limits are an aggregate across these two\n   *          operations for each delivery stream. For more information about limits and how to request\n   *          an increase, see <a href=\"https://docs.aws.amazon.com/firehose/latest/dev/limits.html\">Amazon\n   *             Kinesis Data Firehose Limits</a>. </p>\n   *          <p>You must specify the name of the delivery stream and the data record when using <a>PutRecord</a>. The data record consists of a data blob that can be up to 1,000\n   *          KB in size, and any kind of data. For example, it can be a segment from a log file,\n   *          geographic location data, website clickstream data, and so on.</p>\n   *          <p>Kinesis Data Firehose buffers records before delivering them to the destination. To\n   *          disambiguate the data blobs at the destination, a common solution is to use delimiters in\n   *          the data, such as a newline (<code>\\n</code>) or some other character unique within the\n   *          data. This allows the consumer application to parse individual data items when reading the\n   *          data from the destination.</p>\n   *          <p>The <code>PutRecord</code> operation returns a <code>RecordId</code>, which is a\n   *          unique string assigned to each record. Producer applications can use this ID for purposes\n   *          such as auditability and investigation.</p>\n   *          <p>If the <code>PutRecord</code> operation throws a\n   *             <code>ServiceUnavailableException</code>, back off and retry. If the exception persists,\n   *          it is possible that the throughput limits have been exceeded for the delivery stream. </p>\n   *          <p>Data records sent to Kinesis Data Firehose are stored for 24 hours from the time they\n   *          are added to a delivery stream as it tries to send the records to the destination. If the\n   *          destination is unreachable for more than 24 hours, the data is no longer\n   *          available.</p>\n   *\n   *          <important>\n   *             <p>Don't concatenate two or more base64 strings to form the data fields of your records.\n   *             Instead, concatenate the raw data, then perform base64 encoding.</p>\n   *          </important>\n   */\n  public putRecord(args: PutRecordCommandInput, options?: __HttpHandlerOptions): Promise<PutRecordCommandOutput>;\n  public putRecord(args: PutRecordCommandInput, cb: (err: any, data?: PutRecordCommandOutput) => void): void;\n  public putRecord(\n    args: PutRecordCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: PutRecordCommandOutput) => void\n  ): void;\n  public putRecord(\n    args: PutRecordCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: PutRecordCommandOutput) => void),\n    cb?: (err: any, data?: PutRecordCommandOutput) => void\n  ): Promise<PutRecordCommandOutput> | void {\n    const command = new PutRecordCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Writes multiple data records into a delivery stream in a single call, which can\n   *          achieve higher throughput per producer than when writing single records. To write single\n   *          data records into a delivery stream, use <a>PutRecord</a>. Applications using\n   *          these operations are referred to as producers.</p>\n   *          <p>For information about service quota, see <a href=\"https://docs.aws.amazon.com/firehose/latest/dev/limits.html\">Amazon Kinesis Data Firehose\n   *          Quota</a>.</p>\n   *          <p>Each <a>PutRecordBatch</a> request supports up to 500 records. Each record\n   *          in the request can be as large as 1,000 KB (before 64-bit encoding), up to a limit of 4 MB\n   *          for the entire request. These limits cannot be changed.</p>\n   *          <p>You must specify the name of the delivery stream and the data record when using <a>PutRecord</a>. The data record consists of a data blob that can be up to 1,000\n   *          KB in size, and any kind of data. For example, it could be a segment from a log file,\n   *          geographic location data, website clickstream data, and so on.</p>\n   *          <p>Kinesis Data Firehose buffers records before delivering them to the destination. To\n   *          disambiguate the data blobs at the destination, a common solution is to use delimiters in\n   *          the data, such as a newline (<code>\\n</code>) or some other character unique within the\n   *          data. This allows the consumer application to parse individual data items when reading the\n   *          data from the destination.</p>\n   *          <p>The <a>PutRecordBatch</a> response includes a count of failed records,\n   *             <code>FailedPutCount</code>, and an array of responses, <code>RequestResponses</code>.\n   *          Even if the <a>PutRecordBatch</a> call succeeds, the value of\n   *             <code>FailedPutCount</code> may be greater than 0, indicating that there are records for\n   *          which the operation didn't succeed. Each entry in the <code>RequestResponses</code> array\n   *          provides additional information about the processed record. It directly correlates with a\n   *          record in the request array using the same ordering, from the top to the bottom. The\n   *          response array always includes the same number of records as the request array.\n   *             <code>RequestResponses</code> includes both successfully and unsuccessfully processed\n   *          records. Kinesis Data Firehose tries to process all records in each <a>PutRecordBatch</a> request. A single record failure does not stop the processing\n   *          of subsequent records. </p>\n   *          <p>A successfully processed record includes a <code>RecordId</code> value, which is\n   *          unique for the record. An unsuccessfully processed record includes <code>ErrorCode</code>\n   *          and <code>ErrorMessage</code> values. <code>ErrorCode</code> reflects the type of error,\n   *          and is one of the following values: <code>ServiceUnavailableException</code> or\n   *             <code>InternalFailure</code>. <code>ErrorMessage</code> provides more detailed\n   *          information about the error.</p>\n   *          <p>If there is an internal server error or a timeout, the write might have completed or\n   *          it might have failed. If <code>FailedPutCount</code> is greater than 0, retry the request,\n   *          resending only those records that might have failed processing. This minimizes the possible\n   *          duplicate records and also reduces the total bytes sent (and corresponding charges). We\n   *          recommend that you handle any duplicates at the destination.</p>\n   *          <p>If <a>PutRecordBatch</a> throws <code>ServiceUnavailableException</code>,\n   *          back off and retry. If the exception persists, it is possible that the throughput limits\n   *          have been exceeded for the delivery stream.</p>\n   *\n   *          <p>Data records sent to Kinesis Data Firehose are stored for 24 hours from the time they\n   *          are added to a delivery stream as it attempts to send the records to the destination. If\n   *          the destination is unreachable for more than 24 hours, the data is no longer\n   *          available.</p>\n   *          <important>\n   *             <p>Don't concatenate two or more base64 strings to form the data fields of your records.\n   *             Instead, concatenate the raw data, then perform base64 encoding.</p>\n   *          </important>\n   */\n  public putRecordBatch(\n    args: PutRecordBatchCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<PutRecordBatchCommandOutput>;\n  public putRecordBatch(\n    args: PutRecordBatchCommandInput,\n    cb: (err: any, data?: PutRecordBatchCommandOutput) => void\n  ): void;\n  public putRecordBatch(\n    args: PutRecordBatchCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: PutRecordBatchCommandOutput) => void\n  ): void;\n  public putRecordBatch(\n    args: PutRecordBatchCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: PutRecordBatchCommandOutput) => void),\n    cb?: (err: any, data?: PutRecordBatchCommandOutput) => void\n  ): Promise<PutRecordBatchCommandOutput> | void {\n    const command = new PutRecordBatchCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Enables server-side encryption (SSE) for the delivery stream. </p>\n   *          <p>This operation is asynchronous. It returns immediately. When you invoke it, Kinesis Data\n   *          Firehose first sets the encryption status of the stream to <code>ENABLING</code>, and then\n   *          to <code>ENABLED</code>. The encryption status of a delivery stream is the\n   *             <code>Status</code> property in <a>DeliveryStreamEncryptionConfiguration</a>.\n   *          If the operation fails, the encryption status changes to <code>ENABLING_FAILED</code>. You\n   *          can continue to read and write data to your delivery stream while the encryption status is\n   *             <code>ENABLING</code>, but the data is not encrypted. It can take up to 5 seconds after\n   *          the encryption status changes to <code>ENABLED</code> before all records written to the\n   *          delivery stream are encrypted. To find out whether a record or a batch of records was\n   *          encrypted, check the response elements <a>PutRecordOutput$Encrypted</a> and\n   *             <a>PutRecordBatchOutput$Encrypted</a>, respectively.</p>\n   *          <p>To check the encryption status of a delivery stream, use <a>DescribeDeliveryStream</a>.</p>\n   *          <p>Even if encryption is currently enabled for a delivery stream, you can still invoke this\n   *          operation on it to change the ARN of the CMK or both its type and ARN. If you invoke this\n   *          method to change the CMK, and the old CMK is of type <code>CUSTOMER_MANAGED_CMK</code>,\n   *          Kinesis Data Firehose schedules the grant it had on the old CMK for retirement. If the new\n   *          CMK is of type <code>CUSTOMER_MANAGED_CMK</code>, Kinesis Data Firehose creates a grant\n   *          that enables it to use the new CMK to encrypt and decrypt data and to manage the\n   *          grant.</p>\n   *          <p>If a delivery stream already has encryption enabled and then you invoke this operation\n   *          to change the ARN of the CMK or both its type and ARN and you get\n   *             <code>ENABLING_FAILED</code>, this only means that the attempt to change the CMK failed.\n   *          In this case, encryption remains enabled with the old CMK.</p>\n   *          <p>If the encryption status of your delivery stream is <code>ENABLING_FAILED</code>, you\n   *          can invoke this operation again with a valid CMK. The CMK must be enabled and the key\n   *          policy mustn't explicitly deny the permission for Kinesis Data Firehose to invoke KMS\n   *          encrypt and decrypt operations.</p>\n   *          <p>You can enable SSE for a delivery stream only if it's a delivery stream that uses\n   *             <code>DirectPut</code> as its source. </p>\n   *          <p>The <code>StartDeliveryStreamEncryption</code> and\n   *             <code>StopDeliveryStreamEncryption</code> operations have a combined limit of 25 calls\n   *          per delivery stream per 24 hours. For example, you reach the limit if you call\n   *             <code>StartDeliveryStreamEncryption</code> 13 times and\n   *             <code>StopDeliveryStreamEncryption</code> 12 times for the same delivery stream in a\n   *          24-hour period.</p>\n   */\n  public startDeliveryStreamEncryption(\n    args: StartDeliveryStreamEncryptionCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StartDeliveryStreamEncryptionCommandOutput>;\n  public startDeliveryStreamEncryption(\n    args: StartDeliveryStreamEncryptionCommandInput,\n    cb: (err: any, data?: StartDeliveryStreamEncryptionCommandOutput) => void\n  ): void;\n  public startDeliveryStreamEncryption(\n    args: StartDeliveryStreamEncryptionCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StartDeliveryStreamEncryptionCommandOutput) => void\n  ): void;\n  public startDeliveryStreamEncryption(\n    args: StartDeliveryStreamEncryptionCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StartDeliveryStreamEncryptionCommandOutput) => void),\n    cb?: (err: any, data?: StartDeliveryStreamEncryptionCommandOutput) => void\n  ): Promise<StartDeliveryStreamEncryptionCommandOutput> | void {\n    const command = new StartDeliveryStreamEncryptionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Disables server-side encryption (SSE) for the delivery stream. </p>\n   *          <p>This operation is asynchronous. It returns immediately. When you invoke it, Kinesis Data\n   *          Firehose first sets the encryption status of the stream to <code>DISABLING</code>, and then\n   *          to <code>DISABLED</code>. You can continue to read and write data to your stream while its\n   *          status is <code>DISABLING</code>. It can take up to 5 seconds after the encryption status\n   *          changes to <code>DISABLED</code> before all records written to the delivery stream are no\n   *          longer subject to encryption. To find out whether a record or a batch of records was\n   *          encrypted, check the response elements <a>PutRecordOutput$Encrypted</a> and\n   *             <a>PutRecordBatchOutput$Encrypted</a>, respectively.</p>\n   *          <p>To check the encryption state of a delivery stream, use <a>DescribeDeliveryStream</a>. </p>\n   *          <p>If SSE is enabled using a customer managed CMK and then you invoke\n   *             <code>StopDeliveryStreamEncryption</code>, Kinesis Data Firehose schedules the related\n   *          KMS grant for retirement and then retires it after it ensures that it is finished\n   *          delivering records to the destination.</p>\n   *          <p>The <code>StartDeliveryStreamEncryption</code> and\n   *             <code>StopDeliveryStreamEncryption</code> operations have a combined limit of 25 calls\n   *          per delivery stream per 24 hours. For example, you reach the limit if you call\n   *             <code>StartDeliveryStreamEncryption</code> 13 times and\n   *             <code>StopDeliveryStreamEncryption</code> 12 times for the same delivery stream in a\n   *          24-hour period.</p>\n   */\n  public stopDeliveryStreamEncryption(\n    args: StopDeliveryStreamEncryptionCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StopDeliveryStreamEncryptionCommandOutput>;\n  public stopDeliveryStreamEncryption(\n    args: StopDeliveryStreamEncryptionCommandInput,\n    cb: (err: any, data?: StopDeliveryStreamEncryptionCommandOutput) => void\n  ): void;\n  public stopDeliveryStreamEncryption(\n    args: StopDeliveryStreamEncryptionCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StopDeliveryStreamEncryptionCommandOutput) => void\n  ): void;\n  public stopDeliveryStreamEncryption(\n    args: StopDeliveryStreamEncryptionCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StopDeliveryStreamEncryptionCommandOutput) => void),\n    cb?: (err: any, data?: StopDeliveryStreamEncryptionCommandOutput) => void\n  ): Promise<StopDeliveryStreamEncryptionCommandOutput> | void {\n    const command = new StopDeliveryStreamEncryptionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Adds or updates tags for the specified delivery stream. A tag is a key-value pair\n   *          that you can define and assign to AWS resources. If you specify a tag that already exists,\n   *          the tag value is replaced with the value that you specify in the request. Tags are\n   *          metadata. For example, you can add friendly names and descriptions or other types of\n   *          information that can help you distinguish the delivery stream. For more information about\n   *          tags, see <a href=\"https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html\">Using Cost Allocation Tags</a> in the <i>AWS Billing and Cost Management\n   *             User Guide</i>. </p>\n   *          <p>Each delivery stream can have up to 50 tags. </p>\n   *          <p>This operation has a limit of five transactions per second per account. </p>\n   */\n  public tagDeliveryStream(\n    args: TagDeliveryStreamCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<TagDeliveryStreamCommandOutput>;\n  public tagDeliveryStream(\n    args: TagDeliveryStreamCommandInput,\n    cb: (err: any, data?: TagDeliveryStreamCommandOutput) => void\n  ): void;\n  public tagDeliveryStream(\n    args: TagDeliveryStreamCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: TagDeliveryStreamCommandOutput) => void\n  ): void;\n  public tagDeliveryStream(\n    args: TagDeliveryStreamCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: TagDeliveryStreamCommandOutput) => void),\n    cb?: (err: any, data?: TagDeliveryStreamCommandOutput) => void\n  ): Promise<TagDeliveryStreamCommandOutput> | void {\n    const command = new TagDeliveryStreamCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Removes tags from the specified delivery stream. Removed tags are deleted, and you\n   *          can't recover them after this operation successfully completes.</p>\n   *          <p>If you specify a tag that doesn't exist, the operation ignores it.</p>\n   *          <p>This operation has a limit of five transactions per second per account. </p>\n   */\n  public untagDeliveryStream(\n    args: UntagDeliveryStreamCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<UntagDeliveryStreamCommandOutput>;\n  public untagDeliveryStream(\n    args: UntagDeliveryStreamCommandInput,\n    cb: (err: any, data?: UntagDeliveryStreamCommandOutput) => void\n  ): void;\n  public untagDeliveryStream(\n    args: UntagDeliveryStreamCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: UntagDeliveryStreamCommandOutput) => void\n  ): void;\n  public untagDeliveryStream(\n    args: UntagDeliveryStreamCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: UntagDeliveryStreamCommandOutput) => void),\n    cb?: (err: any, data?: UntagDeliveryStreamCommandOutput) => void\n  ): Promise<UntagDeliveryStreamCommandOutput> | void {\n    const command = new UntagDeliveryStreamCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Updates the specified destination of the specified delivery stream.</p>\n   *\n   *          <p>Use this operation to change the destination type (for example, to replace the Amazon\n   *          S3 destination with Amazon Redshift) or change the parameters associated with a destination\n   *          (for example, to change the bucket name of the Amazon S3 destination). The update might not\n   *          occur immediately. The target delivery stream remains active while the configurations are\n   *          updated, so data writes to the delivery stream can continue during this process. The\n   *          updated configurations are usually effective within a few minutes.</p>\n   *          <p>Switching between Amazon ES and other services is not supported. For an Amazon ES\n   *          destination, you can only update to another Amazon ES destination.</p>\n   *          <p>If the destination type is the same, Kinesis Data Firehose merges the configuration\n   *          parameters specified with the destination configuration that already exists on the delivery\n   *          stream. If any of the parameters are not specified in the call, the existing values are\n   *          retained. For example, in the Amazon S3 destination, if <a>EncryptionConfiguration</a> is not specified, then the existing\n   *             <code>EncryptionConfiguration</code> is maintained on the destination.</p>\n   *          <p>If the destination type is not the same, for example, changing the destination from\n   *          Amazon S3 to Amazon Redshift, Kinesis Data Firehose does not merge any parameters. In this\n   *          case, all parameters must be specified.</p>\n   *\n   *          <p>Kinesis Data Firehose uses <code>CurrentDeliveryStreamVersionId</code> to avoid race\n   *          conditions and conflicting merges. This is a required field, and the service updates the\n   *          configuration only if the existing configuration has a version ID that matches. After the\n   *          update is applied successfully, the version ID is updated, and can be retrieved using <a>DescribeDeliveryStream</a>. Use the new version ID to set\n   *             <code>CurrentDeliveryStreamVersionId</code> in the next call.</p>\n   */\n  public updateDestination(\n    args: UpdateDestinationCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<UpdateDestinationCommandOutput>;\n  public updateDestination(\n    args: UpdateDestinationCommandInput,\n    cb: (err: any, data?: UpdateDestinationCommandOutput) => void\n  ): void;\n  public updateDestination(\n    args: UpdateDestinationCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: UpdateDestinationCommandOutput) => void\n  ): void;\n  public updateDestination(\n    args: UpdateDestinationCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: UpdateDestinationCommandOutput) => void),\n    cb?: (err: any, data?: UpdateDestinationCommandOutput) => void\n  ): Promise<UpdateDestinationCommandOutput> | void {\n    const command = new UpdateDestinationCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}