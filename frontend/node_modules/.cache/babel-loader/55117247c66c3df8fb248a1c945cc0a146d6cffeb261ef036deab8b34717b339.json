{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { GetDocumentTextDetectionRequest, GetDocumentTextDetectionResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1GetDocumentTextDetectionCommand, serializeAws_json1_1GetDocumentTextDetectionCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Gets the results for an Amazon Textract asynchronous operation that detects text in a document.\n *      Amazon Textract can detect lines of text and the words that make up a line of text.</p>\n *          <p>You start asynchronous text detection by calling <a>StartDocumentTextDetection</a>, which returns a job identifier\n *             (<code>JobId</code>). When the text detection operation finishes, Amazon Textract publishes a\n *          completion status to the Amazon Simple Notification Service (Amazon SNS) topic that's registered in the initial call to\n *             <code>StartDocumentTextDetection</code>. To get the results of the text-detection\n *          operation, first check that the status value published to the Amazon SNS topic is\n *             <code>SUCCEEDED</code>. If so, call <code>GetDocumentTextDetection</code>, and pass the\n *          job identifier (<code>JobId</code>) from the initial call to\n *             <code>StartDocumentTextDetection</code>.</p>\n *          <p>\n *             <code>GetDocumentTextDetection</code> returns an array of <a>Block</a>\n *          objects. </p>\n *          <p>Each document page has as an associated <code>Block</code> of type PAGE. Each PAGE <code>Block</code> object\n *         is the parent of LINE <code>Block</code> objects that represent the lines of detected text on a page. A LINE <code>Block</code> object is\n *         a parent for each word that makes up the line. Words are represented by <code>Block</code> objects of type WORD.</p>\n *\n *          <p>Use the MaxResults parameter to limit the number of blocks that are returned. If there\n *          are more results than specified in <code>MaxResults</code>, the value of\n *             <code>NextToken</code> in the operation response contains a pagination token for getting\n *          the next set of results. To get the next page of results, call\n *             <code>GetDocumentTextDetection</code>, and populate the <code>NextToken</code> request\n *          parameter with the token value that's returned from the previous call to\n *             <code>GetDocumentTextDetection</code>.</p>\n *          <p>For more information, see <a href=\"https://docs.aws.amazon.com/textract/latest/dg/how-it-works-detecting.html\">Document Text Detection</a>.</p>\n */\nvar GetDocumentTextDetectionCommand = /** @class */function (_super) {\n  __extends(GetDocumentTextDetectionCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function GetDocumentTextDetectionCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  GetDocumentTextDetectionCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"TextractClient\";\n    var commandName = \"GetDocumentTextDetectionCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: GetDocumentTextDetectionRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: GetDocumentTextDetectionResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  GetDocumentTextDetectionCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1GetDocumentTextDetectionCommand(input, context);\n  };\n  GetDocumentTextDetectionCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1GetDocumentTextDetectionCommand(output, context);\n  };\n  return GetDocumentTextDetectionCommand;\n}($Command);\nexport { GetDocumentTextDetectionCommand };","map":{"version":3,"names":["GetDocumentTextDetectionRequest","GetDocumentTextDetectionResponse","deserializeAws_json1_1GetDocumentTextDetectionCommand","serializeAws_json1_1GetDocumentTextDetectionCommand","getSerdePlugin","Command","$Command","GetDocumentTextDetectionCommand","_super","__extends","input","_this","call","prototype","resolveMiddleware","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","logger","clientName","commandName","handlerExecutionContext","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","requestHandler","resolve","request","handle","context","output"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-sdk/client-textract/commands/GetDocumentTextDetectionCommand.ts"],"sourcesContent":["import { ServiceInputTypes, ServiceOutputTypes, TextractClientResolvedConfig } from \"../TextractClient\";\nimport { GetDocumentTextDetectionRequest, GetDocumentTextDetectionResponse } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1GetDocumentTextDetectionCommand,\n  serializeAws_json1_1GetDocumentTextDetectionCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type GetDocumentTextDetectionCommandInput = GetDocumentTextDetectionRequest;\nexport type GetDocumentTextDetectionCommandOutput = GetDocumentTextDetectionResponse & __MetadataBearer;\n\n/**\n * <p>Gets the results for an Amazon Textract asynchronous operation that detects text in a document.\n *      Amazon Textract can detect lines of text and the words that make up a line of text.</p>\n *          <p>You start asynchronous text detection by calling <a>StartDocumentTextDetection</a>, which returns a job identifier\n *             (<code>JobId</code>). When the text detection operation finishes, Amazon Textract publishes a\n *          completion status to the Amazon Simple Notification Service (Amazon SNS) topic that's registered in the initial call to\n *             <code>StartDocumentTextDetection</code>. To get the results of the text-detection\n *          operation, first check that the status value published to the Amazon SNS topic is\n *             <code>SUCCEEDED</code>. If so, call <code>GetDocumentTextDetection</code>, and pass the\n *          job identifier (<code>JobId</code>) from the initial call to\n *             <code>StartDocumentTextDetection</code>.</p>\n *          <p>\n *             <code>GetDocumentTextDetection</code> returns an array of <a>Block</a>\n *          objects. </p>\n *          <p>Each document page has as an associated <code>Block</code> of type PAGE. Each PAGE <code>Block</code> object\n *         is the parent of LINE <code>Block</code> objects that represent the lines of detected text on a page. A LINE <code>Block</code> object is\n *         a parent for each word that makes up the line. Words are represented by <code>Block</code> objects of type WORD.</p>\n *\n *          <p>Use the MaxResults parameter to limit the number of blocks that are returned. If there\n *          are more results than specified in <code>MaxResults</code>, the value of\n *             <code>NextToken</code> in the operation response contains a pagination token for getting\n *          the next set of results. To get the next page of results, call\n *             <code>GetDocumentTextDetection</code>, and populate the <code>NextToken</code> request\n *          parameter with the token value that's returned from the previous call to\n *             <code>GetDocumentTextDetection</code>.</p>\n *          <p>For more information, see <a href=\"https://docs.aws.amazon.com/textract/latest/dg/how-it-works-detecting.html\">Document Text Detection</a>.</p>\n */\nexport class GetDocumentTextDetectionCommand extends $Command<\n  GetDocumentTextDetectionCommandInput,\n  GetDocumentTextDetectionCommandOutput,\n  TextractClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: GetDocumentTextDetectionCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: TextractClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<GetDocumentTextDetectionCommandInput, GetDocumentTextDetectionCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"TextractClient\";\n    const commandName = \"GetDocumentTextDetectionCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: GetDocumentTextDetectionRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: GetDocumentTextDetectionResponse.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: GetDocumentTextDetectionCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1GetDocumentTextDetectionCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<GetDocumentTextDetectionCommandOutput> {\n    return deserializeAws_json1_1GetDocumentTextDetectionCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"],"mappings":";AACA,SAASA,+BAA+B,EAAEC,gCAAgC,QAAQ,oBAAoB;AACtG,SACEC,qDAAqD,EACrDC,mDAAmD,QAC9C,0BAA0B;AACjC,SAASC,cAAc,QAAQ,2BAA2B;AAE1D,SAASC,OAAO,IAAIC,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,IAAAC,+BAAA,0BAAAC,MAAA;EAAqDC,SAAA,CAAAF,+BAAA,EAAAC,MAAA;EAKnD;EACA;EAEA,SAAAD,gCAAqBG,KAA2C;IAAhE,IAAAC,KAAA;IACE;IACAH,MAAA,CAAAI,IAAA,MAAO;IAFYD,KAAA,CAAAD,KAAK,GAALA,KAAK;;IAGxB;EACF;EAEA;;;EAGAH,+BAAA,CAAAM,SAAA,CAAAC,iBAAiB,GAAjB,UACEC,WAAmE,EACnEC,aAA2C,EAC3CC,OAA8B;IAE9B,IAAI,CAACC,eAAe,CAACC,GAAG,CAACf,cAAc,CAACY,aAAa,EAAE,IAAI,CAACI,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CAAC;IAEzF,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAM,CAAC,IAAI,CAACL,eAAe,CAAC;IAE9C,IAAAM,MAAM,GAAKR,aAAa,CAAAQ,MAAlB;IACd,IAAMC,UAAU,GAAG,gBAAgB;IACnC,IAAMC,WAAW,GAAG,iCAAiC;IACrD,IAAMC,uBAAuB,GAA4B;MACvDH,MAAM,EAAAA,MAAA;MACNC,UAAU,EAAAA,UAAA;MACVC,WAAW,EAAAA,WAAA;MACXE,uBAAuB,EAAE5B,+BAA+B,CAAC6B,kBAAkB;MAC3EC,wBAAwB,EAAE7B,gCAAgC,CAAC4B;KAC5D;IACO,IAAAE,cAAc,GAAKf,aAAa,CAAAe,cAAlB;IACtB,OAAOT,KAAK,CAACU,OAAO,CAClB,UAACC,OAAsC;MACrC,OAAAF,cAAc,CAACG,MAAM,CAACD,OAAO,CAACA,OAAwB,EAAEhB,OAAO,IAAI,EAAE,CAAC;IAAtE,CAAsE,EACxEU,uBAAuB,CACxB;EACH,CAAC;EAEOpB,+BAAA,CAAAM,SAAA,CAAAO,SAAS,GAAjB,UAAkBV,KAA2C,EAAEyB,OAAuB;IACpF,OAAOhC,mDAAmD,CAACO,KAAK,EAAEyB,OAAO,CAAC;EAC5E,CAAC;EAEO5B,+BAAA,CAAAM,SAAA,CAAAQ,WAAW,GAAnB,UAAoBe,MAAsB,EAAED,OAAuB;IACjE,OAAOjC,qDAAqD,CAACkC,MAAM,EAAED,OAAO,CAAC;EAC/E,CAAC;EAIH,OAAA5B,+BAAC;AAAD,CAAC,CAtDoDD,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}