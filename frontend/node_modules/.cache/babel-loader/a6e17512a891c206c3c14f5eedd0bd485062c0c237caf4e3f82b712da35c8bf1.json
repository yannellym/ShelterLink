{"ast":null,"code":"var _jsxFileName = \"/Users/yannellym/Desktop/iwantapet/frontend/src/components/MainPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../styles/MainPage.css';\nimport PetCard from './PetCard';\nimport Filter from './Filter';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MainPage({\n  favoritePets,\n  addToFavorites,\n  removeFromFavorites\n}) {\n  _s();\n  // State variables\n  const [searchResults, setSearchResults] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 100;\n  const [cachedData, setCachedData] = useState([]);\n  const [totalPages, setTotalPages] = useState(0);\n  const maxPaginationButtons = 10;\n\n  // Filters state\n  const [selectedFilters, setSelectedFilters] = useState({\n    type: 'any',\n    breed: 'any',\n    age: 'any',\n    gender: 'any',\n    size: 'any',\n    coat: 'any'\n  });\n\n  // Use the custom hook to fetch data\n  const {\n    data,\n    loading: loadingPetfinderData\n  } = usePetfinderAPI(currentPage, itemsPerPage, selectedFilters);\n  useEffect(() => {\n    // Fetch pets for the initial page when the component mounts\n    fetchPetsForPage(currentPage);\n  }, []);\n  const handlePageChange = page => {\n    // Set loading to true before changing the page\n    setLoading(true);\n\n    // Delay fetching data and scrolling to the top\n    setTimeout(() => {\n      fetchPetsForPage(page);\n\n      // After the data is loaded, scroll to the top\n      window.scrollTo(0, 0); // Scroll to the top of the page\n    }, 500); // 500 milliseconds (0.5 second) delay\n  };\n\n  const handleFilterChange = newFilters => {\n    // Update selected filters\n    setSelectedFilters(newFilters);\n\n    // Apply filters to the cached data and update search results\n    const filteredResults = applyFilters(cachedData, newFilters);\n    setSearchResults(filteredResults);\n  };\n\n  // Function to filter pet data based on selected filters\n  const applyFilters = (data, filters) => {\n    return data.filter(pet => {\n      let matchesAllFilters = true;\n\n      // Loop through each filter to check if the pet matches the criteria\n      for (const filterKey in filters) {\n        var _filters$filterKey, _pet$filterKey;\n        // Get the filter value and pet value, converting both to lowercase for case-insensitive comparison\n        const filterValue = (_filters$filterKey = filters[filterKey]) === null || _filters$filterKey === void 0 ? void 0 : _filters$filterKey.toLowerCase();\n        const petValue = (_pet$filterKey = pet[filterKey]) === null || _pet$filterKey === void 0 ? void 0 : _pet$filterKey.toLowerCase();\n\n        // If the filter value is \"any,\" skip this filter\n        if (filterValue === 'any') {\n          continue;\n        }\n\n        // Special handling for the \"type\" filter to handle both \"Cat\" and \"Dog\"\n        if (filterKey === 'type') {\n          if (filterValue === 'cat' && petValue !== 'cat') {\n            matchesAllFilters = false;\n            break; // Exit the loop early if there's no match\n          }\n\n          if (filterValue === 'dog' && petValue !== 'dog') {\n            matchesAllFilters = false;\n            break; // Exit the loop early if there's no match\n          }\n        } else if (filterKey === 'breed') {\n          var _pet$breeds, _pet$breeds$primary;\n          // Handle the \"breed\" filter\n          const primaryBreed = (_pet$breeds = pet.breeds) === null || _pet$breeds === void 0 ? void 0 : (_pet$breeds$primary = _pet$breeds.primary) === null || _pet$breeds$primary === void 0 ? void 0 : _pet$breeds$primary.toLowerCase();\n          if (primaryBreed !== filterValue) {\n            matchesAllFilters = false;\n            break; // Exit the loop early if there's no match\n          }\n        } else {\n          // For other filters, compare values directly\n          if (petValue !== filterValue) {\n            matchesAllFilters = false;\n            break; // Exit the loop early if there's no match\n          }\n        }\n      }\n\n      // If the pet matches all filters, include it in the results\n      return matchesAllFilters;\n    });\n  };\n\n  // Function to render the list of pet cards based on applied filters\n  const renderPetCards = () => {\n    if (!loading) {\n      // Apply filters to the cached data\n      const filteredResults = applyFilters(cachedData, selectedFilters);\n\n      // Check if there are matching pets after applying filters\n      if (filteredResults.length > 0) {\n        return filteredResults.map(pet => /*#__PURE__*/_jsxDEV(PetCard, {\n          pet: pet,\n          addToFavorites: addToFavorites,\n          removeFromFavorites: removeFromFavorites,\n          isFavorite: favoritePets.some(favoritePet => favoritePet.id === pet.id)\n        }, pet.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 9\n        }, this));\n      } else {\n        // If no matching pets, display a message\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No pets match your criteria.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 14\n        }, this);\n      }\n    } else {\n      // If data is still loading, display a loading message\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 12\n      }, this);\n    }\n  };\n\n  // Function to generate pagination buttons for navigating between pages\n  const generatePaginationButtons = () => {\n    const buttons = [];\n    // Calculate the starting and ending page numbers to display\n    const startPage = Math.max(1, currentPage - Math.floor(maxPaginationButtons / 2));\n    const endPage = Math.min(totalPages, startPage + maxPaginationButtons - 1);\n\n    // Iterate through the pages and create buttons for each page\n    for (let page = startPage; page <= endPage; page++) {\n      buttons.push( /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handlePageChange(page) // Set an onClick handler to change the page\n        ,\n        className: currentPage === page ? 'active' : '' // Apply the 'active' class to the current page\n        ,\n        children: [page, \" \"]\n      }, page, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 7\n      }, this));\n    }\n    return buttons; // Return the generated pagination buttons\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filters\",\n        children: /*#__PURE__*/_jsxDEV(Filter, {\n          onFilterChange: handleFilterChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pet-card-list\",\n        children: renderPetCards()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pagination-horizontal\",\n        children: generatePaginationButtons()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n}\n_s(MainPage, \"tk43PHSuex9cGIWzx0sLzuWH9Mo=\", true);\n_c = MainPage;\nexport default MainPage;\nvar _c;\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"names":["React","useState","useEffect","PetCard","Filter","jsxDEV","_jsxDEV","MainPage","favoritePets","addToFavorites","removeFromFavorites","_s","searchResults","setSearchResults","loading","setLoading","currentPage","setCurrentPage","itemsPerPage","cachedData","setCachedData","totalPages","setTotalPages","maxPaginationButtons","selectedFilters","setSelectedFilters","type","breed","age","gender","size","coat","data","loadingPetfinderData","usePetfinderAPI","fetchPetsForPage","handlePageChange","page","setTimeout","window","scrollTo","handleFilterChange","newFilters","filteredResults","applyFilters","filters","filter","pet","matchesAllFilters","filterKey","_filters$filterKey","_pet$filterKey","filterValue","toLowerCase","petValue","_pet$breeds","_pet$breeds$primary","primaryBreed","breeds","primary","renderPetCards","length","map","isFavorite","some","favoritePet","id","fileName","_jsxFileName","lineNumber","columnNumber","children","generatePaginationButtons","buttons","startPage","Math","max","floor","endPage","min","push","onClick","className","onFilterChange","_c","$RefreshReg$"],"sources":["/Users/yannellym/Desktop/iwantapet/frontend/src/components/MainPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../styles/MainPage.css';\nimport PetCard from './PetCard';\nimport Filter from './Filter';\n\nfunction MainPage({ favoritePets, addToFavorites, removeFromFavorites }) {\n  // State variables\n  const [searchResults, setSearchResults] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 100;\n  const [cachedData, setCachedData] = useState([]);\n  const [totalPages, setTotalPages] = useState(0);\n  const maxPaginationButtons = 10; \n\n  // Filters state\n  const [selectedFilters, setSelectedFilters] = useState({\n    type: 'any',\n    breed: 'any',\n    age: 'any',\n    gender: 'any',\n    size: 'any',\n    coat: 'any',\n  });\n\n  // Use the custom hook to fetch data\nconst { data, loading: loadingPetfinderData } = usePetfinderAPI(\n  currentPage,\n  itemsPerPage,\n  selectedFilters\n);\n\n  useEffect(() => {\n    // Fetch pets for the initial page when the component mounts\n    fetchPetsForPage(currentPage);\n  }, []);\n\n  const handlePageChange = (page) => {\n    // Set loading to true before changing the page\n    setLoading(true);\n\n    // Delay fetching data and scrolling to the top\n    setTimeout(() => {\n      fetchPetsForPage(page);\n\n      // After the data is loaded, scroll to the top\n      window.scrollTo(0, 0); // Scroll to the top of the page\n    }, 500); // 500 milliseconds (0.5 second) delay\n  };\n\n  const handleFilterChange = (newFilters) => {\n    // Update selected filters\n    setSelectedFilters(newFilters);\n\n    // Apply filters to the cached data and update search results\n    const filteredResults = applyFilters(cachedData, newFilters);\n    setSearchResults(filteredResults);\n  };\n\n// Function to filter pet data based on selected filters\nconst applyFilters = (data, filters) => {\n  return data.filter((pet) => {\n    let matchesAllFilters = true;\n\n    // Loop through each filter to check if the pet matches the criteria\n    for (const filterKey in filters) {\n      // Get the filter value and pet value, converting both to lowercase for case-insensitive comparison\n      const filterValue = filters[filterKey]?.toLowerCase();\n      const petValue = pet[filterKey]?.toLowerCase();\n\n      // If the filter value is \"any,\" skip this filter\n      if (filterValue === 'any') {\n        continue;\n      }\n\n      // Special handling for the \"type\" filter to handle both \"Cat\" and \"Dog\"\n      if (filterKey === 'type') {\n        if (filterValue === 'cat' && petValue !== 'cat') {\n          matchesAllFilters = false;\n          break; // Exit the loop early if there's no match\n        }\n        if (filterValue === 'dog' && petValue !== 'dog') {\n          matchesAllFilters = false;\n          break; // Exit the loop early if there's no match\n        }\n      } else if (filterKey === 'breed') {\n        // Handle the \"breed\" filter\n        const primaryBreed = pet.breeds?.primary?.toLowerCase();\n        if (primaryBreed !== filterValue) {\n          matchesAllFilters = false;\n          break; // Exit the loop early if there's no match\n        }\n      } else {\n        // For other filters, compare values directly\n        if (petValue !== filterValue) {\n          matchesAllFilters = false;\n          break; // Exit the loop early if there's no match\n        }\n      }\n    }\n\n    // If the pet matches all filters, include it in the results\n    return matchesAllFilters;\n  });\n};\n\n// Function to render the list of pet cards based on applied filters\nconst renderPetCards = () => {\n  if (!loading) {\n    // Apply filters to the cached data\n    const filteredResults = applyFilters(cachedData, selectedFilters);\n\n    // Check if there are matching pets after applying filters\n    if (filteredResults.length > 0) {\n      return filteredResults.map((pet) => (\n        <PetCard\n          key={pet.id}\n          pet={pet}\n          addToFavorites={addToFavorites}\n          removeFromFavorites={removeFromFavorites}\n          isFavorite={favoritePets.some((favoritePet) => favoritePet.id === pet.id)}\n        />\n      ));\n    } else {\n      // If no matching pets, display a message\n      return <p>No pets match your criteria.</p>;\n    }\n  } else {\n    // If data is still loading, display a loading message\n    return <p>Loading...</p>;\n  }\n};\n\n// Function to generate pagination buttons for navigating between pages\nconst generatePaginationButtons = () => {\n  const buttons = [];\n  // Calculate the starting and ending page numbers to display\n  const startPage = Math.max(1, currentPage - Math.floor(maxPaginationButtons / 2));\n  const endPage = Math.min(totalPages, startPage + maxPaginationButtons - 1);\n\n  // Iterate through the pages and create buttons for each page\n  for (let page = startPage; page <= endPage; page++) {\n    buttons.push(\n      <button\n        key={page}\n        onClick={() => handlePageChange(page)} // Set an onClick handler to change the page\n        className={currentPage === page ? 'active' : ''} // Apply the 'active' class to the current page\n      >\n        {page} {/* Display the page number as button text */}\n      </button>\n    );\n  }\n\n  return buttons; // Return the generated pagination buttons\n};\n\n\n  return (\n    <div className=\"main-page\">\n      <div className=\"sidebar\">\n        <div className=\"filters\">\n          <Filter onFilterChange={handleFilterChange} />\n        </div>\n      </div>\n      <div className=\"content\">\n        <div className=\"pet-card-list\">\n          {renderPetCards()}\n        </div>\n        <div className=\"pagination-horizontal\">\n          {generatePaginationButtons()}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default MainPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}