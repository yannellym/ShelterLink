{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (g && (g = 0, op[0] && (_ = 0)), _) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * @private For internal Amplify use.\n *\n * Creates a new scope for promises, observables, and other types of work or\n * processes that may be running in the background. This manager provides\n * an singular entrypoint to request termination and await completion.\n *\n * As work completes on its own prior to close, the manager removes them\n * from the registry to avoid holding references to completed jobs.\n */\nvar BackgroundProcessManager = /** @class */function () {\n  /**\n   * Creates a new manager for promises, observables, and other types\n   * of work that may be running in the background. This manager provides\n   * a centralized mechanism to request termination and await completion.\n   */\n  function BackgroundProcessManager() {\n    /**\n     * A string indicating whether the manager is accepting new work (\"Open\"),\n     * waiting for work to complete (\"Closing\"), or fully done with all\n     * submitted work and *not* accepting new jobs (\"Closed\").\n     */\n    this._state = BackgroundProcessManagerState.Open;\n    /**\n     * The list of outstanding jobs we'll need to wait for upon `close()`\n     */\n    this.jobs = new Set();\n  }\n  BackgroundProcessManager.prototype.add = function (jobOrDescription, optionalDescription) {\n    var job;\n    var description;\n    if (typeof jobOrDescription === 'string') {\n      job = undefined;\n      description = jobOrDescription;\n    } else {\n      job = jobOrDescription;\n      description = optionalDescription;\n    }\n    var error = this.closedFailure(description);\n    if (error) return error;\n    if (job === undefined) {\n      return this.addHook(description);\n    } else if (typeof job === 'function') {\n      return this.addFunction(job, description);\n    } else if (job instanceof BackgroundProcessManager) {\n      return this.addManager(job, description);\n    } else {\n      throw new Error('If `job` is provided, it must be an Observable, Function, or BackgroundProcessManager.');\n    }\n  };\n  /**\n   * Adds a **cleaner** function that doesn't immediately get executed.\n   * Instead, the caller gets a **terminate** function back. The *cleaner* is\n   * invoked only once the mananger *closes* or the returned **terminate**\n   * function is called.\n   *\n   * @param clean The cleanup function.\n   * @param description Optional description to help identify pending jobs.\n   * @returns A terminate function.\n   */\n  BackgroundProcessManager.prototype.addCleaner = function (clean, description) {\n    var _this = this;\n    var _a = this.addHook(description),\n      resolve = _a.resolve,\n      onTerminate = _a.onTerminate;\n    var proxy = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4 /*yield*/, clean()];\n            case 1:\n              _a.sent();\n              resolve();\n              return [2 /*return*/];\n          }\n        });\n      });\n    };\n\n    onTerminate.then(proxy);\n    return proxy;\n  };\n  BackgroundProcessManager.prototype.addFunction = function (job, description) {\n    // the function we call when we want to try to terminate this job.\n    var terminate;\n    // the promise the job can opt into listening to for termination.\n    var onTerminate = new Promise(function (resolve) {\n      terminate = resolve;\n    });\n    // finally! start the job.\n    var jobResult = job(onTerminate);\n    // depending on what the job gives back, register the result\n    // so we can monitor for completion.\n    if (typeof (jobResult === null || jobResult === void 0 ? void 0 : jobResult.then) === 'function') {\n      this.registerPromise(jobResult, terminate, description);\n    }\n    // At the end of the day, or you know, method call, it doesn't matter\n    // what the return value is at all; we just pass it through to the\n    // caller.\n    return jobResult;\n  };\n  BackgroundProcessManager.prototype.addManager = function (manager, description) {\n    var _this = this;\n    this.addCleaner(function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4 /*yield*/, manager.close()];\n            case 1:\n              return [2 /*return*/, _a.sent()];\n          }\n        });\n      });\n    }, description);\n  };\n  /**\n   * Creates and registers a fabricated job for processes that need to operate\n   * with callbacks/hooks. The returned `resolve` and `reject`\n   * functions can be used to signal the job is done successfully or not.\n   * The returned `onTerminate` is a promise that will resolve when the\n   * manager is requesting the termination of the job.\n   *\n   * @param description Optional description to help identify pending jobs.\n   * @returns `{ resolve, reject, onTerminate }`\n   */\n  BackgroundProcessManager.prototype.addHook = function (description) {\n    // the resolve/reject functions we'll provide to the caller to signal\n    // the state of the job.\n    var resolve;\n    var reject;\n    // the underlying promise we'll use to manage it, pretty much like\n    // any other promise.\n    var promise = new Promise(function (res, rej) {\n      resolve = res;\n      reject = rej;\n    });\n    // the function we call when we want to try to terminate this job.\n    var terminate;\n    // the promise the job can opt into listening to for termination.\n    var onTerminate = new Promise(function (resolveTerminate) {\n      terminate = resolveTerminate;\n    });\n    this.registerPromise(promise, terminate, description);\n    return {\n      resolve: resolve,\n      reject: reject,\n      onTerminate: onTerminate\n    };\n  };\n  /**\n   * Adds a Promise based job to the list of jobs for monitoring and listens\n   * for either a success or failure, upon which the job is considered \"done\"\n   * and removed from the registry.\n   *\n   * @param promise A promise that is on its way to being returned to a\n   * caller, which needs to be tracked as a background job.\n   * @param terminate The termination function to register, which can be\n   * invoked to request the job stop.\n   * @param description Optional description to help identify pending jobs.\n   */\n  BackgroundProcessManager.prototype.registerPromise = function (promise, terminate, description) {\n    var _this = this;\n    var jobEntry = {\n      promise: promise,\n      terminate: terminate,\n      description: description\n    };\n    this.jobs.add(jobEntry);\n    // in all of my testing, it is safe to multi-subscribe to a promise.\n    // so, rather than create another layer of promising, we're just going\n    // to hook into the promise we already have, and when it's done\n    // (successfully or not), we no longer need to wait for it upon close.\n    //\n    // sorry this is a bit hand-wavy:\n    //\n    // i believe we use `.then` and `.catch` instead of `.finally` because\n    // `.finally` is invoked in a different order in the sequence, and this\n    // breaks assumptions throughout and causes failures.\n    promise.then(function () {\n      _this.jobs.delete(jobEntry);\n    }).catch(function () {\n      _this.jobs.delete(jobEntry);\n    });\n  };\n  Object.defineProperty(BackgroundProcessManager.prototype, \"length\", {\n    /**\n     * The number of jobs being waited on.\n     *\n     * We don't use this for anything. It's just informational for the caller,\n     * and can be used in logging and testing.\n     *\n     * @returns the number of jobs.\n     */\n    get: function () {\n      return this.jobs.size;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BackgroundProcessManager.prototype, \"state\", {\n    /**\n     * The execution state of the manager. One of:\n     *\n     * 1. \"Open\" -> Accepting new jobs\n     * 1. \"Closing\" -> Not accepting new work. Waiting for jobs to complete.\n     * 1. \"Closed\" -> Not accepting new work. All submitted jobs are complete.\n     */\n    get: function () {\n      return this._state;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BackgroundProcessManager.prototype, \"pending\", {\n    /**\n     * The registered `description` of all still-pending jobs.\n     *\n     * @returns descriptions as an array.\n     */\n    get: function () {\n      return Array.from(this.jobs).map(function (job) {\n        return job.description;\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BackgroundProcessManager.prototype, \"isOpen\", {\n    /**\n     * Whether the manager is accepting new jobs.\n     */\n    get: function () {\n      return this._state === BackgroundProcessManagerState.Open;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BackgroundProcessManager.prototype, \"isClosing\", {\n    /**\n     * Whether the manager is rejecting new work, but still waiting for\n     * submitted work to complete.\n     */\n    get: function () {\n      return this._state === BackgroundProcessManagerState.Closing;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BackgroundProcessManager.prototype, \"isClosed\", {\n    /**\n     * Whether the manager is rejecting work and done waiting for submitted\n     * work to complete.\n     */\n    get: function () {\n      return this._state === BackgroundProcessManagerState.Closed;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  BackgroundProcessManager.prototype.closedFailure = function (description) {\n    if (!this.isOpen) {\n      return Promise.reject(new BackgroundManagerNotOpenError([\"The manager is \".concat(this.state, \".\"), \"You tried to add \\\"\".concat(description, \"\\\".\"), \"Pending jobs: [\\n\".concat(this.pending.map(function (t) {\n        return '    ' + t;\n      }).join(',\\n'), \"\\n]\")].join('\\n')));\n    }\n  };\n  /**\n   * Signals jobs to stop (for those that accept interruptions) and waits\n   * for confirmation that jobs have stopped.\n   *\n   * This immediately puts the manager into a closing state and just begins\n   * to reject new work. After all work in the manager is complete, the\n   * manager goes into a `Completed` state and `close()` returns.\n   *\n   * This call is idempotent.\n   *\n   * If the manager is already closing or closed, `finalCleaup` is not executed.\n   *\n   * @param onClosed\n   * @returns The settled results of each still-running job's promise. If the\n   * manager is already closed, this will contain the results as of when the\n   * manager's `close()` was called in an `Open` state.\n   */\n  BackgroundProcessManager.prototype.close = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, _b, job;\n      var e_1, _c;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            if (!this.isOpen) return [3 /*break*/, 2];\n            this._state = BackgroundProcessManagerState.Closing;\n            try {\n              for (_a = __values(Array.from(this.jobs)), _b = _a.next(); !_b.done; _b = _a.next()) {\n                job = _b.value;\n                try {\n                  job.terminate();\n                } catch (error) {\n                  // Due to potential races with a job's natural completion, it's\n                  // reasonable to expect the termination call to fail. Hence,\n                  // not logging as an error.\n                  console.warn(\"Failed to send termination signal to job. Error: \".concat(error.message), job);\n                }\n              }\n            } catch (e_1_1) {\n              e_1 = {\n                error: e_1_1\n              };\n            } finally {\n              try {\n                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n              } finally {\n                if (e_1) throw e_1.error;\n              }\n            }\n            // Use `allSettled()` because we want to wait for all to finish. We do\n            // not want to stop waiting if there is a failure.\n            this._closingPromise = Promise.allSettled(Array.from(this.jobs).map(function (j) {\n              return j.promise;\n            }));\n            return [4 /*yield*/, this._closingPromise];\n          case 1:\n            _d.sent();\n            this._state = BackgroundProcessManagerState.Closed;\n            _d.label = 2;\n          case 2:\n            return [2 /*return*/, this._closingPromise];\n        }\n      });\n    });\n  };\n  /**\n   * Signals the manager to start accepting work (again) and returns once\n   * the manager is ready to do so.\n   *\n   * If the state is already `Open`, this call is a no-op.\n   *\n   * If the state is `Closed`, this call simply updates state and returns.\n   *\n   * If the state is `Closing`, this call waits for completion before it\n   * updates the state and returns.\n   */\n  BackgroundProcessManager.prototype.open = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.isClosing) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.close()];\n          case 1:\n            _a.sent();\n            _a.label = 2;\n          case 2:\n            this._state = BackgroundProcessManagerState.Open;\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  return BackgroundProcessManager;\n}();\nexport { BackgroundProcessManager };\n/**\n *\n */\nvar BackgroundManagerNotOpenError = /** @class */function (_super) {\n  __extends(BackgroundManagerNotOpenError, _super);\n  function BackgroundManagerNotOpenError(message) {\n    return _super.call(this, \"BackgroundManagerNotOpenError: \".concat(message)) || this;\n  }\n  return BackgroundManagerNotOpenError;\n}(Error);\nexport { BackgroundManagerNotOpenError };\n/**\n * All possible states a `BackgroundProcessManager` instance can be in.\n */\nexport var BackgroundProcessManagerState;\n(function (BackgroundProcessManagerState) {\n  /**\n   * Accepting new jobs.\n   */\n  BackgroundProcessManagerState[\"Open\"] = \"Open\";\n  /**\n   * Not accepting new jobs. Waiting for submitted jobs to complete.\n   */\n  BackgroundProcessManagerState[\"Closing\"] = \"Closing\";\n  /**\n   * Not accepting new jobs. All submitted jobs are complete.\n   */\n  BackgroundProcessManagerState[\"Closed\"] = \"Closed\";\n})(BackgroundProcessManagerState || (BackgroundProcessManagerState = {}));","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__generator","body","_","label","sent","t","trys","ops","f","y","g","verb","Symbol","iterator","n","v","op","pop","length","push","__values","o","s","m","i","BackgroundProcessManager","_state","BackgroundProcessManagerState","Open","jobs","Set","add","jobOrDescription","optionalDescription","job","description","undefined","error","closedFailure","addHook","addFunction","addManager","Error","addCleaner","clean","_this","_a","onTerminate","proxy","terminate","jobResult","registerPromise","manager","close","promise","res","rej","resolveTerminate","jobEntry","delete","catch","defineProperty","get","size","enumerable","configurable","from","map","Closing","Closed","isOpen","BackgroundManagerNotOpenError","concat","state","pending","join","_b","e_1","_c","_d","console","warn","message","e_1_1","return","_closingPromise","allSettled","j","open","isClosing","_super"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-amplify/core/lib-esm/Util/BackgroundProcessManager.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * @private For internal Amplify use.\n *\n * Creates a new scope for promises, observables, and other types of work or\n * processes that may be running in the background. This manager provides\n * an singular entrypoint to request termination and await completion.\n *\n * As work completes on its own prior to close, the manager removes them\n * from the registry to avoid holding references to completed jobs.\n */\nvar BackgroundProcessManager = /** @class */ (function () {\n    /**\n     * Creates a new manager for promises, observables, and other types\n     * of work that may be running in the background. This manager provides\n     * a centralized mechanism to request termination and await completion.\n     */\n    function BackgroundProcessManager() {\n        /**\n         * A string indicating whether the manager is accepting new work (\"Open\"),\n         * waiting for work to complete (\"Closing\"), or fully done with all\n         * submitted work and *not* accepting new jobs (\"Closed\").\n         */\n        this._state = BackgroundProcessManagerState.Open;\n        /**\n         * The list of outstanding jobs we'll need to wait for upon `close()`\n         */\n        this.jobs = new Set();\n    }\n    BackgroundProcessManager.prototype.add = function (jobOrDescription, optionalDescription) {\n        var job;\n        var description;\n        if (typeof jobOrDescription === 'string') {\n            job = undefined;\n            description = jobOrDescription;\n        }\n        else {\n            job = jobOrDescription;\n            description = optionalDescription;\n        }\n        var error = this.closedFailure(description);\n        if (error)\n            return error;\n        if (job === undefined) {\n            return this.addHook(description);\n        }\n        else if (typeof job === 'function') {\n            return this.addFunction(job, description);\n        }\n        else if (job instanceof BackgroundProcessManager) {\n            return this.addManager(job, description);\n        }\n        else {\n            throw new Error('If `job` is provided, it must be an Observable, Function, or BackgroundProcessManager.');\n        }\n    };\n    /**\n     * Adds a **cleaner** function that doesn't immediately get executed.\n     * Instead, the caller gets a **terminate** function back. The *cleaner* is\n     * invoked only once the mananger *closes* or the returned **terminate**\n     * function is called.\n     *\n     * @param clean The cleanup function.\n     * @param description Optional description to help identify pending jobs.\n     * @returns A terminate function.\n     */\n    BackgroundProcessManager.prototype.addCleaner = function (clean, description) {\n        var _this = this;\n        var _a = this.addHook(description), resolve = _a.resolve, onTerminate = _a.onTerminate;\n        var proxy = function () { return __awaiter(_this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, clean()];\n                    case 1:\n                        _a.sent();\n                        resolve();\n                        return [2 /*return*/];\n                }\n            });\n        }); };\n        onTerminate.then(proxy);\n        return proxy;\n    };\n    BackgroundProcessManager.prototype.addFunction = function (job, description) {\n        // the function we call when we want to try to terminate this job.\n        var terminate;\n        // the promise the job can opt into listening to for termination.\n        var onTerminate = new Promise(function (resolve) {\n            terminate = resolve;\n        });\n        // finally! start the job.\n        var jobResult = job(onTerminate);\n        // depending on what the job gives back, register the result\n        // so we can monitor for completion.\n        if (typeof (jobResult === null || jobResult === void 0 ? void 0 : jobResult.then) === 'function') {\n            this.registerPromise(jobResult, terminate, description);\n        }\n        // At the end of the day, or you know, method call, it doesn't matter\n        // what the return value is at all; we just pass it through to the\n        // caller.\n        return jobResult;\n    };\n    BackgroundProcessManager.prototype.addManager = function (manager, description) {\n        var _this = this;\n        this.addCleaner(function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, manager.close()];\n                case 1: return [2 /*return*/, _a.sent()];\n            }\n        }); }); }, description);\n    };\n    /**\n     * Creates and registers a fabricated job for processes that need to operate\n     * with callbacks/hooks. The returned `resolve` and `reject`\n     * functions can be used to signal the job is done successfully or not.\n     * The returned `onTerminate` is a promise that will resolve when the\n     * manager is requesting the termination of the job.\n     *\n     * @param description Optional description to help identify pending jobs.\n     * @returns `{ resolve, reject, onTerminate }`\n     */\n    BackgroundProcessManager.prototype.addHook = function (description) {\n        // the resolve/reject functions we'll provide to the caller to signal\n        // the state of the job.\n        var resolve;\n        var reject;\n        // the underlying promise we'll use to manage it, pretty much like\n        // any other promise.\n        var promise = new Promise(function (res, rej) {\n            resolve = res;\n            reject = rej;\n        });\n        // the function we call when we want to try to terminate this job.\n        var terminate;\n        // the promise the job can opt into listening to for termination.\n        var onTerminate = new Promise(function (resolveTerminate) {\n            terminate = resolveTerminate;\n        });\n        this.registerPromise(promise, terminate, description);\n        return {\n            resolve: resolve,\n            reject: reject,\n            onTerminate: onTerminate,\n        };\n    };\n    /**\n     * Adds a Promise based job to the list of jobs for monitoring and listens\n     * for either a success or failure, upon which the job is considered \"done\"\n     * and removed from the registry.\n     *\n     * @param promise A promise that is on its way to being returned to a\n     * caller, which needs to be tracked as a background job.\n     * @param terminate The termination function to register, which can be\n     * invoked to request the job stop.\n     * @param description Optional description to help identify pending jobs.\n     */\n    BackgroundProcessManager.prototype.registerPromise = function (promise, terminate, description) {\n        var _this = this;\n        var jobEntry = { promise: promise, terminate: terminate, description: description };\n        this.jobs.add(jobEntry);\n        // in all of my testing, it is safe to multi-subscribe to a promise.\n        // so, rather than create another layer of promising, we're just going\n        // to hook into the promise we already have, and when it's done\n        // (successfully or not), we no longer need to wait for it upon close.\n        //\n        // sorry this is a bit hand-wavy:\n        //\n        // i believe we use `.then` and `.catch` instead of `.finally` because\n        // `.finally` is invoked in a different order in the sequence, and this\n        // breaks assumptions throughout and causes failures.\n        promise\n            .then(function () {\n            _this.jobs.delete(jobEntry);\n        })\n            .catch(function () {\n            _this.jobs.delete(jobEntry);\n        });\n    };\n    Object.defineProperty(BackgroundProcessManager.prototype, \"length\", {\n        /**\n         * The number of jobs being waited on.\n         *\n         * We don't use this for anything. It's just informational for the caller,\n         * and can be used in logging and testing.\n         *\n         * @returns the number of jobs.\n         */\n        get: function () {\n            return this.jobs.size;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BackgroundProcessManager.prototype, \"state\", {\n        /**\n         * The execution state of the manager. One of:\n         *\n         * 1. \"Open\" -> Accepting new jobs\n         * 1. \"Closing\" -> Not accepting new work. Waiting for jobs to complete.\n         * 1. \"Closed\" -> Not accepting new work. All submitted jobs are complete.\n         */\n        get: function () {\n            return this._state;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BackgroundProcessManager.prototype, \"pending\", {\n        /**\n         * The registered `description` of all still-pending jobs.\n         *\n         * @returns descriptions as an array.\n         */\n        get: function () {\n            return Array.from(this.jobs).map(function (job) { return job.description; });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BackgroundProcessManager.prototype, \"isOpen\", {\n        /**\n         * Whether the manager is accepting new jobs.\n         */\n        get: function () {\n            return this._state === BackgroundProcessManagerState.Open;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BackgroundProcessManager.prototype, \"isClosing\", {\n        /**\n         * Whether the manager is rejecting new work, but still waiting for\n         * submitted work to complete.\n         */\n        get: function () {\n            return this._state === BackgroundProcessManagerState.Closing;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BackgroundProcessManager.prototype, \"isClosed\", {\n        /**\n         * Whether the manager is rejecting work and done waiting for submitted\n         * work to complete.\n         */\n        get: function () {\n            return this._state === BackgroundProcessManagerState.Closed;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    BackgroundProcessManager.prototype.closedFailure = function (description) {\n        if (!this.isOpen) {\n            return Promise.reject(new BackgroundManagerNotOpenError([\n                \"The manager is \".concat(this.state, \".\"),\n                \"You tried to add \\\"\".concat(description, \"\\\".\"),\n                \"Pending jobs: [\\n\".concat(this.pending\n                    .map(function (t) { return '    ' + t; })\n                    .join(',\\n'), \"\\n]\"),\n            ].join('\\n')));\n        }\n    };\n    /**\n     * Signals jobs to stop (for those that accept interruptions) and waits\n     * for confirmation that jobs have stopped.\n     *\n     * This immediately puts the manager into a closing state and just begins\n     * to reject new work. After all work in the manager is complete, the\n     * manager goes into a `Completed` state and `close()` returns.\n     *\n     * This call is idempotent.\n     *\n     * If the manager is already closing or closed, `finalCleaup` is not executed.\n     *\n     * @param onClosed\n     * @returns The settled results of each still-running job's promise. If the\n     * manager is already closed, this will contain the results as of when the\n     * manager's `close()` was called in an `Open` state.\n     */\n    BackgroundProcessManager.prototype.close = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, _b, job;\n            var e_1, _c;\n            return __generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0:\n                        if (!this.isOpen) return [3 /*break*/, 2];\n                        this._state = BackgroundProcessManagerState.Closing;\n                        try {\n                            for (_a = __values(Array.from(this.jobs)), _b = _a.next(); !_b.done; _b = _a.next()) {\n                                job = _b.value;\n                                try {\n                                    job.terminate();\n                                }\n                                catch (error) {\n                                    // Due to potential races with a job's natural completion, it's\n                                    // reasonable to expect the termination call to fail. Hence,\n                                    // not logging as an error.\n                                    console.warn(\"Failed to send termination signal to job. Error: \".concat(error.message), job);\n                                }\n                            }\n                        }\n                        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                        finally {\n                            try {\n                                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n                            }\n                            finally { if (e_1) throw e_1.error; }\n                        }\n                        // Use `allSettled()` because we want to wait for all to finish. We do\n                        // not want to stop waiting if there is a failure.\n                        this._closingPromise = Promise.allSettled(Array.from(this.jobs).map(function (j) { return j.promise; }));\n                        return [4 /*yield*/, this._closingPromise];\n                    case 1:\n                        _d.sent();\n                        this._state = BackgroundProcessManagerState.Closed;\n                        _d.label = 2;\n                    case 2: return [2 /*return*/, this._closingPromise];\n                }\n            });\n        });\n    };\n    /**\n     * Signals the manager to start accepting work (again) and returns once\n     * the manager is ready to do so.\n     *\n     * If the state is already `Open`, this call is a no-op.\n     *\n     * If the state is `Closed`, this call simply updates state and returns.\n     *\n     * If the state is `Closing`, this call waits for completion before it\n     * updates the state and returns.\n     */\n    BackgroundProcessManager.prototype.open = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.isClosing) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.close()];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        this._state = BackgroundProcessManagerState.Open;\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return BackgroundProcessManager;\n}());\nexport { BackgroundProcessManager };\n/**\n *\n */\nvar BackgroundManagerNotOpenError = /** @class */ (function (_super) {\n    __extends(BackgroundManagerNotOpenError, _super);\n    function BackgroundManagerNotOpenError(message) {\n        return _super.call(this, \"BackgroundManagerNotOpenError: \".concat(message)) || this;\n    }\n    return BackgroundManagerNotOpenError;\n}(Error));\nexport { BackgroundManagerNotOpenError };\n/**\n * All possible states a `BackgroundProcessManager` instance can be in.\n */\nexport var BackgroundProcessManagerState;\n(function (BackgroundProcessManagerState) {\n    /**\n     * Accepting new jobs.\n     */\n    BackgroundProcessManagerState[\"Open\"] = \"Open\";\n    /**\n     * Not accepting new jobs. Waiting for submitted jobs to complete.\n     */\n    BackgroundProcessManagerState[\"Closing\"] = \"Closing\";\n    /**\n     * Not accepting new jobs. All submitted jobs are complete.\n     */\n    BackgroundProcessManagerState[\"Closed\"] = \"Closed\";\n})(BackgroundProcessManagerState || (BackgroundProcessManagerState = {}));\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}