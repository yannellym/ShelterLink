{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { ComprehendClient } from \"./ComprehendClient\";\nimport { BatchDetectDominantLanguageCommand } from \"./commands/BatchDetectDominantLanguageCommand\";\nimport { BatchDetectEntitiesCommand } from \"./commands/BatchDetectEntitiesCommand\";\nimport { BatchDetectKeyPhrasesCommand } from \"./commands/BatchDetectKeyPhrasesCommand\";\nimport { BatchDetectSentimentCommand } from \"./commands/BatchDetectSentimentCommand\";\nimport { BatchDetectSyntaxCommand } from \"./commands/BatchDetectSyntaxCommand\";\nimport { ClassifyDocumentCommand } from \"./commands/ClassifyDocumentCommand\";\nimport { CreateDocumentClassifierCommand } from \"./commands/CreateDocumentClassifierCommand\";\nimport { CreateEndpointCommand } from \"./commands/CreateEndpointCommand\";\nimport { CreateEntityRecognizerCommand } from \"./commands/CreateEntityRecognizerCommand\";\nimport { DeleteDocumentClassifierCommand } from \"./commands/DeleteDocumentClassifierCommand\";\nimport { DeleteEndpointCommand } from \"./commands/DeleteEndpointCommand\";\nimport { DeleteEntityRecognizerCommand } from \"./commands/DeleteEntityRecognizerCommand\";\nimport { DescribeDocumentClassificationJobCommand } from \"./commands/DescribeDocumentClassificationJobCommand\";\nimport { DescribeDocumentClassifierCommand } from \"./commands/DescribeDocumentClassifierCommand\";\nimport { DescribeDominantLanguageDetectionJobCommand } from \"./commands/DescribeDominantLanguageDetectionJobCommand\";\nimport { DescribeEndpointCommand } from \"./commands/DescribeEndpointCommand\";\nimport { DescribeEntitiesDetectionJobCommand } from \"./commands/DescribeEntitiesDetectionJobCommand\";\nimport { DescribeEntityRecognizerCommand } from \"./commands/DescribeEntityRecognizerCommand\";\nimport { DescribeEventsDetectionJobCommand } from \"./commands/DescribeEventsDetectionJobCommand\";\nimport { DescribeKeyPhrasesDetectionJobCommand } from \"./commands/DescribeKeyPhrasesDetectionJobCommand\";\nimport { DescribePiiEntitiesDetectionJobCommand } from \"./commands/DescribePiiEntitiesDetectionJobCommand\";\nimport { DescribeSentimentDetectionJobCommand } from \"./commands/DescribeSentimentDetectionJobCommand\";\nimport { DescribeTopicsDetectionJobCommand } from \"./commands/DescribeTopicsDetectionJobCommand\";\nimport { DetectDominantLanguageCommand } from \"./commands/DetectDominantLanguageCommand\";\nimport { DetectEntitiesCommand } from \"./commands/DetectEntitiesCommand\";\nimport { DetectKeyPhrasesCommand } from \"./commands/DetectKeyPhrasesCommand\";\nimport { DetectPiiEntitiesCommand } from \"./commands/DetectPiiEntitiesCommand\";\nimport { DetectSentimentCommand } from \"./commands/DetectSentimentCommand\";\nimport { DetectSyntaxCommand } from \"./commands/DetectSyntaxCommand\";\nimport { ListDocumentClassificationJobsCommand } from \"./commands/ListDocumentClassificationJobsCommand\";\nimport { ListDocumentClassifiersCommand } from \"./commands/ListDocumentClassifiersCommand\";\nimport { ListDominantLanguageDetectionJobsCommand } from \"./commands/ListDominantLanguageDetectionJobsCommand\";\nimport { ListEndpointsCommand } from \"./commands/ListEndpointsCommand\";\nimport { ListEntitiesDetectionJobsCommand } from \"./commands/ListEntitiesDetectionJobsCommand\";\nimport { ListEntityRecognizersCommand } from \"./commands/ListEntityRecognizersCommand\";\nimport { ListEventsDetectionJobsCommand } from \"./commands/ListEventsDetectionJobsCommand\";\nimport { ListKeyPhrasesDetectionJobsCommand } from \"./commands/ListKeyPhrasesDetectionJobsCommand\";\nimport { ListPiiEntitiesDetectionJobsCommand } from \"./commands/ListPiiEntitiesDetectionJobsCommand\";\nimport { ListSentimentDetectionJobsCommand } from \"./commands/ListSentimentDetectionJobsCommand\";\nimport { ListTagsForResourceCommand } from \"./commands/ListTagsForResourceCommand\";\nimport { ListTopicsDetectionJobsCommand } from \"./commands/ListTopicsDetectionJobsCommand\";\nimport { StartDocumentClassificationJobCommand } from \"./commands/StartDocumentClassificationJobCommand\";\nimport { StartDominantLanguageDetectionJobCommand } from \"./commands/StartDominantLanguageDetectionJobCommand\";\nimport { StartEntitiesDetectionJobCommand } from \"./commands/StartEntitiesDetectionJobCommand\";\nimport { StartEventsDetectionJobCommand } from \"./commands/StartEventsDetectionJobCommand\";\nimport { StartKeyPhrasesDetectionJobCommand } from \"./commands/StartKeyPhrasesDetectionJobCommand\";\nimport { StartPiiEntitiesDetectionJobCommand } from \"./commands/StartPiiEntitiesDetectionJobCommand\";\nimport { StartSentimentDetectionJobCommand } from \"./commands/StartSentimentDetectionJobCommand\";\nimport { StartTopicsDetectionJobCommand } from \"./commands/StartTopicsDetectionJobCommand\";\nimport { StopDominantLanguageDetectionJobCommand } from \"./commands/StopDominantLanguageDetectionJobCommand\";\nimport { StopEntitiesDetectionJobCommand } from \"./commands/StopEntitiesDetectionJobCommand\";\nimport { StopEventsDetectionJobCommand } from \"./commands/StopEventsDetectionJobCommand\";\nimport { StopKeyPhrasesDetectionJobCommand } from \"./commands/StopKeyPhrasesDetectionJobCommand\";\nimport { StopPiiEntitiesDetectionJobCommand } from \"./commands/StopPiiEntitiesDetectionJobCommand\";\nimport { StopSentimentDetectionJobCommand } from \"./commands/StopSentimentDetectionJobCommand\";\nimport { StopTrainingDocumentClassifierCommand } from \"./commands/StopTrainingDocumentClassifierCommand\";\nimport { StopTrainingEntityRecognizerCommand } from \"./commands/StopTrainingEntityRecognizerCommand\";\nimport { TagResourceCommand } from \"./commands/TagResourceCommand\";\nimport { UntagResourceCommand } from \"./commands/UntagResourceCommand\";\nimport { UpdateEndpointCommand } from \"./commands/UpdateEndpointCommand\";\n/**\n * <p>Amazon Comprehend is an AWS service for gaining insight into the content of documents.\n *       Use these actions to determine the topics contained in your documents, the topics they\n *       discuss, the predominant sentiment expressed in them, the predominant language used, and\n *       more.</p>\n */\nvar Comprehend = /** @class */function (_super) {\n  __extends(Comprehend, _super);\n  function Comprehend() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Comprehend.prototype.batchDetectDominantLanguage = function (args, optionsOrCb, cb) {\n    var command = new BatchDetectDominantLanguageCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.batchDetectEntities = function (args, optionsOrCb, cb) {\n    var command = new BatchDetectEntitiesCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.batchDetectKeyPhrases = function (args, optionsOrCb, cb) {\n    var command = new BatchDetectKeyPhrasesCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.batchDetectSentiment = function (args, optionsOrCb, cb) {\n    var command = new BatchDetectSentimentCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.batchDetectSyntax = function (args, optionsOrCb, cb) {\n    var command = new BatchDetectSyntaxCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.classifyDocument = function (args, optionsOrCb, cb) {\n    var command = new ClassifyDocumentCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.createDocumentClassifier = function (args, optionsOrCb, cb) {\n    var command = new CreateDocumentClassifierCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.createEndpoint = function (args, optionsOrCb, cb) {\n    var command = new CreateEndpointCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.createEntityRecognizer = function (args, optionsOrCb, cb) {\n    var command = new CreateEntityRecognizerCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.deleteDocumentClassifier = function (args, optionsOrCb, cb) {\n    var command = new DeleteDocumentClassifierCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.deleteEndpoint = function (args, optionsOrCb, cb) {\n    var command = new DeleteEndpointCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.deleteEntityRecognizer = function (args, optionsOrCb, cb) {\n    var command = new DeleteEntityRecognizerCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.describeDocumentClassificationJob = function (args, optionsOrCb, cb) {\n    var command = new DescribeDocumentClassificationJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.describeDocumentClassifier = function (args, optionsOrCb, cb) {\n    var command = new DescribeDocumentClassifierCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.describeDominantLanguageDetectionJob = function (args, optionsOrCb, cb) {\n    var command = new DescribeDominantLanguageDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.describeEndpoint = function (args, optionsOrCb, cb) {\n    var command = new DescribeEndpointCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.describeEntitiesDetectionJob = function (args, optionsOrCb, cb) {\n    var command = new DescribeEntitiesDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.describeEntityRecognizer = function (args, optionsOrCb, cb) {\n    var command = new DescribeEntityRecognizerCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.describeEventsDetectionJob = function (args, optionsOrCb, cb) {\n    var command = new DescribeEventsDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.describeKeyPhrasesDetectionJob = function (args, optionsOrCb, cb) {\n    var command = new DescribeKeyPhrasesDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.describePiiEntitiesDetectionJob = function (args, optionsOrCb, cb) {\n    var command = new DescribePiiEntitiesDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.describeSentimentDetectionJob = function (args, optionsOrCb, cb) {\n    var command = new DescribeSentimentDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.describeTopicsDetectionJob = function (args, optionsOrCb, cb) {\n    var command = new DescribeTopicsDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.detectDominantLanguage = function (args, optionsOrCb, cb) {\n    var command = new DetectDominantLanguageCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.detectEntities = function (args, optionsOrCb, cb) {\n    var command = new DetectEntitiesCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.detectKeyPhrases = function (args, optionsOrCb, cb) {\n    var command = new DetectKeyPhrasesCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.detectPiiEntities = function (args, optionsOrCb, cb) {\n    var command = new DetectPiiEntitiesCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.detectSentiment = function (args, optionsOrCb, cb) {\n    var command = new DetectSentimentCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.detectSyntax = function (args, optionsOrCb, cb) {\n    var command = new DetectSyntaxCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.listDocumentClassificationJobs = function (args, optionsOrCb, cb) {\n    var command = new ListDocumentClassificationJobsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.listDocumentClassifiers = function (args, optionsOrCb, cb) {\n    var command = new ListDocumentClassifiersCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.listDominantLanguageDetectionJobs = function (args, optionsOrCb, cb) {\n    var command = new ListDominantLanguageDetectionJobsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.listEndpoints = function (args, optionsOrCb, cb) {\n    var command = new ListEndpointsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.listEntitiesDetectionJobs = function (args, optionsOrCb, cb) {\n    var command = new ListEntitiesDetectionJobsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.listEntityRecognizers = function (args, optionsOrCb, cb) {\n    var command = new ListEntityRecognizersCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.listEventsDetectionJobs = function (args, optionsOrCb, cb) {\n    var command = new ListEventsDetectionJobsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.listKeyPhrasesDetectionJobs = function (args, optionsOrCb, cb) {\n    var command = new ListKeyPhrasesDetectionJobsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.listPiiEntitiesDetectionJobs = function (args, optionsOrCb, cb) {\n    var command = new ListPiiEntitiesDetectionJobsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.listSentimentDetectionJobs = function (args, optionsOrCb, cb) {\n    var command = new ListSentimentDetectionJobsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.listTagsForResource = function (args, optionsOrCb, cb) {\n    var command = new ListTagsForResourceCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.listTopicsDetectionJobs = function (args, optionsOrCb, cb) {\n    var command = new ListTopicsDetectionJobsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.startDocumentClassificationJob = function (args, optionsOrCb, cb) {\n    var command = new StartDocumentClassificationJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.startDominantLanguageDetectionJob = function (args, optionsOrCb, cb) {\n    var command = new StartDominantLanguageDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.startEntitiesDetectionJob = function (args, optionsOrCb, cb) {\n    var command = new StartEntitiesDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.startEventsDetectionJob = function (args, optionsOrCb, cb) {\n    var command = new StartEventsDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.startKeyPhrasesDetectionJob = function (args, optionsOrCb, cb) {\n    var command = new StartKeyPhrasesDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.startPiiEntitiesDetectionJob = function (args, optionsOrCb, cb) {\n    var command = new StartPiiEntitiesDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.startSentimentDetectionJob = function (args, optionsOrCb, cb) {\n    var command = new StartSentimentDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.startTopicsDetectionJob = function (args, optionsOrCb, cb) {\n    var command = new StartTopicsDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.stopDominantLanguageDetectionJob = function (args, optionsOrCb, cb) {\n    var command = new StopDominantLanguageDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.stopEntitiesDetectionJob = function (args, optionsOrCb, cb) {\n    var command = new StopEntitiesDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.stopEventsDetectionJob = function (args, optionsOrCb, cb) {\n    var command = new StopEventsDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.stopKeyPhrasesDetectionJob = function (args, optionsOrCb, cb) {\n    var command = new StopKeyPhrasesDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.stopPiiEntitiesDetectionJob = function (args, optionsOrCb, cb) {\n    var command = new StopPiiEntitiesDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.stopSentimentDetectionJob = function (args, optionsOrCb, cb) {\n    var command = new StopSentimentDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.stopTrainingDocumentClassifier = function (args, optionsOrCb, cb) {\n    var command = new StopTrainingDocumentClassifierCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.stopTrainingEntityRecognizer = function (args, optionsOrCb, cb) {\n    var command = new StopTrainingEntityRecognizerCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.tagResource = function (args, optionsOrCb, cb) {\n    var command = new TagResourceCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.untagResource = function (args, optionsOrCb, cb) {\n    var command = new UntagResourceCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Comprehend.prototype.updateEndpoint = function (args, optionsOrCb, cb) {\n    var command = new UpdateEndpointCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  return Comprehend;\n}(ComprehendClient);\nexport { Comprehend };","map":{"version":3,"names":["ComprehendClient","BatchDetectDominantLanguageCommand","BatchDetectEntitiesCommand","BatchDetectKeyPhrasesCommand","BatchDetectSentimentCommand","BatchDetectSyntaxCommand","ClassifyDocumentCommand","CreateDocumentClassifierCommand","CreateEndpointCommand","CreateEntityRecognizerCommand","DeleteDocumentClassifierCommand","DeleteEndpointCommand","DeleteEntityRecognizerCommand","DescribeDocumentClassificationJobCommand","DescribeDocumentClassifierCommand","DescribeDominantLanguageDetectionJobCommand","DescribeEndpointCommand","DescribeEntitiesDetectionJobCommand","DescribeEntityRecognizerCommand","DescribeEventsDetectionJobCommand","DescribeKeyPhrasesDetectionJobCommand","DescribePiiEntitiesDetectionJobCommand","DescribeSentimentDetectionJobCommand","DescribeTopicsDetectionJobCommand","DetectDominantLanguageCommand","DetectEntitiesCommand","DetectKeyPhrasesCommand","DetectPiiEntitiesCommand","DetectSentimentCommand","DetectSyntaxCommand","ListDocumentClassificationJobsCommand","ListDocumentClassifiersCommand","ListDominantLanguageDetectionJobsCommand","ListEndpointsCommand","ListEntitiesDetectionJobsCommand","ListEntityRecognizersCommand","ListEventsDetectionJobsCommand","ListKeyPhrasesDetectionJobsCommand","ListPiiEntitiesDetectionJobsCommand","ListSentimentDetectionJobsCommand","ListTagsForResourceCommand","ListTopicsDetectionJobsCommand","StartDocumentClassificationJobCommand","StartDominantLanguageDetectionJobCommand","StartEntitiesDetectionJobCommand","StartEventsDetectionJobCommand","StartKeyPhrasesDetectionJobCommand","StartPiiEntitiesDetectionJobCommand","StartSentimentDetectionJobCommand","StartTopicsDetectionJobCommand","StopDominantLanguageDetectionJobCommand","StopEntitiesDetectionJobCommand","StopEventsDetectionJobCommand","StopKeyPhrasesDetectionJobCommand","StopPiiEntitiesDetectionJobCommand","StopSentimentDetectionJobCommand","StopTrainingDocumentClassifierCommand","StopTrainingEntityRecognizerCommand","TagResourceCommand","UntagResourceCommand","UpdateEndpointCommand","Comprehend","_super","__extends","prototype","batchDetectDominantLanguage","args","optionsOrCb","cb","command","send","Error","batchDetectEntities","batchDetectKeyPhrases","batchDetectSentiment","batchDetectSyntax","classifyDocument","createDocumentClassifier","createEndpoint","createEntityRecognizer","deleteDocumentClassifier","deleteEndpoint","deleteEntityRecognizer","describeDocumentClassificationJob","describeDocumentClassifier","describeDominantLanguageDetectionJob","describeEndpoint","describeEntitiesDetectionJob","describeEntityRecognizer","describeEventsDetectionJob","describeKeyPhrasesDetectionJob","describePiiEntitiesDetectionJob","describeSentimentDetectionJob","describeTopicsDetectionJob","detectDominantLanguage","detectEntities","detectKeyPhrases","detectPiiEntities","detectSentiment","detectSyntax","listDocumentClassificationJobs","listDocumentClassifiers","listDominantLanguageDetectionJobs","listEndpoints","listEntitiesDetectionJobs","listEntityRecognizers","listEventsDetectionJobs","listKeyPhrasesDetectionJobs","listPiiEntitiesDetectionJobs","listSentimentDetectionJobs","listTagsForResource","listTopicsDetectionJobs","startDocumentClassificationJob","startDominantLanguageDetectionJob","startEntitiesDetectionJob","startEventsDetectionJob","startKeyPhrasesDetectionJob","startPiiEntitiesDetectionJob","startSentimentDetectionJob","startTopicsDetectionJob","stopDominantLanguageDetectionJob","stopEntitiesDetectionJob","stopEventsDetectionJob","stopKeyPhrasesDetectionJob","stopPiiEntitiesDetectionJob","stopSentimentDetectionJob","stopTrainingDocumentClassifier","stopTrainingEntityRecognizer","tagResource","untagResource","updateEndpoint"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-sdk/client-comprehend/Comprehend.ts"],"sourcesContent":["import { ComprehendClient } from \"./ComprehendClient\";\nimport {\n  BatchDetectDominantLanguageCommand,\n  BatchDetectDominantLanguageCommandInput,\n  BatchDetectDominantLanguageCommandOutput,\n} from \"./commands/BatchDetectDominantLanguageCommand\";\nimport {\n  BatchDetectEntitiesCommand,\n  BatchDetectEntitiesCommandInput,\n  BatchDetectEntitiesCommandOutput,\n} from \"./commands/BatchDetectEntitiesCommand\";\nimport {\n  BatchDetectKeyPhrasesCommand,\n  BatchDetectKeyPhrasesCommandInput,\n  BatchDetectKeyPhrasesCommandOutput,\n} from \"./commands/BatchDetectKeyPhrasesCommand\";\nimport {\n  BatchDetectSentimentCommand,\n  BatchDetectSentimentCommandInput,\n  BatchDetectSentimentCommandOutput,\n} from \"./commands/BatchDetectSentimentCommand\";\nimport {\n  BatchDetectSyntaxCommand,\n  BatchDetectSyntaxCommandInput,\n  BatchDetectSyntaxCommandOutput,\n} from \"./commands/BatchDetectSyntaxCommand\";\nimport {\n  ClassifyDocumentCommand,\n  ClassifyDocumentCommandInput,\n  ClassifyDocumentCommandOutput,\n} from \"./commands/ClassifyDocumentCommand\";\nimport {\n  CreateDocumentClassifierCommand,\n  CreateDocumentClassifierCommandInput,\n  CreateDocumentClassifierCommandOutput,\n} from \"./commands/CreateDocumentClassifierCommand\";\nimport {\n  CreateEndpointCommand,\n  CreateEndpointCommandInput,\n  CreateEndpointCommandOutput,\n} from \"./commands/CreateEndpointCommand\";\nimport {\n  CreateEntityRecognizerCommand,\n  CreateEntityRecognizerCommandInput,\n  CreateEntityRecognizerCommandOutput,\n} from \"./commands/CreateEntityRecognizerCommand\";\nimport {\n  DeleteDocumentClassifierCommand,\n  DeleteDocumentClassifierCommandInput,\n  DeleteDocumentClassifierCommandOutput,\n} from \"./commands/DeleteDocumentClassifierCommand\";\nimport {\n  DeleteEndpointCommand,\n  DeleteEndpointCommandInput,\n  DeleteEndpointCommandOutput,\n} from \"./commands/DeleteEndpointCommand\";\nimport {\n  DeleteEntityRecognizerCommand,\n  DeleteEntityRecognizerCommandInput,\n  DeleteEntityRecognizerCommandOutput,\n} from \"./commands/DeleteEntityRecognizerCommand\";\nimport {\n  DescribeDocumentClassificationJobCommand,\n  DescribeDocumentClassificationJobCommandInput,\n  DescribeDocumentClassificationJobCommandOutput,\n} from \"./commands/DescribeDocumentClassificationJobCommand\";\nimport {\n  DescribeDocumentClassifierCommand,\n  DescribeDocumentClassifierCommandInput,\n  DescribeDocumentClassifierCommandOutput,\n} from \"./commands/DescribeDocumentClassifierCommand\";\nimport {\n  DescribeDominantLanguageDetectionJobCommand,\n  DescribeDominantLanguageDetectionJobCommandInput,\n  DescribeDominantLanguageDetectionJobCommandOutput,\n} from \"./commands/DescribeDominantLanguageDetectionJobCommand\";\nimport {\n  DescribeEndpointCommand,\n  DescribeEndpointCommandInput,\n  DescribeEndpointCommandOutput,\n} from \"./commands/DescribeEndpointCommand\";\nimport {\n  DescribeEntitiesDetectionJobCommand,\n  DescribeEntitiesDetectionJobCommandInput,\n  DescribeEntitiesDetectionJobCommandOutput,\n} from \"./commands/DescribeEntitiesDetectionJobCommand\";\nimport {\n  DescribeEntityRecognizerCommand,\n  DescribeEntityRecognizerCommandInput,\n  DescribeEntityRecognizerCommandOutput,\n} from \"./commands/DescribeEntityRecognizerCommand\";\nimport {\n  DescribeEventsDetectionJobCommand,\n  DescribeEventsDetectionJobCommandInput,\n  DescribeEventsDetectionJobCommandOutput,\n} from \"./commands/DescribeEventsDetectionJobCommand\";\nimport {\n  DescribeKeyPhrasesDetectionJobCommand,\n  DescribeKeyPhrasesDetectionJobCommandInput,\n  DescribeKeyPhrasesDetectionJobCommandOutput,\n} from \"./commands/DescribeKeyPhrasesDetectionJobCommand\";\nimport {\n  DescribePiiEntitiesDetectionJobCommand,\n  DescribePiiEntitiesDetectionJobCommandInput,\n  DescribePiiEntitiesDetectionJobCommandOutput,\n} from \"./commands/DescribePiiEntitiesDetectionJobCommand\";\nimport {\n  DescribeSentimentDetectionJobCommand,\n  DescribeSentimentDetectionJobCommandInput,\n  DescribeSentimentDetectionJobCommandOutput,\n} from \"./commands/DescribeSentimentDetectionJobCommand\";\nimport {\n  DescribeTopicsDetectionJobCommand,\n  DescribeTopicsDetectionJobCommandInput,\n  DescribeTopicsDetectionJobCommandOutput,\n} from \"./commands/DescribeTopicsDetectionJobCommand\";\nimport {\n  DetectDominantLanguageCommand,\n  DetectDominantLanguageCommandInput,\n  DetectDominantLanguageCommandOutput,\n} from \"./commands/DetectDominantLanguageCommand\";\nimport {\n  DetectEntitiesCommand,\n  DetectEntitiesCommandInput,\n  DetectEntitiesCommandOutput,\n} from \"./commands/DetectEntitiesCommand\";\nimport {\n  DetectKeyPhrasesCommand,\n  DetectKeyPhrasesCommandInput,\n  DetectKeyPhrasesCommandOutput,\n} from \"./commands/DetectKeyPhrasesCommand\";\nimport {\n  DetectPiiEntitiesCommand,\n  DetectPiiEntitiesCommandInput,\n  DetectPiiEntitiesCommandOutput,\n} from \"./commands/DetectPiiEntitiesCommand\";\nimport {\n  DetectSentimentCommand,\n  DetectSentimentCommandInput,\n  DetectSentimentCommandOutput,\n} from \"./commands/DetectSentimentCommand\";\nimport {\n  DetectSyntaxCommand,\n  DetectSyntaxCommandInput,\n  DetectSyntaxCommandOutput,\n} from \"./commands/DetectSyntaxCommand\";\nimport {\n  ListDocumentClassificationJobsCommand,\n  ListDocumentClassificationJobsCommandInput,\n  ListDocumentClassificationJobsCommandOutput,\n} from \"./commands/ListDocumentClassificationJobsCommand\";\nimport {\n  ListDocumentClassifiersCommand,\n  ListDocumentClassifiersCommandInput,\n  ListDocumentClassifiersCommandOutput,\n} from \"./commands/ListDocumentClassifiersCommand\";\nimport {\n  ListDominantLanguageDetectionJobsCommand,\n  ListDominantLanguageDetectionJobsCommandInput,\n  ListDominantLanguageDetectionJobsCommandOutput,\n} from \"./commands/ListDominantLanguageDetectionJobsCommand\";\nimport {\n  ListEndpointsCommand,\n  ListEndpointsCommandInput,\n  ListEndpointsCommandOutput,\n} from \"./commands/ListEndpointsCommand\";\nimport {\n  ListEntitiesDetectionJobsCommand,\n  ListEntitiesDetectionJobsCommandInput,\n  ListEntitiesDetectionJobsCommandOutput,\n} from \"./commands/ListEntitiesDetectionJobsCommand\";\nimport {\n  ListEntityRecognizersCommand,\n  ListEntityRecognizersCommandInput,\n  ListEntityRecognizersCommandOutput,\n} from \"./commands/ListEntityRecognizersCommand\";\nimport {\n  ListEventsDetectionJobsCommand,\n  ListEventsDetectionJobsCommandInput,\n  ListEventsDetectionJobsCommandOutput,\n} from \"./commands/ListEventsDetectionJobsCommand\";\nimport {\n  ListKeyPhrasesDetectionJobsCommand,\n  ListKeyPhrasesDetectionJobsCommandInput,\n  ListKeyPhrasesDetectionJobsCommandOutput,\n} from \"./commands/ListKeyPhrasesDetectionJobsCommand\";\nimport {\n  ListPiiEntitiesDetectionJobsCommand,\n  ListPiiEntitiesDetectionJobsCommandInput,\n  ListPiiEntitiesDetectionJobsCommandOutput,\n} from \"./commands/ListPiiEntitiesDetectionJobsCommand\";\nimport {\n  ListSentimentDetectionJobsCommand,\n  ListSentimentDetectionJobsCommandInput,\n  ListSentimentDetectionJobsCommandOutput,\n} from \"./commands/ListSentimentDetectionJobsCommand\";\nimport {\n  ListTagsForResourceCommand,\n  ListTagsForResourceCommandInput,\n  ListTagsForResourceCommandOutput,\n} from \"./commands/ListTagsForResourceCommand\";\nimport {\n  ListTopicsDetectionJobsCommand,\n  ListTopicsDetectionJobsCommandInput,\n  ListTopicsDetectionJobsCommandOutput,\n} from \"./commands/ListTopicsDetectionJobsCommand\";\nimport {\n  StartDocumentClassificationJobCommand,\n  StartDocumentClassificationJobCommandInput,\n  StartDocumentClassificationJobCommandOutput,\n} from \"./commands/StartDocumentClassificationJobCommand\";\nimport {\n  StartDominantLanguageDetectionJobCommand,\n  StartDominantLanguageDetectionJobCommandInput,\n  StartDominantLanguageDetectionJobCommandOutput,\n} from \"./commands/StartDominantLanguageDetectionJobCommand\";\nimport {\n  StartEntitiesDetectionJobCommand,\n  StartEntitiesDetectionJobCommandInput,\n  StartEntitiesDetectionJobCommandOutput,\n} from \"./commands/StartEntitiesDetectionJobCommand\";\nimport {\n  StartEventsDetectionJobCommand,\n  StartEventsDetectionJobCommandInput,\n  StartEventsDetectionJobCommandOutput,\n} from \"./commands/StartEventsDetectionJobCommand\";\nimport {\n  StartKeyPhrasesDetectionJobCommand,\n  StartKeyPhrasesDetectionJobCommandInput,\n  StartKeyPhrasesDetectionJobCommandOutput,\n} from \"./commands/StartKeyPhrasesDetectionJobCommand\";\nimport {\n  StartPiiEntitiesDetectionJobCommand,\n  StartPiiEntitiesDetectionJobCommandInput,\n  StartPiiEntitiesDetectionJobCommandOutput,\n} from \"./commands/StartPiiEntitiesDetectionJobCommand\";\nimport {\n  StartSentimentDetectionJobCommand,\n  StartSentimentDetectionJobCommandInput,\n  StartSentimentDetectionJobCommandOutput,\n} from \"./commands/StartSentimentDetectionJobCommand\";\nimport {\n  StartTopicsDetectionJobCommand,\n  StartTopicsDetectionJobCommandInput,\n  StartTopicsDetectionJobCommandOutput,\n} from \"./commands/StartTopicsDetectionJobCommand\";\nimport {\n  StopDominantLanguageDetectionJobCommand,\n  StopDominantLanguageDetectionJobCommandInput,\n  StopDominantLanguageDetectionJobCommandOutput,\n} from \"./commands/StopDominantLanguageDetectionJobCommand\";\nimport {\n  StopEntitiesDetectionJobCommand,\n  StopEntitiesDetectionJobCommandInput,\n  StopEntitiesDetectionJobCommandOutput,\n} from \"./commands/StopEntitiesDetectionJobCommand\";\nimport {\n  StopEventsDetectionJobCommand,\n  StopEventsDetectionJobCommandInput,\n  StopEventsDetectionJobCommandOutput,\n} from \"./commands/StopEventsDetectionJobCommand\";\nimport {\n  StopKeyPhrasesDetectionJobCommand,\n  StopKeyPhrasesDetectionJobCommandInput,\n  StopKeyPhrasesDetectionJobCommandOutput,\n} from \"./commands/StopKeyPhrasesDetectionJobCommand\";\nimport {\n  StopPiiEntitiesDetectionJobCommand,\n  StopPiiEntitiesDetectionJobCommandInput,\n  StopPiiEntitiesDetectionJobCommandOutput,\n} from \"./commands/StopPiiEntitiesDetectionJobCommand\";\nimport {\n  StopSentimentDetectionJobCommand,\n  StopSentimentDetectionJobCommandInput,\n  StopSentimentDetectionJobCommandOutput,\n} from \"./commands/StopSentimentDetectionJobCommand\";\nimport {\n  StopTrainingDocumentClassifierCommand,\n  StopTrainingDocumentClassifierCommandInput,\n  StopTrainingDocumentClassifierCommandOutput,\n} from \"./commands/StopTrainingDocumentClassifierCommand\";\nimport {\n  StopTrainingEntityRecognizerCommand,\n  StopTrainingEntityRecognizerCommandInput,\n  StopTrainingEntityRecognizerCommandOutput,\n} from \"./commands/StopTrainingEntityRecognizerCommand\";\nimport { TagResourceCommand, TagResourceCommandInput, TagResourceCommandOutput } from \"./commands/TagResourceCommand\";\nimport {\n  UntagResourceCommand,\n  UntagResourceCommandInput,\n  UntagResourceCommandOutput,\n} from \"./commands/UntagResourceCommand\";\nimport {\n  UpdateEndpointCommand,\n  UpdateEndpointCommandInput,\n  UpdateEndpointCommandOutput,\n} from \"./commands/UpdateEndpointCommand\";\nimport { HttpHandlerOptions as __HttpHandlerOptions } from \"@aws-sdk/types\";\n\n/**\n * <p>Amazon Comprehend is an AWS service for gaining insight into the content of documents.\n *       Use these actions to determine the topics contained in your documents, the topics they\n *       discuss, the predominant sentiment expressed in them, the predominant language used, and\n *       more.</p>\n */\nexport class Comprehend extends ComprehendClient {\n  /**\n   * <p>Determines the dominant language of the input text for a batch of documents. For a list\n   *       of languages that Amazon Comprehend can detect, see <a href=\"https://docs.aws.amazon.com/comprehend/latest/dg/how-languages.html\">Amazon Comprehend Supported Languages</a>.\n   *     </p>\n   */\n  public batchDetectDominantLanguage(\n    args: BatchDetectDominantLanguageCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<BatchDetectDominantLanguageCommandOutput>;\n  public batchDetectDominantLanguage(\n    args: BatchDetectDominantLanguageCommandInput,\n    cb: (err: any, data?: BatchDetectDominantLanguageCommandOutput) => void\n  ): void;\n  public batchDetectDominantLanguage(\n    args: BatchDetectDominantLanguageCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: BatchDetectDominantLanguageCommandOutput) => void\n  ): void;\n  public batchDetectDominantLanguage(\n    args: BatchDetectDominantLanguageCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: BatchDetectDominantLanguageCommandOutput) => void),\n    cb?: (err: any, data?: BatchDetectDominantLanguageCommandOutput) => void\n  ): Promise<BatchDetectDominantLanguageCommandOutput> | void {\n    const command = new BatchDetectDominantLanguageCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Inspects the text of a batch of documents for named entities and returns information\n   *       about them. For more information about named entities, see <a>how-entities</a>\n   *          </p>\n   */\n  public batchDetectEntities(\n    args: BatchDetectEntitiesCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<BatchDetectEntitiesCommandOutput>;\n  public batchDetectEntities(\n    args: BatchDetectEntitiesCommandInput,\n    cb: (err: any, data?: BatchDetectEntitiesCommandOutput) => void\n  ): void;\n  public batchDetectEntities(\n    args: BatchDetectEntitiesCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: BatchDetectEntitiesCommandOutput) => void\n  ): void;\n  public batchDetectEntities(\n    args: BatchDetectEntitiesCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: BatchDetectEntitiesCommandOutput) => void),\n    cb?: (err: any, data?: BatchDetectEntitiesCommandOutput) => void\n  ): Promise<BatchDetectEntitiesCommandOutput> | void {\n    const command = new BatchDetectEntitiesCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Detects the key noun phrases found in a batch of documents.</p>\n   */\n  public batchDetectKeyPhrases(\n    args: BatchDetectKeyPhrasesCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<BatchDetectKeyPhrasesCommandOutput>;\n  public batchDetectKeyPhrases(\n    args: BatchDetectKeyPhrasesCommandInput,\n    cb: (err: any, data?: BatchDetectKeyPhrasesCommandOutput) => void\n  ): void;\n  public batchDetectKeyPhrases(\n    args: BatchDetectKeyPhrasesCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: BatchDetectKeyPhrasesCommandOutput) => void\n  ): void;\n  public batchDetectKeyPhrases(\n    args: BatchDetectKeyPhrasesCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: BatchDetectKeyPhrasesCommandOutput) => void),\n    cb?: (err: any, data?: BatchDetectKeyPhrasesCommandOutput) => void\n  ): Promise<BatchDetectKeyPhrasesCommandOutput> | void {\n    const command = new BatchDetectKeyPhrasesCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Inspects a batch of documents and returns an inference of the prevailing sentiment,\n   *         <code>POSITIVE</code>, <code>NEUTRAL</code>, <code>MIXED</code>, or <code>NEGATIVE</code>,\n   *       in each one.</p>\n   */\n  public batchDetectSentiment(\n    args: BatchDetectSentimentCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<BatchDetectSentimentCommandOutput>;\n  public batchDetectSentiment(\n    args: BatchDetectSentimentCommandInput,\n    cb: (err: any, data?: BatchDetectSentimentCommandOutput) => void\n  ): void;\n  public batchDetectSentiment(\n    args: BatchDetectSentimentCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: BatchDetectSentimentCommandOutput) => void\n  ): void;\n  public batchDetectSentiment(\n    args: BatchDetectSentimentCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: BatchDetectSentimentCommandOutput) => void),\n    cb?: (err: any, data?: BatchDetectSentimentCommandOutput) => void\n  ): Promise<BatchDetectSentimentCommandOutput> | void {\n    const command = new BatchDetectSentimentCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Inspects the text of a batch of documents for the syntax and part of speech of the words\n   *       in the document and returns information about them. For more information, see <a>how-syntax</a>.</p>\n   */\n  public batchDetectSyntax(\n    args: BatchDetectSyntaxCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<BatchDetectSyntaxCommandOutput>;\n  public batchDetectSyntax(\n    args: BatchDetectSyntaxCommandInput,\n    cb: (err: any, data?: BatchDetectSyntaxCommandOutput) => void\n  ): void;\n  public batchDetectSyntax(\n    args: BatchDetectSyntaxCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: BatchDetectSyntaxCommandOutput) => void\n  ): void;\n  public batchDetectSyntax(\n    args: BatchDetectSyntaxCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: BatchDetectSyntaxCommandOutput) => void),\n    cb?: (err: any, data?: BatchDetectSyntaxCommandOutput) => void\n  ): Promise<BatchDetectSyntaxCommandOutput> | void {\n    const command = new BatchDetectSyntaxCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Creates a new document classification request to analyze a single document in real-time,\n   *       using a previously created and trained custom model and an endpoint.</p>\n   */\n  public classifyDocument(\n    args: ClassifyDocumentCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<ClassifyDocumentCommandOutput>;\n  public classifyDocument(\n    args: ClassifyDocumentCommandInput,\n    cb: (err: any, data?: ClassifyDocumentCommandOutput) => void\n  ): void;\n  public classifyDocument(\n    args: ClassifyDocumentCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: ClassifyDocumentCommandOutput) => void\n  ): void;\n  public classifyDocument(\n    args: ClassifyDocumentCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: ClassifyDocumentCommandOutput) => void),\n    cb?: (err: any, data?: ClassifyDocumentCommandOutput) => void\n  ): Promise<ClassifyDocumentCommandOutput> | void {\n    const command = new ClassifyDocumentCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Creates a new document classifier that you can use to categorize documents. To create a\n   *       classifier, you provide a set of training documents that labeled with the categories that you\n   *       want to use. After the classifier is trained you can use it to categorize a set of labeled\n   *       documents into the categories. For more information, see <a>how-document-classification</a>.</p>\n   */\n  public createDocumentClassifier(\n    args: CreateDocumentClassifierCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<CreateDocumentClassifierCommandOutput>;\n  public createDocumentClassifier(\n    args: CreateDocumentClassifierCommandInput,\n    cb: (err: any, data?: CreateDocumentClassifierCommandOutput) => void\n  ): void;\n  public createDocumentClassifier(\n    args: CreateDocumentClassifierCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: CreateDocumentClassifierCommandOutput) => void\n  ): void;\n  public createDocumentClassifier(\n    args: CreateDocumentClassifierCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: CreateDocumentClassifierCommandOutput) => void),\n    cb?: (err: any, data?: CreateDocumentClassifierCommandOutput) => void\n  ): Promise<CreateDocumentClassifierCommandOutput> | void {\n    const command = new CreateDocumentClassifierCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Creates a model-specific endpoint for synchronous inference for a previously trained\n   *       custom model\n   *       </p>\n   */\n  public createEndpoint(\n    args: CreateEndpointCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<CreateEndpointCommandOutput>;\n  public createEndpoint(\n    args: CreateEndpointCommandInput,\n    cb: (err: any, data?: CreateEndpointCommandOutput) => void\n  ): void;\n  public createEndpoint(\n    args: CreateEndpointCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: CreateEndpointCommandOutput) => void\n  ): void;\n  public createEndpoint(\n    args: CreateEndpointCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: CreateEndpointCommandOutput) => void),\n    cb?: (err: any, data?: CreateEndpointCommandOutput) => void\n  ): Promise<CreateEndpointCommandOutput> | void {\n    const command = new CreateEndpointCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Creates an entity recognizer using submitted files. After your\n   *         <code>CreateEntityRecognizer</code> request is submitted, you can check job status using the\n   *          API. </p>\n   */\n  public createEntityRecognizer(\n    args: CreateEntityRecognizerCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<CreateEntityRecognizerCommandOutput>;\n  public createEntityRecognizer(\n    args: CreateEntityRecognizerCommandInput,\n    cb: (err: any, data?: CreateEntityRecognizerCommandOutput) => void\n  ): void;\n  public createEntityRecognizer(\n    args: CreateEntityRecognizerCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: CreateEntityRecognizerCommandOutput) => void\n  ): void;\n  public createEntityRecognizer(\n    args: CreateEntityRecognizerCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: CreateEntityRecognizerCommandOutput) => void),\n    cb?: (err: any, data?: CreateEntityRecognizerCommandOutput) => void\n  ): Promise<CreateEntityRecognizerCommandOutput> | void {\n    const command = new CreateEntityRecognizerCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Deletes a previously created document classifier</p>\n   *          <p>Only those classifiers that are in terminated states (IN_ERROR, TRAINED) will be deleted.\n   *       If an active inference job is using the model, a <code>ResourceInUseException</code> will be\n   *       returned.</p>\n   *          <p>This is an asynchronous action that puts the classifier into a DELETING state, and it is\n   *       then removed by a background job. Once removed, the classifier disappears from your account\n   *       and is no longer available for use. </p>\n   */\n  public deleteDocumentClassifier(\n    args: DeleteDocumentClassifierCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DeleteDocumentClassifierCommandOutput>;\n  public deleteDocumentClassifier(\n    args: DeleteDocumentClassifierCommandInput,\n    cb: (err: any, data?: DeleteDocumentClassifierCommandOutput) => void\n  ): void;\n  public deleteDocumentClassifier(\n    args: DeleteDocumentClassifierCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DeleteDocumentClassifierCommandOutput) => void\n  ): void;\n  public deleteDocumentClassifier(\n    args: DeleteDocumentClassifierCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DeleteDocumentClassifierCommandOutput) => void),\n    cb?: (err: any, data?: DeleteDocumentClassifierCommandOutput) => void\n  ): Promise<DeleteDocumentClassifierCommandOutput> | void {\n    const command = new DeleteDocumentClassifierCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Deletes a model-specific endpoint for a previously-trained custom model. All endpoints\n   *       must be deleted in order for the model to be deleted.</p>\n   */\n  public deleteEndpoint(\n    args: DeleteEndpointCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DeleteEndpointCommandOutput>;\n  public deleteEndpoint(\n    args: DeleteEndpointCommandInput,\n    cb: (err: any, data?: DeleteEndpointCommandOutput) => void\n  ): void;\n  public deleteEndpoint(\n    args: DeleteEndpointCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DeleteEndpointCommandOutput) => void\n  ): void;\n  public deleteEndpoint(\n    args: DeleteEndpointCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DeleteEndpointCommandOutput) => void),\n    cb?: (err: any, data?: DeleteEndpointCommandOutput) => void\n  ): Promise<DeleteEndpointCommandOutput> | void {\n    const command = new DeleteEndpointCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Deletes an entity recognizer.</p>\n   *          <p>Only those recognizers that are in terminated states (IN_ERROR, TRAINED) will be deleted.\n   *       If an active inference job is using the model, a <code>ResourceInUseException</code> will be\n   *       returned.</p>\n   *          <p>This is an asynchronous action that puts the recognizer into a DELETING state, and it is\n   *       then removed by a background job. Once removed, the recognizer disappears from your account\n   *       and is no longer available for use. </p>\n   */\n  public deleteEntityRecognizer(\n    args: DeleteEntityRecognizerCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DeleteEntityRecognizerCommandOutput>;\n  public deleteEntityRecognizer(\n    args: DeleteEntityRecognizerCommandInput,\n    cb: (err: any, data?: DeleteEntityRecognizerCommandOutput) => void\n  ): void;\n  public deleteEntityRecognizer(\n    args: DeleteEntityRecognizerCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DeleteEntityRecognizerCommandOutput) => void\n  ): void;\n  public deleteEntityRecognizer(\n    args: DeleteEntityRecognizerCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DeleteEntityRecognizerCommandOutput) => void),\n    cb?: (err: any, data?: DeleteEntityRecognizerCommandOutput) => void\n  ): Promise<DeleteEntityRecognizerCommandOutput> | void {\n    const command = new DeleteEntityRecognizerCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets the properties associated with a document classification job. Use this operation to\n   *       get the status of a classification job.</p>\n   */\n  public describeDocumentClassificationJob(\n    args: DescribeDocumentClassificationJobCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DescribeDocumentClassificationJobCommandOutput>;\n  public describeDocumentClassificationJob(\n    args: DescribeDocumentClassificationJobCommandInput,\n    cb: (err: any, data?: DescribeDocumentClassificationJobCommandOutput) => void\n  ): void;\n  public describeDocumentClassificationJob(\n    args: DescribeDocumentClassificationJobCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DescribeDocumentClassificationJobCommandOutput) => void\n  ): void;\n  public describeDocumentClassificationJob(\n    args: DescribeDocumentClassificationJobCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DescribeDocumentClassificationJobCommandOutput) => void),\n    cb?: (err: any, data?: DescribeDocumentClassificationJobCommandOutput) => void\n  ): Promise<DescribeDocumentClassificationJobCommandOutput> | void {\n    const command = new DescribeDocumentClassificationJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets the properties associated with a document classifier.</p>\n   */\n  public describeDocumentClassifier(\n    args: DescribeDocumentClassifierCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DescribeDocumentClassifierCommandOutput>;\n  public describeDocumentClassifier(\n    args: DescribeDocumentClassifierCommandInput,\n    cb: (err: any, data?: DescribeDocumentClassifierCommandOutput) => void\n  ): void;\n  public describeDocumentClassifier(\n    args: DescribeDocumentClassifierCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DescribeDocumentClassifierCommandOutput) => void\n  ): void;\n  public describeDocumentClassifier(\n    args: DescribeDocumentClassifierCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DescribeDocumentClassifierCommandOutput) => void),\n    cb?: (err: any, data?: DescribeDocumentClassifierCommandOutput) => void\n  ): Promise<DescribeDocumentClassifierCommandOutput> | void {\n    const command = new DescribeDocumentClassifierCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets the properties associated with a dominant language detection job. Use this operation\n   *       to get the status of a detection job.</p>\n   */\n  public describeDominantLanguageDetectionJob(\n    args: DescribeDominantLanguageDetectionJobCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DescribeDominantLanguageDetectionJobCommandOutput>;\n  public describeDominantLanguageDetectionJob(\n    args: DescribeDominantLanguageDetectionJobCommandInput,\n    cb: (err: any, data?: DescribeDominantLanguageDetectionJobCommandOutput) => void\n  ): void;\n  public describeDominantLanguageDetectionJob(\n    args: DescribeDominantLanguageDetectionJobCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DescribeDominantLanguageDetectionJobCommandOutput) => void\n  ): void;\n  public describeDominantLanguageDetectionJob(\n    args: DescribeDominantLanguageDetectionJobCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DescribeDominantLanguageDetectionJobCommandOutput) => void),\n    cb?: (err: any, data?: DescribeDominantLanguageDetectionJobCommandOutput) => void\n  ): Promise<DescribeDominantLanguageDetectionJobCommandOutput> | void {\n    const command = new DescribeDominantLanguageDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets the properties associated with a specific endpoint. Use this operation to get the\n   *       status of an endpoint.</p>\n   */\n  public describeEndpoint(\n    args: DescribeEndpointCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DescribeEndpointCommandOutput>;\n  public describeEndpoint(\n    args: DescribeEndpointCommandInput,\n    cb: (err: any, data?: DescribeEndpointCommandOutput) => void\n  ): void;\n  public describeEndpoint(\n    args: DescribeEndpointCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DescribeEndpointCommandOutput) => void\n  ): void;\n  public describeEndpoint(\n    args: DescribeEndpointCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DescribeEndpointCommandOutput) => void),\n    cb?: (err: any, data?: DescribeEndpointCommandOutput) => void\n  ): Promise<DescribeEndpointCommandOutput> | void {\n    const command = new DescribeEndpointCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets the properties associated with an entities detection job. Use this operation to get\n   *       the status of a detection job.</p>\n   */\n  public describeEntitiesDetectionJob(\n    args: DescribeEntitiesDetectionJobCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DescribeEntitiesDetectionJobCommandOutput>;\n  public describeEntitiesDetectionJob(\n    args: DescribeEntitiesDetectionJobCommandInput,\n    cb: (err: any, data?: DescribeEntitiesDetectionJobCommandOutput) => void\n  ): void;\n  public describeEntitiesDetectionJob(\n    args: DescribeEntitiesDetectionJobCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DescribeEntitiesDetectionJobCommandOutput) => void\n  ): void;\n  public describeEntitiesDetectionJob(\n    args: DescribeEntitiesDetectionJobCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DescribeEntitiesDetectionJobCommandOutput) => void),\n    cb?: (err: any, data?: DescribeEntitiesDetectionJobCommandOutput) => void\n  ): Promise<DescribeEntitiesDetectionJobCommandOutput> | void {\n    const command = new DescribeEntitiesDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Provides details about an entity recognizer including status, S3 buckets containing\n   *       training data, recognizer metadata, metrics, and so on.</p>\n   */\n  public describeEntityRecognizer(\n    args: DescribeEntityRecognizerCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DescribeEntityRecognizerCommandOutput>;\n  public describeEntityRecognizer(\n    args: DescribeEntityRecognizerCommandInput,\n    cb: (err: any, data?: DescribeEntityRecognizerCommandOutput) => void\n  ): void;\n  public describeEntityRecognizer(\n    args: DescribeEntityRecognizerCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DescribeEntityRecognizerCommandOutput) => void\n  ): void;\n  public describeEntityRecognizer(\n    args: DescribeEntityRecognizerCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DescribeEntityRecognizerCommandOutput) => void),\n    cb?: (err: any, data?: DescribeEntityRecognizerCommandOutput) => void\n  ): Promise<DescribeEntityRecognizerCommandOutput> | void {\n    const command = new DescribeEntityRecognizerCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets the status and details of an events detection job.</p>\n   */\n  public describeEventsDetectionJob(\n    args: DescribeEventsDetectionJobCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DescribeEventsDetectionJobCommandOutput>;\n  public describeEventsDetectionJob(\n    args: DescribeEventsDetectionJobCommandInput,\n    cb: (err: any, data?: DescribeEventsDetectionJobCommandOutput) => void\n  ): void;\n  public describeEventsDetectionJob(\n    args: DescribeEventsDetectionJobCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DescribeEventsDetectionJobCommandOutput) => void\n  ): void;\n  public describeEventsDetectionJob(\n    args: DescribeEventsDetectionJobCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DescribeEventsDetectionJobCommandOutput) => void),\n    cb?: (err: any, data?: DescribeEventsDetectionJobCommandOutput) => void\n  ): Promise<DescribeEventsDetectionJobCommandOutput> | void {\n    const command = new DescribeEventsDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets the properties associated with a key phrases detection job. Use this operation to get\n   *       the status of a detection job.</p>\n   */\n  public describeKeyPhrasesDetectionJob(\n    args: DescribeKeyPhrasesDetectionJobCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DescribeKeyPhrasesDetectionJobCommandOutput>;\n  public describeKeyPhrasesDetectionJob(\n    args: DescribeKeyPhrasesDetectionJobCommandInput,\n    cb: (err: any, data?: DescribeKeyPhrasesDetectionJobCommandOutput) => void\n  ): void;\n  public describeKeyPhrasesDetectionJob(\n    args: DescribeKeyPhrasesDetectionJobCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DescribeKeyPhrasesDetectionJobCommandOutput) => void\n  ): void;\n  public describeKeyPhrasesDetectionJob(\n    args: DescribeKeyPhrasesDetectionJobCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DescribeKeyPhrasesDetectionJobCommandOutput) => void),\n    cb?: (err: any, data?: DescribeKeyPhrasesDetectionJobCommandOutput) => void\n  ): Promise<DescribeKeyPhrasesDetectionJobCommandOutput> | void {\n    const command = new DescribeKeyPhrasesDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets the properties associated with a PII entities detection job. For example, you can use\n   *       this operation to get the job status.</p>\n   */\n  public describePiiEntitiesDetectionJob(\n    args: DescribePiiEntitiesDetectionJobCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DescribePiiEntitiesDetectionJobCommandOutput>;\n  public describePiiEntitiesDetectionJob(\n    args: DescribePiiEntitiesDetectionJobCommandInput,\n    cb: (err: any, data?: DescribePiiEntitiesDetectionJobCommandOutput) => void\n  ): void;\n  public describePiiEntitiesDetectionJob(\n    args: DescribePiiEntitiesDetectionJobCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DescribePiiEntitiesDetectionJobCommandOutput) => void\n  ): void;\n  public describePiiEntitiesDetectionJob(\n    args: DescribePiiEntitiesDetectionJobCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DescribePiiEntitiesDetectionJobCommandOutput) => void),\n    cb?: (err: any, data?: DescribePiiEntitiesDetectionJobCommandOutput) => void\n  ): Promise<DescribePiiEntitiesDetectionJobCommandOutput> | void {\n    const command = new DescribePiiEntitiesDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets the properties associated with a sentiment detection job. Use this operation to get\n   *       the status of a detection job.</p>\n   */\n  public describeSentimentDetectionJob(\n    args: DescribeSentimentDetectionJobCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DescribeSentimentDetectionJobCommandOutput>;\n  public describeSentimentDetectionJob(\n    args: DescribeSentimentDetectionJobCommandInput,\n    cb: (err: any, data?: DescribeSentimentDetectionJobCommandOutput) => void\n  ): void;\n  public describeSentimentDetectionJob(\n    args: DescribeSentimentDetectionJobCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DescribeSentimentDetectionJobCommandOutput) => void\n  ): void;\n  public describeSentimentDetectionJob(\n    args: DescribeSentimentDetectionJobCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DescribeSentimentDetectionJobCommandOutput) => void),\n    cb?: (err: any, data?: DescribeSentimentDetectionJobCommandOutput) => void\n  ): Promise<DescribeSentimentDetectionJobCommandOutput> | void {\n    const command = new DescribeSentimentDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets the properties associated with a topic detection job. Use this operation to get\n   *       the status of a detection job.</p>\n   */\n  public describeTopicsDetectionJob(\n    args: DescribeTopicsDetectionJobCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DescribeTopicsDetectionJobCommandOutput>;\n  public describeTopicsDetectionJob(\n    args: DescribeTopicsDetectionJobCommandInput,\n    cb: (err: any, data?: DescribeTopicsDetectionJobCommandOutput) => void\n  ): void;\n  public describeTopicsDetectionJob(\n    args: DescribeTopicsDetectionJobCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DescribeTopicsDetectionJobCommandOutput) => void\n  ): void;\n  public describeTopicsDetectionJob(\n    args: DescribeTopicsDetectionJobCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DescribeTopicsDetectionJobCommandOutput) => void),\n    cb?: (err: any, data?: DescribeTopicsDetectionJobCommandOutput) => void\n  ): Promise<DescribeTopicsDetectionJobCommandOutput> | void {\n    const command = new DescribeTopicsDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Determines the dominant language of the input text. For a list of languages that Amazon\n   *       Comprehend can detect, see <a href=\"https://docs.aws.amazon.com/comprehend/latest/dg/how-languages.html\">Amazon Comprehend Supported Languages</a>. </p>\n   */\n  public detectDominantLanguage(\n    args: DetectDominantLanguageCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DetectDominantLanguageCommandOutput>;\n  public detectDominantLanguage(\n    args: DetectDominantLanguageCommandInput,\n    cb: (err: any, data?: DetectDominantLanguageCommandOutput) => void\n  ): void;\n  public detectDominantLanguage(\n    args: DetectDominantLanguageCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DetectDominantLanguageCommandOutput) => void\n  ): void;\n  public detectDominantLanguage(\n    args: DetectDominantLanguageCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DetectDominantLanguageCommandOutput) => void),\n    cb?: (err: any, data?: DetectDominantLanguageCommandOutput) => void\n  ): Promise<DetectDominantLanguageCommandOutput> | void {\n    const command = new DetectDominantLanguageCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Inspects text for named entities, and returns information about them. For more\n   *       information, about named entities, see <a>how-entities</a>. </p>\n   */\n  public detectEntities(\n    args: DetectEntitiesCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DetectEntitiesCommandOutput>;\n  public detectEntities(\n    args: DetectEntitiesCommandInput,\n    cb: (err: any, data?: DetectEntitiesCommandOutput) => void\n  ): void;\n  public detectEntities(\n    args: DetectEntitiesCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DetectEntitiesCommandOutput) => void\n  ): void;\n  public detectEntities(\n    args: DetectEntitiesCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DetectEntitiesCommandOutput) => void),\n    cb?: (err: any, data?: DetectEntitiesCommandOutput) => void\n  ): Promise<DetectEntitiesCommandOutput> | void {\n    const command = new DetectEntitiesCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Detects the key noun phrases found in the text. </p>\n   */\n  public detectKeyPhrases(\n    args: DetectKeyPhrasesCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DetectKeyPhrasesCommandOutput>;\n  public detectKeyPhrases(\n    args: DetectKeyPhrasesCommandInput,\n    cb: (err: any, data?: DetectKeyPhrasesCommandOutput) => void\n  ): void;\n  public detectKeyPhrases(\n    args: DetectKeyPhrasesCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DetectKeyPhrasesCommandOutput) => void\n  ): void;\n  public detectKeyPhrases(\n    args: DetectKeyPhrasesCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DetectKeyPhrasesCommandOutput) => void),\n    cb?: (err: any, data?: DetectKeyPhrasesCommandOutput) => void\n  ): Promise<DetectKeyPhrasesCommandOutput> | void {\n    const command = new DetectKeyPhrasesCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Inspects the input text for entities that contain personally identifiable information\n   *       (PII) and returns information about them.</p>\n   */\n  public detectPiiEntities(\n    args: DetectPiiEntitiesCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DetectPiiEntitiesCommandOutput>;\n  public detectPiiEntities(\n    args: DetectPiiEntitiesCommandInput,\n    cb: (err: any, data?: DetectPiiEntitiesCommandOutput) => void\n  ): void;\n  public detectPiiEntities(\n    args: DetectPiiEntitiesCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DetectPiiEntitiesCommandOutput) => void\n  ): void;\n  public detectPiiEntities(\n    args: DetectPiiEntitiesCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DetectPiiEntitiesCommandOutput) => void),\n    cb?: (err: any, data?: DetectPiiEntitiesCommandOutput) => void\n  ): Promise<DetectPiiEntitiesCommandOutput> | void {\n    const command = new DetectPiiEntitiesCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Inspects text and returns an inference of the prevailing sentiment\n   *         (<code>POSITIVE</code>, <code>NEUTRAL</code>, <code>MIXED</code>, or <code>NEGATIVE</code>). </p>\n   */\n  public detectSentiment(\n    args: DetectSentimentCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DetectSentimentCommandOutput>;\n  public detectSentiment(\n    args: DetectSentimentCommandInput,\n    cb: (err: any, data?: DetectSentimentCommandOutput) => void\n  ): void;\n  public detectSentiment(\n    args: DetectSentimentCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DetectSentimentCommandOutput) => void\n  ): void;\n  public detectSentiment(\n    args: DetectSentimentCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DetectSentimentCommandOutput) => void),\n    cb?: (err: any, data?: DetectSentimentCommandOutput) => void\n  ): Promise<DetectSentimentCommandOutput> | void {\n    const command = new DetectSentimentCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Inspects text for syntax and the part of speech of words in the document. For more\n   *       information, <a>how-syntax</a>.</p>\n   */\n  public detectSyntax(\n    args: DetectSyntaxCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DetectSyntaxCommandOutput>;\n  public detectSyntax(args: DetectSyntaxCommandInput, cb: (err: any, data?: DetectSyntaxCommandOutput) => void): void;\n  public detectSyntax(\n    args: DetectSyntaxCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DetectSyntaxCommandOutput) => void\n  ): void;\n  public detectSyntax(\n    args: DetectSyntaxCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DetectSyntaxCommandOutput) => void),\n    cb?: (err: any, data?: DetectSyntaxCommandOutput) => void\n  ): Promise<DetectSyntaxCommandOutput> | void {\n    const command = new DetectSyntaxCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets a list of the documentation classification jobs that you have submitted.</p>\n   */\n  public listDocumentClassificationJobs(\n    args: ListDocumentClassificationJobsCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<ListDocumentClassificationJobsCommandOutput>;\n  public listDocumentClassificationJobs(\n    args: ListDocumentClassificationJobsCommandInput,\n    cb: (err: any, data?: ListDocumentClassificationJobsCommandOutput) => void\n  ): void;\n  public listDocumentClassificationJobs(\n    args: ListDocumentClassificationJobsCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: ListDocumentClassificationJobsCommandOutput) => void\n  ): void;\n  public listDocumentClassificationJobs(\n    args: ListDocumentClassificationJobsCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: ListDocumentClassificationJobsCommandOutput) => void),\n    cb?: (err: any, data?: ListDocumentClassificationJobsCommandOutput) => void\n  ): Promise<ListDocumentClassificationJobsCommandOutput> | void {\n    const command = new ListDocumentClassificationJobsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets a list of the document classifiers that you have created.</p>\n   */\n  public listDocumentClassifiers(\n    args: ListDocumentClassifiersCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<ListDocumentClassifiersCommandOutput>;\n  public listDocumentClassifiers(\n    args: ListDocumentClassifiersCommandInput,\n    cb: (err: any, data?: ListDocumentClassifiersCommandOutput) => void\n  ): void;\n  public listDocumentClassifiers(\n    args: ListDocumentClassifiersCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: ListDocumentClassifiersCommandOutput) => void\n  ): void;\n  public listDocumentClassifiers(\n    args: ListDocumentClassifiersCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: ListDocumentClassifiersCommandOutput) => void),\n    cb?: (err: any, data?: ListDocumentClassifiersCommandOutput) => void\n  ): Promise<ListDocumentClassifiersCommandOutput> | void {\n    const command = new ListDocumentClassifiersCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets a list of the dominant language detection jobs that you have submitted.</p>\n   */\n  public listDominantLanguageDetectionJobs(\n    args: ListDominantLanguageDetectionJobsCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<ListDominantLanguageDetectionJobsCommandOutput>;\n  public listDominantLanguageDetectionJobs(\n    args: ListDominantLanguageDetectionJobsCommandInput,\n    cb: (err: any, data?: ListDominantLanguageDetectionJobsCommandOutput) => void\n  ): void;\n  public listDominantLanguageDetectionJobs(\n    args: ListDominantLanguageDetectionJobsCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: ListDominantLanguageDetectionJobsCommandOutput) => void\n  ): void;\n  public listDominantLanguageDetectionJobs(\n    args: ListDominantLanguageDetectionJobsCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: ListDominantLanguageDetectionJobsCommandOutput) => void),\n    cb?: (err: any, data?: ListDominantLanguageDetectionJobsCommandOutput) => void\n  ): Promise<ListDominantLanguageDetectionJobsCommandOutput> | void {\n    const command = new ListDominantLanguageDetectionJobsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets a list of all existing endpoints that you've created.</p>\n   */\n  public listEndpoints(\n    args: ListEndpointsCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<ListEndpointsCommandOutput>;\n  public listEndpoints(\n    args: ListEndpointsCommandInput,\n    cb: (err: any, data?: ListEndpointsCommandOutput) => void\n  ): void;\n  public listEndpoints(\n    args: ListEndpointsCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: ListEndpointsCommandOutput) => void\n  ): void;\n  public listEndpoints(\n    args: ListEndpointsCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: ListEndpointsCommandOutput) => void),\n    cb?: (err: any, data?: ListEndpointsCommandOutput) => void\n  ): Promise<ListEndpointsCommandOutput> | void {\n    const command = new ListEndpointsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets a list of the entity detection jobs that you have submitted.</p>\n   */\n  public listEntitiesDetectionJobs(\n    args: ListEntitiesDetectionJobsCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<ListEntitiesDetectionJobsCommandOutput>;\n  public listEntitiesDetectionJobs(\n    args: ListEntitiesDetectionJobsCommandInput,\n    cb: (err: any, data?: ListEntitiesDetectionJobsCommandOutput) => void\n  ): void;\n  public listEntitiesDetectionJobs(\n    args: ListEntitiesDetectionJobsCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: ListEntitiesDetectionJobsCommandOutput) => void\n  ): void;\n  public listEntitiesDetectionJobs(\n    args: ListEntitiesDetectionJobsCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: ListEntitiesDetectionJobsCommandOutput) => void),\n    cb?: (err: any, data?: ListEntitiesDetectionJobsCommandOutput) => void\n  ): Promise<ListEntitiesDetectionJobsCommandOutput> | void {\n    const command = new ListEntitiesDetectionJobsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets a list of the properties of all entity recognizers that you created, including\n   *       recognizers currently in training. Allows you to filter the list of recognizers based on\n   *       criteria such as status and submission time. This call returns up to 500 entity recognizers in\n   *       the list, with a default number of 100 recognizers in the list.</p>\n   *          <p>The results of this list are not in any particular order. Please get the list and sort\n   *       locally if needed.</p>\n   */\n  public listEntityRecognizers(\n    args: ListEntityRecognizersCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<ListEntityRecognizersCommandOutput>;\n  public listEntityRecognizers(\n    args: ListEntityRecognizersCommandInput,\n    cb: (err: any, data?: ListEntityRecognizersCommandOutput) => void\n  ): void;\n  public listEntityRecognizers(\n    args: ListEntityRecognizersCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: ListEntityRecognizersCommandOutput) => void\n  ): void;\n  public listEntityRecognizers(\n    args: ListEntityRecognizersCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: ListEntityRecognizersCommandOutput) => void),\n    cb?: (err: any, data?: ListEntityRecognizersCommandOutput) => void\n  ): Promise<ListEntityRecognizersCommandOutput> | void {\n    const command = new ListEntityRecognizersCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets a list of the events detection jobs that you have submitted.</p>\n   */\n  public listEventsDetectionJobs(\n    args: ListEventsDetectionJobsCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<ListEventsDetectionJobsCommandOutput>;\n  public listEventsDetectionJobs(\n    args: ListEventsDetectionJobsCommandInput,\n    cb: (err: any, data?: ListEventsDetectionJobsCommandOutput) => void\n  ): void;\n  public listEventsDetectionJobs(\n    args: ListEventsDetectionJobsCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: ListEventsDetectionJobsCommandOutput) => void\n  ): void;\n  public listEventsDetectionJobs(\n    args: ListEventsDetectionJobsCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: ListEventsDetectionJobsCommandOutput) => void),\n    cb?: (err: any, data?: ListEventsDetectionJobsCommandOutput) => void\n  ): Promise<ListEventsDetectionJobsCommandOutput> | void {\n    const command = new ListEventsDetectionJobsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Get a list of key phrase detection jobs that you have submitted.</p>\n   */\n  public listKeyPhrasesDetectionJobs(\n    args: ListKeyPhrasesDetectionJobsCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<ListKeyPhrasesDetectionJobsCommandOutput>;\n  public listKeyPhrasesDetectionJobs(\n    args: ListKeyPhrasesDetectionJobsCommandInput,\n    cb: (err: any, data?: ListKeyPhrasesDetectionJobsCommandOutput) => void\n  ): void;\n  public listKeyPhrasesDetectionJobs(\n    args: ListKeyPhrasesDetectionJobsCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: ListKeyPhrasesDetectionJobsCommandOutput) => void\n  ): void;\n  public listKeyPhrasesDetectionJobs(\n    args: ListKeyPhrasesDetectionJobsCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: ListKeyPhrasesDetectionJobsCommandOutput) => void),\n    cb?: (err: any, data?: ListKeyPhrasesDetectionJobsCommandOutput) => void\n  ): Promise<ListKeyPhrasesDetectionJobsCommandOutput> | void {\n    const command = new ListKeyPhrasesDetectionJobsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets a list of the PII entity detection jobs that you have submitted.</p>\n   */\n  public listPiiEntitiesDetectionJobs(\n    args: ListPiiEntitiesDetectionJobsCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<ListPiiEntitiesDetectionJobsCommandOutput>;\n  public listPiiEntitiesDetectionJobs(\n    args: ListPiiEntitiesDetectionJobsCommandInput,\n    cb: (err: any, data?: ListPiiEntitiesDetectionJobsCommandOutput) => void\n  ): void;\n  public listPiiEntitiesDetectionJobs(\n    args: ListPiiEntitiesDetectionJobsCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: ListPiiEntitiesDetectionJobsCommandOutput) => void\n  ): void;\n  public listPiiEntitiesDetectionJobs(\n    args: ListPiiEntitiesDetectionJobsCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: ListPiiEntitiesDetectionJobsCommandOutput) => void),\n    cb?: (err: any, data?: ListPiiEntitiesDetectionJobsCommandOutput) => void\n  ): Promise<ListPiiEntitiesDetectionJobsCommandOutput> | void {\n    const command = new ListPiiEntitiesDetectionJobsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets a list of sentiment detection jobs that you have submitted.</p>\n   */\n  public listSentimentDetectionJobs(\n    args: ListSentimentDetectionJobsCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<ListSentimentDetectionJobsCommandOutput>;\n  public listSentimentDetectionJobs(\n    args: ListSentimentDetectionJobsCommandInput,\n    cb: (err: any, data?: ListSentimentDetectionJobsCommandOutput) => void\n  ): void;\n  public listSentimentDetectionJobs(\n    args: ListSentimentDetectionJobsCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: ListSentimentDetectionJobsCommandOutput) => void\n  ): void;\n  public listSentimentDetectionJobs(\n    args: ListSentimentDetectionJobsCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: ListSentimentDetectionJobsCommandOutput) => void),\n    cb?: (err: any, data?: ListSentimentDetectionJobsCommandOutput) => void\n  ): Promise<ListSentimentDetectionJobsCommandOutput> | void {\n    const command = new ListSentimentDetectionJobsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Lists all tags associated with a given Amazon Comprehend resource. </p>\n   */\n  public listTagsForResource(\n    args: ListTagsForResourceCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<ListTagsForResourceCommandOutput>;\n  public listTagsForResource(\n    args: ListTagsForResourceCommandInput,\n    cb: (err: any, data?: ListTagsForResourceCommandOutput) => void\n  ): void;\n  public listTagsForResource(\n    args: ListTagsForResourceCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: ListTagsForResourceCommandOutput) => void\n  ): void;\n  public listTagsForResource(\n    args: ListTagsForResourceCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: ListTagsForResourceCommandOutput) => void),\n    cb?: (err: any, data?: ListTagsForResourceCommandOutput) => void\n  ): Promise<ListTagsForResourceCommandOutput> | void {\n    const command = new ListTagsForResourceCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets a list of the topic detection jobs that you have submitted.</p>\n   */\n  public listTopicsDetectionJobs(\n    args: ListTopicsDetectionJobsCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<ListTopicsDetectionJobsCommandOutput>;\n  public listTopicsDetectionJobs(\n    args: ListTopicsDetectionJobsCommandInput,\n    cb: (err: any, data?: ListTopicsDetectionJobsCommandOutput) => void\n  ): void;\n  public listTopicsDetectionJobs(\n    args: ListTopicsDetectionJobsCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: ListTopicsDetectionJobsCommandOutput) => void\n  ): void;\n  public listTopicsDetectionJobs(\n    args: ListTopicsDetectionJobsCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: ListTopicsDetectionJobsCommandOutput) => void),\n    cb?: (err: any, data?: ListTopicsDetectionJobsCommandOutput) => void\n  ): Promise<ListTopicsDetectionJobsCommandOutput> | void {\n    const command = new ListTopicsDetectionJobsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Starts an asynchronous document classification job. Use the  operation to track the progress of the\n   *       job.</p>\n   */\n  public startDocumentClassificationJob(\n    args: StartDocumentClassificationJobCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StartDocumentClassificationJobCommandOutput>;\n  public startDocumentClassificationJob(\n    args: StartDocumentClassificationJobCommandInput,\n    cb: (err: any, data?: StartDocumentClassificationJobCommandOutput) => void\n  ): void;\n  public startDocumentClassificationJob(\n    args: StartDocumentClassificationJobCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StartDocumentClassificationJobCommandOutput) => void\n  ): void;\n  public startDocumentClassificationJob(\n    args: StartDocumentClassificationJobCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StartDocumentClassificationJobCommandOutput) => void),\n    cb?: (err: any, data?: StartDocumentClassificationJobCommandOutput) => void\n  ): Promise<StartDocumentClassificationJobCommandOutput> | void {\n    const command = new StartDocumentClassificationJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Starts an asynchronous dominant language detection job for a collection of documents. Use\n   *       the  operation to track the status\n   *       of a job.</p>\n   */\n  public startDominantLanguageDetectionJob(\n    args: StartDominantLanguageDetectionJobCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StartDominantLanguageDetectionJobCommandOutput>;\n  public startDominantLanguageDetectionJob(\n    args: StartDominantLanguageDetectionJobCommandInput,\n    cb: (err: any, data?: StartDominantLanguageDetectionJobCommandOutput) => void\n  ): void;\n  public startDominantLanguageDetectionJob(\n    args: StartDominantLanguageDetectionJobCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StartDominantLanguageDetectionJobCommandOutput) => void\n  ): void;\n  public startDominantLanguageDetectionJob(\n    args: StartDominantLanguageDetectionJobCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StartDominantLanguageDetectionJobCommandOutput) => void),\n    cb?: (err: any, data?: StartDominantLanguageDetectionJobCommandOutput) => void\n  ): Promise<StartDominantLanguageDetectionJobCommandOutput> | void {\n    const command = new StartDominantLanguageDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Starts an asynchronous entity detection job for a collection of documents. Use the  operation to track the status of a job.</p>\n   *          <p>This API can be used for either standard entity detection or custom entity recognition. In\n   *       order to be used for custom entity recognition, the optional <code>EntityRecognizerArn</code>\n   *       must be used in order to provide access to the recognizer being used to detect the custom\n   *       entity.</p>\n   */\n  public startEntitiesDetectionJob(\n    args: StartEntitiesDetectionJobCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StartEntitiesDetectionJobCommandOutput>;\n  public startEntitiesDetectionJob(\n    args: StartEntitiesDetectionJobCommandInput,\n    cb: (err: any, data?: StartEntitiesDetectionJobCommandOutput) => void\n  ): void;\n  public startEntitiesDetectionJob(\n    args: StartEntitiesDetectionJobCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StartEntitiesDetectionJobCommandOutput) => void\n  ): void;\n  public startEntitiesDetectionJob(\n    args: StartEntitiesDetectionJobCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StartEntitiesDetectionJobCommandOutput) => void),\n    cb?: (err: any, data?: StartEntitiesDetectionJobCommandOutput) => void\n  ): Promise<StartEntitiesDetectionJobCommandOutput> | void {\n    const command = new StartEntitiesDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Starts an asynchronous event detection job for a collection of documents.</p>\n   */\n  public startEventsDetectionJob(\n    args: StartEventsDetectionJobCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StartEventsDetectionJobCommandOutput>;\n  public startEventsDetectionJob(\n    args: StartEventsDetectionJobCommandInput,\n    cb: (err: any, data?: StartEventsDetectionJobCommandOutput) => void\n  ): void;\n  public startEventsDetectionJob(\n    args: StartEventsDetectionJobCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StartEventsDetectionJobCommandOutput) => void\n  ): void;\n  public startEventsDetectionJob(\n    args: StartEventsDetectionJobCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StartEventsDetectionJobCommandOutput) => void),\n    cb?: (err: any, data?: StartEventsDetectionJobCommandOutput) => void\n  ): Promise<StartEventsDetectionJobCommandOutput> | void {\n    const command = new StartEventsDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Starts an asynchronous key phrase detection job for a collection of documents. Use the\n   *          operation to track the status of a\n   *       job.</p>\n   */\n  public startKeyPhrasesDetectionJob(\n    args: StartKeyPhrasesDetectionJobCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StartKeyPhrasesDetectionJobCommandOutput>;\n  public startKeyPhrasesDetectionJob(\n    args: StartKeyPhrasesDetectionJobCommandInput,\n    cb: (err: any, data?: StartKeyPhrasesDetectionJobCommandOutput) => void\n  ): void;\n  public startKeyPhrasesDetectionJob(\n    args: StartKeyPhrasesDetectionJobCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StartKeyPhrasesDetectionJobCommandOutput) => void\n  ): void;\n  public startKeyPhrasesDetectionJob(\n    args: StartKeyPhrasesDetectionJobCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StartKeyPhrasesDetectionJobCommandOutput) => void),\n    cb?: (err: any, data?: StartKeyPhrasesDetectionJobCommandOutput) => void\n  ): Promise<StartKeyPhrasesDetectionJobCommandOutput> | void {\n    const command = new StartKeyPhrasesDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Starts an asynchronous PII entity detection job for a collection of documents.</p>\n   */\n  public startPiiEntitiesDetectionJob(\n    args: StartPiiEntitiesDetectionJobCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StartPiiEntitiesDetectionJobCommandOutput>;\n  public startPiiEntitiesDetectionJob(\n    args: StartPiiEntitiesDetectionJobCommandInput,\n    cb: (err: any, data?: StartPiiEntitiesDetectionJobCommandOutput) => void\n  ): void;\n  public startPiiEntitiesDetectionJob(\n    args: StartPiiEntitiesDetectionJobCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StartPiiEntitiesDetectionJobCommandOutput) => void\n  ): void;\n  public startPiiEntitiesDetectionJob(\n    args: StartPiiEntitiesDetectionJobCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StartPiiEntitiesDetectionJobCommandOutput) => void),\n    cb?: (err: any, data?: StartPiiEntitiesDetectionJobCommandOutput) => void\n  ): Promise<StartPiiEntitiesDetectionJobCommandOutput> | void {\n    const command = new StartPiiEntitiesDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Starts an asynchronous sentiment detection job for a collection of documents. use the\n   *          operation to track the status of a\n   *       job.</p>\n   */\n  public startSentimentDetectionJob(\n    args: StartSentimentDetectionJobCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StartSentimentDetectionJobCommandOutput>;\n  public startSentimentDetectionJob(\n    args: StartSentimentDetectionJobCommandInput,\n    cb: (err: any, data?: StartSentimentDetectionJobCommandOutput) => void\n  ): void;\n  public startSentimentDetectionJob(\n    args: StartSentimentDetectionJobCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StartSentimentDetectionJobCommandOutput) => void\n  ): void;\n  public startSentimentDetectionJob(\n    args: StartSentimentDetectionJobCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StartSentimentDetectionJobCommandOutput) => void),\n    cb?: (err: any, data?: StartSentimentDetectionJobCommandOutput) => void\n  ): Promise<StartSentimentDetectionJobCommandOutput> | void {\n    const command = new StartSentimentDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Starts an asynchronous topic detection job. Use the\n   *         <code>DescribeTopicDetectionJob</code> operation to track the status of a job.</p>\n   */\n  public startTopicsDetectionJob(\n    args: StartTopicsDetectionJobCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StartTopicsDetectionJobCommandOutput>;\n  public startTopicsDetectionJob(\n    args: StartTopicsDetectionJobCommandInput,\n    cb: (err: any, data?: StartTopicsDetectionJobCommandOutput) => void\n  ): void;\n  public startTopicsDetectionJob(\n    args: StartTopicsDetectionJobCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StartTopicsDetectionJobCommandOutput) => void\n  ): void;\n  public startTopicsDetectionJob(\n    args: StartTopicsDetectionJobCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StartTopicsDetectionJobCommandOutput) => void),\n    cb?: (err: any, data?: StartTopicsDetectionJobCommandOutput) => void\n  ): Promise<StartTopicsDetectionJobCommandOutput> | void {\n    const command = new StartTopicsDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Stops a dominant language detection job in progress.</p>\n   *          <p>If the job state is <code>IN_PROGRESS</code> the job is marked for termination and put\n   *       into the <code>STOP_REQUESTED</code> state. If the job completes before it can be stopped, it\n   *       is put into the <code>COMPLETED</code> state; otherwise the job is stopped and put into the\n   *         <code>STOPPED</code> state.</p>\n   *          <p>If the job is in the <code>COMPLETED</code> or <code>FAILED</code> state when you call the\n   *         <code>StopDominantLanguageDetectionJob</code> operation, the operation returns a 400\n   *       Internal Request Exception. </p>\n   *          <p>When a job is stopped, any documents already processed are written to the output\n   *       location.</p>\n   */\n  public stopDominantLanguageDetectionJob(\n    args: StopDominantLanguageDetectionJobCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StopDominantLanguageDetectionJobCommandOutput>;\n  public stopDominantLanguageDetectionJob(\n    args: StopDominantLanguageDetectionJobCommandInput,\n    cb: (err: any, data?: StopDominantLanguageDetectionJobCommandOutput) => void\n  ): void;\n  public stopDominantLanguageDetectionJob(\n    args: StopDominantLanguageDetectionJobCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StopDominantLanguageDetectionJobCommandOutput) => void\n  ): void;\n  public stopDominantLanguageDetectionJob(\n    args: StopDominantLanguageDetectionJobCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StopDominantLanguageDetectionJobCommandOutput) => void),\n    cb?: (err: any, data?: StopDominantLanguageDetectionJobCommandOutput) => void\n  ): Promise<StopDominantLanguageDetectionJobCommandOutput> | void {\n    const command = new StopDominantLanguageDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Stops an entities detection job in progress.</p>\n   *          <p>If the job state is <code>IN_PROGRESS</code> the job is marked for termination and put\n   *       into the <code>STOP_REQUESTED</code> state. If the job completes before it can be stopped, it\n   *       is put into the <code>COMPLETED</code> state; otherwise the job is stopped and put into the\n   *         <code>STOPPED</code> state.</p>\n   *          <p>If the job is in the <code>COMPLETED</code> or <code>FAILED</code> state when you call the\n   *         <code>StopDominantLanguageDetectionJob</code> operation, the operation returns a 400\n   *       Internal Request Exception. </p>\n   *          <p>When a job is stopped, any documents already processed are written to the output\n   *       location.</p>\n   */\n  public stopEntitiesDetectionJob(\n    args: StopEntitiesDetectionJobCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StopEntitiesDetectionJobCommandOutput>;\n  public stopEntitiesDetectionJob(\n    args: StopEntitiesDetectionJobCommandInput,\n    cb: (err: any, data?: StopEntitiesDetectionJobCommandOutput) => void\n  ): void;\n  public stopEntitiesDetectionJob(\n    args: StopEntitiesDetectionJobCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StopEntitiesDetectionJobCommandOutput) => void\n  ): void;\n  public stopEntitiesDetectionJob(\n    args: StopEntitiesDetectionJobCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StopEntitiesDetectionJobCommandOutput) => void),\n    cb?: (err: any, data?: StopEntitiesDetectionJobCommandOutput) => void\n  ): Promise<StopEntitiesDetectionJobCommandOutput> | void {\n    const command = new StopEntitiesDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Stops an events detection job in progress.</p>\n   */\n  public stopEventsDetectionJob(\n    args: StopEventsDetectionJobCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StopEventsDetectionJobCommandOutput>;\n  public stopEventsDetectionJob(\n    args: StopEventsDetectionJobCommandInput,\n    cb: (err: any, data?: StopEventsDetectionJobCommandOutput) => void\n  ): void;\n  public stopEventsDetectionJob(\n    args: StopEventsDetectionJobCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StopEventsDetectionJobCommandOutput) => void\n  ): void;\n  public stopEventsDetectionJob(\n    args: StopEventsDetectionJobCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StopEventsDetectionJobCommandOutput) => void),\n    cb?: (err: any, data?: StopEventsDetectionJobCommandOutput) => void\n  ): Promise<StopEventsDetectionJobCommandOutput> | void {\n    const command = new StopEventsDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Stops a key phrases detection job in progress.</p>\n   *          <p>If the job state is <code>IN_PROGRESS</code> the job is marked for termination and put\n   *       into the <code>STOP_REQUESTED</code> state. If the job completes before it can be stopped, it\n   *       is put into the <code>COMPLETED</code> state; otherwise the job is stopped and put into the\n   *         <code>STOPPED</code> state.</p>\n   *          <p>If the job is in the <code>COMPLETED</code> or <code>FAILED</code> state when you call the\n   *         <code>StopDominantLanguageDetectionJob</code> operation, the operation returns a 400\n   *       Internal Request Exception. </p>\n   *          <p>When a job is stopped, any documents already processed are written to the output\n   *       location.</p>\n   */\n  public stopKeyPhrasesDetectionJob(\n    args: StopKeyPhrasesDetectionJobCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StopKeyPhrasesDetectionJobCommandOutput>;\n  public stopKeyPhrasesDetectionJob(\n    args: StopKeyPhrasesDetectionJobCommandInput,\n    cb: (err: any, data?: StopKeyPhrasesDetectionJobCommandOutput) => void\n  ): void;\n  public stopKeyPhrasesDetectionJob(\n    args: StopKeyPhrasesDetectionJobCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StopKeyPhrasesDetectionJobCommandOutput) => void\n  ): void;\n  public stopKeyPhrasesDetectionJob(\n    args: StopKeyPhrasesDetectionJobCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StopKeyPhrasesDetectionJobCommandOutput) => void),\n    cb?: (err: any, data?: StopKeyPhrasesDetectionJobCommandOutput) => void\n  ): Promise<StopKeyPhrasesDetectionJobCommandOutput> | void {\n    const command = new StopKeyPhrasesDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Stops a PII entities detection job in progress.</p>\n   */\n  public stopPiiEntitiesDetectionJob(\n    args: StopPiiEntitiesDetectionJobCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StopPiiEntitiesDetectionJobCommandOutput>;\n  public stopPiiEntitiesDetectionJob(\n    args: StopPiiEntitiesDetectionJobCommandInput,\n    cb: (err: any, data?: StopPiiEntitiesDetectionJobCommandOutput) => void\n  ): void;\n  public stopPiiEntitiesDetectionJob(\n    args: StopPiiEntitiesDetectionJobCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StopPiiEntitiesDetectionJobCommandOutput) => void\n  ): void;\n  public stopPiiEntitiesDetectionJob(\n    args: StopPiiEntitiesDetectionJobCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StopPiiEntitiesDetectionJobCommandOutput) => void),\n    cb?: (err: any, data?: StopPiiEntitiesDetectionJobCommandOutput) => void\n  ): Promise<StopPiiEntitiesDetectionJobCommandOutput> | void {\n    const command = new StopPiiEntitiesDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Stops a sentiment detection job in progress.</p>\n   *          <p>If the job state is <code>IN_PROGRESS</code> the job is marked for termination and put\n   *       into the <code>STOP_REQUESTED</code> state. If the job completes before it can be stopped, it\n   *       is put into the <code>COMPLETED</code> state; otherwise the job is be stopped and put into the\n   *         <code>STOPPED</code> state.</p>\n   *          <p>If the job is in the <code>COMPLETED</code> or <code>FAILED</code> state when you call the\n   *         <code>StopDominantLanguageDetectionJob</code> operation, the operation returns a 400\n   *       Internal Request Exception. </p>\n   *          <p>When a job is stopped, any documents already processed are written to the output\n   *       location.</p>\n   */\n  public stopSentimentDetectionJob(\n    args: StopSentimentDetectionJobCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StopSentimentDetectionJobCommandOutput>;\n  public stopSentimentDetectionJob(\n    args: StopSentimentDetectionJobCommandInput,\n    cb: (err: any, data?: StopSentimentDetectionJobCommandOutput) => void\n  ): void;\n  public stopSentimentDetectionJob(\n    args: StopSentimentDetectionJobCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StopSentimentDetectionJobCommandOutput) => void\n  ): void;\n  public stopSentimentDetectionJob(\n    args: StopSentimentDetectionJobCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StopSentimentDetectionJobCommandOutput) => void),\n    cb?: (err: any, data?: StopSentimentDetectionJobCommandOutput) => void\n  ): Promise<StopSentimentDetectionJobCommandOutput> | void {\n    const command = new StopSentimentDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Stops a document classifier training job while in progress.</p>\n   *          <p>If the training job state is <code>TRAINING</code>, the job is marked for termination and\n   *       put into the <code>STOP_REQUESTED</code> state. If the training job completes before it can be\n   *       stopped, it is put into the <code>TRAINED</code>; otherwise the training job is stopped and\n   *       put into the <code>STOPPED</code> state and the service sends back an HTTP 200 response with\n   *       an empty HTTP body. </p>\n   */\n  public stopTrainingDocumentClassifier(\n    args: StopTrainingDocumentClassifierCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StopTrainingDocumentClassifierCommandOutput>;\n  public stopTrainingDocumentClassifier(\n    args: StopTrainingDocumentClassifierCommandInput,\n    cb: (err: any, data?: StopTrainingDocumentClassifierCommandOutput) => void\n  ): void;\n  public stopTrainingDocumentClassifier(\n    args: StopTrainingDocumentClassifierCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StopTrainingDocumentClassifierCommandOutput) => void\n  ): void;\n  public stopTrainingDocumentClassifier(\n    args: StopTrainingDocumentClassifierCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StopTrainingDocumentClassifierCommandOutput) => void),\n    cb?: (err: any, data?: StopTrainingDocumentClassifierCommandOutput) => void\n  ): Promise<StopTrainingDocumentClassifierCommandOutput> | void {\n    const command = new StopTrainingDocumentClassifierCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Stops an entity recognizer training job while in progress.</p>\n   *          <p>If the training job state is <code>TRAINING</code>, the job is marked for termination and\n   *       put into the <code>STOP_REQUESTED</code> state. If the training job completes before it can be\n   *       stopped, it is put into the <code>TRAINED</code>; otherwise the training job is stopped and\n   *       putted into the <code>STOPPED</code> state and the service sends back an HTTP 200 response\n   *       with an empty HTTP body.</p>\n   */\n  public stopTrainingEntityRecognizer(\n    args: StopTrainingEntityRecognizerCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StopTrainingEntityRecognizerCommandOutput>;\n  public stopTrainingEntityRecognizer(\n    args: StopTrainingEntityRecognizerCommandInput,\n    cb: (err: any, data?: StopTrainingEntityRecognizerCommandOutput) => void\n  ): void;\n  public stopTrainingEntityRecognizer(\n    args: StopTrainingEntityRecognizerCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StopTrainingEntityRecognizerCommandOutput) => void\n  ): void;\n  public stopTrainingEntityRecognizer(\n    args: StopTrainingEntityRecognizerCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StopTrainingEntityRecognizerCommandOutput) => void),\n    cb?: (err: any, data?: StopTrainingEntityRecognizerCommandOutput) => void\n  ): Promise<StopTrainingEntityRecognizerCommandOutput> | void {\n    const command = new StopTrainingEntityRecognizerCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Associates a specific tag with an Amazon Comprehend resource. A tag is a key-value pair\n   *       that adds as a metadata to a resource used by Amazon Comprehend. For example, a tag with\n   *       \"Sales\" as the key might be added to a resource to indicate its use by the sales department.\n   *     </p>\n   */\n  public tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;\n  public tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;\n  public tagResource(\n    args: TagResourceCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: TagResourceCommandOutput) => void\n  ): void;\n  public tagResource(\n    args: TagResourceCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: TagResourceCommandOutput) => void),\n    cb?: (err: any, data?: TagResourceCommandOutput) => void\n  ): Promise<TagResourceCommandOutput> | void {\n    const command = new TagResourceCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Removes a specific tag associated with an Amazon Comprehend resource. </p>\n   */\n  public untagResource(\n    args: UntagResourceCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<UntagResourceCommandOutput>;\n  public untagResource(\n    args: UntagResourceCommandInput,\n    cb: (err: any, data?: UntagResourceCommandOutput) => void\n  ): void;\n  public untagResource(\n    args: UntagResourceCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: UntagResourceCommandOutput) => void\n  ): void;\n  public untagResource(\n    args: UntagResourceCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: UntagResourceCommandOutput) => void),\n    cb?: (err: any, data?: UntagResourceCommandOutput) => void\n  ): Promise<UntagResourceCommandOutput> | void {\n    const command = new UntagResourceCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Updates information about the specified endpoint.</p>\n   */\n  public updateEndpoint(\n    args: UpdateEndpointCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<UpdateEndpointCommandOutput>;\n  public updateEndpoint(\n    args: UpdateEndpointCommandInput,\n    cb: (err: any, data?: UpdateEndpointCommandOutput) => void\n  ): void;\n  public updateEndpoint(\n    args: UpdateEndpointCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: UpdateEndpointCommandOutput) => void\n  ): void;\n  public updateEndpoint(\n    args: UpdateEndpointCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: UpdateEndpointCommandOutput) => void),\n    cb?: (err: any, data?: UpdateEndpointCommandOutput) => void\n  ): Promise<UpdateEndpointCommandOutput> | void {\n    const command = new UpdateEndpointCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}