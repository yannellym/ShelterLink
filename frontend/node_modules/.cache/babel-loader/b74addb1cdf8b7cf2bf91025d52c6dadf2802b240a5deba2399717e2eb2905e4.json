{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { StopDeliveryStreamEncryptionInput, StopDeliveryStreamEncryptionOutput } from \"../models/models_0\";\nimport { deserializeAws_json1_1StopDeliveryStreamEncryptionCommand, serializeAws_json1_1StopDeliveryStreamEncryptionCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Disables server-side encryption (SSE) for the delivery stream. </p>\n *          <p>This operation is asynchronous. It returns immediately. When you invoke it, Kinesis Data\n *          Firehose first sets the encryption status of the stream to <code>DISABLING</code>, and then\n *          to <code>DISABLED</code>. You can continue to read and write data to your stream while its\n *          status is <code>DISABLING</code>. It can take up to 5 seconds after the encryption status\n *          changes to <code>DISABLED</code> before all records written to the delivery stream are no\n *          longer subject to encryption. To find out whether a record or a batch of records was\n *          encrypted, check the response elements <a>PutRecordOutput$Encrypted</a> and\n *             <a>PutRecordBatchOutput$Encrypted</a>, respectively.</p>\n *          <p>To check the encryption state of a delivery stream, use <a>DescribeDeliveryStream</a>. </p>\n *          <p>If SSE is enabled using a customer managed CMK and then you invoke\n *             <code>StopDeliveryStreamEncryption</code>, Kinesis Data Firehose schedules the related\n *          KMS grant for retirement and then retires it after it ensures that it is finished\n *          delivering records to the destination.</p>\n *          <p>The <code>StartDeliveryStreamEncryption</code> and\n *             <code>StopDeliveryStreamEncryption</code> operations have a combined limit of 25 calls\n *          per delivery stream per 24 hours. For example, you reach the limit if you call\n *             <code>StartDeliveryStreamEncryption</code> 13 times and\n *             <code>StopDeliveryStreamEncryption</code> 12 times for the same delivery stream in a\n *          24-hour period.</p>\n */\nvar StopDeliveryStreamEncryptionCommand = /** @class */function (_super) {\n  __extends(StopDeliveryStreamEncryptionCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function StopDeliveryStreamEncryptionCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  StopDeliveryStreamEncryptionCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"FirehoseClient\";\n    var commandName = \"StopDeliveryStreamEncryptionCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: StopDeliveryStreamEncryptionInput.filterSensitiveLog,\n      outputFilterSensitiveLog: StopDeliveryStreamEncryptionOutput.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  StopDeliveryStreamEncryptionCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1StopDeliveryStreamEncryptionCommand(input, context);\n  };\n  StopDeliveryStreamEncryptionCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1StopDeliveryStreamEncryptionCommand(output, context);\n  };\n  return StopDeliveryStreamEncryptionCommand;\n}($Command);\nexport { StopDeliveryStreamEncryptionCommand };","map":{"version":3,"names":["StopDeliveryStreamEncryptionInput","StopDeliveryStreamEncryptionOutput","deserializeAws_json1_1StopDeliveryStreamEncryptionCommand","serializeAws_json1_1StopDeliveryStreamEncryptionCommand","getSerdePlugin","Command","$Command","StopDeliveryStreamEncryptionCommand","_super","__extends","input","_this","call","prototype","resolveMiddleware","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","logger","clientName","commandName","handlerExecutionContext","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","requestHandler","resolve","request","handle","context","output"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-sdk/client-firehose/commands/StopDeliveryStreamEncryptionCommand.ts"],"sourcesContent":["import { FirehoseClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../FirehoseClient\";\nimport { StopDeliveryStreamEncryptionInput, StopDeliveryStreamEncryptionOutput } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1StopDeliveryStreamEncryptionCommand,\n  serializeAws_json1_1StopDeliveryStreamEncryptionCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type StopDeliveryStreamEncryptionCommandInput = StopDeliveryStreamEncryptionInput;\nexport type StopDeliveryStreamEncryptionCommandOutput = StopDeliveryStreamEncryptionOutput & __MetadataBearer;\n\n/**\n * <p>Disables server-side encryption (SSE) for the delivery stream. </p>\n *          <p>This operation is asynchronous. It returns immediately. When you invoke it, Kinesis Data\n *          Firehose first sets the encryption status of the stream to <code>DISABLING</code>, and then\n *          to <code>DISABLED</code>. You can continue to read and write data to your stream while its\n *          status is <code>DISABLING</code>. It can take up to 5 seconds after the encryption status\n *          changes to <code>DISABLED</code> before all records written to the delivery stream are no\n *          longer subject to encryption. To find out whether a record or a batch of records was\n *          encrypted, check the response elements <a>PutRecordOutput$Encrypted</a> and\n *             <a>PutRecordBatchOutput$Encrypted</a>, respectively.</p>\n *          <p>To check the encryption state of a delivery stream, use <a>DescribeDeliveryStream</a>. </p>\n *          <p>If SSE is enabled using a customer managed CMK and then you invoke\n *             <code>StopDeliveryStreamEncryption</code>, Kinesis Data Firehose schedules the related\n *          KMS grant for retirement and then retires it after it ensures that it is finished\n *          delivering records to the destination.</p>\n *          <p>The <code>StartDeliveryStreamEncryption</code> and\n *             <code>StopDeliveryStreamEncryption</code> operations have a combined limit of 25 calls\n *          per delivery stream per 24 hours. For example, you reach the limit if you call\n *             <code>StartDeliveryStreamEncryption</code> 13 times and\n *             <code>StopDeliveryStreamEncryption</code> 12 times for the same delivery stream in a\n *          24-hour period.</p>\n */\nexport class StopDeliveryStreamEncryptionCommand extends $Command<\n  StopDeliveryStreamEncryptionCommandInput,\n  StopDeliveryStreamEncryptionCommandOutput,\n  FirehoseClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: StopDeliveryStreamEncryptionCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: FirehoseClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<StopDeliveryStreamEncryptionCommandInput, StopDeliveryStreamEncryptionCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"FirehoseClient\";\n    const commandName = \"StopDeliveryStreamEncryptionCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: StopDeliveryStreamEncryptionInput.filterSensitiveLog,\n      outputFilterSensitiveLog: StopDeliveryStreamEncryptionOutput.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: StopDeliveryStreamEncryptionCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1StopDeliveryStreamEncryptionCommand(input, context);\n  }\n\n  private deserialize(\n    output: __HttpResponse,\n    context: __SerdeContext\n  ): Promise<StopDeliveryStreamEncryptionCommandOutput> {\n    return deserializeAws_json1_1StopDeliveryStreamEncryptionCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"],"mappings":";AACA,SAASA,iCAAiC,EAAEC,kCAAkC,QAAQ,oBAAoB;AAC1G,SACEC,yDAAyD,EACzDC,uDAAuD,QAClD,0BAA0B;AACjC,SAASC,cAAc,QAAQ,2BAA2B;AAE1D,SAASC,OAAO,IAAIC,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;;;;;;;;;;;;;;;;;AAsBA,IAAAC,mCAAA,0BAAAC,MAAA;EAAyDC,SAAA,CAAAF,mCAAA,EAAAC,MAAA;EAKvD;EACA;EAEA,SAAAD,oCAAqBG,KAA+C;IAApE,IAAAC,KAAA;IACE;IACAH,MAAA,CAAAI,IAAA,MAAO;IAFYD,KAAA,CAAAD,KAAK,GAALA,KAAK;;IAGxB;EACF;EAEA;;;EAGAH,mCAAA,CAAAM,SAAA,CAAAC,iBAAiB,GAAjB,UACEC,WAAmE,EACnEC,aAA2C,EAC3CC,OAA8B;IAE9B,IAAI,CAACC,eAAe,CAACC,GAAG,CAACf,cAAc,CAACY,aAAa,EAAE,IAAI,CAACI,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CAAC;IAEzF,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAM,CAAC,IAAI,CAACL,eAAe,CAAC;IAE9C,IAAAM,MAAM,GAAKR,aAAa,CAAAQ,MAAlB;IACd,IAAMC,UAAU,GAAG,gBAAgB;IACnC,IAAMC,WAAW,GAAG,qCAAqC;IACzD,IAAMC,uBAAuB,GAA4B;MACvDH,MAAM,EAAAA,MAAA;MACNC,UAAU,EAAAA,UAAA;MACVC,WAAW,EAAAA,WAAA;MACXE,uBAAuB,EAAE5B,iCAAiC,CAAC6B,kBAAkB;MAC7EC,wBAAwB,EAAE7B,kCAAkC,CAAC4B;KAC9D;IACO,IAAAE,cAAc,GAAKf,aAAa,CAAAe,cAAlB;IACtB,OAAOT,KAAK,CAACU,OAAO,CAClB,UAACC,OAAsC;MACrC,OAAAF,cAAc,CAACG,MAAM,CAACD,OAAO,CAACA,OAAwB,EAAEhB,OAAO,IAAI,EAAE,CAAC;IAAtE,CAAsE,EACxEU,uBAAuB,CACxB;EACH,CAAC;EAEOpB,mCAAA,CAAAM,SAAA,CAAAO,SAAS,GAAjB,UAAkBV,KAA+C,EAAEyB,OAAuB;IACxF,OAAOhC,uDAAuD,CAACO,KAAK,EAAEyB,OAAO,CAAC;EAChF,CAAC;EAEO5B,mCAAA,CAAAM,SAAA,CAAAQ,WAAW,GAAnB,UACEe,MAAsB,EACtBD,OAAuB;IAEvB,OAAOjC,yDAAyD,CAACkC,MAAM,EAAED,OAAO,CAAC;EACnF,CAAC;EAIH,OAAA5B,mCAAC;AAAD,CAAC,CAzDwDD,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}