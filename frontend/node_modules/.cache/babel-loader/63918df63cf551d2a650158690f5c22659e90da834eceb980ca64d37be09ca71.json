{"ast":null,"code":"import { Crc32 } from \"@aws-crypto/crc32\";\nimport { HeaderMarshaller } from \"./HeaderMarshaller\";\nimport { splitMessage } from \"./splitMessage\";\n/**\n * A marshaller that can convert binary-packed event stream messages into\n * JavaScript objects and back again into their binary format.\n */\nvar EventStreamMarshaller = /** @class */function () {\n  function EventStreamMarshaller(toUtf8, fromUtf8) {\n    this.headerMarshaller = new HeaderMarshaller(toUtf8, fromUtf8);\n  }\n  /**\n   * Convert a structured JavaScript object with tagged headers into a binary\n   * event stream message.\n   */\n  EventStreamMarshaller.prototype.marshall = function (_a) {\n    var rawHeaders = _a.headers,\n      body = _a.body;\n    var headers = this.headerMarshaller.format(rawHeaders);\n    var length = headers.byteLength + body.byteLength + 16;\n    var out = new Uint8Array(length);\n    var view = new DataView(out.buffer, out.byteOffset, out.byteLength);\n    var checksum = new Crc32();\n    // Format message\n    view.setUint32(0, length, false);\n    view.setUint32(4, headers.byteLength, false);\n    view.setUint32(8, checksum.update(out.subarray(0, 8)).digest(), false);\n    out.set(headers, 12);\n    out.set(body, headers.byteLength + 12);\n    // Write trailing message checksum\n    view.setUint32(length - 4, checksum.update(out.subarray(8, length - 4)).digest(), false);\n    return out;\n  };\n  /**\n   * Convert a binary event stream message into a JavaScript object with an\n   * opaque, binary body and tagged, parsed headers.\n   */\n  EventStreamMarshaller.prototype.unmarshall = function (message) {\n    var _a = splitMessage(message),\n      headers = _a.headers,\n      body = _a.body;\n    return {\n      headers: this.headerMarshaller.parse(headers),\n      body: body\n    };\n  };\n  /**\n   * Convert a structured JavaScript object with tagged headers into a binary\n   * event stream message header.\n   */\n  EventStreamMarshaller.prototype.formatHeaders = function (rawHeaders) {\n    return this.headerMarshaller.format(rawHeaders);\n  };\n  return EventStreamMarshaller;\n}();\nexport { EventStreamMarshaller };","map":{"version":3,"names":["Crc32","HeaderMarshaller","splitMessage","EventStreamMarshaller","toUtf8","fromUtf8","headerMarshaller","prototype","marshall","_a","rawHeaders","headers","body","format","length","byteLength","out","Uint8Array","view","DataView","buffer","byteOffset","checksum","setUint32","update","subarray","digest","set","unmarshall","message","parse","formatHeaders"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-sdk/eventstream-marshaller/src/EventStreamMarshaller.ts"],"sourcesContent":["import { Crc32 } from \"@aws-crypto/crc32\";\nimport { Message, MessageHeaders } from \"@aws-sdk/types\";\nimport { Decoder, Encoder } from \"@aws-sdk/types\";\n\nimport { HeaderMarshaller } from \"./HeaderMarshaller\";\nimport { splitMessage } from \"./splitMessage\";\n\n/**\n * A marshaller that can convert binary-packed event stream messages into\n * JavaScript objects and back again into their binary format.\n */\nexport class EventStreamMarshaller {\n  private readonly headerMarshaller: HeaderMarshaller;\n\n  constructor(toUtf8: Encoder, fromUtf8: Decoder) {\n    this.headerMarshaller = new HeaderMarshaller(toUtf8, fromUtf8);\n  }\n\n  /**\n   * Convert a structured JavaScript object with tagged headers into a binary\n   * event stream message.\n   */\n  marshall({ headers: rawHeaders, body }: Message): Uint8Array {\n    const headers = this.headerMarshaller.format(rawHeaders);\n    const length = headers.byteLength + body.byteLength + 16;\n\n    const out = new Uint8Array(length);\n    const view = new DataView(out.buffer, out.byteOffset, out.byteLength);\n    const checksum = new Crc32();\n\n    // Format message\n    view.setUint32(0, length, false);\n    view.setUint32(4, headers.byteLength, false);\n    view.setUint32(8, checksum.update(out.subarray(0, 8)).digest(), false);\n    out.set(headers, 12);\n    out.set(body, headers.byteLength + 12);\n\n    // Write trailing message checksum\n    view.setUint32(length - 4, checksum.update(out.subarray(8, length - 4)).digest(), false);\n\n    return out;\n  }\n\n  /**\n   * Convert a binary event stream message into a JavaScript object with an\n   * opaque, binary body and tagged, parsed headers.\n   */\n  unmarshall(message: ArrayBufferView): Message {\n    const { headers, body } = splitMessage(message);\n\n    return { headers: this.headerMarshaller.parse(headers), body };\n  }\n\n  /**\n   * Convert a structured JavaScript object with tagged headers into a binary\n   * event stream message header.\n   */\n  formatHeaders(rawHeaders: MessageHeaders): Uint8Array {\n    return this.headerMarshaller.format(rawHeaders);\n  }\n}\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,mBAAmB;AAIzC,SAASC,gBAAgB,QAAQ,oBAAoB;AACrD,SAASC,YAAY,QAAQ,gBAAgB;AAE7C;;;;AAIA,IAAAC,qBAAA;EAGE,SAAAA,sBAAYC,MAAe,EAAEC,QAAiB;IAC5C,IAAI,CAACC,gBAAgB,GAAG,IAAIL,gBAAgB,CAACG,MAAM,EAAEC,QAAQ,CAAC;EAChE;EAEA;;;;EAIAF,qBAAA,CAAAI,SAAA,CAAAC,QAAQ,GAAR,UAASC,EAAsC;QAA3BC,UAAU,GAAAD,EAAA,CAAAE,OAAA;MAAEC,IAAI,GAAAH,EAAA,CAAAG,IAAA;IAClC,IAAMD,OAAO,GAAG,IAAI,CAACL,gBAAgB,CAACO,MAAM,CAACH,UAAU,CAAC;IACxD,IAAMI,MAAM,GAAGH,OAAO,CAACI,UAAU,GAAGH,IAAI,CAACG,UAAU,GAAG,EAAE;IAExD,IAAMC,GAAG,GAAG,IAAIC,UAAU,CAACH,MAAM,CAAC;IAClC,IAAMI,IAAI,GAAG,IAAIC,QAAQ,CAACH,GAAG,CAACI,MAAM,EAAEJ,GAAG,CAACK,UAAU,EAAEL,GAAG,CAACD,UAAU,CAAC;IACrE,IAAMO,QAAQ,GAAG,IAAItB,KAAK,EAAE;IAE5B;IACAkB,IAAI,CAACK,SAAS,CAAC,CAAC,EAAET,MAAM,EAAE,KAAK,CAAC;IAChCI,IAAI,CAACK,SAAS,CAAC,CAAC,EAAEZ,OAAO,CAACI,UAAU,EAAE,KAAK,CAAC;IAC5CG,IAAI,CAACK,SAAS,CAAC,CAAC,EAAED,QAAQ,CAACE,MAAM,CAACR,GAAG,CAACS,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACC,MAAM,EAAE,EAAE,KAAK,CAAC;IACtEV,GAAG,CAACW,GAAG,CAAChB,OAAO,EAAE,EAAE,CAAC;IACpBK,GAAG,CAACW,GAAG,CAACf,IAAI,EAAED,OAAO,CAACI,UAAU,GAAG,EAAE,CAAC;IAEtC;IACAG,IAAI,CAACK,SAAS,CAACT,MAAM,GAAG,CAAC,EAAEQ,QAAQ,CAACE,MAAM,CAACR,GAAG,CAACS,QAAQ,CAAC,CAAC,EAAEX,MAAM,GAAG,CAAC,CAAC,CAAC,CAACY,MAAM,EAAE,EAAE,KAAK,CAAC;IAExF,OAAOV,GAAG;EACZ,CAAC;EAED;;;;EAIAb,qBAAA,CAAAI,SAAA,CAAAqB,UAAU,GAAV,UAAWC,OAAwB;IAC3B,IAAApB,EAAA,GAAoBP,YAAY,CAAC2B,OAAO,CAAC;MAAvClB,OAAO,GAAAF,EAAA,CAAAE,OAAA;MAAEC,IAAI,GAAAH,EAAA,CAAAG,IAA0B;IAE/C,OAAO;MAAED,OAAO,EAAE,IAAI,CAACL,gBAAgB,CAACwB,KAAK,CAACnB,OAAO,CAAC;MAAEC,IAAI,EAAAA;IAAA,CAAE;EAChE,CAAC;EAED;;;;EAIAT,qBAAA,CAAAI,SAAA,CAAAwB,aAAa,GAAb,UAAcrB,UAA0B;IACtC,OAAO,IAAI,CAACJ,gBAAgB,CAACO,MAAM,CAACH,UAAU,CAAC;EACjD,CAAC;EACH,OAAAP,qBAAC;AAAD,CAAC,CAjDD"},"metadata":{},"sourceType":"module","externalDependencies":[]}