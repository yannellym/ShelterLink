{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport bowser from \"bowser\";\n/**\n * Default provider to the user agent in browsers. It's a best effort to infer\n * the device information. It uses bowser library to detect the browser and virsion\n */\nexport var defaultUserAgent = function (_a) {\n  var serviceId = _a.serviceId,\n    clientVersion = _a.clientVersion;\n  return function () {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var parsedUA, sections;\n      var _a, _b, _c, _d, _e, _f, _g;\n      return __generator(this, function (_h) {\n        parsedUA = ((_a = window === null || window === void 0 ? void 0 : window.navigator) === null || _a === void 0 ? void 0 : _a.userAgent) ? bowser.parse(window.navigator.userAgent) : undefined;\n        sections = [\n        // sdk-metadata\n        [\"aws-sdk-js\", clientVersion],\n        // os-metadata\n        [\"os/\" + (((_b = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.os) === null || _b === void 0 ? void 0 : _b.name) || \"other\"), (_c = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.os) === null || _c === void 0 ? void 0 : _c.version],\n        // language-metadata\n        // ECMAScript edition doesn't matter in JS.\n        [\"lang/js\"],\n        // browser vendor and version.\n        [\"md/browser\", ((_e = (_d = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.browser) === null || _d === void 0 ? void 0 : _d.name) !== null && _e !== void 0 ? _e : \"unknown\") + \"_\" + ((_g = (_f = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.browser) === null || _f === void 0 ? void 0 : _f.version) !== null && _g !== void 0 ? _g : \"unknown\")]];\n        if (serviceId) {\n          // api-metadata\n          // service Id may not appear in non-AWS clients\n          sections.push([\"api/\" + serviceId, clientVersion]);\n        }\n        return [2 /*return*/, sections];\n      });\n    });\n  };\n};","map":{"version":3,"names":["bowser","defaultUserAgent","_a","serviceId","clientVersion","__awaiter","parsedUA","window","navigator","userAgent","parse","undefined","sections","_b","os","name","_c","version","_e","_d","browser","_g","_f","push"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-sdk/util-user-agent-browser/src/index.ts"],"sourcesContent":["import { Provider, UserAgent } from \"@aws-sdk/types\";\nimport bowser from \"bowser\";\n\nimport { DefaultUserAgentOptions } from \"./configurations\";\n\n/**\n * Default provider to the user agent in browsers. It's a best effort to infer\n * the device information. It uses bowser library to detect the browser and virsion\n */\nexport const defaultUserAgent = ({\n  serviceId,\n  clientVersion,\n}: DefaultUserAgentOptions): Provider<UserAgent> => async () => {\n  const parsedUA = window?.navigator?.userAgent ? bowser.parse(window.navigator.userAgent) : undefined;\n  const sections: UserAgent = [\n    // sdk-metadata\n    [\"aws-sdk-js\", clientVersion],\n    // os-metadata\n    [`os/${parsedUA?.os?.name || \"other\"}`, parsedUA?.os?.version],\n    // language-metadata\n    // ECMAScript edition doesn't matter in JS.\n    [\"lang/js\"],\n    // browser vendor and version.\n    [\"md/browser\", `${parsedUA?.browser?.name ?? \"unknown\"}_${parsedUA?.browser?.version ?? \"unknown\"}`],\n  ];\n\n  if (serviceId) {\n    // api-metadata\n    // service Id may not appear in non-AWS clients\n    sections.push([`api/${serviceId}`, clientVersion]);\n  }\n\n  return sections;\n};\n"],"mappings":";AACA,OAAOA,MAAM,MAAM,QAAQ;AAI3B;;;;AAIA,OAAO,IAAMC,gBAAgB,GAAG,SAAAA,CAACC,EAGP;MAFxBC,SAAS,GAAAD,EAAA,CAAAC,SAAA;IACTC,aAAa,GAAAF,EAAA,CAAAE,aAAA;EACqC;IAAA,OAAAC,SAAA;;;;QAC5CC,QAAQ,GAAG,EAAAJ,EAAA,GAAAK,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEC,SAAS,cAAAN,EAAA,uBAAAA,EAAA,CAAEO,SAAS,IAAGT,MAAM,CAACU,KAAK,CAACH,MAAM,CAACC,SAAS,CAACC,SAAS,CAAC,GAAGE,SAAS;QAC9FC,QAAQ,GAAc;QAC1B;QACA,CAAC,YAAY,EAAER,aAAa,CAAC;QAC7B;QACA,CAAC,SAAM,EAAAS,EAAA,GAAAP,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEQ,EAAE,cAAAD,EAAA,uBAAAA,EAAA,CAAEE,IAAI,KAAI,OAAO,CAAE,GAAAC,EAAA,GAAEV,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEQ,EAAE,cAAAE,EAAA,uBAAAA,EAAA,CAAEC,OAAO,CAAC;QAC9D;QACA;QACA,CAAC,SAAS,CAAC;QACX;QACA,CAAC,YAAY,EAAE,EAAAC,EAAA,IAAAC,EAAA,GAAGb,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEc,OAAO,cAAAD,EAAA,uBAAAA,EAAA,CAAEJ,IAAI,cAAAG,EAAA,cAAAA,EAAA,GAAI,SAAS,YAAAG,EAAA,IAAAC,EAAA,GAAIhB,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEc,OAAO,cAAAE,EAAA,uBAAAA,EAAA,CAAEL,OAAO,cAAAI,EAAA,cAAAA,EAAA,GAAI,SAAS,CAAE,CAAC,CACrG;QAED,IAAIlB,SAAS,EAAE;UACb;UACA;UACAS,QAAQ,CAACW,IAAI,CAAC,CAAC,SAAOpB,SAAW,EAAEC,aAAa,CAAC,CAAC;;QAGpD,sBAAOQ,QAAQ;;;GAChB;AArBmD,CAqBnD"},"metadata":{},"sourceType":"module","externalDependencies":[]}