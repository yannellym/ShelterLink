{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __awaiter, __generator } from \"tslib\";\nimport { gunzip, strFromU8 } from 'fflate';\nexport var convert = function (stream) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      if (stream instanceof Blob || stream instanceof ReadableStream) {\n        return [2 /*return*/, new Response(stream).arrayBuffer().then(function (buffer) {\n          return new Uint8Array(buffer);\n        })];\n      } else {\n        return [2 /*return*/, Promise.reject('Invalid content type')];\n      }\n      return [2 /*return*/];\n    });\n  });\n};\n\nexport var base64ToArrayBuffer = function (base64) {\n  return Uint8Array.from(window.atob(base64), function (c) {\n    return c.charCodeAt(0);\n  });\n};\nexport var gzipDecompressToString = function (data) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, new Promise(function (resolve, reject) {\n            gunzip(data, function (err, resp) {\n              if (err) reject(err);else resolve(strFromU8(resp));\n            });\n          })];\n        case 1:\n          return [2 /*return*/, _a.sent()];\n      }\n    });\n  });\n};","map":{"version":3,"names":["gunzip","strFromU8","convert","stream","__awaiter","Blob","ReadableStream","Response","arrayBuffer","then","buffer","Uint8Array","Promise","reject","base64ToArrayBuffer","base64","from","window","atob","c","charCodeAt","gzipDecompressToString","data","resolve","err","resp","_a","sent"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-amplify/interactions/src/Providers/AWSLexProviderHelper/utils.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { gunzip, strFromU8 } from 'fflate';\n\nexport const convert = async (stream: object): Promise<Uint8Array> => {\n\tif (stream instanceof Blob || stream instanceof ReadableStream) {\n\t\treturn new Response(stream)\n\t\t\t.arrayBuffer()\n\t\t\t.then(buffer => new Uint8Array(buffer));\n\t} else {\n\t\treturn Promise.reject('Invalid content type');\n\t}\n};\n\nexport const base64ToArrayBuffer = (base64: string): Uint8Array => {\n\treturn Uint8Array.from(window.atob(base64), c => c.charCodeAt(0));\n};\n\nexport const gzipDecompressToString = async (\n\tdata: Uint8Array\n): Promise<string> => {\n\treturn await new Promise((resolve, reject) => {\n\t\tgunzip(data, (err, resp) => {\n\t\t\tif (err) reject(err);\n\t\t\telse resolve(strFromU8(resp));\n\t\t});\n\t});\n};\n"],"mappings":"AAAA;AACA;;AAEA,SAASA,MAAM,EAAEC,SAAS,QAAQ,QAAQ;AAE1C,OAAO,IAAMC,OAAO,GAAG,SAAAA,CAAOC,MAAc;EAAA,OAAAC,SAAA;;MAC3C,IAAID,MAAM,YAAYE,IAAI,IAAIF,MAAM,YAAYG,cAAc,EAAE;QAC/D,sBAAO,IAAIC,QAAQ,CAACJ,MAAM,CAAC,CACzBK,WAAW,EAAE,CACbC,IAAI,CAAC,UAAAC,MAAM;UAAI,WAAIC,UAAU,CAACD,MAAM,CAAC;QAAtB,CAAsB,CAAC;OACxC,MAAM;QACN,sBAAOE,OAAO,CAACC,MAAM,CAAC,sBAAsB,CAAC;;;;;CAE9C;;AAED,OAAO,IAAMC,mBAAmB,GAAG,SAAAA,CAACC,MAAc;EACjD,OAAOJ,UAAU,CAACK,IAAI,CAACC,MAAM,CAACC,IAAI,CAACH,MAAM,CAAC,EAAE,UAAAI,CAAC;IAAI,OAAAA,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC;EAAf,CAAe,CAAC;AAClE,CAAC;AAED,OAAO,IAAMC,sBAAsB,GAAG,SAAAA,CACrCC,IAAgB;EAAA,OAAAlB,SAAA;;;;UAET,qBAAM,IAAIQ,OAAO,CAAC,UAACW,OAAO,EAAEV,MAAM;YACxCb,MAAM,CAACsB,IAAI,EAAE,UAACE,GAAG,EAAEC,IAAI;cACtB,IAAID,GAAG,EAAEX,MAAM,CAACW,GAAG,CAAC,CAAC,KAChBD,OAAO,CAACtB,SAAS,CAACwB,IAAI,CAAC,CAAC;YAC9B,CAAC,CAAC;UACH,CAAC,CAAC;;UALF,sBAAOC,EAAA,CAAAC,IAAA,EAKL;;;;CACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}