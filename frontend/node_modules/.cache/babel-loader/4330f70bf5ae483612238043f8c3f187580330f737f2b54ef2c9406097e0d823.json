{"ast":null,"code":"var _jsxFileName = \"/Users/yannellym/Desktop/iwantapet/frontend/src/components/SearchBar.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport PlacesAutocomplete from 'react-places-autocomplete';\nimport '../styles/SearchBar.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchBar = ({\n  onSearch\n}) => {\n  _s();\n  const [searchText, setSearchText] = useState('');\n  const [suggestions, setSuggestions] = useState([]);\n  const handleSearch = async () => {\n    if (searchText) {\n      // You can perform a search based on the selected address or location.\n      // Replace the alert with your actual search logic.\n      alert(`Perform a search for: ${searchText}`);\n    } else {\n      alert('Please enter a location to search.');\n    }\n  };\n  const handleInput = input => {\n    setSearchText(input);\n  };\n  const handleSelect = selectedAddress => {\n    setSearchText(selectedAddress);\n    setSuggestions([]); // Clear suggestions\n  };\n\n  const handleFetchSuggestions = input => {\n    setSearchText(input);\n    fetchSuggestions(input);\n  };\n  const fetchSuggestions = input => {\n    // Use Google Places API to fetch location suggestions based on the input\n    // You don't need to use Google Maps in this case\n    // Implement fetching suggestions based on the 'input' value\n    // Set the fetched suggestions using setSuggestions\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-bar\",\n    children: /*#__PURE__*/_jsxDEV(PlacesAutocomplete, {\n      value: searchText,\n      onChange: handleFetchSuggestions,\n      onSelect: handleSelect,\n      children: ({\n        getInputProps\n      }) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"search-input-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            ...getInputProps(),\n            type: \"text\",\n            placeholder: \"Enter zipcode, city, or state\",\n            className: \"search-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"autocomplete-dropdown-container\",\n            children: suggestions.map(suggestion => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"suggestion-item\",\n              onClick: () => handleSelect(suggestion.description),\n              children: suggestion.description\n            }, suggestion.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSearch,\n          className: \"search-button\",\n          children: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchBar, \"zS5PVaRPDQYcrg6WE7070ojzQEQ=\");\n_c = SearchBar;\nexport default SearchBar;\nvar _c;\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"names":["React","useState","useEffect","PlacesAutocomplete","jsxDEV","_jsxDEV","SearchBar","onSearch","_s","searchText","setSearchText","suggestions","setSuggestions","handleSearch","alert","handleInput","input","handleSelect","selectedAddress","handleFetchSuggestions","fetchSuggestions","className","children","value","onChange","onSelect","getInputProps","type","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","map","suggestion","onClick","description","id","_c","$RefreshReg$"],"sources":["/Users/yannellym/Desktop/iwantapet/frontend/src/components/SearchBar.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PlacesAutocomplete from 'react-places-autocomplete';\nimport '../styles/SearchBar.css';\n\nconst SearchBar = ({ onSearch }) => {\n  const [searchText, setSearchText] = useState('');\n  const [suggestions, setSuggestions] = useState([]);\n\n  const handleSearch = async () => {\n    if (searchText) {\n      // You can perform a search based on the selected address or location.\n      // Replace the alert with your actual search logic.\n      alert(`Perform a search for: ${searchText}`);\n    } else {\n      alert('Please enter a location to search.');\n    }\n  };\n\n  const handleInput = (input) => {\n    setSearchText(input);\n  };\n\n  const handleSelect = (selectedAddress) => {\n    setSearchText(selectedAddress);\n    setSuggestions([]); // Clear suggestions\n  };\n\n  const handleFetchSuggestions = (input) => {\n    setSearchText(input);\n    fetchSuggestions(input);\n  };\n\n  const fetchSuggestions = (input) => {\n    // Use Google Places API to fetch location suggestions based on the input\n    // You don't need to use Google Maps in this case\n    // Implement fetching suggestions based on the 'input' value\n    // Set the fetched suggestions using setSuggestions\n  };\n\n  return (\n    <div className=\"search-bar\">\n      <PlacesAutocomplete\n        value={searchText}\n        onChange={handleFetchSuggestions}\n        onSelect={handleSelect}\n      >\n        {({ getInputProps }) => (\n          <div className=\"search-container\">\n            <div className=\"search-input-container\">\n              <input\n                {...getInputProps()}\n                type=\"text\"\n                placeholder=\"Enter zipcode, city, or state\"\n                className=\"search-input\"\n              />\n              <div className=\"autocomplete-dropdown-container\">\n                {suggestions.map((suggestion) => (\n                  <div\n                    key={suggestion.id}\n                    className=\"suggestion-item\"\n                    onClick={() => handleSelect(suggestion.description)}\n                  >\n                    {suggestion.description}\n                  </div>\n                ))}\n              </div>\n            </div>\n            <button onClick={handleSearch} className=\"search-button\">\n              Search\n            </button>\n          </div>\n        )}\n      </PlacesAutocomplete>\n    </div>\n  );\n};\n\nexport default SearchBar;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}