{"ast":null,"code":"var _jsxFileName = \"/Users/yannellym/Desktop/iwantapet/frontend/src/components/AllPetsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport '../styles/AllPetsPage.css';\nimport PetCard from './PetCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n}\nfunction AllPetsPage() {\n  _s();\n  const {\n    category\n  } = useParams();\n  const [loading, setLoading] = useState(true);\n  const [cache, setCache] = useState([]);\n  const petsPerPage = 100;\n  const otherAnimalTypes = [\"horse\", \"bird\", \"barnyard\"];\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 12; // Number of pets to display per page\n  const [totalPages, setTotalPages] = useState(0);\n  const fetchAnimalsByCategory = async category => {\n    let endpoint;\n    if (category === \"dog\" || category === \"cat\") {\n      // First API call for \"dog\" or \"cat\"\n      endpoint = `http://localhost:3002/api/petfinder?type=${category}&limit=${petsPerPage}`;\n    } else if (category === \"other\") {\n      // Second API call for \"other\" category\n      // Fetch animals for each type in the \"other\" category\n      const animalPromises = otherAnimalTypes.map(animalType => {\n        return fetch(`http://localhost:3002/api/petfinder?type=${animalType}&limit=${petsPerPage}`).then(response => response.json());\n      });\n      const animalData = await Promise.all(animalPromises);\n\n      // Merge the arrays of animals from different types\n      const mergedAnimals = animalData.flatMap(data => data.animals);\n      endpoint = mergedAnimals;\n    }\n    try {\n      if (endpoint) {\n        if (Array.isArray(endpoint)) {\n          // If endpoint is an array, we have already fetched animals for the \"other\" category\n          return endpoint.filter(animal => animal && animal.photos.length > 0);\n        } else {\n          // Fetch animals for \"dog\" or \"cat\"\n          const response = await fetch(endpoint);\n          const data = await response.json();\n          if (data && data.animals) {\n            return data.animals.filter(animal => animal.photos.length > 0);\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error.message);\n    }\n    return [];\n  };\n  useEffect(() => {\n    async function fetchData() {\n      const animals = await fetchAnimalsByCategory(category);\n\n      // Shuffle the animals array\n      shuffleArray(animals);\n      setCache(animals);\n      setLoading(false);\n    }\n    fetchData();\n  }, [category]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"all-pets-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: `All ${category.charAt(0).toUpperCase() + category.slice(1)}s`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pet-list\",\n      children: cache.map(pet => /*#__PURE__*/_jsxDEV(PetCard, {\n        pet: pet\n      }, pet.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n_s(AllPetsPage, \"jiTFc1Z8efYm4K3WARXe4DPK+oI=\", false, function () {\n  return [useParams];\n});\n_c = AllPetsPage;\nexport default AllPetsPage;\nvar _c;\n$RefreshReg$(_c, \"AllPetsPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","PetCard","jsxDEV","_jsxDEV","shuffleArray","array","i","length","j","Math","floor","random","AllPetsPage","_s","category","loading","setLoading","cache","setCache","petsPerPage","otherAnimalTypes","currentPage","setCurrentPage","itemsPerPage","totalPages","setTotalPages","fetchAnimalsByCategory","endpoint","animalPromises","map","animalType","fetch","then","response","json","animalData","Promise","all","mergedAnimals","flatMap","data","animals","Array","isArray","filter","animal","photos","error","console","message","fetchData","className","children","charAt","toUpperCase","slice","fileName","_jsxFileName","lineNumber","columnNumber","pet","id","_c","$RefreshReg$"],"sources":["/Users/yannellym/Desktop/iwantapet/frontend/src/components/AllPetsPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport '../styles/AllPetsPage.css';\nimport PetCard from './PetCard';\n\nfunction shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n}\n\nfunction AllPetsPage() {\n  const { category } = useParams();\n  const [loading, setLoading] = useState(true);\n  const [cache, setCache] = useState([]);\n  const petsPerPage = 100;\n  const otherAnimalTypes = [\"horse\", \"bird\", \"barnyard\"];\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 12; // Number of pets to display per page\n  const [totalPages, setTotalPages] = useState(0);\n\n  \n  const fetchAnimalsByCategory = async (category) => {\n    let endpoint;\n\n    if (category === \"dog\" || category === \"cat\") {\n      // First API call for \"dog\" or \"cat\"\n      endpoint = `http://localhost:3002/api/petfinder?type=${category}&limit=${petsPerPage}`;\n    } else if (category === \"other\") {\n      // Second API call for \"other\" category\n      // Fetch animals for each type in the \"other\" category\n      const animalPromises = otherAnimalTypes.map(animalType => {\n        return fetch(`http://localhost:3002/api/petfinder?type=${animalType}&limit=${petsPerPage}`)\n          .then(response => response.json());\n      });\n\n      const animalData = await Promise.all(animalPromises);\n\n      // Merge the arrays of animals from different types\n      const mergedAnimals = animalData.flatMap(data => data.animals);\n\n      endpoint = mergedAnimals;\n    }\n\n    try {\n      if (endpoint) {\n        if (Array.isArray(endpoint)) {\n          // If endpoint is an array, we have already fetched animals for the \"other\" category\n          return endpoint.filter(animal => animal && animal.photos.length > 0);\n        } else {\n          // Fetch animals for \"dog\" or \"cat\"\n          const response = await fetch(endpoint);\n          const data = await response.json();\n          if (data && data.animals) {\n            return data.animals.filter((animal) => animal.photos.length > 0);\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error.message);\n    }\n    \n    return [];\n  };\n\n  useEffect(() => {\n    async function fetchData() {\n      const animals = await fetchAnimalsByCategory(category);\n\n      // Shuffle the animals array\n      shuffleArray(animals);\n      \n      setCache(animals);\n      setLoading(false);\n    }\n\n    fetchData();\n  }, [category]);\n\n  return (\n    <div className=\"all-pets-page\">\n      <h2>{`All ${category.charAt(0).toUpperCase() + category.slice(1)}s`}</h2>\n      {loading ? (\n        <p>Loading...</p>\n      ) : (\n        <div className=\"pet-list\">\n          {cache.map((pet) => (\n            <PetCard key={pet.id} pet={pet} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default AllPetsPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}