{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { fromBase64 } from \"@aws-sdk/util-base64-browser\";\n//reference: https://snack.expo.io/r1JCSWRGU\nexport var streamCollector = function (stream) {\n  if (typeof Blob === \"function\" && stream instanceof Blob) {\n    return collectBlob(stream);\n  }\n  return collectStream(stream);\n};\nfunction collectBlob(blob) {\n  return __awaiter(this, void 0, void 0, function () {\n    var base64, arrayBuffer;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, readToBase64(blob)];\n        case 1:\n          base64 = _a.sent();\n          arrayBuffer = fromBase64(base64);\n          return [2 /*return*/, new Uint8Array(arrayBuffer)];\n      }\n    });\n  });\n}\nfunction collectStream(stream) {\n  return __awaiter(this, void 0, void 0, function () {\n    var res, reader, isDone, _a, done, value, prior;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          res = new Uint8Array(0);\n          reader = stream.getReader();\n          isDone = false;\n          _b.label = 1;\n        case 1:\n          if (!!isDone) return [3 /*break*/, 3];\n          return [4 /*yield*/, reader.read()];\n        case 2:\n          _a = _b.sent(), done = _a.done, value = _a.value;\n          if (value) {\n            prior = res;\n            res = new Uint8Array(prior.length + value.length);\n            res.set(prior);\n            res.set(value, prior.length);\n          }\n          isDone = done;\n          return [3 /*break*/, 1];\n        case 3:\n          return [2 /*return*/, res];\n      }\n    });\n  });\n}\nfunction readToBase64(blob) {\n  return new Promise(function (resolve, reject) {\n    var reader = new FileReader();\n    reader.onloadend = function () {\n      var _a;\n      // reference: https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL\n      // response from readAsDataURL is always prepended with \"data:*/*;base64,\"\n      if (reader.readyState !== 2) {\n        return reject(new Error(\"Reader aborted too early\"));\n      }\n      var result = (_a = reader.result) !== null && _a !== void 0 ? _a : \"\";\n      // Response can include only 'data:' for empty blob, return empty string in this case.\n      // Otherwise, return the string after ','\n      var commaIndex = result.indexOf(\",\");\n      var dataOffset = commaIndex > -1 ? commaIndex + 1 : result.length;\n      resolve(result.substring(dataOffset));\n    };\n    reader.onabort = function () {\n      return reject(new Error(\"Read aborted\"));\n    };\n    reader.onerror = function () {\n      return reject(reader.error);\n    };\n    // reader.readAsArrayBuffer is not always available\n    reader.readAsDataURL(blob);\n  });\n}","map":{"version":3,"names":["fromBase64","streamCollector","stream","Blob","collectBlob","collectStream","blob","readToBase64","base64","_a","sent","arrayBuffer","Uint8Array","res","reader","getReader","isDone","read","_b","done","value","prior","length","set","Promise","resolve","reject","FileReader","onloadend","readyState","Error","result","commaIndex","indexOf","dataOffset","substring","onabort","onerror","error","readAsDataURL"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-sdk/fetch-http-handler/src/stream-collector.ts"],"sourcesContent":["import { StreamCollector } from \"@aws-sdk/types\";\nimport { fromBase64 } from \"@aws-sdk/util-base64-browser\";\n\n//reference: https://snack.expo.io/r1JCSWRGU\nexport const streamCollector: StreamCollector = (stream: Blob | ReadableStream): Promise<Uint8Array> => {\n  if (typeof Blob === \"function\" && stream instanceof Blob) {\n    return collectBlob(stream);\n  }\n\n  return collectStream(stream as ReadableStream);\n};\n\nasync function collectBlob(blob: Blob): Promise<Uint8Array> {\n  const base64 = await readToBase64(blob);\n  const arrayBuffer = fromBase64(base64);\n  return new Uint8Array(arrayBuffer);\n}\n\nasync function collectStream(stream: ReadableStream): Promise<Uint8Array> {\n  let res = new Uint8Array(0);\n  const reader = stream.getReader();\n  let isDone = false;\n  while (!isDone) {\n    const { done, value } = await reader.read();\n    if (value) {\n      const prior = res;\n      res = new Uint8Array(prior.length + value.length);\n      res.set(prior);\n      res.set(value, prior.length);\n    }\n    isDone = done;\n  }\n  return res;\n}\n\nfunction readToBase64(blob: Blob): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onloadend = () => {\n      // reference: https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL\n      // response from readAsDataURL is always prepended with \"data:*/*;base64,\"\n      if (reader.readyState !== 2) {\n        return reject(new Error(\"Reader aborted too early\"));\n      }\n      const result = (reader.result ?? \"\") as string;\n      // Response can include only 'data:' for empty blob, return empty string in this case.\n      // Otherwise, return the string after ','\n      const commaIndex = result.indexOf(\",\");\n      const dataOffset = commaIndex > -1 ? commaIndex + 1 : result.length;\n      resolve(result.substring(dataOffset));\n    };\n    reader.onabort = () => reject(new Error(\"Read aborted\"));\n    reader.onerror = () => reject(reader.error);\n    // reader.readAsArrayBuffer is not always available\n    reader.readAsDataURL(blob);\n  });\n}\n"],"mappings":";AACA,SAASA,UAAU,QAAQ,8BAA8B;AAEzD;AACA,OAAO,IAAMC,eAAe,GAAoB,SAAAA,CAACC,MAA6B;EAC5E,IAAI,OAAOC,IAAI,KAAK,UAAU,IAAID,MAAM,YAAYC,IAAI,EAAE;IACxD,OAAOC,WAAW,CAACF,MAAM,CAAC;;EAG5B,OAAOG,aAAa,CAACH,MAAwB,CAAC;AAChD,CAAC;AAED,SAAeE,WAAWA,CAACE,IAAU;;;;;;UACpB,qBAAMC,YAAY,CAACD,IAAI,CAAC;;UAAjCE,MAAM,GAAGC,EAAA,CAAAC,IAAA,EAAwB;UACjCC,WAAW,GAAGX,UAAU,CAACQ,MAAM,CAAC;UACtC,sBAAO,IAAII,UAAU,CAACD,WAAW,CAAC;;;;;AAGpC,SAAeN,aAAaA,CAACH,MAAsB;;;;;;UAC7CW,GAAG,GAAG,IAAID,UAAU,CAAC,CAAC,CAAC;UACrBE,MAAM,GAAGZ,MAAM,CAACa,SAAS,EAAE;UAC7BC,MAAM,GAAG,KAAK;;;eACX,CAACA,MAAM;UACY,qBAAMF,MAAM,CAACG,IAAI,EAAE;;UAArCR,EAAA,GAAkBS,EAAA,CAAAR,IAAA,EAAmB,EAAnCS,IAAI,GAAAV,EAAA,CAAAU,IAAA,EAAEC,KAAK,GAAAX,EAAA,CAAAW,KAAA;UACnB,IAAIA,KAAK,EAAE;YACHC,KAAK,GAAGR,GAAG;YACjBA,GAAG,GAAG,IAAID,UAAU,CAACS,KAAK,CAACC,MAAM,GAAGF,KAAK,CAACE,MAAM,CAAC;YACjDT,GAAG,CAACU,GAAG,CAACF,KAAK,CAAC;YACdR,GAAG,CAACU,GAAG,CAACH,KAAK,EAAEC,KAAK,CAACC,MAAM,CAAC;;UAE9BN,MAAM,GAAGG,IAAI;;;UAEf,sBAAON,GAAG;;;;;AAGZ,SAASN,YAAYA,CAACD,IAAU;EAC9B,OAAO,IAAIkB,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM;IACjC,IAAMZ,MAAM,GAAG,IAAIa,UAAU,EAAE;IAC/Bb,MAAM,CAACc,SAAS,GAAG;;MACjB;MACA;MACA,IAAId,MAAM,CAACe,UAAU,KAAK,CAAC,EAAE;QAC3B,OAAOH,MAAM,CAAC,IAAII,KAAK,CAAC,0BAA0B,CAAC,CAAC;;MAEtD,IAAMC,MAAM,GAAG,CAAAtB,EAAA,GAACK,MAAM,CAACiB,MAAM,cAAAtB,EAAA,cAAAA,EAAA,GAAI,EAAa;MAC9C;MACA;MACA,IAAMuB,UAAU,GAAGD,MAAM,CAACE,OAAO,CAAC,GAAG,CAAC;MACtC,IAAMC,UAAU,GAAGF,UAAU,GAAG,CAAC,CAAC,GAAGA,UAAU,GAAG,CAAC,GAAGD,MAAM,CAACT,MAAM;MACnEG,OAAO,CAACM,MAAM,CAACI,SAAS,CAACD,UAAU,CAAC,CAAC;IACvC,CAAC;IACDpB,MAAM,CAACsB,OAAO,GAAG;MAAM,OAAAV,MAAM,CAAC,IAAII,KAAK,CAAC,cAAc,CAAC,CAAC;IAAjC,CAAiC;IACxDhB,MAAM,CAACuB,OAAO,GAAG;MAAM,OAAAX,MAAM,CAACZ,MAAM,CAACwB,KAAK,CAAC;IAApB,CAAoB;IAC3C;IACAxB,MAAM,CAACyB,aAAa,CAACjC,IAAI,CAAC;EAC5B,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}