{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\n/**\n * Returns canonical headers.\n *\n * @param headers Headers from the request.\n * @returns Request headers that will be signed, and their values, separated by newline characters. Header names must\n * use lowercase characters, must appear in alphabetical order, and must be followed by a colon (:). For the values,\n * trim any leading or trailing spaces, convert sequential spaces to a single space, and separate the values\n * for a multi-value header using commas.\n *\n * @internal\n */\nexport var getCanonicalHeaders = function (headers) {\n  return Object.entries(headers).map(function (_a) {\n    var _b;\n    var _c = __read(_a, 2),\n      key = _c[0],\n      value = _c[1];\n    return {\n      key: key.toLowerCase(),\n      value: (_b = value === null || value === void 0 ? void 0 : value.trim().replace(/\\s+/g, ' ')) !== null && _b !== void 0 ? _b : ''\n    };\n  }).sort(function (a, b) {\n    return a.key < b.key ? -1 : 1;\n  }).map(function (entry) {\n    return \"\".concat(entry.key, \":\").concat(entry.value, \"\\n\");\n  }).join('');\n};","map":{"version":3,"names":["__read","o","n","m","Symbol","iterator","i","call","r","ar","e","next","done","push","value","error","getCanonicalHeaders","headers","Object","entries","map","_a","_b","_c","key","toLowerCase","trim","replace","sort","a","b","entry","concat","join"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/signer/signatureV4/utils/getCanonicalHeaders.js"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\n/**\n * Returns canonical headers.\n *\n * @param headers Headers from the request.\n * @returns Request headers that will be signed, and their values, separated by newline characters. Header names must\n * use lowercase characters, must appear in alphabetical order, and must be followed by a colon (:). For the values,\n * trim any leading or trailing spaces, convert sequential spaces to a single space, and separate the values\n * for a multi-value header using commas.\n *\n * @internal\n */\nexport var getCanonicalHeaders = function (headers) {\n    return Object.entries(headers)\n        .map(function (_a) {\n        var _b;\n        var _c = __read(_a, 2), key = _c[0], value = _c[1];\n        return ({\n            key: key.toLowerCase(),\n            value: (_b = value === null || value === void 0 ? void 0 : value.trim().replace(/\\s+/g, ' ')) !== null && _b !== void 0 ? _b : '',\n        });\n    })\n        .sort(function (a, b) { return (a.key < b.key ? -1 : 1); })\n        .map(function (entry) { return \"\".concat(entry.key, \":\").concat(entry.value, \"\\n\"); })\n        .join('');\n};\n"],"mappings":"AAAA;AACA;AACA,IAAIA,MAAM,GAAI,IAAI,IAAI,IAAI,CAACA,MAAM,IAAK,UAAUC,CAAC,EAAEC,CAAC,EAAE;EAClD,IAAIC,CAAC,GAAG,OAAOC,MAAM,KAAK,UAAU,IAAIH,CAAC,CAACG,MAAM,CAACC,QAAQ,CAAC;EAC1D,IAAI,CAACF,CAAC,EAAE,OAAOF,CAAC;EAChB,IAAIK,CAAC,GAAGH,CAAC,CAACI,IAAI,CAACN,CAAC,CAAC;IAAEO,CAAC;IAAEC,EAAE,GAAG,EAAE;IAAEC,CAAC;EAChC,IAAI;IACA,OAAO,CAACR,CAAC,KAAK,KAAK,CAAC,IAAIA,CAAC,EAAE,GAAG,CAAC,KAAK,CAAC,CAACM,CAAC,GAAGF,CAAC,CAACK,IAAI,CAAC,CAAC,EAAEC,IAAI,EAAEH,EAAE,CAACI,IAAI,CAACL,CAAC,CAACM,KAAK,CAAC;EAC9E,CAAC,CACD,OAAOC,KAAK,EAAE;IAAEL,CAAC,GAAG;MAAEK,KAAK,EAAEA;IAAM,CAAC;EAAE,CAAC,SAC/B;IACJ,IAAI;MACA,IAAIP,CAAC,IAAI,CAACA,CAAC,CAACI,IAAI,KAAKT,CAAC,GAAGG,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAEH,CAAC,CAACI,IAAI,CAACD,CAAC,CAAC;IACpD,CAAC,SACO;MAAE,IAAII,CAAC,EAAE,MAAMA,CAAC,CAACK,KAAK;IAAE;EACpC;EACA,OAAON,EAAE;AACb,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIO,mBAAmB,GAAG,SAAAA,CAAUC,OAAO,EAAE;EAChD,OAAOC,MAAM,CAACC,OAAO,CAACF,OAAO,CAAC,CACzBG,GAAG,CAAC,UAAUC,EAAE,EAAE;IACnB,IAAIC,EAAE;IACN,IAAIC,EAAE,GAAGvB,MAAM,CAACqB,EAAE,EAAE,CAAC,CAAC;MAAEG,GAAG,GAAGD,EAAE,CAAC,CAAC,CAAC;MAAET,KAAK,GAAGS,EAAE,CAAC,CAAC,CAAC;IAClD,OAAQ;MACJC,GAAG,EAAEA,GAAG,CAACC,WAAW,CAAC,CAAC;MACtBX,KAAK,EAAE,CAACQ,EAAE,GAAGR,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,KAAK,CAACY,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,MAAM,IAAI,IAAIL,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG;IACnI,CAAC;EACL,CAAC,CAAC,CACGM,IAAI,CAAC,UAAUC,CAAC,EAAEC,CAAC,EAAE;IAAE,OAAQD,CAAC,CAACL,GAAG,GAAGM,CAAC,CAACN,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC;EAAG,CAAC,CAAC,CAC1DJ,GAAG,CAAC,UAAUW,KAAK,EAAE;IAAE,OAAO,EAAE,CAACC,MAAM,CAACD,KAAK,CAACP,GAAG,EAAE,GAAG,CAAC,CAACQ,MAAM,CAACD,KAAK,CAACjB,KAAK,EAAE,IAAI,CAAC;EAAE,CAAC,CAAC,CACrFmB,IAAI,CAAC,EAAE,CAAC;AACjB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}