{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { HttpRequest as __HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { LazyJsonString as __LazyJsonString } from \"@aws-sdk/smithy-client\";\nexport var serializeAws_restJson1PutEventsCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"/events\";\n          body = JSON.stringify(__assign(__assign(__assign(__assign({}, input.eventList !== undefined && input.eventList !== null && {\n            eventList: serializeAws_restJson1EventList(input.eventList, context)\n          }), input.sessionId !== undefined && input.sessionId !== null && {\n            sessionId: input.sessionId\n          }), input.trackingId !== undefined && input.trackingId !== null && {\n            trackingId: input.trackingId\n          }), input.userId !== undefined && input.userId !== null && {\n            userId: input.userId\n          }));\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1PutItemsCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"/items\";\n          body = JSON.stringify(__assign(__assign({}, input.datasetArn !== undefined && input.datasetArn !== null && {\n            datasetArn: input.datasetArn\n          }), input.items !== undefined && input.items !== null && {\n            items: serializeAws_restJson1ItemList(input.items, context)\n          }));\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1PutUsersCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"/users\";\n          body = JSON.stringify(__assign(__assign({}, input.datasetArn !== undefined && input.datasetArn !== null && {\n            datasetArn: input.datasetArn\n          }), input.users !== undefined && input.users !== null && {\n            users: serializeAws_restJson1UserList(input.users, context)\n          }));\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1PutEventsCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restJson1PutEventsCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1PutEventsCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;\n    var _d;\n    return __generator(this, function (_e) {\n      switch (_e.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _d = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"InvalidInputException\":\n              return [3 /*break*/, 2];\n            case \"com.amazonaws.personalizeevents#InvalidInputException\":\n              return [3 /*break*/, 2];\n          }\n          return [3 /*break*/, 4];\n        case 2:\n          _c = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1InvalidInputExceptionResponse(parsedOutput, context)];\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_e.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 5];\n        case 4:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _e.label = 5;\n        case 5:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1PutItemsCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restJson1PutItemsCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1PutItemsCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;\n    var _e;\n    return __generator(this, function (_f) {\n      switch (_f.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _e = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"InvalidInputException\":\n              return [3 /*break*/, 2];\n            case \"com.amazonaws.personalizeevents#InvalidInputException\":\n              return [3 /*break*/, 2];\n            case \"ResourceNotFoundException\":\n              return [3 /*break*/, 4];\n            case \"com.amazonaws.personalizeevents#ResourceNotFoundException\":\n              return [3 /*break*/, 4];\n          }\n          return [3 /*break*/, 6];\n        case 2:\n          _c = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1InvalidInputExceptionResponse(parsedOutput, context)];\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 7];\n        case 4:\n          _d = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 7];\n        case 6:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _f.label = 7;\n        case 7:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1PutUsersCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restJson1PutUsersCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4 /*yield*/, collectBody(output.body, context)];\n        case 1:\n          _a.sent();\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1PutUsersCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;\n    var _e;\n    return __generator(this, function (_f) {\n      switch (_f.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _e = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"InvalidInputException\":\n              return [3 /*break*/, 2];\n            case \"com.amazonaws.personalizeevents#InvalidInputException\":\n              return [3 /*break*/, 2];\n            case \"ResourceNotFoundException\":\n              return [3 /*break*/, 4];\n            case \"com.amazonaws.personalizeevents#ResourceNotFoundException\":\n              return [3 /*break*/, 4];\n          }\n          return [3 /*break*/, 6];\n        case 2:\n          _c = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1InvalidInputExceptionResponse(parsedOutput, context)];\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 7];\n        case 4:\n          _d = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 7];\n        case 6:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _f.label = 7;\n        case 7:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1InvalidInputExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidInputException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1ResourceNotFoundExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"ResourceNotFoundException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar serializeAws_restJson1Event = function (input, context) {\n  return __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, input.eventId !== undefined && input.eventId !== null && {\n    eventId: input.eventId\n  }), input.eventType !== undefined && input.eventType !== null && {\n    eventType: input.eventType\n  }), input.eventValue !== undefined && input.eventValue !== null && {\n    eventValue: input.eventValue\n  }), input.impression !== undefined && input.impression !== null && {\n    impression: serializeAws_restJson1Impression(input.impression, context)\n  }), input.itemId !== undefined && input.itemId !== null && {\n    itemId: input.itemId\n  }), input.properties !== undefined && input.properties !== null && {\n    properties: __LazyJsonString.fromObject(input.properties)\n  }), input.recommendationId !== undefined && input.recommendationId !== null && {\n    recommendationId: input.recommendationId\n  }), input.sentAt !== undefined && input.sentAt !== null && {\n    sentAt: Math.round(input.sentAt.getTime() / 1000)\n  });\n};\nvar serializeAws_restJson1EventList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return serializeAws_restJson1Event(entry, context);\n  });\n};\nvar serializeAws_restJson1Impression = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return entry;\n  });\n};\nvar serializeAws_restJson1Item = function (input, context) {\n  return __assign(__assign({}, input.itemId !== undefined && input.itemId !== null && {\n    itemId: input.itemId\n  }), input.properties !== undefined && input.properties !== null && {\n    properties: __LazyJsonString.fromObject(input.properties)\n  });\n};\nvar serializeAws_restJson1ItemList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return serializeAws_restJson1Item(entry, context);\n  });\n};\nvar serializeAws_restJson1User = function (input, context) {\n  return __assign(__assign({}, input.properties !== undefined && input.properties !== null && {\n    properties: __LazyJsonString.fromObject(input.properties)\n  }), input.userId !== undefined && input.userId !== null && {\n    userId: input.userId\n  });\n};\nvar serializeAws_restJson1UserList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return serializeAws_restJson1User(entry, context);\n  });\n};\nvar deserializeMetadata = function (output) {\n  var _a;\n  return {\n    httpStatusCode: output.statusCode,\n    requestId: (_a = output.headers[\"x-amzn-requestid\"]) !== null && _a !== void 0 ? _a : output.headers[\"x-amzn-request-id\"],\n    extendedRequestId: output.headers[\"x-amz-id-2\"],\n    cfId: output.headers[\"x-amz-cf-id\"]\n  };\n};\n// Collect low-level response body stream to Uint8Array.\nvar collectBody = function (streamBody, context) {\n  if (streamBody === void 0) {\n    streamBody = new Uint8Array();\n  }\n  if (streamBody instanceof Uint8Array) {\n    return Promise.resolve(streamBody);\n  }\n  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\n// Encode Uint8Array data into string with utf-8.\nvar collectBodyString = function (streamBody, context) {\n  return collectBody(streamBody, context).then(function (body) {\n    return context.utf8Encoder(body);\n  });\n};\nvar isSerializableHeaderValue = function (value) {\n  return value !== undefined && value !== null && value !== \"\" && (!Object.getOwnPropertyNames(value).includes(\"length\") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes(\"size\") || value.size != 0);\n};\nvar parseBody = function (streamBody, context) {\n  return collectBodyString(streamBody, context).then(function (encoded) {\n    if (encoded.length) {\n      return JSON.parse(encoded);\n    }\n    return {};\n  });\n};\n/**\n * Load an error code for the aws.rest-json-1.1 protocol.\n */\nvar loadRestJsonErrorCode = function (output, data) {\n  var findKey = function (object, key) {\n    return Object.keys(object).find(function (k) {\n      return k.toLowerCase() === key.toLowerCase();\n    });\n  };\n  var sanitizeErrorCode = function (rawValue) {\n    var cleanValue = rawValue;\n    if (cleanValue.indexOf(\":\") >= 0) {\n      cleanValue = cleanValue.split(\":\")[0];\n    }\n    if (cleanValue.indexOf(\"#\") >= 0) {\n      cleanValue = cleanValue.split(\"#\")[1];\n    }\n    return cleanValue;\n  };\n  var headerKey = findKey(output.headers, \"x-amzn-errortype\");\n  if (headerKey !== undefined) {\n    return sanitizeErrorCode(output.headers[headerKey]);\n  }\n  if (data.code !== undefined) {\n    return sanitizeErrorCode(data.code);\n  }\n  if (data[\"__type\"] !== undefined) {\n    return sanitizeErrorCode(data[\"__type\"]);\n  }\n  return \"\";\n};","map":{"version":3,"names":["HttpRequest","__HttpRequest","LazyJsonString","__LazyJsonString","serializeAws_restJson1PutEventsCommand","input","context","__awaiter","headers","resolvedPath","body","JSON","stringify","__assign","eventList","undefined","serializeAws_restJson1EventList","sessionId","trackingId","userId","endpoint","_a","_c","sent","hostname","_b","protocol","port","method","path","serializeAws_restJson1PutItemsCommand","datasetArn","items","serializeAws_restJson1ItemList","serializeAws_restJson1PutUsersCommand","users","serializeAws_restJson1UserList","deserializeAws_restJson1PutEventsCommand","output","statusCode","deserializeAws_restJson1PutEventsCommandError","contents","$metadata","deserializeMetadata","collectBody","Promise","resolve","parseBody","parsedOutput","apply","concat","_d","_e","errorCode","loadRestJsonErrorCode","deserializeAws_restJson1InvalidInputExceptionResponse","response","name","parsedBody","code","Code","message","Message","$fault","reject","Object","assign","Error","deserializeAws_restJson1PutItemsCommand","deserializeAws_restJson1PutItemsCommandError","_f","deserializeAws_restJson1ResourceNotFoundExceptionResponse","deserializeAws_restJson1PutUsersCommand","deserializeAws_restJson1PutUsersCommandError","data","serializeAws_restJson1Event","eventId","eventType","eventValue","impression","serializeAws_restJson1Impression","itemId","properties","fromObject","recommendationId","sentAt","Math","round","getTime","filter","e","map","entry","serializeAws_restJson1Item","serializeAws_restJson1User","httpStatusCode","requestId","extendedRequestId","cfId","streamBody","Uint8Array","streamCollector","collectBodyString","then","utf8Encoder","isSerializableHeaderValue","value","getOwnPropertyNames","includes","length","size","encoded","parse","findKey","object","key","keys","find","k","toLowerCase","sanitizeErrorCode","rawValue","cleanValue","indexOf","split","headerKey"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-sdk/client-personalize-events/protocols/Aws_restJson1.ts"],"sourcesContent":["import { PutEventsCommandInput, PutEventsCommandOutput } from \"../commands/PutEventsCommand\";\nimport { PutItemsCommandInput, PutItemsCommandOutput } from \"../commands/PutItemsCommand\";\nimport { PutUsersCommandInput, PutUsersCommandOutput } from \"../commands/PutUsersCommand\";\nimport { Event, InvalidInputException, Item, ResourceNotFoundException, User } from \"../models/models_0\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { LazyJsonString as __LazyJsonString, SmithyException as __SmithyException } from \"@aws-sdk/smithy-client\";\nimport {\n  Endpoint as __Endpoint,\n  MetadataBearer as __MetadataBearer,\n  ResponseMetadata as __ResponseMetadata,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport const serializeAws_restJson1PutEventsCommand = async (\n  input: PutEventsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/json\",\n  };\n  let resolvedPath = \"/events\";\n  let body: any;\n  body = JSON.stringify({\n    ...(input.eventList !== undefined &&\n      input.eventList !== null && { eventList: serializeAws_restJson1EventList(input.eventList, context) }),\n    ...(input.sessionId !== undefined && input.sessionId !== null && { sessionId: input.sessionId }),\n    ...(input.trackingId !== undefined && input.trackingId !== null && { trackingId: input.trackingId }),\n    ...(input.userId !== undefined && input.userId !== null && { userId: input.userId }),\n  });\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const serializeAws_restJson1PutItemsCommand = async (\n  input: PutItemsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/json\",\n  };\n  let resolvedPath = \"/items\";\n  let body: any;\n  body = JSON.stringify({\n    ...(input.datasetArn !== undefined && input.datasetArn !== null && { datasetArn: input.datasetArn }),\n    ...(input.items !== undefined &&\n      input.items !== null && { items: serializeAws_restJson1ItemList(input.items, context) }),\n  });\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const serializeAws_restJson1PutUsersCommand = async (\n  input: PutUsersCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/json\",\n  };\n  let resolvedPath = \"/users\";\n  let body: any;\n  body = JSON.stringify({\n    ...(input.datasetArn !== undefined && input.datasetArn !== null && { datasetArn: input.datasetArn }),\n    ...(input.users !== undefined &&\n      input.users !== null && { users: serializeAws_restJson1UserList(input.users, context) }),\n  });\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const deserializeAws_restJson1PutEventsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutEventsCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1PutEventsCommandError(output, context);\n  }\n  const contents: PutEventsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1PutEventsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutEventsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"InvalidInputException\":\n    case \"com.amazonaws.personalizeevents#InvalidInputException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidInputExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restJson1PutItemsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutItemsCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1PutItemsCommandError(output, context);\n  }\n  const contents: PutItemsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1PutItemsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutItemsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"InvalidInputException\":\n    case \"com.amazonaws.personalizeevents#InvalidInputException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidInputExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ResourceNotFoundException\":\n    case \"com.amazonaws.personalizeevents#ResourceNotFoundException\":\n      response = {\n        ...(await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restJson1PutUsersCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutUsersCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1PutUsersCommandError(output, context);\n  }\n  const contents: PutUsersCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1PutUsersCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutUsersCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"InvalidInputException\":\n    case \"com.amazonaws.personalizeevents#InvalidInputException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidInputExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ResourceNotFoundException\":\n    case \"com.amazonaws.personalizeevents#ResourceNotFoundException\":\n      response = {\n        ...(await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nconst deserializeAws_restJson1InvalidInputExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<InvalidInputException> => {\n  const contents: InvalidInputException = {\n    name: \"InvalidInputException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1ResourceNotFoundExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<ResourceNotFoundException> => {\n  const contents: ResourceNotFoundException = {\n    name: \"ResourceNotFoundException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst serializeAws_restJson1Event = (input: Event, context: __SerdeContext): any => {\n  return {\n    ...(input.eventId !== undefined && input.eventId !== null && { eventId: input.eventId }),\n    ...(input.eventType !== undefined && input.eventType !== null && { eventType: input.eventType }),\n    ...(input.eventValue !== undefined && input.eventValue !== null && { eventValue: input.eventValue }),\n    ...(input.impression !== undefined &&\n      input.impression !== null && { impression: serializeAws_restJson1Impression(input.impression, context) }),\n    ...(input.itemId !== undefined && input.itemId !== null && { itemId: input.itemId }),\n    ...(input.properties !== undefined &&\n      input.properties !== null && { properties: __LazyJsonString.fromObject(input.properties) }),\n    ...(input.recommendationId !== undefined &&\n      input.recommendationId !== null && { recommendationId: input.recommendationId }),\n    ...(input.sentAt !== undefined && input.sentAt !== null && { sentAt: Math.round(input.sentAt.getTime() / 1000) }),\n  };\n};\n\nconst serializeAws_restJson1EventList = (input: Event[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return serializeAws_restJson1Event(entry, context);\n    });\n};\n\nconst serializeAws_restJson1Impression = (input: string[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return entry;\n    });\n};\n\nconst serializeAws_restJson1Item = (input: Item, context: __SerdeContext): any => {\n  return {\n    ...(input.itemId !== undefined && input.itemId !== null && { itemId: input.itemId }),\n    ...(input.properties !== undefined &&\n      input.properties !== null && { properties: __LazyJsonString.fromObject(input.properties) }),\n  };\n};\n\nconst serializeAws_restJson1ItemList = (input: Item[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return serializeAws_restJson1Item(entry, context);\n    });\n};\n\nconst serializeAws_restJson1User = (input: User, context: __SerdeContext): any => {\n  return {\n    ...(input.properties !== undefined &&\n      input.properties !== null && { properties: __LazyJsonString.fromObject(input.properties) }),\n    ...(input.userId !== undefined && input.userId !== null && { userId: input.userId }),\n  };\n};\n\nconst serializeAws_restJson1UserList = (input: User[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return serializeAws_restJson1User(entry, context);\n    });\n};\n\nconst deserializeMetadata = (output: __HttpResponse): __ResponseMetadata => ({\n  httpStatusCode: output.statusCode,\n  requestId: output.headers[\"x-amzn-requestid\"] ?? output.headers[\"x-amzn-request-id\"],\n  extendedRequestId: output.headers[\"x-amz-id-2\"],\n  cfId: output.headers[\"x-amz-cf-id\"],\n});\n\n// Collect low-level response body stream to Uint8Array.\nconst collectBody = (streamBody: any = new Uint8Array(), context: __SerdeContext): Promise<Uint8Array> => {\n  if (streamBody instanceof Uint8Array) {\n    return Promise.resolve(streamBody);\n  }\n  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\n\n// Encode Uint8Array data into string with utf-8.\nconst collectBodyString = (streamBody: any, context: __SerdeContext): Promise<string> =>\n  collectBody(streamBody, context).then((body) => context.utf8Encoder(body));\n\nconst isSerializableHeaderValue = (value: any): boolean =>\n  value !== undefined &&\n  value !== null &&\n  value !== \"\" &&\n  (!Object.getOwnPropertyNames(value).includes(\"length\") || value.length != 0) &&\n  (!Object.getOwnPropertyNames(value).includes(\"size\") || value.size != 0);\n\nconst parseBody = (streamBody: any, context: __SerdeContext): any =>\n  collectBodyString(streamBody, context).then((encoded) => {\n    if (encoded.length) {\n      return JSON.parse(encoded);\n    }\n    return {};\n  });\n\n/**\n * Load an error code for the aws.rest-json-1.1 protocol.\n */\nconst loadRestJsonErrorCode = (output: __HttpResponse, data: any): string => {\n  const findKey = (object: any, key: string) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());\n\n  const sanitizeErrorCode = (rawValue: string): string => {\n    let cleanValue = rawValue;\n    if (cleanValue.indexOf(\":\") >= 0) {\n      cleanValue = cleanValue.split(\":\")[0];\n    }\n    if (cleanValue.indexOf(\"#\") >= 0) {\n      cleanValue = cleanValue.split(\"#\")[1];\n    }\n    return cleanValue;\n  };\n\n  const headerKey = findKey(output.headers, \"x-amzn-errortype\");\n  if (headerKey !== undefined) {\n    return sanitizeErrorCode(output.headers[headerKey]);\n  }\n\n  if (data.code !== undefined) {\n    return sanitizeErrorCode(data.code);\n  }\n\n  if (data[\"__type\"] !== undefined) {\n    return sanitizeErrorCode(data[\"__type\"]);\n  }\n\n  return \"\";\n};\n"],"mappings":";AAIA,SAASA,WAAW,IAAIC,aAAa,QAAwC,wBAAwB;AACrG,SAASC,cAAc,IAAIC,gBAAgB,QAA8C,wBAAwB;AAQjH,OAAO,IAAMC,sCAAsC,GAAG,SAAAA,CACpDC,KAA4B,EAC5BC,OAAuB;EAAA,OAAAC,SAAA;;;;;UAEjBC,OAAO,GAAQ;YACnB,cAAc,EAAE;WACjB;UACGC,YAAY,GAAG,SAAS;UAE5BC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAAAC,QAAA,CAAAA,QAAA,CAAAA,QAAA,CAAAA,QAAA,KACfR,KAAK,CAACS,SAAS,KAAKC,SAAS,IAC/BV,KAAK,CAACS,SAAS,KAAK,IAAI,IAAI;YAAEA,SAAS,EAAEE,+BAA+B,CAACX,KAAK,CAACS,SAAS,EAAER,OAAO;UAAC,CAAG,GACnGD,KAAK,CAACY,SAAS,KAAKF,SAAS,IAAIV,KAAK,CAACY,SAAS,KAAK,IAAI,IAAI;YAAEA,SAAS,EAAEZ,KAAK,CAACY;UAAS,CAAG,GAC5FZ,KAAK,CAACa,UAAU,KAAKH,SAAS,IAAIV,KAAK,CAACa,UAAU,KAAK,IAAI,IAAI;YAAEA,UAAU,EAAEb,KAAK,CAACa;UAAU,CAAG,GAChGb,KAAK,CAACc,MAAM,KAAKJ,SAAS,IAAIV,KAAK,CAACc,MAAM,KAAK,IAAI,IAAI;YAAEA,MAAM,EAAEd,KAAK,CAACc;UAAM,CAAG,EACpF;UAC6C,qBAAMb,OAAO,CAACc,QAAQ,EAAE;;UAAjEC,EAAA,GAAyCC,EAAA,CAAAC,IAAA,EAAwB,EAA/DC,QAAQ,GAAAH,EAAA,CAAAG,QAAA,EAAEC,EAAA,GAAAJ,EAAA,CAAAK,QAAkB,EAAlBA,QAAQ,GAAAD,EAAA,cAAG,OAAO,GAAAA,EAAA,EAAEE,IAAI,GAAAN,EAAA,CAAAM,IAAA;UAC1C,sBAAO,IAAI1B,aAAa,CAAC;YACvByB,QAAQ,EAAAA,QAAA;YACRF,QAAQ,EAAAA,QAAA;YACRG,IAAI,EAAAA,IAAA;YACJC,MAAM,EAAE,MAAM;YACdpB,OAAO,EAAAA,OAAA;YACPqB,IAAI,EAAEpB,YAAY;YAClBC,IAAI,EAAAA;WACL,CAAC;;;;CACH;AAED,OAAO,IAAMoB,qCAAqC,GAAG,SAAAA,CACnDzB,KAA2B,EAC3BC,OAAuB;EAAA,OAAAC,SAAA;;;;;UAEjBC,OAAO,GAAQ;YACnB,cAAc,EAAE;WACjB;UACGC,YAAY,GAAG,QAAQ;UAE3BC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAAAC,QAAA,CAAAA,QAAA,KACfR,KAAK,CAAC0B,UAAU,KAAKhB,SAAS,IAAIV,KAAK,CAAC0B,UAAU,KAAK,IAAI,IAAI;YAAEA,UAAU,EAAE1B,KAAK,CAAC0B;UAAU,CAAG,GAChG1B,KAAK,CAAC2B,KAAK,KAAKjB,SAAS,IAC3BV,KAAK,CAAC2B,KAAK,KAAK,IAAI,IAAI;YAAEA,KAAK,EAAEC,8BAA8B,CAAC5B,KAAK,CAAC2B,KAAK,EAAE1B,OAAO;UAAC,CAAG,EAC1F;UAC6C,qBAAMA,OAAO,CAACc,QAAQ,EAAE;;UAAjEC,EAAA,GAAyCC,EAAA,CAAAC,IAAA,EAAwB,EAA/DC,QAAQ,GAAAH,EAAA,CAAAG,QAAA,EAAEC,EAAA,GAAAJ,EAAA,CAAAK,QAAkB,EAAlBA,QAAQ,GAAAD,EAAA,cAAG,OAAO,GAAAA,EAAA,EAAEE,IAAI,GAAAN,EAAA,CAAAM,IAAA;UAC1C,sBAAO,IAAI1B,aAAa,CAAC;YACvByB,QAAQ,EAAAA,QAAA;YACRF,QAAQ,EAAAA,QAAA;YACRG,IAAI,EAAAA,IAAA;YACJC,MAAM,EAAE,MAAM;YACdpB,OAAO,EAAAA,OAAA;YACPqB,IAAI,EAAEpB,YAAY;YAClBC,IAAI,EAAAA;WACL,CAAC;;;;CACH;AAED,OAAO,IAAMwB,qCAAqC,GAAG,SAAAA,CACnD7B,KAA2B,EAC3BC,OAAuB;EAAA,OAAAC,SAAA;;;;;UAEjBC,OAAO,GAAQ;YACnB,cAAc,EAAE;WACjB;UACGC,YAAY,GAAG,QAAQ;UAE3BC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAAAC,QAAA,CAAAA,QAAA,KACfR,KAAK,CAAC0B,UAAU,KAAKhB,SAAS,IAAIV,KAAK,CAAC0B,UAAU,KAAK,IAAI,IAAI;YAAEA,UAAU,EAAE1B,KAAK,CAAC0B;UAAU,CAAG,GAChG1B,KAAK,CAAC8B,KAAK,KAAKpB,SAAS,IAC3BV,KAAK,CAAC8B,KAAK,KAAK,IAAI,IAAI;YAAEA,KAAK,EAAEC,8BAA8B,CAAC/B,KAAK,CAAC8B,KAAK,EAAE7B,OAAO;UAAC,CAAG,EAC1F;UAC6C,qBAAMA,OAAO,CAACc,QAAQ,EAAE;;UAAjEC,EAAA,GAAyCC,EAAA,CAAAC,IAAA,EAAwB,EAA/DC,QAAQ,GAAAH,EAAA,CAAAG,QAAA,EAAEC,EAAA,GAAAJ,EAAA,CAAAK,QAAkB,EAAlBA,QAAQ,GAAAD,EAAA,cAAG,OAAO,GAAAA,EAAA,EAAEE,IAAI,GAAAN,EAAA,CAAAM,IAAA;UAC1C,sBAAO,IAAI1B,aAAa,CAAC;YACvByB,QAAQ,EAAAA,QAAA;YACRF,QAAQ,EAAAA,QAAA;YACRG,IAAI,EAAAA,IAAA;YACJC,MAAM,EAAE,MAAM;YACdpB,OAAO,EAAAA,OAAA;YACPqB,IAAI,EAAEpB,YAAY;YAClBC,IAAI,EAAAA;WACL,CAAC;;;;CACH;AAED,OAAO,IAAM2B,wCAAwC,GAAG,SAAAA,CACtDC,MAAsB,EACtBhC,OAAuB;EAAA,OAAAC,SAAA;;;;;UAEvB,IAAI+B,MAAM,CAACC,UAAU,KAAK,GAAG,IAAID,MAAM,CAACC,UAAU,IAAI,GAAG,EAAE;YACzD,sBAAOC,6CAA6C,CAACF,MAAM,EAAEhC,OAAO,CAAC;;UAEjEmC,QAAQ,GAA2B;YACvCC,SAAS,EAAEC,mBAAmB,CAACL,MAAM;WACtC;UACD,qBAAMM,WAAW,CAACN,MAAM,CAAC5B,IAAI,EAAEJ,OAAO,CAAC;;UAAvCe,EAAA,CAAAE,IAAA,EAAuC;UACvC,sBAAOsB,OAAO,CAACC,OAAO,CAACL,QAAQ,CAAC;;;;CACjC;AAED,IAAMD,6CAA6C,GAAG,SAAAA,CACpDF,MAAsB,EACtBhC,OAAuB;EAAA,OAAAC,SAAA;;;;;;6BAGlB+B,MAAM;;UACH,qBAAMS,SAAS,CAACT,MAAM,CAAC5B,IAAI,EAAEJ,OAAO,CAAC;;UAFvC0C,YAAY,GAAAnC,QAAA,CAAAoC,KAAA,SAAA5B,EAAA,CAAA6B,MAAA,GAEhBC,EAAA,CAAAzC,IAAI,GAAE0C,EAAA,CAAA7B,IAAA,EAAqC,EAAA4B,EAAA,IAC5C;UAEGE,SAAS,GAAW,cAAc;UACtCA,SAAS,GAAGC,qBAAqB,CAAChB,MAAM,EAAEU,YAAY,CAACtC,IAAI,CAAC;UACpDe,EAAA,GAAA4B,SAAS;;iBACV,uBAAuB;cAAvB;iBACA,uDAAuD;cAAvD;;;;;UAEG,qBAAME,qDAAqD,CAACP,YAAY,EAAE1C,OAAO,CAAC;;UADxFkD,QAAQ,GAAA3C,QAAA,CAAAoC,KAAA,UAAApC,QAAA,CAAAoC,KAAA,SAAA3B,EAAA,CAAA4B,MAAA,EACFE,EAAA,CAAA7B,IAAA,EAAkF,CAAC;YACvFkC,IAAI,EAAEJ,SAAS;YACfX,SAAS,EAAEC,mBAAmB,CAACL,MAAM;UAAC,GACvC;UACD;;UAEMoB,UAAU,GAAGV,YAAY,CAACtC,IAAI;UACpC2C,SAAS,GAAGK,UAAU,CAACC,IAAI,IAAID,UAAU,CAACE,IAAI,IAAIP,SAAS;UAC3DG,QAAQ,GAAG3C,QAAA,CAAAA,QAAA,KACN6C,UAAU;YACbD,IAAI,EAAE,KAAGJ,SAAW;YACpBQ,OAAO,EAAEH,UAAU,CAACG,OAAO,IAAIH,UAAU,CAACI,OAAO,IAAIT,SAAS;YAC9DU,MAAM,EAAE,QAAQ;YAChBrB,SAAS,EAAEC,mBAAmB,CAACL,MAAM;UAAC,EAChC;;;UAENuB,OAAO,GAAGL,QAAQ,CAACK,OAAO,IAAIL,QAAQ,CAACM,OAAO,IAAIT,SAAS;UACjEG,QAAQ,CAACK,OAAO,GAAGA,OAAO;UAC1B,OAAOL,QAAQ,CAACM,OAAO;UACvB,sBAAOjB,OAAO,CAACmB,MAAM,CAACC,MAAM,CAACC,MAAM,CAAC,IAAIC,KAAK,CAACN,OAAO,CAAC,EAAEL,QAAQ,CAAC,CAAC;;;;CACnE;AAED,OAAO,IAAMY,uCAAuC,GAAG,SAAAA,CACrD9B,MAAsB,EACtBhC,OAAuB;EAAA,OAAAC,SAAA;;;;;UAEvB,IAAI+B,MAAM,CAACC,UAAU,KAAK,GAAG,IAAID,MAAM,CAACC,UAAU,IAAI,GAAG,EAAE;YACzD,sBAAO8B,4CAA4C,CAAC/B,MAAM,EAAEhC,OAAO,CAAC;;UAEhEmC,QAAQ,GAA0B;YACtCC,SAAS,EAAEC,mBAAmB,CAACL,MAAM;WACtC;UACD,qBAAMM,WAAW,CAACN,MAAM,CAAC5B,IAAI,EAAEJ,OAAO,CAAC;;UAAvCe,EAAA,CAAAE,IAAA,EAAuC;UACvC,sBAAOsB,OAAO,CAACC,OAAO,CAACL,QAAQ,CAAC;;;;CACjC;AAED,IAAM4B,4CAA4C,GAAG,SAAAA,CACnD/B,MAAsB,EACtBhC,OAAuB;EAAA,OAAAC,SAAA;;;;;;6BAGlB+B,MAAM;;UACH,qBAAMS,SAAS,CAACT,MAAM,CAAC5B,IAAI,EAAEJ,OAAO,CAAC;;UAFvC0C,YAAY,GAAAnC,QAAA,CAAAoC,KAAA,SAAA5B,EAAA,CAAA6B,MAAA,GAEhBE,EAAA,CAAA1C,IAAI,GAAE4D,EAAA,CAAA/C,IAAA,EAAqC,EAAA6B,EAAA,IAC5C;UAEGC,SAAS,GAAW,cAAc;UACtCA,SAAS,GAAGC,qBAAqB,CAAChB,MAAM,EAAEU,YAAY,CAACtC,IAAI,CAAC;UACpDe,EAAA,GAAA4B,SAAS;;iBACV,uBAAuB;cAAvB;iBACA,uDAAuD;cAAvD;iBAOA,2BAA2B;cAA3B;iBACA,2DAA2D;cAA3D;;;;;UANG,qBAAME,qDAAqD,CAACP,YAAY,EAAE1C,OAAO,CAAC;;UADxFkD,QAAQ,GAAA3C,QAAA,CAAAoC,KAAA,UAAApC,QAAA,CAAAoC,KAAA,SAAA3B,EAAA,CAAA4B,MAAA,EACFoB,EAAA,CAAA/C,IAAA,EAAkF,CAAC;YACvFkC,IAAI,EAAEJ,SAAS;YACfX,SAAS,EAAEC,mBAAmB,CAACL,MAAM;UAAC,GACvC;UACD;;;UAIM,qBAAMiC,yDAAyD,CAACvB,YAAY,EAAE1C,OAAO,CAAC;;UAD5FkD,QAAQ,GAAA3C,QAAA,CAAAoC,KAAA,UAAApC,QAAA,CAAAoC,KAAA,SAAAE,EAAA,CAAAD,MAAA,EACFoB,EAAA,CAAA/C,IAAA,EAAsF,CAAC;YAC3FkC,IAAI,EAAEJ,SAAS;YACfX,SAAS,EAAEC,mBAAmB,CAACL,MAAM;UAAC,GACvC;UACD;;UAEMoB,UAAU,GAAGV,YAAY,CAACtC,IAAI;UACpC2C,SAAS,GAAGK,UAAU,CAACC,IAAI,IAAID,UAAU,CAACE,IAAI,IAAIP,SAAS;UAC3DG,QAAQ,GAAG3C,QAAA,CAAAA,QAAA,KACN6C,UAAU;YACbD,IAAI,EAAE,KAAGJ,SAAW;YACpBQ,OAAO,EAAEH,UAAU,CAACG,OAAO,IAAIH,UAAU,CAACI,OAAO,IAAIT,SAAS;YAC9DU,MAAM,EAAE,QAAQ;YAChBrB,SAAS,EAAEC,mBAAmB,CAACL,MAAM;UAAC,EAChC;;;UAENuB,OAAO,GAAGL,QAAQ,CAACK,OAAO,IAAIL,QAAQ,CAACM,OAAO,IAAIT,SAAS;UACjEG,QAAQ,CAACK,OAAO,GAAGA,OAAO;UAC1B,OAAOL,QAAQ,CAACM,OAAO;UACvB,sBAAOjB,OAAO,CAACmB,MAAM,CAACC,MAAM,CAACC,MAAM,CAAC,IAAIC,KAAK,CAACN,OAAO,CAAC,EAAEL,QAAQ,CAAC,CAAC;;;;CACnE;AAED,OAAO,IAAMgB,uCAAuC,GAAG,SAAAA,CACrDlC,MAAsB,EACtBhC,OAAuB;EAAA,OAAAC,SAAA;;;;;UAEvB,IAAI+B,MAAM,CAACC,UAAU,KAAK,GAAG,IAAID,MAAM,CAACC,UAAU,IAAI,GAAG,EAAE;YACzD,sBAAOkC,4CAA4C,CAACnC,MAAM,EAAEhC,OAAO,CAAC;;UAEhEmC,QAAQ,GAA0B;YACtCC,SAAS,EAAEC,mBAAmB,CAACL,MAAM;WACtC;UACD,qBAAMM,WAAW,CAACN,MAAM,CAAC5B,IAAI,EAAEJ,OAAO,CAAC;;UAAvCe,EAAA,CAAAE,IAAA,EAAuC;UACvC,sBAAOsB,OAAO,CAACC,OAAO,CAACL,QAAQ,CAAC;;;;CACjC;AAED,IAAMgC,4CAA4C,GAAG,SAAAA,CACnDnC,MAAsB,EACtBhC,OAAuB;EAAA,OAAAC,SAAA;;;;;;6BAGlB+B,MAAM;;UACH,qBAAMS,SAAS,CAACT,MAAM,CAAC5B,IAAI,EAAEJ,OAAO,CAAC;;UAFvC0C,YAAY,GAAAnC,QAAA,CAAAoC,KAAA,SAAA5B,EAAA,CAAA6B,MAAA,GAEhBE,EAAA,CAAA1C,IAAI,GAAE4D,EAAA,CAAA/C,IAAA,EAAqC,EAAA6B,EAAA,IAC5C;UAEGC,SAAS,GAAW,cAAc;UACtCA,SAAS,GAAGC,qBAAqB,CAAChB,MAAM,EAAEU,YAAY,CAACtC,IAAI,CAAC;UACpDe,EAAA,GAAA4B,SAAS;;iBACV,uBAAuB;cAAvB;iBACA,uDAAuD;cAAvD;iBAOA,2BAA2B;cAA3B;iBACA,2DAA2D;cAA3D;;;;;UANG,qBAAME,qDAAqD,CAACP,YAAY,EAAE1C,OAAO,CAAC;;UADxFkD,QAAQ,GAAA3C,QAAA,CAAAoC,KAAA,UAAApC,QAAA,CAAAoC,KAAA,SAAA3B,EAAA,CAAA4B,MAAA,EACFoB,EAAA,CAAA/C,IAAA,EAAkF,CAAC;YACvFkC,IAAI,EAAEJ,SAAS;YACfX,SAAS,EAAEC,mBAAmB,CAACL,MAAM;UAAC,GACvC;UACD;;;UAIM,qBAAMiC,yDAAyD,CAACvB,YAAY,EAAE1C,OAAO,CAAC;;UAD5FkD,QAAQ,GAAA3C,QAAA,CAAAoC,KAAA,UAAApC,QAAA,CAAAoC,KAAA,SAAAE,EAAA,CAAAD,MAAA,EACFoB,EAAA,CAAA/C,IAAA,EAAsF,CAAC;YAC3FkC,IAAI,EAAEJ,SAAS;YACfX,SAAS,EAAEC,mBAAmB,CAACL,MAAM;UAAC,GACvC;UACD;;UAEMoB,UAAU,GAAGV,YAAY,CAACtC,IAAI;UACpC2C,SAAS,GAAGK,UAAU,CAACC,IAAI,IAAID,UAAU,CAACE,IAAI,IAAIP,SAAS;UAC3DG,QAAQ,GAAG3C,QAAA,CAAAA,QAAA,KACN6C,UAAU;YACbD,IAAI,EAAE,KAAGJ,SAAW;YACpBQ,OAAO,EAAEH,UAAU,CAACG,OAAO,IAAIH,UAAU,CAACI,OAAO,IAAIT,SAAS;YAC9DU,MAAM,EAAE,QAAQ;YAChBrB,SAAS,EAAEC,mBAAmB,CAACL,MAAM;UAAC,EAChC;;;UAENuB,OAAO,GAAGL,QAAQ,CAACK,OAAO,IAAIL,QAAQ,CAACM,OAAO,IAAIT,SAAS;UACjEG,QAAQ,CAACK,OAAO,GAAGA,OAAO;UAC1B,OAAOL,QAAQ,CAACM,OAAO;UACvB,sBAAOjB,OAAO,CAACmB,MAAM,CAACC,MAAM,CAACC,MAAM,CAAC,IAAIC,KAAK,CAACN,OAAO,CAAC,EAAEL,QAAQ,CAAC,CAAC;;;;CACnE;AAED,IAAMD,qDAAqD,GAAG,SAAAA,CAC5DP,YAAiB,EACjB1C,OAAuB;EAAA,OAAAC,SAAA;;;MAEjBkC,QAAQ,GAA0B;QACtCgB,IAAI,EAAE,uBAAuB;QAC7BM,MAAM,EAAE,QAAQ;QAChBrB,SAAS,EAAEC,mBAAmB,CAACK,YAAY,CAAC;QAC5Ca,OAAO,EAAE9C;OACV;MACK2D,IAAI,GAAQ1B,YAAY,CAACtC,IAAI;MACnC,IAAIgE,IAAI,CAACb,OAAO,KAAK9C,SAAS,IAAI2D,IAAI,CAACb,OAAO,KAAK,IAAI,EAAE;QACvDpB,QAAQ,CAACoB,OAAO,GAAGa,IAAI,CAACb,OAAO;;MAEjC,sBAAOpB,QAAQ;;;CAChB;AAED,IAAM8B,yDAAyD,GAAG,SAAAA,CAChEvB,YAAiB,EACjB1C,OAAuB;EAAA,OAAAC,SAAA;;;MAEjBkC,QAAQ,GAA8B;QAC1CgB,IAAI,EAAE,2BAA2B;QACjCM,MAAM,EAAE,QAAQ;QAChBrB,SAAS,EAAEC,mBAAmB,CAACK,YAAY,CAAC;QAC5Ca,OAAO,EAAE9C;OACV;MACK2D,IAAI,GAAQ1B,YAAY,CAACtC,IAAI;MACnC,IAAIgE,IAAI,CAACb,OAAO,KAAK9C,SAAS,IAAI2D,IAAI,CAACb,OAAO,KAAK,IAAI,EAAE;QACvDpB,QAAQ,CAACoB,OAAO,GAAGa,IAAI,CAACb,OAAO;;MAEjC,sBAAOpB,QAAQ;;;CAChB;AAED,IAAMkC,2BAA2B,GAAG,SAAAA,CAACtE,KAAY,EAAEC,OAAuB;EACxE,OAAAO,QAAA,CAAAA,QAAA,CAAAA,QAAA,CAAAA,QAAA,CAAAA,QAAA,CAAAA,QAAA,CAAAA,QAAA,CAAAA,QAAA,KACMR,KAAK,CAACuE,OAAO,KAAK7D,SAAS,IAAIV,KAAK,CAACuE,OAAO,KAAK,IAAI,IAAI;IAAEA,OAAO,EAAEvE,KAAK,CAACuE;EAAO,CAAG,GACpFvE,KAAK,CAACwE,SAAS,KAAK9D,SAAS,IAAIV,KAAK,CAACwE,SAAS,KAAK,IAAI,IAAI;IAAEA,SAAS,EAAExE,KAAK,CAACwE;EAAS,CAAG,GAC5FxE,KAAK,CAACyE,UAAU,KAAK/D,SAAS,IAAIV,KAAK,CAACyE,UAAU,KAAK,IAAI,IAAI;IAAEA,UAAU,EAAEzE,KAAK,CAACyE;EAAU,CAAG,GAChGzE,KAAK,CAAC0E,UAAU,KAAKhE,SAAS,IAChCV,KAAK,CAAC0E,UAAU,KAAK,IAAI,IAAI;IAAEA,UAAU,EAAEC,gCAAgC,CAAC3E,KAAK,CAAC0E,UAAU,EAAEzE,OAAO;EAAC,CAAG,GACvGD,KAAK,CAAC4E,MAAM,KAAKlE,SAAS,IAAIV,KAAK,CAAC4E,MAAM,KAAK,IAAI,IAAI;IAAEA,MAAM,EAAE5E,KAAK,CAAC4E;EAAM,CAAG,GAChF5E,KAAK,CAAC6E,UAAU,KAAKnE,SAAS,IAChCV,KAAK,CAAC6E,UAAU,KAAK,IAAI,IAAI;IAAEA,UAAU,EAAE/E,gBAAgB,CAACgF,UAAU,CAAC9E,KAAK,CAAC6E,UAAU;EAAC,CAAG,GACzF7E,KAAK,CAAC+E,gBAAgB,KAAKrE,SAAS,IACtCV,KAAK,CAAC+E,gBAAgB,KAAK,IAAI,IAAI;IAAEA,gBAAgB,EAAE/E,KAAK,CAAC+E;EAAgB,CAAG,GAC9E/E,KAAK,CAACgF,MAAM,KAAKtE,SAAS,IAAIV,KAAK,CAACgF,MAAM,KAAK,IAAI,IAAI;IAAEA,MAAM,EAAEC,IAAI,CAACC,KAAK,CAAClF,KAAK,CAACgF,MAAM,CAACG,OAAO,EAAE,GAAG,IAAI;EAAC,CAAG;AAErH,CAAC;AAED,IAAMxE,+BAA+B,GAAG,SAAAA,CAACX,KAAc,EAAEC,OAAuB;EAC9E,OAAOD,KAAK,CACToF,MAAM,CAAC,UAACC,CAAM;IAAK,OAAAA,CAAC,IAAI,IAAI;EAAT,CAAS,CAAC,CAC7BC,GAAG,CAAC,UAACC,KAAK;IACT,IAAIA,KAAK,KAAK,IAAI,EAAE;MAClB,OAAO,IAAW;;IAEpB,OAAOjB,2BAA2B,CAACiB,KAAK,EAAEtF,OAAO,CAAC;EACpD,CAAC,CAAC;AACN,CAAC;AAED,IAAM0E,gCAAgC,GAAG,SAAAA,CAAC3E,KAAe,EAAEC,OAAuB;EAChF,OAAOD,KAAK,CACToF,MAAM,CAAC,UAACC,CAAM;IAAK,OAAAA,CAAC,IAAI,IAAI;EAAT,CAAS,CAAC,CAC7BC,GAAG,CAAC,UAACC,KAAK;IACT,IAAIA,KAAK,KAAK,IAAI,EAAE;MAClB,OAAO,IAAW;;IAEpB,OAAOA,KAAK;EACd,CAAC,CAAC;AACN,CAAC;AAED,IAAMC,0BAA0B,GAAG,SAAAA,CAACxF,KAAW,EAAEC,OAAuB;EACtE,OAAAO,QAAA,CAAAA,QAAA,KACMR,KAAK,CAAC4E,MAAM,KAAKlE,SAAS,IAAIV,KAAK,CAAC4E,MAAM,KAAK,IAAI,IAAI;IAAEA,MAAM,EAAE5E,KAAK,CAAC4E;EAAM,CAAG,GAChF5E,KAAK,CAAC6E,UAAU,KAAKnE,SAAS,IAChCV,KAAK,CAAC6E,UAAU,KAAK,IAAI,IAAI;IAAEA,UAAU,EAAE/E,gBAAgB,CAACgF,UAAU,CAAC9E,KAAK,CAAC6E,UAAU;EAAC,CAAG;AAEjG,CAAC;AAED,IAAMjD,8BAA8B,GAAG,SAAAA,CAAC5B,KAAa,EAAEC,OAAuB;EAC5E,OAAOD,KAAK,CACToF,MAAM,CAAC,UAACC,CAAM;IAAK,OAAAA,CAAC,IAAI,IAAI;EAAT,CAAS,CAAC,CAC7BC,GAAG,CAAC,UAACC,KAAK;IACT,IAAIA,KAAK,KAAK,IAAI,EAAE;MAClB,OAAO,IAAW;;IAEpB,OAAOC,0BAA0B,CAACD,KAAK,EAAEtF,OAAO,CAAC;EACnD,CAAC,CAAC;AACN,CAAC;AAED,IAAMwF,0BAA0B,GAAG,SAAAA,CAACzF,KAAW,EAAEC,OAAuB;EACtE,OAAAO,QAAA,CAAAA,QAAA,KACMR,KAAK,CAAC6E,UAAU,KAAKnE,SAAS,IAChCV,KAAK,CAAC6E,UAAU,KAAK,IAAI,IAAI;IAAEA,UAAU,EAAE/E,gBAAgB,CAACgF,UAAU,CAAC9E,KAAK,CAAC6E,UAAU;EAAC,CAAG,GACzF7E,KAAK,CAACc,MAAM,KAAKJ,SAAS,IAAIV,KAAK,CAACc,MAAM,KAAK,IAAI,IAAI;IAAEA,MAAM,EAAEd,KAAK,CAACc;EAAM,CAAG;AAExF,CAAC;AAED,IAAMiB,8BAA8B,GAAG,SAAAA,CAAC/B,KAAa,EAAEC,OAAuB;EAC5E,OAAOD,KAAK,CACToF,MAAM,CAAC,UAACC,CAAM;IAAK,OAAAA,CAAC,IAAI,IAAI;EAAT,CAAS,CAAC,CAC7BC,GAAG,CAAC,UAACC,KAAK;IACT,IAAIA,KAAK,KAAK,IAAI,EAAE;MAClB,OAAO,IAAW;;IAEpB,OAAOE,0BAA0B,CAACF,KAAK,EAAEtF,OAAO,CAAC;EACnD,CAAC,CAAC;AACN,CAAC;AAED,IAAMqC,mBAAmB,GAAG,SAAAA,CAACL,MAAsB;;EAAyB,OAAC;IAC3EyD,cAAc,EAAEzD,MAAM,CAACC,UAAU;IACjCyD,SAAS,GAAA3E,EAAA,GAAEiB,MAAM,CAAC9B,OAAO,CAAC,kBAAkB,CAAC,cAAAa,EAAA,cAAAA,EAAA,GAAIiB,MAAM,CAAC9B,OAAO,CAAC,mBAAmB,CAAC;IACpFyF,iBAAiB,EAAE3D,MAAM,CAAC9B,OAAO,CAAC,YAAY,CAAC;IAC/C0F,IAAI,EAAE5D,MAAM,CAAC9B,OAAO,CAAC,aAAa;GACnC;CAAC;AAEF;AACA,IAAMoC,WAAW,GAAG,SAAAA,CAACuD,UAAkC,EAAE7F,OAAuB;EAA3D,IAAA6F,UAAA;IAAAA,UAAA,OAAsBC,UAAU,EAAE;EAAA;EACrD,IAAID,UAAU,YAAYC,UAAU,EAAE;IACpC,OAAOvD,OAAO,CAACC,OAAO,CAACqD,UAAU,CAAC;;EAEpC,OAAO7F,OAAO,CAAC+F,eAAe,CAACF,UAAU,CAAC,IAAItD,OAAO,CAACC,OAAO,CAAC,IAAIsD,UAAU,EAAE,CAAC;AACjF,CAAC;AAED;AACA,IAAME,iBAAiB,GAAG,SAAAA,CAACH,UAAe,EAAE7F,OAAuB;EACjE,OAAAsC,WAAW,CAACuD,UAAU,EAAE7F,OAAO,CAAC,CAACiG,IAAI,CAAC,UAAC7F,IAAI;IAAK,OAAAJ,OAAO,CAACkG,WAAW,CAAC9F,IAAI,CAAC;EAAzB,CAAyB,CAAC;AAA1E,CAA0E;AAE5E,IAAM+F,yBAAyB,GAAG,SAAAA,CAACC,KAAU;EAC3C,OAAAA,KAAK,KAAK3F,SAAS,IACnB2F,KAAK,KAAK,IAAI,IACdA,KAAK,KAAK,EAAE,KACX,CAACzC,MAAM,CAAC0C,mBAAmB,CAACD,KAAK,CAAC,CAACE,QAAQ,CAAC,QAAQ,CAAC,IAAIF,KAAK,CAACG,MAAM,IAAI,CAAC,CAAC,KAC3E,CAAC5C,MAAM,CAAC0C,mBAAmB,CAACD,KAAK,CAAC,CAACE,QAAQ,CAAC,MAAM,CAAC,IAAIF,KAAK,CAACI,IAAI,IAAI,CAAC,CAAC;AAJxE,CAIwE;AAE1E,IAAM/D,SAAS,GAAG,SAAAA,CAACoD,UAAe,EAAE7F,OAAuB;EACzD,OAAAgG,iBAAiB,CAACH,UAAU,EAAE7F,OAAO,CAAC,CAACiG,IAAI,CAAC,UAACQ,OAAO;IAClD,IAAIA,OAAO,CAACF,MAAM,EAAE;MAClB,OAAOlG,IAAI,CAACqG,KAAK,CAACD,OAAO,CAAC;;IAE5B,OAAO,EAAE;EACX,CAAC,CAAC;AALF,CAKE;AAEJ;;;AAGA,IAAMzD,qBAAqB,GAAG,SAAAA,CAAChB,MAAsB,EAAEoC,IAAS;EAC9D,IAAMuC,OAAO,GAAG,SAAAA,CAACC,MAAW,EAAEC,GAAW;IAAK,OAAAlD,MAAM,CAACmD,IAAI,CAACF,MAAM,CAAC,CAACG,IAAI,CAAC,UAACC,CAAC;MAAK,OAAAA,CAAC,CAACC,WAAW,EAAE,KAAKJ,GAAG,CAACI,WAAW,EAAE;IAArC,CAAqC,CAAC;EAAtE,CAAsE;EAEpH,IAAMC,iBAAiB,GAAG,SAAAA,CAACC,QAAgB;IACzC,IAAIC,UAAU,GAAGD,QAAQ;IACzB,IAAIC,UAAU,CAACC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;MAChCD,UAAU,GAAGA,UAAU,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;;IAEvC,IAAIF,UAAU,CAACC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;MAChCD,UAAU,GAAGA,UAAU,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;;IAEvC,OAAOF,UAAU;EACnB,CAAC;EAED,IAAMG,SAAS,GAAGZ,OAAO,CAAC3E,MAAM,CAAC9B,OAAO,EAAE,kBAAkB,CAAC;EAC7D,IAAIqH,SAAS,KAAK9G,SAAS,EAAE;IAC3B,OAAOyG,iBAAiB,CAAClF,MAAM,CAAC9B,OAAO,CAACqH,SAAS,CAAC,CAAC;;EAGrD,IAAInD,IAAI,CAACf,IAAI,KAAK5C,SAAS,EAAE;IAC3B,OAAOyG,iBAAiB,CAAC9C,IAAI,CAACf,IAAI,CAAC;;EAGrC,IAAIe,IAAI,CAAC,QAAQ,CAAC,KAAK3D,SAAS,EAAE;IAChC,OAAOyG,iBAAiB,CAAC9C,IAAI,CAAC,QAAQ,CAAC,CAAC;;EAG1C,OAAO,EAAE;AACX,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}