{"ast":null,"code":"/**\n * Given an input string, splits based on the delimiter after a given\n * number of delimiters has been encountered.\n *\n * @param value The input string to split.\n * @param delimiter The delimiter to split on.\n * @param numDelimiters The number of delimiters to have encountered to split.\n */\nexport function splitEvery(value, delimiter, numDelimiters) {\n  // Fail if we don't have a clear number to split on.\n  if (numDelimiters <= 0 || !Number.isInteger(numDelimiters)) {\n    throw new Error(\"Invalid number of delimiters (\" + numDelimiters + \") for splitEvery.\");\n  }\n  var segments = value.split(delimiter);\n  // Short circuit extra logic for the simple case.\n  if (numDelimiters === 1) {\n    return segments;\n  }\n  var compoundSegments = [];\n  var currentSegment = \"\";\n  for (var i = 0; i < segments.length; i++) {\n    if (currentSegment === \"\") {\n      // Start a new segment.\n      currentSegment = segments[i];\n    } else {\n      // Compound the current segment with the delimiter.\n      currentSegment += delimiter + segments[i];\n    }\n    if ((i + 1) % numDelimiters === 0) {\n      // We encountered the right number of delimiters, so add the entry.\n      compoundSegments.push(currentSegment);\n      // And reset the current segment.\n      currentSegment = \"\";\n    }\n  }\n  // Handle any leftover segment portion.\n  if (currentSegment !== \"\") {\n    compoundSegments.push(currentSegment);\n  }\n  return compoundSegments;\n}","map":{"version":3,"names":["splitEvery","value","delimiter","numDelimiters","Number","isInteger","Error","segments","split","compoundSegments","currentSegment","i","length","push"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-sdk/smithy-client/src/split-every.ts"],"sourcesContent":["/**\n * Given an input string, splits based on the delimiter after a given\n * number of delimiters has been encountered.\n *\n * @param value The input string to split.\n * @param delimiter The delimiter to split on.\n * @param numDelimiters The number of delimiters to have encountered to split.\n */\nexport function splitEvery(value: string, delimiter: string, numDelimiters: number): Array<string> {\n  // Fail if we don't have a clear number to split on.\n  if (numDelimiters <= 0 || !Number.isInteger(numDelimiters)) {\n    throw new Error(\"Invalid number of delimiters (\" + numDelimiters + \") for splitEvery.\");\n  }\n\n  const segments = value.split(delimiter);\n  // Short circuit extra logic for the simple case.\n  if (numDelimiters === 1) {\n    return segments;\n  }\n\n  const compoundSegments: Array<string> = [];\n  let currentSegment = \"\";\n  for (let i = 0; i < segments.length; i++) {\n    if (currentSegment === \"\") {\n      // Start a new segment.\n      currentSegment = segments[i];\n    } else {\n      // Compound the current segment with the delimiter.\n      currentSegment += delimiter + segments[i];\n    }\n\n    if ((i + 1) % numDelimiters === 0) {\n      // We encountered the right number of delimiters, so add the entry.\n      compoundSegments.push(currentSegment);\n      // And reset the current segment.\n      currentSegment = \"\";\n    }\n  }\n\n  // Handle any leftover segment portion.\n  if (currentSegment !== \"\") {\n    compoundSegments.push(currentSegment);\n  }\n\n  return compoundSegments;\n}\n"],"mappings":"AAAA;;;;;;;;AAQA,OAAM,SAAUA,UAAUA,CAACC,KAAa,EAAEC,SAAiB,EAAEC,aAAqB;EAChF;EACA,IAAIA,aAAa,IAAI,CAAC,IAAI,CAACC,MAAM,CAACC,SAAS,CAACF,aAAa,CAAC,EAAE;IAC1D,MAAM,IAAIG,KAAK,CAAC,gCAAgC,GAAGH,aAAa,GAAG,mBAAmB,CAAC;;EAGzF,IAAMI,QAAQ,GAAGN,KAAK,CAACO,KAAK,CAACN,SAAS,CAAC;EACvC;EACA,IAAIC,aAAa,KAAK,CAAC,EAAE;IACvB,OAAOI,QAAQ;;EAGjB,IAAME,gBAAgB,GAAkB,EAAE;EAC1C,IAAIC,cAAc,GAAG,EAAE;EACvB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,QAAQ,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;IACxC,IAAID,cAAc,KAAK,EAAE,EAAE;MACzB;MACAA,cAAc,GAAGH,QAAQ,CAACI,CAAC,CAAC;KAC7B,MAAM;MACL;MACAD,cAAc,IAAIR,SAAS,GAAGK,QAAQ,CAACI,CAAC,CAAC;;IAG3C,IAAI,CAACA,CAAC,GAAG,CAAC,IAAIR,aAAa,KAAK,CAAC,EAAE;MACjC;MACAM,gBAAgB,CAACI,IAAI,CAACH,cAAc,CAAC;MACrC;MACAA,cAAc,GAAG,EAAE;;;EAIvB;EACA,IAAIA,cAAc,KAAK,EAAE,EAAE;IACzBD,gBAAgB,CAACI,IAAI,CAACH,cAAc,CAAC;;EAGvC,OAAOD,gBAAgB;AACzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}