{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { KEY_TYPE_IDENTIFIER, SIGNATURE_IDENTIFIER } from '../constants';\nimport { getHashedData } from './dataHashHelpers';\n/**\n * Returns a signing key to be used for signing requests.\n *\n * @param secretAccessKey AWS secret access key from credentials.\n * @param date Current date in the format 'YYYYMMDD'.\n * @param region AWS region in which the service resides.\n * @param service Service to which the signed request is being sent.\n *\n * @returns `Uint8Array` calculated from its composite parts.\n *\n * @internal\n */\nexport var getSigningKey = function (secretAccessKey, date, region, service) {\n  var key = \"\".concat(SIGNATURE_IDENTIFIER).concat(secretAccessKey);\n  var dateKey = getHashedData(key, date);\n  var regionKey = getHashedData(dateKey, region);\n  var serviceKey = getHashedData(regionKey, service);\n  var signingKey = getHashedData(serviceKey, KEY_TYPE_IDENTIFIER);\n  return signingKey;\n};","map":{"version":3,"names":["KEY_TYPE_IDENTIFIER","SIGNATURE_IDENTIFIER","getHashedData","getSigningKey","secretAccessKey","date","region","service","key","concat","dateKey","regionKey","serviceKey","signingKey"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/signer/signatureV4/utils/getSigningKey.js"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { KEY_TYPE_IDENTIFIER, SIGNATURE_IDENTIFIER } from '../constants';\nimport { getHashedData } from './dataHashHelpers';\n/**\n * Returns a signing key to be used for signing requests.\n *\n * @param secretAccessKey AWS secret access key from credentials.\n * @param date Current date in the format 'YYYYMMDD'.\n * @param region AWS region in which the service resides.\n * @param service Service to which the signed request is being sent.\n *\n * @returns `Uint8Array` calculated from its composite parts.\n *\n * @internal\n */\nexport var getSigningKey = function (secretAccessKey, date, region, service) {\n    var key = \"\".concat(SIGNATURE_IDENTIFIER).concat(secretAccessKey);\n    var dateKey = getHashedData(key, date);\n    var regionKey = getHashedData(dateKey, region);\n    var serviceKey = getHashedData(regionKey, service);\n    var signingKey = getHashedData(serviceKey, KEY_TYPE_IDENTIFIER);\n    return signingKey;\n};\n"],"mappings":"AAAA;AACA;AACA,SAASA,mBAAmB,EAAEC,oBAAoB,QAAQ,cAAc;AACxE,SAASC,aAAa,QAAQ,mBAAmB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,aAAa,GAAG,SAAAA,CAAUC,eAAe,EAAEC,IAAI,EAAEC,MAAM,EAAEC,OAAO,EAAE;EACzE,IAAIC,GAAG,GAAG,EAAE,CAACC,MAAM,CAACR,oBAAoB,CAAC,CAACQ,MAAM,CAACL,eAAe,CAAC;EACjE,IAAIM,OAAO,GAAGR,aAAa,CAACM,GAAG,EAAEH,IAAI,CAAC;EACtC,IAAIM,SAAS,GAAGT,aAAa,CAACQ,OAAO,EAAEJ,MAAM,CAAC;EAC9C,IAAIM,UAAU,GAAGV,aAAa,CAACS,SAAS,EAAEJ,OAAO,CAAC;EAClD,IAAIM,UAAU,GAAGX,aAAa,CAACU,UAAU,EAAEZ,mBAAmB,CAAC;EAC/D,OAAOa,UAAU;AACrB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}