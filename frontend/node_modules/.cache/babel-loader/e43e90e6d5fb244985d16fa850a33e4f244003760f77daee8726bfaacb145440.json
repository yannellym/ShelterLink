{"ast":null,"code":"import { __values } from \"tslib\";\nimport { HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { buildQueryString } from \"@aws-sdk/querystring-builder\";\nimport { requestTimeout } from \"./request-timeout\";\nvar FetchHttpHandler = /** @class */function () {\n  function FetchHttpHandler(_a) {\n    var _b = _a === void 0 ? {} : _a,\n      requestTimeout = _b.requestTimeout;\n    this.requestTimeout = requestTimeout;\n  }\n  FetchHttpHandler.prototype.destroy = function () {\n    // Do nothing. TLS and HTTP/2 connection pooling is handled by the browser.\n  };\n  FetchHttpHandler.prototype.handle = function (request, _a) {\n    var _b = _a === void 0 ? {} : _a,\n      abortSignal = _b.abortSignal;\n    var requestTimeoutInMs = this.requestTimeout;\n    // if the request was already aborted, prevent doing extra work\n    if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {\n      var abortError = new Error(\"Request aborted\");\n      abortError.name = \"AbortError\";\n      return Promise.reject(abortError);\n    }\n    var path = request.path;\n    if (request.query) {\n      var queryString = buildQueryString(request.query);\n      if (queryString) {\n        path += \"?\" + queryString;\n      }\n    }\n    var port = request.port,\n      method = request.method;\n    var url = request.protocol + \"//\" + request.hostname + (port ? \":\" + port : \"\") + path;\n    // Request constructor doesn't allow GET/HEAD request with body\n    // ref: https://github.com/whatwg/fetch/issues/551\n    var body = method === \"GET\" || method === \"HEAD\" ? undefined : request.body;\n    var requestOptions = {\n      body: body,\n      headers: new Headers(request.headers),\n      method: method\n    };\n    // some browsers support abort signal\n    if (typeof AbortController !== \"undefined\") {\n      requestOptions[\"signal\"] = abortSignal;\n    }\n    var fetchRequest = new Request(url, requestOptions);\n    var raceOfPromises = [fetch(fetchRequest).then(function (response) {\n      var e_1, _a;\n      var fetchHeaders = response.headers;\n      var transformedHeaders = {};\n      try {\n        for (var _b = __values(fetchHeaders.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var pair = _c.value;\n          transformedHeaders[pair[0]] = pair[1];\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      var hasReadableStream = response.body !== undefined;\n      // Return the response with buffered body\n      if (!hasReadableStream) {\n        return response.blob().then(function (body) {\n          return {\n            response: new HttpResponse({\n              headers: transformedHeaders,\n              statusCode: response.status,\n              body: body\n            })\n          };\n        });\n      }\n      // Return the response with streaming body\n      return {\n        response: new HttpResponse({\n          headers: transformedHeaders,\n          statusCode: response.status,\n          body: response.body\n        })\n      };\n    }), requestTimeout(requestTimeoutInMs)];\n    if (abortSignal) {\n      raceOfPromises.push(new Promise(function (resolve, reject) {\n        abortSignal.onabort = function () {\n          var abortError = new Error(\"Request aborted\");\n          abortError.name = \"AbortError\";\n          reject(abortError);\n        };\n      }));\n    }\n    return Promise.race(raceOfPromises);\n  };\n  return FetchHttpHandler;\n}();\nexport { FetchHttpHandler };","map":{"version":3,"names":["HttpResponse","buildQueryString","requestTimeout","FetchHttpHandler","_a","_b","prototype","destroy","handle","request","abortSignal","requestTimeoutInMs","aborted","abortError","Error","name","Promise","reject","path","query","queryString","port","method","url","protocol","hostname","body","undefined","requestOptions","headers","Headers","AbortController","fetchRequest","Request","raceOfPromises","fetch","then","response","fetchHeaders","transformedHeaders","__values","entries","_c","next","done","pair","value","hasReadableStream","blob","statusCode","status","push","resolve","onabort","race"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-sdk/fetch-http-handler/src/fetch-http-handler.ts"],"sourcesContent":["import { HttpHandler, HttpRequest, HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { buildQueryString } from \"@aws-sdk/querystring-builder\";\nimport { HeaderBag, HttpHandlerOptions } from \"@aws-sdk/types\";\n\nimport { requestTimeout } from \"./request-timeout\";\n\ndeclare let AbortController: any;\n\n/**\n * Represents the http options that can be passed to a browser http client.\n */\nexport interface FetchHttpHandlerOptions {\n  /**\n   * The number of milliseconds a request can take before being automatically\n   * terminated.\n   */\n  requestTimeout?: number;\n}\n\nexport class FetchHttpHandler implements HttpHandler {\n  private readonly requestTimeout?: number;\n\n  constructor({ requestTimeout }: FetchHttpHandlerOptions = {}) {\n    this.requestTimeout = requestTimeout;\n  }\n\n  destroy(): void {\n    // Do nothing. TLS and HTTP/2 connection pooling is handled by the browser.\n  }\n\n  handle(request: HttpRequest, { abortSignal }: HttpHandlerOptions = {}): Promise<{ response: HttpResponse }> {\n    const requestTimeoutInMs = this.requestTimeout;\n\n    // if the request was already aborted, prevent doing extra work\n    if (abortSignal?.aborted) {\n      const abortError = new Error(\"Request aborted\");\n      abortError.name = \"AbortError\";\n      return Promise.reject(abortError);\n    }\n\n    let path = request.path;\n    if (request.query) {\n      const queryString = buildQueryString(request.query);\n      if (queryString) {\n        path += `?${queryString}`;\n      }\n    }\n\n    const { port, method } = request;\n    const url = `${request.protocol}//${request.hostname}${port ? `:${port}` : \"\"}${path}`;\n    // Request constructor doesn't allow GET/HEAD request with body\n    // ref: https://github.com/whatwg/fetch/issues/551\n    const body = method === \"GET\" || method === \"HEAD\" ? undefined : request.body;\n    const requestOptions: RequestInit = {\n      body,\n      headers: new Headers(request.headers),\n      method: method,\n    };\n\n    // some browsers support abort signal\n    if (typeof AbortController !== \"undefined\") {\n      (requestOptions as any)[\"signal\"] = abortSignal;\n    }\n\n    const fetchRequest = new Request(url, requestOptions);\n    const raceOfPromises = [\n      fetch(fetchRequest).then((response) => {\n        const fetchHeaders: any = response.headers;\n        const transformedHeaders: HeaderBag = {};\n\n        for (const pair of <Array<string[]>>fetchHeaders.entries()) {\n          transformedHeaders[pair[0]] = pair[1];\n        }\n\n        const hasReadableStream = response.body !== undefined;\n\n        // Return the response with buffered body\n        if (!hasReadableStream) {\n          return response.blob().then((body) => ({\n            response: new HttpResponse({\n              headers: transformedHeaders,\n              statusCode: response.status,\n              body,\n            }),\n          }));\n        }\n        // Return the response with streaming body\n        return {\n          response: new HttpResponse({\n            headers: transformedHeaders,\n            statusCode: response.status,\n            body: response.body,\n          }),\n        };\n      }),\n      requestTimeout(requestTimeoutInMs),\n    ];\n    if (abortSignal) {\n      raceOfPromises.push(\n        new Promise<never>((resolve, reject) => {\n          abortSignal.onabort = () => {\n            const abortError = new Error(\"Request aborted\");\n            abortError.name = \"AbortError\";\n            reject(abortError);\n          };\n        })\n      );\n    }\n    return Promise.race(raceOfPromises);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}