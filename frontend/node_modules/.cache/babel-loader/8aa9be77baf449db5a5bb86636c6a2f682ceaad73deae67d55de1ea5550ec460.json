{"ast":null,"code":"var _jsxFileName = \"/Users/yannellym/Desktop/iwantapet/frontend/src/components/AllPetsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport '../styles/AllPetsPage.css';\nimport PetCard from './PetCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n}\nfunction AllPetsPage() {\n  _s();\n  const {\n    category\n  } = useParams();\n  const [loading, setLoading] = useState(true);\n  const [cache, setCache] = useState([]);\n  const petsPerPage = 100;\n  const otherAnimalTypes = [\"horse\", \"bird\", \"barnyard\"];\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 12;\n  const [totalPages, setTotalPages] = useState(0);\n  const [nextPageUrl, setNextPageUrl] = useState(null); // State variable to store the URL of the next page\n\n  const fetchAnimalsByCategory = async category => {\n    let endpoint;\n    if (category === \"dog\" || category === \"cat\") {\n      // First API call for \"dog\" or \"cat\"\n      endpoint = `http://localhost:3002/api/petfinder?type=${category}&limit=${petsPerPage}`;\n    } else if (category === \"other\") {\n      // Second API call for \"other\" category\n      // Fetch animals for each type in the \"other\" category\n      const animalPromises = otherAnimalTypes.map(animalType => {\n        return fetch(`http://localhost:3002/api/petfinder?type=${animalType}&limit=${petsPerPage}`).then(response => response.json());\n      });\n      const animalData = await Promise.all(animalPromises);\n\n      // Merge the arrays of animals from different types\n      const mergedAnimals = animalData.flatMap(data => data.animals);\n      endpoint = mergedAnimals;\n    }\n    try {\n      if (endpoint) {\n        if (Array.isArray(endpoint)) {\n          // If endpoint is an array, we have already fetched animals for the \"other\" category\n          return endpoint.filter(animal => animal && animal.photos.length > 0);\n        } else {\n          // Fetch animals for \"dog\" or \"cat\"\n          const response = await fetch(endpoint);\n          const data = await response.json();\n          if (data && data.animals) {\n            return data.animals.filter(animal => animal.photos.length > 0);\n          }\n        }\n      }\n      // After loading data, set the total pages based on the total number of pets\n      setTotalPages(Math.ceil(cache.length / itemsPerPage));\n    } catch (error) {\n      console.error('Error fetching data:', error.message);\n    }\n    return [];\n  };\n  useEffect(() => {\n    async function fetchData() {\n      const animals = await fetchAnimalsByCategory(category);\n\n      // Shuffle the animals array\n      shuffleArray(animals);\n      setCache(animals);\n      setLoading(false);\n    }\n    fetchData();\n  }, [category]);\n  // Calculate the range of pets to display based on the current page\n  const indexOfLastPet = currentPage * itemsPerPage;\n  const indexOfFirstPet = indexOfLastPet - itemsPerPage;\n  const currentPets = cache.slice(indexOfFirstPet, indexOfLastPet);\n\n  // Function to handle page change\n  const handlePageChange = page => {\n    setCurrentPage(page);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"all-pets-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: `All ${category.charAt(0).toUpperCase() + category.slice(1)}s`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pet-list\",\n      children: cache.map(pet => /*#__PURE__*/_jsxDEV(PetCard, {\n        pet: pet\n      }, pet.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pagination\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handlePageChange(currentPage - 1),\n        disabled: currentPage === 1,\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handlePageChange(currentPage + 1),\n        disabled: currentPage >= totalPages,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}\n_s(AllPetsPage, \"rXrXd2CCwz1a33vNBPKTAtt4P58=\", false, function () {\n  return [useParams];\n});\n_c = AllPetsPage;\nexport default AllPetsPage;\nvar _c;\n$RefreshReg$(_c, \"AllPetsPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","PetCard","jsxDEV","_jsxDEV","shuffleArray","array","i","length","j","Math","floor","random","AllPetsPage","_s","category","loading","setLoading","cache","setCache","petsPerPage","otherAnimalTypes","currentPage","setCurrentPage","itemsPerPage","totalPages","setTotalPages","nextPageUrl","setNextPageUrl","fetchAnimalsByCategory","endpoint","animalPromises","map","animalType","fetch","then","response","json","animalData","Promise","all","mergedAnimals","flatMap","data","animals","Array","isArray","filter","animal","photos","ceil","error","console","message","fetchData","indexOfLastPet","indexOfFirstPet","currentPets","slice","handlePageChange","page","className","children","charAt","toUpperCase","fileName","_jsxFileName","lineNumber","columnNumber","pet","id","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/yannellym/Desktop/iwantapet/frontend/src/components/AllPetsPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport '../styles/AllPetsPage.css';\nimport PetCard from './PetCard';\n\nfunction shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n}\n\nfunction AllPetsPage() {\n  const { category } = useParams();\n  const [loading, setLoading] = useState(true);\n  const [cache, setCache] = useState([]);\n  const petsPerPage = 100;\n  const otherAnimalTypes = [\"horse\", \"bird\", \"barnyard\"];\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 12;\n  const [totalPages, setTotalPages] = useState(0);\n  const [nextPageUrl, setNextPageUrl] = useState(null); // State variable to store the URL of the next page\n\n\n  const fetchAnimalsByCategory = async (category) => {\n    let endpoint;\n\n    if (category === \"dog\" || category === \"cat\") {\n      // First API call for \"dog\" or \"cat\"\n      endpoint = `http://localhost:3002/api/petfinder?type=${category}&limit=${petsPerPage}`;\n    } else if (category === \"other\") {\n      // Second API call for \"other\" category\n      // Fetch animals for each type in the \"other\" category\n      const animalPromises = otherAnimalTypes.map(animalType => {\n        return fetch(`http://localhost:3002/api/petfinder?type=${animalType}&limit=${petsPerPage}`)\n          .then(response => response.json());\n      });\n\n      const animalData = await Promise.all(animalPromises);\n\n      // Merge the arrays of animals from different types\n      const mergedAnimals = animalData.flatMap(data => data.animals);\n\n      endpoint = mergedAnimals;\n    }\n\n    try {\n      if (endpoint) {\n        if (Array.isArray(endpoint)) {\n          // If endpoint is an array, we have already fetched animals for the \"other\" category\n          return endpoint.filter(animal => animal && animal.photos.length > 0);\n        } else {\n          // Fetch animals for \"dog\" or \"cat\"\n          const response = await fetch(endpoint);\n          const data = await response.json();\n          if (data && data.animals) {\n            return data.animals.filter((animal) => animal.photos.length > 0);\n          }\n        }\n      }\n      // After loading data, set the total pages based on the total number of pets\n      setTotalPages(Math.ceil(cache.length / itemsPerPage));\n    } catch (error) {\n      console.error('Error fetching data:', error.message);\n    }\n    \n    return [];\n  };\n\n  useEffect(() => {\n    async function fetchData() {\n      const animals = await fetchAnimalsByCategory(category);\n\n      // Shuffle the animals array\n      shuffleArray(animals);\n      \n      setCache(animals);\n      setLoading(false);\n    }\n\n    fetchData();\n  }, [category]);\n// Calculate the range of pets to display based on the current page\n  const indexOfLastPet = currentPage * itemsPerPage;\n  const indexOfFirstPet = indexOfLastPet - itemsPerPage;\n  const currentPets = cache.slice(indexOfFirstPet, indexOfLastPet);\n\n  // Function to handle page change\n  const handlePageChange = (page) => {\n    setCurrentPage(page);\n  };\n  return (\n    <div className=\"all-pets-page\">\n      <h2>{`All ${category.charAt(0).toUpperCase() + category.slice(1)}s`}</h2>\n      {loading ? (\n        <p>Loading...</p>\n      ) : (\n        <div className=\"pet-list\">\n          {cache.map((pet) => (\n            <PetCard key={pet.id} pet={pet} />\n          ))}\n        </div>\n      )}\n        <div className=\"pagination\">\n            <button\n              onClick={() => handlePageChange(currentPage - 1)}\n              disabled={currentPage === 1}\n            >\n              Previous\n            </button>\n            <button\n              onClick={() => handlePageChange(currentPage + 1)}\n              disabled={currentPage >= totalPages}\n            >\n              Next\n            </button>\n          </div>\n    </div>\n  );\n}\n\nexport default AllPetsPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}