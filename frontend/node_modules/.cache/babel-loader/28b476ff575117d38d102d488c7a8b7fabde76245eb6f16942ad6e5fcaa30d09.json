{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { I18n as I18nClass } from './I18n';\nimport { ConsoleLogger as Logger } from '../Logger';\nimport { Amplify } from '../Amplify';\nvar logger = new Logger('I18n');\nvar _config = null;\nvar _i18n = null;\n/**\n * Export I18n APIs\n */\nvar I18n = /** @class */function () {\n  function I18n() {}\n  /**\n   * @static\n   * @method\n   * Configure I18n part\n   * @param {Object} config - Configuration of the I18n\n   */\n  I18n.configure = function (config) {\n    logger.debug('configure I18n');\n    if (!config) {\n      return _config;\n    }\n    _config = Object.assign({}, _config, config.I18n || config);\n    I18n.createInstance();\n    return _config;\n  };\n  I18n.getModuleName = function () {\n    return 'I18n';\n  };\n  /**\n   * @static\n   * @method\n   * Create an instance of I18n for the library\n   */\n  I18n.createInstance = function () {\n    logger.debug('create I18n instance');\n    if (_i18n) {\n      return;\n    }\n    _i18n = new I18nClass(_config);\n  };\n  /**\n   * @static @method\n   * Explicitly setting language\n   * @param {String} lang\n   */\n  I18n.setLanguage = function (lang) {\n    I18n.checkConfig();\n    return _i18n.setLanguage(lang);\n  };\n  /**\n   * @static @method\n   * Get value\n   * @param {String} key\n   * @param {String} defVal - Default value\n   */\n  I18n.get = function (key, defVal) {\n    if (!I18n.checkConfig()) {\n      return typeof defVal === 'undefined' ? key : defVal;\n    }\n    return _i18n.get(key, defVal);\n  };\n  /**\n   * @static\n   * @method\n   * Add vocabularies for one language\n   * @param {String} langurage - Language of the dictionary\n   * @param {Object} vocabularies - Object that has key-value as dictionary entry\n   */\n  I18n.putVocabulariesForLanguage = function (language, vocabularies) {\n    I18n.checkConfig();\n    return _i18n.putVocabulariesForLanguage(language, vocabularies);\n  };\n  /**\n   * @static\n   * @method\n   * Add vocabularies for one language\n   * @param {Object} vocabularies - Object that has language as key,\n   *                                vocabularies of each language as value\n   */\n  I18n.putVocabularies = function (vocabularies) {\n    I18n.checkConfig();\n    return _i18n.putVocabularies(vocabularies);\n  };\n  I18n.checkConfig = function () {\n    if (!_i18n) {\n      _i18n = new I18nClass(_config);\n    }\n    return true;\n  };\n  return I18n;\n}();\nexport { I18n };\nAmplify.register(I18n);","map":{"version":3,"names":["I18n","I18nClass","ConsoleLogger","Logger","Amplify","logger","_config","_i18n","configure","config","debug","Object","assign","createInstance","getModuleName","setLanguage","lang","checkConfig","get","key","defVal","putVocabulariesForLanguage","language","vocabularies","putVocabularies","register"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-amplify/core/lib-esm/I18n/index.js"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { I18n as I18nClass } from './I18n';\nimport { ConsoleLogger as Logger } from '../Logger';\nimport { Amplify } from '../Amplify';\nvar logger = new Logger('I18n');\nvar _config = null;\nvar _i18n = null;\n/**\n * Export I18n APIs\n */\nvar I18n = /** @class */ (function () {\n    function I18n() {\n    }\n    /**\n     * @static\n     * @method\n     * Configure I18n part\n     * @param {Object} config - Configuration of the I18n\n     */\n    I18n.configure = function (config) {\n        logger.debug('configure I18n');\n        if (!config) {\n            return _config;\n        }\n        _config = Object.assign({}, _config, config.I18n || config);\n        I18n.createInstance();\n        return _config;\n    };\n    I18n.getModuleName = function () {\n        return 'I18n';\n    };\n    /**\n     * @static\n     * @method\n     * Create an instance of I18n for the library\n     */\n    I18n.createInstance = function () {\n        logger.debug('create I18n instance');\n        if (_i18n) {\n            return;\n        }\n        _i18n = new I18nClass(_config);\n    };\n    /**\n     * @static @method\n     * Explicitly setting language\n     * @param {String} lang\n     */\n    I18n.setLanguage = function (lang) {\n        I18n.checkConfig();\n        return _i18n.setLanguage(lang);\n    };\n    /**\n     * @static @method\n     * Get value\n     * @param {String} key\n     * @param {String} defVal - Default value\n     */\n    I18n.get = function (key, defVal) {\n        if (!I18n.checkConfig()) {\n            return typeof defVal === 'undefined' ? key : defVal;\n        }\n        return _i18n.get(key, defVal);\n    };\n    /**\n     * @static\n     * @method\n     * Add vocabularies for one language\n     * @param {String} langurage - Language of the dictionary\n     * @param {Object} vocabularies - Object that has key-value as dictionary entry\n     */\n    I18n.putVocabulariesForLanguage = function (language, vocabularies) {\n        I18n.checkConfig();\n        return _i18n.putVocabulariesForLanguage(language, vocabularies);\n    };\n    /**\n     * @static\n     * @method\n     * Add vocabularies for one language\n     * @param {Object} vocabularies - Object that has language as key,\n     *                                vocabularies of each language as value\n     */\n    I18n.putVocabularies = function (vocabularies) {\n        I18n.checkConfig();\n        return _i18n.putVocabularies(vocabularies);\n    };\n    I18n.checkConfig = function () {\n        if (!_i18n) {\n            _i18n = new I18nClass(_config);\n        }\n        return true;\n    };\n    return I18n;\n}());\nexport { I18n };\nAmplify.register(I18n);\n"],"mappings":"AAAA;AACA;AACA,SAASA,IAAI,IAAIC,SAAS,QAAQ,QAAQ;AAC1C,SAASC,aAAa,IAAIC,MAAM,QAAQ,WAAW;AACnD,SAASC,OAAO,QAAQ,YAAY;AACpC,IAAIC,MAAM,GAAG,IAAIF,MAAM,CAAC,MAAM,CAAC;AAC/B,IAAIG,OAAO,GAAG,IAAI;AAClB,IAAIC,KAAK,GAAG,IAAI;AAChB;AACA;AACA;AACA,IAAIP,IAAI,GAAG,aAAe,YAAY;EAClC,SAASA,IAAIA,CAAA,EAAG,CAChB;EACA;AACJ;AACA;AACA;AACA;AACA;EACIA,IAAI,CAACQ,SAAS,GAAG,UAAUC,MAAM,EAAE;IAC/BJ,MAAM,CAACK,KAAK,CAAC,gBAAgB,CAAC;IAC9B,IAAI,CAACD,MAAM,EAAE;MACT,OAAOH,OAAO;IAClB;IACAA,OAAO,GAAGK,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEN,OAAO,EAAEG,MAAM,CAACT,IAAI,IAAIS,MAAM,CAAC;IAC3DT,IAAI,CAACa,cAAc,CAAC,CAAC;IACrB,OAAOP,OAAO;EAClB,CAAC;EACDN,IAAI,CAACc,aAAa,GAAG,YAAY;IAC7B,OAAO,MAAM;EACjB,CAAC;EACD;AACJ;AACA;AACA;AACA;EACId,IAAI,CAACa,cAAc,GAAG,YAAY;IAC9BR,MAAM,CAACK,KAAK,CAAC,sBAAsB,CAAC;IACpC,IAAIH,KAAK,EAAE;MACP;IACJ;IACAA,KAAK,GAAG,IAAIN,SAAS,CAACK,OAAO,CAAC;EAClC,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIN,IAAI,CAACe,WAAW,GAAG,UAAUC,IAAI,EAAE;IAC/BhB,IAAI,CAACiB,WAAW,CAAC,CAAC;IAClB,OAAOV,KAAK,CAACQ,WAAW,CAACC,IAAI,CAAC;EAClC,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIhB,IAAI,CAACkB,GAAG,GAAG,UAAUC,GAAG,EAAEC,MAAM,EAAE;IAC9B,IAAI,CAACpB,IAAI,CAACiB,WAAW,CAAC,CAAC,EAAE;MACrB,OAAO,OAAOG,MAAM,KAAK,WAAW,GAAGD,GAAG,GAAGC,MAAM;IACvD;IACA,OAAOb,KAAK,CAACW,GAAG,CAACC,GAAG,EAAEC,MAAM,CAAC;EACjC,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACIpB,IAAI,CAACqB,0BAA0B,GAAG,UAAUC,QAAQ,EAAEC,YAAY,EAAE;IAChEvB,IAAI,CAACiB,WAAW,CAAC,CAAC;IAClB,OAAOV,KAAK,CAACc,0BAA0B,CAACC,QAAQ,EAAEC,YAAY,CAAC;EACnE,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACIvB,IAAI,CAACwB,eAAe,GAAG,UAAUD,YAAY,EAAE;IAC3CvB,IAAI,CAACiB,WAAW,CAAC,CAAC;IAClB,OAAOV,KAAK,CAACiB,eAAe,CAACD,YAAY,CAAC;EAC9C,CAAC;EACDvB,IAAI,CAACiB,WAAW,GAAG,YAAY;IAC3B,IAAI,CAACV,KAAK,EAAE;MACRA,KAAK,GAAG,IAAIN,SAAS,CAACK,OAAO,CAAC;IAClC;IACA,OAAO,IAAI;EACf,CAAC;EACD,OAAON,IAAI;AACf,CAAC,CAAC,CAAE;AACJ,SAASA,IAAI;AACbI,OAAO,CAACqB,QAAQ,CAACzB,IAAI,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}