{"ast":null,"code":"import { Crc32 } from \"@aws-crypto/crc32\";\n// All prelude components are unsigned, 32-bit integers\nvar PRELUDE_MEMBER_LENGTH = 4;\n// The prelude consists of two components\nvar PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2;\n// Checksums are always CRC32 hashes.\nvar CHECKSUM_LENGTH = 4;\n// Messages must include a full prelude, a prelude checksum, and a message checksum\nvar MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;\n/**\n * @internal\n */\nexport function splitMessage(_a) {\n  var byteLength = _a.byteLength,\n    byteOffset = _a.byteOffset,\n    buffer = _a.buffer;\n  if (byteLength < MINIMUM_MESSAGE_LENGTH) {\n    throw new Error(\"Provided message too short to accommodate event stream message overhead\");\n  }\n  var view = new DataView(buffer, byteOffset, byteLength);\n  var messageLength = view.getUint32(0, false);\n  if (byteLength !== messageLength) {\n    throw new Error(\"Reported message length does not match received message length\");\n  }\n  var headerLength = view.getUint32(PRELUDE_MEMBER_LENGTH, false);\n  var expectedPreludeChecksum = view.getUint32(PRELUDE_LENGTH, false);\n  var expectedMessageChecksum = view.getUint32(byteLength - CHECKSUM_LENGTH, false);\n  var checksummer = new Crc32().update(new Uint8Array(buffer, byteOffset, PRELUDE_LENGTH));\n  if (expectedPreludeChecksum !== checksummer.digest()) {\n    throw new Error(\"The prelude checksum specified in the message (\" + expectedPreludeChecksum + \") does not match the calculated CRC32 checksum (\" + checksummer.digest() + \")\");\n  }\n  checksummer.update(new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH, byteLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH)));\n  if (expectedMessageChecksum !== checksummer.digest()) {\n    throw new Error(\"The message checksum (\" + checksummer.digest() + \") did not match the expected value of \" + expectedMessageChecksum);\n  }\n  return {\n    headers: new DataView(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH, headerLength),\n    body: new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH + headerLength, messageLength - headerLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH + CHECKSUM_LENGTH))\n  };\n}","map":{"version":3,"names":["Crc32","PRELUDE_MEMBER_LENGTH","PRELUDE_LENGTH","CHECKSUM_LENGTH","MINIMUM_MESSAGE_LENGTH","splitMessage","_a","byteLength","byteOffset","buffer","Error","view","DataView","messageLength","getUint32","headerLength","expectedPreludeChecksum","expectedMessageChecksum","checksummer","update","Uint8Array","digest","headers","body"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-sdk/eventstream-marshaller/src/splitMessage.ts"],"sourcesContent":["import { Crc32 } from \"@aws-crypto/crc32\";\n\n// All prelude components are unsigned, 32-bit integers\nconst PRELUDE_MEMBER_LENGTH = 4;\n// The prelude consists of two components\nconst PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2;\n// Checksums are always CRC32 hashes.\nconst CHECKSUM_LENGTH = 4;\n// Messages must include a full prelude, a prelude checksum, and a message checksum\nconst MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;\n\n/**\n * @internal\n */\nexport interface MessageParts {\n  headers: DataView;\n  body: Uint8Array;\n}\n\n/**\n * @internal\n */\nexport function splitMessage({ byteLength, byteOffset, buffer }: ArrayBufferView): MessageParts {\n  if (byteLength < MINIMUM_MESSAGE_LENGTH) {\n    throw new Error(\"Provided message too short to accommodate event stream message overhead\");\n  }\n\n  const view = new DataView(buffer, byteOffset, byteLength);\n\n  const messageLength = view.getUint32(0, false);\n\n  if (byteLength !== messageLength) {\n    throw new Error(\"Reported message length does not match received message length\");\n  }\n\n  const headerLength = view.getUint32(PRELUDE_MEMBER_LENGTH, false);\n  const expectedPreludeChecksum = view.getUint32(PRELUDE_LENGTH, false);\n  const expectedMessageChecksum = view.getUint32(byteLength - CHECKSUM_LENGTH, false);\n\n  const checksummer = new Crc32().update(new Uint8Array(buffer, byteOffset, PRELUDE_LENGTH));\n  if (expectedPreludeChecksum !== checksummer.digest()) {\n    throw new Error(\n      `The prelude checksum specified in the message (${expectedPreludeChecksum}) does not match the calculated CRC32 checksum (${checksummer.digest()})`\n    );\n  }\n\n  checksummer.update(\n    new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH, byteLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH))\n  );\n  if (expectedMessageChecksum !== checksummer.digest()) {\n    throw new Error(\n      `The message checksum (${checksummer.digest()}) did not match the expected value of ${expectedMessageChecksum}`\n    );\n  }\n\n  return {\n    headers: new DataView(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH, headerLength),\n    body: new Uint8Array(\n      buffer,\n      byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH + headerLength,\n      messageLength - headerLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH + CHECKSUM_LENGTH)\n    ),\n  };\n}\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,mBAAmB;AAEzC;AACA,IAAMC,qBAAqB,GAAG,CAAC;AAC/B;AACA,IAAMC,cAAc,GAAGD,qBAAqB,GAAG,CAAC;AAChD;AACA,IAAME,eAAe,GAAG,CAAC;AACzB;AACA,IAAMC,sBAAsB,GAAGF,cAAc,GAAGC,eAAe,GAAG,CAAC;AAUnE;;;AAGA,OAAM,SAAUE,YAAYA,CAACC,EAAmD;MAAjDC,UAAU,GAAAD,EAAA,CAAAC,UAAA;IAAEC,UAAU,GAAAF,EAAA,CAAAE,UAAA;IAAEC,MAAM,GAAAH,EAAA,CAAAG,MAAA;EAC3D,IAAIF,UAAU,GAAGH,sBAAsB,EAAE;IACvC,MAAM,IAAIM,KAAK,CAAC,yEAAyE,CAAC;;EAG5F,IAAMC,IAAI,GAAG,IAAIC,QAAQ,CAACH,MAAM,EAAED,UAAU,EAAED,UAAU,CAAC;EAEzD,IAAMM,aAAa,GAAGF,IAAI,CAACG,SAAS,CAAC,CAAC,EAAE,KAAK,CAAC;EAE9C,IAAIP,UAAU,KAAKM,aAAa,EAAE;IAChC,MAAM,IAAIH,KAAK,CAAC,gEAAgE,CAAC;;EAGnF,IAAMK,YAAY,GAAGJ,IAAI,CAACG,SAAS,CAACb,qBAAqB,EAAE,KAAK,CAAC;EACjE,IAAMe,uBAAuB,GAAGL,IAAI,CAACG,SAAS,CAACZ,cAAc,EAAE,KAAK,CAAC;EACrE,IAAMe,uBAAuB,GAAGN,IAAI,CAACG,SAAS,CAACP,UAAU,GAAGJ,eAAe,EAAE,KAAK,CAAC;EAEnF,IAAMe,WAAW,GAAG,IAAIlB,KAAK,EAAE,CAACmB,MAAM,CAAC,IAAIC,UAAU,CAACX,MAAM,EAAED,UAAU,EAAEN,cAAc,CAAC,CAAC;EAC1F,IAAIc,uBAAuB,KAAKE,WAAW,CAACG,MAAM,EAAE,EAAE;IACpD,MAAM,IAAIX,KAAK,CACb,oDAAkDM,uBAAuB,wDAAmDE,WAAW,CAACG,MAAM,EAAE,MAAG,CACpJ;;EAGHH,WAAW,CAACC,MAAM,CAChB,IAAIC,UAAU,CAACX,MAAM,EAAED,UAAU,GAAGN,cAAc,EAAEK,UAAU,IAAIL,cAAc,GAAGC,eAAe,CAAC,CAAC,CACrG;EACD,IAAIc,uBAAuB,KAAKC,WAAW,CAACG,MAAM,EAAE,EAAE;IACpD,MAAM,IAAIX,KAAK,CACb,2BAAyBQ,WAAW,CAACG,MAAM,EAAE,8CAAyCJ,uBAAyB,CAChH;;EAGH,OAAO;IACLK,OAAO,EAAE,IAAIV,QAAQ,CAACH,MAAM,EAAED,UAAU,GAAGN,cAAc,GAAGC,eAAe,EAAEY,YAAY,CAAC;IAC1FQ,IAAI,EAAE,IAAIH,UAAU,CAClBX,MAAM,EACND,UAAU,GAAGN,cAAc,GAAGC,eAAe,GAAGY,YAAY,EAC5DF,aAAa,GAAGE,YAAY,IAAIb,cAAc,GAAGC,eAAe,GAAGA,eAAe,CAAC;GAEtF;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}