{"ast":null,"code":"var _jsxFileName = \"/Users/yannellym/Desktop/iwantapet/frontend/src/components/AllPetsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport '../styles/AllPetsPage.css';\nimport PetCard from './PetCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction AllPetsPage() {\n  _s();\n  const {\n    category\n  } = useParams();\n  const [pets, setPets] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n  const petsPerPage = 20; // Number of pets to display per page (20 per your request)\n\n  const fetchAnimalsByType = async (type, page) => {\n    try {\n      const offset = (page - 1) * petsPerPage;\n      const response = await fetch(`http://localhost:3002/api/petfinder?type=${type}&offset=${offset}`);\n      const data = await response.json();\n      console.log('API Response:', data);\n      if (data && data.animals) {\n        setPets(data.animals);\n        setLoading(false);\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error.message);\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchAnimalsByType(category, currentPage);\n  }, [category, currentPage]);\n  const totalPages = Math.ceil(pets.length / petsPerPage);\n  const renderPaginationButtons = () => {\n    const maxButtons = 9; // Maximum number of pagination buttons\n    const halfMaxButtons = Math.floor(maxButtons / 2);\n    if (totalPages <= maxButtons) {\n      return Array.from({\n        length: totalPages\n      }, (_, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => paginate(index + 1),\n        children: index + 1\n      }, index + 1, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this));\n    } else if (currentPage <= halfMaxButtons) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [Array.from({\n          length: maxButtons\n        }, (_, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => paginate(index + 1),\n          children: index + 1\n        }, index + 1, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => paginate(totalPages),\n          children: \"Last\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true);\n    } else if (currentPage >= totalPages - halfMaxButtons) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => paginate(1),\n          children: \"First\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), Array.from({\n          length: maxButtons\n        }, (_, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => paginate(totalPages - maxButtons + index + 1),\n          children: totalPages - maxButtons + index + 1\n        }, totalPages - maxButtons + index + 1, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true);\n    } else {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => paginate(1),\n          children: \"First\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), Array.from({\n          length: maxButtons - 2\n        }, (_, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => paginate(currentPage - halfMaxButtons + index),\n          children: currentPage - halfMaxButtons + index\n        }, currentPage - halfMaxButtons + index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => paginate(totalPages),\n          children: \"Last\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true);\n    }\n  };\n  const paginate = pageNumber => {\n    if (pageNumber >= 1 && pageNumber <= totalPages) {\n      setCurrentPage(pageNumber);\n    }\n  };\n  console.log('Number of pets:', pets.length);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"all-pets-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: `All ${category.charAt(0).toUpperCase() + category.slice(1)}s`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pet-list\",\n        children: pets.map(pet => /*#__PURE__*/_jsxDEV(PetCard, {\n          pet: pet\n        }, pet.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pagination\",\n        children: renderPaginationButtons()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n}\n_s(AllPetsPage, \"npfNrxyDH0Kx7AVxbKhE4FJhQWk=\", false, function () {\n  return [useParams];\n});\n_c = AllPetsPage;\nexport default AllPetsPage;\nvar _c;\n$RefreshReg$(_c, \"AllPetsPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","PetCard","jsxDEV","_jsxDEV","Fragment","_Fragment","AllPetsPage","_s","category","pets","setPets","loading","setLoading","currentPage","setCurrentPage","petsPerPage","fetchAnimalsByType","type","page","offset","response","fetch","data","json","console","log","animals","error","message","totalPages","Math","ceil","length","renderPaginationButtons","maxButtons","halfMaxButtons","floor","Array","from","_","index","onClick","paginate","children","fileName","_jsxFileName","lineNumber","columnNumber","pageNumber","className","charAt","toUpperCase","slice","map","pet","id","_c","$RefreshReg$"],"sources":["/Users/yannellym/Desktop/iwantapet/frontend/src/components/AllPetsPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport '../styles/AllPetsPage.css';\nimport PetCard from './PetCard';\n\nfunction AllPetsPage() {\n  const { category } = useParams();\n  const [pets, setPets] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n  const petsPerPage = 20; // Number of pets to display per page (20 per your request)\n\n  const fetchAnimalsByType = async (type, page) => {\n    try {\n      const offset = (page - 1) * petsPerPage;\n      const response = await fetch(`http://localhost:3002/api/petfinder?type=${type}&offset=${offset}`);\n      const data = await response.json();\n\n      console.log('API Response:', data);\n\n      if (data && data.animals) {\n        setPets(data.animals);\n        setLoading(false);\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error.message);\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchAnimalsByType(category, currentPage);\n  }, [category, currentPage]);\n\n  const totalPages = Math.ceil(pets.length / petsPerPage);\n\n  const renderPaginationButtons = () => {\n    const maxButtons = 9; // Maximum number of pagination buttons\n    const halfMaxButtons = Math.floor(maxButtons / 2);\n    if (totalPages <= maxButtons) {\n      return Array.from({ length: totalPages }, (_, index) => (\n        <button key={index + 1} onClick={() => paginate(index + 1)}>\n          {index + 1}\n        </button>\n      ));\n    } else if (currentPage <= halfMaxButtons) {\n      return (\n        <>\n          {Array.from({ length: maxButtons }, (_, index) => (\n            <button key={index + 1} onClick={() => paginate(index + 1)}>\n              {index + 1}\n            </button>\n          ))}\n          <button onClick={() => paginate(totalPages)}>Last</button>\n        </>\n      );\n    } else if (currentPage >= totalPages - halfMaxButtons) {\n      return (\n        <>\n          <button onClick={() => paginate(1)}>First</button>\n          {Array.from({ length: maxButtons }, (_, index) => (\n            <button key={totalPages - maxButtons + index + 1} onClick={() => paginate(totalPages - maxButtons + index + 1)}>\n              {totalPages - maxButtons + index + 1}\n            </button>\n          ))}\n        </>\n      );\n    } else {\n      return (\n        <>\n          <button onClick={() => paginate(1)}>First</button>\n          {Array.from({ length: maxButtons - 2 }, (_, index) => (\n            <button key={currentPage - halfMaxButtons + index} onClick={() => paginate(currentPage - halfMaxButtons + index)}>\n              {currentPage - halfMaxButtons + index}\n            </button>\n          ))}\n          <button onClick={() => paginate(totalPages)}>Last</button>\n        </>\n      );\n    }\n  };\n\n  const paginate = (pageNumber) => {\n    if (pageNumber >= 1 && pageNumber <= totalPages) {\n      setCurrentPage(pageNumber);\n    }\n  };\n\n  console.log('Number of pets:', pets.length);\n\n  return (\n    <div className=\"all-pets-page\">\n      <h2>{`All ${category.charAt(0).toUpperCase() + category.slice(1)}s`}</h2>\n      {loading ? (\n        <p>Loading...</p>\n      ) : (\n        <>\n          <div className=\"pet-list\">\n            {pets.map((pet) => (\n              <PetCard key={pet.id} pet={pet} />\n            ))}\n          </div>\n          <div className=\"pagination\">\n            {renderPaginationButtons()}\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default AllPetsPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}