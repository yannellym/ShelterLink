{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { getHostnameFromVariants } from \"./getHostnameFromVariants\";\nimport { getResolvedHostname } from \"./getResolvedHostname\";\nimport { getResolvedPartition } from \"./getResolvedPartition\";\nimport { getResolvedSigningRegion } from \"./getResolvedSigningRegion\";\nexport var getRegionInfo = function (region, _a) {\n  var _b, _c, _d, _e, _f, _g;\n  var _h = _a.useFipsEndpoint,\n    useFipsEndpoint = _h === void 0 ? false : _h,\n    _j = _a.useDualstackEndpoint,\n    useDualstackEndpoint = _j === void 0 ? false : _j,\n    signingService = _a.signingService,\n    regionHash = _a.regionHash,\n    partitionHash = _a.partitionHash;\n  var partition = getResolvedPartition(region, {\n    partitionHash: partitionHash\n  });\n  var resolvedRegion = region in regionHash ? region : (_c = (_b = partitionHash[partition]) === null || _b === void 0 ? void 0 : _b.endpoint) !== null && _c !== void 0 ? _c : region;\n  var hostnameOptions = {\n    useFipsEndpoint: useFipsEndpoint,\n    useDualstackEndpoint: useDualstackEndpoint\n  };\n  var regionHostname = getHostnameFromVariants((_d = regionHash[resolvedRegion]) === null || _d === void 0 ? void 0 : _d.variants, hostnameOptions);\n  var partitionHostname = getHostnameFromVariants((_e = partitionHash[partition]) === null || _e === void 0 ? void 0 : _e.variants, hostnameOptions);\n  var hostname = getResolvedHostname(resolvedRegion, {\n    regionHostname: regionHostname,\n    partitionHostname: partitionHostname\n  });\n  if (hostname === undefined) {\n    throw new Error(\"Endpoint resolution failed for: \".concat({\n      resolvedRegion: resolvedRegion,\n      useFipsEndpoint: useFipsEndpoint,\n      useDualstackEndpoint: useDualstackEndpoint\n    }));\n  }\n  var signingRegion = getResolvedSigningRegion(hostname, {\n    signingRegion: (_f = regionHash[resolvedRegion]) === null || _f === void 0 ? void 0 : _f.signingRegion,\n    regionRegex: partitionHash[partition].regionRegex,\n    useFipsEndpoint: useFipsEndpoint\n  });\n  return __assign(__assign({\n    partition: partition,\n    signingService: signingService,\n    hostname: hostname\n  }, signingRegion && {\n    signingRegion: signingRegion\n  }), ((_g = regionHash[resolvedRegion]) === null || _g === void 0 ? void 0 : _g.signingService) && {\n    signingService: regionHash[resolvedRegion].signingService\n  });\n};","map":{"version":3,"names":["__assign","getHostnameFromVariants","getResolvedHostname","getResolvedPartition","getResolvedSigningRegion","getRegionInfo","region","_a","_b","_c","_d","_e","_f","_g","_h","useFipsEndpoint","_j","useDualstackEndpoint","signingService","regionHash","partitionHash","partition","resolvedRegion","endpoint","hostnameOptions","regionHostname","variants","partitionHostname","hostname","undefined","Error","concat","signingRegion","regionRegex"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/getRegionInfo.js"],"sourcesContent":["import { __assign } from \"tslib\";\nimport { getHostnameFromVariants } from \"./getHostnameFromVariants\";\nimport { getResolvedHostname } from \"./getResolvedHostname\";\nimport { getResolvedPartition } from \"./getResolvedPartition\";\nimport { getResolvedSigningRegion } from \"./getResolvedSigningRegion\";\nexport var getRegionInfo = function (region, _a) {\n    var _b, _c, _d, _e, _f, _g;\n    var _h = _a.useFipsEndpoint, useFipsEndpoint = _h === void 0 ? false : _h, _j = _a.useDualstackEndpoint, useDualstackEndpoint = _j === void 0 ? false : _j, signingService = _a.signingService, regionHash = _a.regionHash, partitionHash = _a.partitionHash;\n    var partition = getResolvedPartition(region, { partitionHash: partitionHash });\n    var resolvedRegion = region in regionHash ? region : (_c = (_b = partitionHash[partition]) === null || _b === void 0 ? void 0 : _b.endpoint) !== null && _c !== void 0 ? _c : region;\n    var hostnameOptions = { useFipsEndpoint: useFipsEndpoint, useDualstackEndpoint: useDualstackEndpoint };\n    var regionHostname = getHostnameFromVariants((_d = regionHash[resolvedRegion]) === null || _d === void 0 ? void 0 : _d.variants, hostnameOptions);\n    var partitionHostname = getHostnameFromVariants((_e = partitionHash[partition]) === null || _e === void 0 ? void 0 : _e.variants, hostnameOptions);\n    var hostname = getResolvedHostname(resolvedRegion, { regionHostname: regionHostname, partitionHostname: partitionHostname });\n    if (hostname === undefined) {\n        throw new Error(\"Endpoint resolution failed for: \".concat({ resolvedRegion: resolvedRegion, useFipsEndpoint: useFipsEndpoint, useDualstackEndpoint: useDualstackEndpoint }));\n    }\n    var signingRegion = getResolvedSigningRegion(hostname, {\n        signingRegion: (_f = regionHash[resolvedRegion]) === null || _f === void 0 ? void 0 : _f.signingRegion,\n        regionRegex: partitionHash[partition].regionRegex,\n        useFipsEndpoint: useFipsEndpoint,\n    });\n    return __assign(__assign({ partition: partition, signingService: signingService, hostname: hostname }, (signingRegion && { signingRegion: signingRegion })), (((_g = regionHash[resolvedRegion]) === null || _g === void 0 ? void 0 : _g.signingService) && {\n        signingService: regionHash[resolvedRegion].signingService,\n    }));\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}