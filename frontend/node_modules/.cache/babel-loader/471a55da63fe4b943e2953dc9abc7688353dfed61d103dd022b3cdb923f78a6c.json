{"ast":null,"code":"var _jsxFileName = \"/Users/yannellym/Desktop/iwantapet/frontend/src/components/AllPetsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport '../styles/AllPetsPage.css';\nimport PetCard from './PetCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction AllPetsPage() {\n  _s();\n  const {\n    category\n  } = useParams();\n  const [loading, setLoading] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n  const petsPerPage = 20;\n  const cache = []; // Cache to store pets data\n\n  const fetchAnimalsByType = async (type, page) => {\n    const offset = (page - 1) * petsPerPage;\n    if (cache.length > offset) {\n      // If data for this page exists in the cache, use it\n      const displayedPets = cache.slice(offset, offset + petsPerPage);\n      setLoading(false);\n      return displayedPets;\n    } else {\n      try {\n        const response = await fetch(`http://localhost:3002/api/petfinder?type=${type}&offset=${offset}&limit=${petsPerPage}`);\n        const data = await response.json();\n        console.log('API Response:', data);\n        if (data && data.animals) {\n          const pets = data.animals;\n\n          // Update the cache with the fetched data\n          cache.splice(offset, petsPerPage, ...pets);\n          setLoading(false);\n          return pets;\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error.message);\n        setLoading(false);\n      }\n    }\n  };\n  useEffect(() => {\n    fetchAnimalsByType(category, currentPage).then(displayedPets => {\n      if (displayedPets) {\n        setAllPets(displayedPets);\n      }\n    });\n  }, [category, currentPage]);\n  const [allPets, setAllPets] = useState([]);\n  const paginate = pageNumber => {\n    setCurrentPage(pageNumber);\n  };\n  const totalPets = cache.length; // Total pets in cache\n\n  const totalPages = Math.ceil(totalPets / petsPerPage);\n  const paginationNumbers = Array.from({\n    length: Math.max(9, totalPages)\n  }, (_, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: () => paginate(index + 1),\n    children: index + 1\n  }, index + 1, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"all-pets-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: `All ${category.charAt(0).toUpperCase() + category.slice(1)}s`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pet-list\",\n        children: allPets.map(pet => pet.name)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pagination\",\n        children: paginationNumbers\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_s(AllPetsPage, \"p2AI7t8xO6GppnPLVVJ0+FPB7vU=\", false, function () {\n  return [useParams];\n});\n_c = AllPetsPage;\nexport default AllPetsPage;\nvar _c;\n$RefreshReg$(_c, \"AllPetsPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","PetCard","jsxDEV","_jsxDEV","Fragment","_Fragment","AllPetsPage","_s","category","loading","setLoading","currentPage","setCurrentPage","petsPerPage","cache","fetchAnimalsByType","type","page","offset","length","displayedPets","slice","response","fetch","data","json","console","log","animals","pets","splice","error","message","then","setAllPets","allPets","paginate","pageNumber","totalPets","totalPages","Math","ceil","paginationNumbers","Array","from","max","_","index","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","className","charAt","toUpperCase","map","pet","name","_c","$RefreshReg$"],"sources":["/Users/yannellym/Desktop/iwantapet/frontend/src/components/AllPetsPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport '../styles/AllPetsPage.css';\nimport PetCard from './PetCard';\n\nfunction AllPetsPage() {\n  const { category } = useParams();\n  const [loading, setLoading] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n  const petsPerPage = 20;\n  const cache = []; // Cache to store pets data\n\n  const fetchAnimalsByType = async (type, page) => {\n    const offset = (page - 1) * petsPerPage;\n    if (cache.length > offset) {\n      // If data for this page exists in the cache, use it\n      const displayedPets = cache.slice(offset, offset + petsPerPage);\n      setLoading(false);\n      return displayedPets;\n    } else {\n      try {\n        const response = await fetch(\n          `http://localhost:3002/api/petfinder?type=${type}&offset=${offset}&limit=${petsPerPage}`\n        );\n        const data = await response.json();\n\n        console.log('API Response:', data);\n\n        if (data && data.animals) {\n          const pets = data.animals;\n\n          // Update the cache with the fetched data\n          cache.splice(offset, petsPerPage, ...pets);\n\n          setLoading(false);\n          return pets;\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error.message);\n        setLoading(false);\n      }\n    }\n  };\n\n  useEffect(() => {\n    fetchAnimalsByType(category, currentPage).then((displayedPets) => {\n      if (displayedPets) {\n        setAllPets(displayedPets);\n      }\n    });\n  }, [category, currentPage]);\n\n  const [allPets, setAllPets] = useState([]);\n\n  const paginate = (pageNumber) => {\n    setCurrentPage(pageNumber);\n  };\n\n  const totalPets = cache.length; // Total pets in cache\n\n  const totalPages = Math.ceil(totalPets / petsPerPage);\n\n  const paginationNumbers = Array.from({ length: Math.max(9, totalPages) }, (_, index) => (\n    <button key={index + 1} onClick={() => paginate(index + 1)}>\n      {index + 1}\n    </button>\n  ));\n\n  return (\n    <div className=\"all-pets-page\">\n      <h2>{`All ${category.charAt(0).toUpperCase() + category.slice(1)}s`}</h2>\n      {loading ? (\n        <p>Loading...</p>\n      ) : (\n        <>\n          <div className=\"pet-list\">\n            {allPets.map((pet) => (\n              pet.name \n            ))}\n          </div>\n          <div className=\"pagination\">\n            {paginationNumbers}\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default AllPetsPage;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAO,2BAA2B;AAClC,OAAOC,OAAO,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEhC,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAM;IAAEC;EAAS,CAAC,GAAGR,SAAS,CAAC,CAAC;EAChC,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACa,WAAW,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAMe,WAAW,GAAG,EAAE;EACtB,MAAMC,KAAK,GAAG,EAAE,CAAC,CAAC;;EAElB,MAAMC,kBAAkB,GAAG,MAAAA,CAAOC,IAAI,EAAEC,IAAI,KAAK;IAC/C,MAAMC,MAAM,GAAG,CAACD,IAAI,GAAG,CAAC,IAAIJ,WAAW;IACvC,IAAIC,KAAK,CAACK,MAAM,GAAGD,MAAM,EAAE;MACzB;MACA,MAAME,aAAa,GAAGN,KAAK,CAACO,KAAK,CAACH,MAAM,EAAEA,MAAM,GAAGL,WAAW,CAAC;MAC/DH,UAAU,CAAC,KAAK,CAAC;MACjB,OAAOU,aAAa;IACtB,CAAC,MAAM;MACL,IAAI;QACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CACzB,4CAA2CP,IAAK,WAAUE,MAAO,UAASL,WAAY,EACzF,CAAC;QACD,MAAMW,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAElCC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEH,IAAI,CAAC;QAElC,IAAIA,IAAI,IAAIA,IAAI,CAACI,OAAO,EAAE;UACxB,MAAMC,IAAI,GAAGL,IAAI,CAACI,OAAO;;UAEzB;UACAd,KAAK,CAACgB,MAAM,CAACZ,MAAM,EAAEL,WAAW,EAAE,GAAGgB,IAAI,CAAC;UAE1CnB,UAAU,CAAC,KAAK,CAAC;UACjB,OAAOmB,IAAI;QACb;MACF,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdL,OAAO,CAACK,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAACC,OAAO,CAAC;QACpDtB,UAAU,CAAC,KAAK,CAAC;MACnB;IACF;EACF,CAAC;EAEDX,SAAS,CAAC,MAAM;IACdgB,kBAAkB,CAACP,QAAQ,EAAEG,WAAW,CAAC,CAACsB,IAAI,CAAEb,aAAa,IAAK;MAChE,IAAIA,aAAa,EAAE;QACjBc,UAAU,CAACd,aAAa,CAAC;MAC3B;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,CAACZ,QAAQ,EAAEG,WAAW,CAAC,CAAC;EAE3B,MAAM,CAACwB,OAAO,EAAED,UAAU,CAAC,GAAGpC,QAAQ,CAAC,EAAE,CAAC;EAE1C,MAAMsC,QAAQ,GAAIC,UAAU,IAAK;IAC/BzB,cAAc,CAACyB,UAAU,CAAC;EAC5B,CAAC;EAED,MAAMC,SAAS,GAAGxB,KAAK,CAACK,MAAM,CAAC,CAAC;;EAEhC,MAAMoB,UAAU,GAAGC,IAAI,CAACC,IAAI,CAACH,SAAS,GAAGzB,WAAW,CAAC;EAErD,MAAM6B,iBAAiB,GAAGC,KAAK,CAACC,IAAI,CAAC;IAAEzB,MAAM,EAAEqB,IAAI,CAACK,GAAG,CAAC,CAAC,EAAEN,UAAU;EAAE,CAAC,EAAE,CAACO,CAAC,EAAEC,KAAK,kBACjF5C,OAAA;IAAwB6C,OAAO,EAAEA,CAAA,KAAMZ,QAAQ,CAACW,KAAK,GAAG,CAAC,CAAE;IAAAE,QAAA,EACxDF,KAAK,GAAG;EAAC,GADCA,KAAK,GAAG,CAAC;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEd,CACT,CAAC;EAEF,oBACElD,OAAA;IAAKmD,SAAS,EAAC,eAAe;IAAAL,QAAA,gBAC5B9C,OAAA;MAAA8C,QAAA,EAAM,OAAMzC,QAAQ,CAAC+C,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGhD,QAAQ,CAACa,KAAK,CAAC,CAAC,CAAE;IAAE;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EACxE5C,OAAO,gBACNN,OAAA;MAAA8C,QAAA,EAAG;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBAEjBlD,OAAA,CAAAE,SAAA;MAAA4C,QAAA,gBACE9C,OAAA;QAAKmD,SAAS,EAAC,UAAU;QAAAL,QAAA,EACtBd,OAAO,CAACsB,GAAG,CAAEC,GAAG,IACfA,GAAG,CAACC,IACL;MAAC;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACNlD,OAAA;QAAKmD,SAAS,EAAC,YAAY;QAAAL,QAAA,EACxBP;MAAiB;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACf,CAAC;IAAA,eACN,CACH;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAC9C,EAAA,CAlFQD,WAAW;EAAA,QACGN,SAAS;AAAA;AAAA4D,EAAA,GADvBtD,WAAW;AAoFpB,eAAeA,WAAW;AAAC,IAAAsD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}