{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport { defaultPartition, partitionsInfo } from './partitions';\n/**\n * Get the AWS Services endpoint URL's DNS suffix for a given region. A typical AWS regional service endpoint URL will\n * follow this pattern: {endpointPrefix}.{region}.{dnsSuffix}. For example, the endpoint URL for Cognito Identity in\n * us-east-1 will be cognito-identity.us-east-1.amazonaws.com. Here the DnsSuffix is `amazonaws.com`.\n *\n * @param region\n * @returns The DNS suffix\n *\n * @internal\n */\nexport var getDnsSuffix = function (region) {\n  var e_1, _a;\n  var partitions = partitionsInfo.partitions;\n  try {\n    for (var partitions_1 = __values(partitions), partitions_1_1 = partitions_1.next(); !partitions_1_1.done; partitions_1_1 = partitions_1.next()) {\n      var _b = partitions_1_1.value,\n        regions = _b.regions,\n        outputs = _b.outputs,\n        regionRegex = _b.regionRegex;\n      var regex = new RegExp(regionRegex);\n      if (regions.includes(region) || regex.test(region)) {\n        return outputs.dnsSuffix;\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (partitions_1_1 && !partitions_1_1.done && (_a = partitions_1.return)) _a.call(partitions_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n  return defaultPartition.outputs.dnsSuffix;\n};","map":{"version":3,"names":["__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","defaultPartition","partitionsInfo","getDnsSuffix","region","e_1","_a","partitions","partitions_1","partitions_1_1","_b","regions","outputs","regionRegex","regex","RegExp","includes","test","dnsSuffix","e_1_1","error","return"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-amplify/core/lib-esm/clients/endpoints/getDnsSuffix.js"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport { defaultPartition, partitionsInfo } from './partitions';\n/**\n * Get the AWS Services endpoint URL's DNS suffix for a given region. A typical AWS regional service endpoint URL will\n * follow this pattern: {endpointPrefix}.{region}.{dnsSuffix}. For example, the endpoint URL for Cognito Identity in\n * us-east-1 will be cognito-identity.us-east-1.amazonaws.com. Here the DnsSuffix is `amazonaws.com`.\n *\n * @param region\n * @returns The DNS suffix\n *\n * @internal\n */\nexport var getDnsSuffix = function (region) {\n    var e_1, _a;\n    var partitions = partitionsInfo.partitions;\n    try {\n        for (var partitions_1 = __values(partitions), partitions_1_1 = partitions_1.next(); !partitions_1_1.done; partitions_1_1 = partitions_1.next()) {\n            var _b = partitions_1_1.value, regions = _b.regions, outputs = _b.outputs, regionRegex = _b.regionRegex;\n            var regex = new RegExp(regionRegex);\n            if (regions.includes(region) || regex.test(region)) {\n                return outputs.dnsSuffix;\n            }\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (partitions_1_1 && !partitions_1_1.done && (_a = partitions_1.return)) _a.call(partitions_1);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n    return defaultPartition.outputs.dnsSuffix;\n};\n"],"mappings":"AAAA;AACA;AACA,IAAIA,QAAQ,GAAI,IAAI,IAAI,IAAI,CAACA,QAAQ,IAAK,UAASC,CAAC,EAAE;EAClD,IAAIC,CAAC,GAAG,OAAOC,MAAM,KAAK,UAAU,IAAIA,MAAM,CAACC,QAAQ;IAAEC,CAAC,GAAGH,CAAC,IAAID,CAAC,CAACC,CAAC,CAAC;IAAEI,CAAC,GAAG,CAAC;EAC7E,IAAID,CAAC,EAAE,OAAOA,CAAC,CAACE,IAAI,CAACN,CAAC,CAAC;EACvB,IAAIA,CAAC,IAAI,OAAOA,CAAC,CAACO,MAAM,KAAK,QAAQ,EAAE,OAAO;IAC1CC,IAAI,EAAE,SAAAA,CAAA,EAAY;MACd,IAAIR,CAAC,IAAIK,CAAC,IAAIL,CAAC,CAACO,MAAM,EAAEP,CAAC,GAAG,KAAK,CAAC;MAClC,OAAO;QAAES,KAAK,EAAET,CAAC,IAAIA,CAAC,CAACK,CAAC,EAAE,CAAC;QAAEK,IAAI,EAAE,CAACV;MAAE,CAAC;IAC3C;EACJ,CAAC;EACD,MAAM,IAAIW,SAAS,CAACV,CAAC,GAAG,yBAAyB,GAAG,iCAAiC,CAAC;AAC1F,CAAC;AACD,SAASW,gBAAgB,EAAEC,cAAc,QAAQ,cAAc;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,YAAY,GAAG,SAAAA,CAAUC,MAAM,EAAE;EACxC,IAAIC,GAAG,EAAEC,EAAE;EACX,IAAIC,UAAU,GAAGL,cAAc,CAACK,UAAU;EAC1C,IAAI;IACA,KAAK,IAAIC,YAAY,GAAGpB,QAAQ,CAACmB,UAAU,CAAC,EAAEE,cAAc,GAAGD,YAAY,CAACX,IAAI,CAAC,CAAC,EAAE,CAACY,cAAc,CAACV,IAAI,EAAEU,cAAc,GAAGD,YAAY,CAACX,IAAI,CAAC,CAAC,EAAE;MAC5I,IAAIa,EAAE,GAAGD,cAAc,CAACX,KAAK;QAAEa,OAAO,GAAGD,EAAE,CAACC,OAAO;QAAEC,OAAO,GAAGF,EAAE,CAACE,OAAO;QAAEC,WAAW,GAAGH,EAAE,CAACG,WAAW;MACvG,IAAIC,KAAK,GAAG,IAAIC,MAAM,CAACF,WAAW,CAAC;MACnC,IAAIF,OAAO,CAACK,QAAQ,CAACZ,MAAM,CAAC,IAAIU,KAAK,CAACG,IAAI,CAACb,MAAM,CAAC,EAAE;QAChD,OAAOQ,OAAO,CAACM,SAAS;MAC5B;IACJ;EACJ,CAAC,CACD,OAAOC,KAAK,EAAE;IAAEd,GAAG,GAAG;MAAEe,KAAK,EAAED;IAAM,CAAC;EAAE,CAAC,SACjC;IACJ,IAAI;MACA,IAAIV,cAAc,IAAI,CAACA,cAAc,CAACV,IAAI,KAAKO,EAAE,GAAGE,YAAY,CAACa,MAAM,CAAC,EAAEf,EAAE,CAACX,IAAI,CAACa,YAAY,CAAC;IACnG,CAAC,SACO;MAAE,IAAIH,GAAG,EAAE,MAAMA,GAAG,CAACe,KAAK;IAAE;EACxC;EACA,OAAOnB,gBAAgB,CAACW,OAAO,CAACM,SAAS;AAC7C,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}