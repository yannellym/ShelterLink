{"ast":null,"code":"import { __assign, __awaiter, __extends, __generator } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AbstractInteractionsProvider } from './InteractionsProvider';\nimport { LexRuntimeServiceClient, PostTextCommand, PostContentCommand } from '@aws-sdk/client-lex-runtime-service';\nimport { ConsoleLogger as Logger, Credentials, getAmplifyUserAgentObject } from '@aws-amplify/core';\nimport { convert } from './AWSLexProviderHelper/utils';\nvar logger = new Logger('AWSLexProvider');\nvar AWSLexProvider = /** @class */function (_super) {\n  __extends(AWSLexProvider, _super);\n  function AWSLexProvider(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var _this = _super.call(this, options) || this;\n    _this._botsCompleteCallback = {};\n    return _this;\n  }\n  AWSLexProvider.prototype.getProviderName = function () {\n    return 'AWSLexProvider';\n  };\n  AWSLexProvider.prototype.configure = function (config) {\n    if (config === void 0) {\n      config = {};\n    }\n    var propertiesToTest = ['name', 'alias', 'region'];\n    Object.keys(config).forEach(function (botKey) {\n      var botConfig = config[botKey];\n      // is bot config correct\n      if (!propertiesToTest.every(function (x) {\n        return x in botConfig;\n      })) {\n        throw new Error('invalid bot configuration');\n      }\n    });\n    return _super.prototype.configure.call(this, config);\n  };\n  /**\n   * @private\n   * @deprecated\n   * This is used internally by 'sendMessage' to call onComplete callback\n   * for a bot if configured\n   */\n  AWSLexProvider.prototype.reportBotStatus = function (data, botname) {\n    var _this = this;\n    // Check if state is fulfilled to resolve onFullfilment promise\n    logger.debug('postContent state', data.dialogState);\n    if (data.dialogState === 'ReadyForFulfillment' || data.dialogState === 'Fulfilled') {\n      if (typeof this._botsCompleteCallback[botname] === 'function') {\n        setTimeout(function () {\n          return _this._botsCompleteCallback[botname](null, data);\n        }, 0);\n      }\n      if (this._config && typeof this._config[botname].onComplete === 'function') {\n        setTimeout(function () {\n          return _this._config[botname].onComplete(null, data);\n        }, 0);\n      }\n    }\n    if (data.dialogState === 'Failed') {\n      if (typeof this._botsCompleteCallback[botname] === 'function') {\n        setTimeout(function () {\n          return _this._botsCompleteCallback[botname]('Bot conversation failed');\n        }, 0);\n      }\n      if (this._config && typeof this._config[botname].onComplete === 'function') {\n        setTimeout(function () {\n          return _this._config[botname].onComplete('Bot conversation failed');\n        }, 0);\n      }\n    }\n  };\n  AWSLexProvider.prototype.sendMessage = function (botname, message) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, error_1, params, postTextCommand, data, err_1, content, messageType, inputStream, _a, postContentCommand, data, audioArray, _b, response, err_2;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            // check if bot exists\n            if (!this._config[botname]) {\n              return [2 /*return*/, Promise.reject('Bot ' + botname + ' does not exist')];\n            }\n            _c.label = 1;\n          case 1:\n            _c.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, Credentials.get()];\n          case 2:\n            credentials = _c.sent();\n            return [3 /*break*/, 4];\n          case 3:\n            error_1 = _c.sent();\n            return [2 /*return*/, Promise.reject('No credentials')];\n          case 4:\n            this.lexRuntimeServiceClient = new LexRuntimeServiceClient({\n              region: this._config[botname].region,\n              credentials: credentials,\n              customUserAgent: getAmplifyUserAgentObject()\n            });\n            if (!(typeof message === 'string')) return [3 /*break*/, 9];\n            params = {\n              botAlias: this._config[botname].alias,\n              botName: botname,\n              inputText: message,\n              userId: credentials.identityId\n            };\n            logger.debug('postText to lex', message);\n            _c.label = 5;\n          case 5:\n            _c.trys.push([5, 7,, 8]);\n            postTextCommand = new PostTextCommand(params);\n            return [4 /*yield*/, this.lexRuntimeServiceClient.send(postTextCommand)];\n          case 6:\n            data = _c.sent();\n            this.reportBotStatus(data, botname);\n            return [2 /*return*/, data];\n          case 7:\n            err_1 = _c.sent();\n            return [2 /*return*/, Promise.reject(err_1)];\n          case 8:\n            return [3 /*break*/, 21];\n          case 9:\n            content = message.content, messageType = message.options.messageType;\n            if (!(messageType === 'voice')) return [3 /*break*/, 13];\n            if (typeof content !== 'object') {\n              return [2 /*return*/, Promise.reject('invalid content type')];\n            }\n            if (!(content instanceof Uint8Array)) return [3 /*break*/, 10];\n            _a = content;\n            return [3 /*break*/, 12];\n          case 10:\n            return [4 /*yield*/, convert(content)];\n          case 11:\n            _a = _c.sent();\n            _c.label = 12;\n          case 12:\n            inputStream = _a;\n            params = {\n              botAlias: this._config[botname].alias,\n              botName: botname,\n              contentType: 'audio/x-l16; sample-rate=16000; channel-count=1',\n              userId: credentials.identityId,\n              accept: 'audio/mpeg',\n              inputStream: inputStream\n            };\n            return [3 /*break*/, 14];\n          case 13:\n            if (typeof content !== 'string') return [2 /*return*/, Promise.reject('invalid content type')];\n            params = {\n              botAlias: this._config[botname].alias,\n              botName: botname,\n              contentType: 'text/plain; charset=utf-8',\n              inputStream: content,\n              userId: credentials.identityId,\n              accept: 'audio/mpeg'\n            };\n            _c.label = 14;\n          case 14:\n            logger.debug('postContent to lex', message);\n            _c.label = 15;\n          case 15:\n            _c.trys.push([15, 20,, 21]);\n            postContentCommand = new PostContentCommand(params);\n            return [4 /*yield*/, this.lexRuntimeServiceClient.send(postContentCommand)];\n          case 16:\n            data = _c.sent();\n            if (!data.audioStream) return [3 /*break*/, 18];\n            return [4 /*yield*/, convert(data.audioStream)];\n          case 17:\n            _b = _c.sent();\n            return [3 /*break*/, 19];\n          case 18:\n            _b = undefined;\n            _c.label = 19;\n          case 19:\n            audioArray = _b;\n            response = __assign(__assign({}, data), {\n              audioStream: audioArray\n            });\n            this.reportBotStatus(response, botname);\n            return [2 /*return*/, response];\n          case 20:\n            err_2 = _c.sent();\n            return [2 /*return*/, Promise.reject(err_2)];\n          case 21:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSLexProvider.prototype.onComplete = function (botname, callback) {\n    // does bot exist\n    if (!this._config[botname]) {\n      throw new Error('Bot ' + botname + ' does not exist');\n    }\n    this._botsCompleteCallback[botname] = callback;\n  };\n  return AWSLexProvider;\n}(AbstractInteractionsProvider);\nexport { AWSLexProvider };","map":{"version":3,"names":["AbstractInteractionsProvider","LexRuntimeServiceClient","PostTextCommand","PostContentCommand","ConsoleLogger","Logger","Credentials","getAmplifyUserAgentObject","convert","logger","AWSLexProvider","_super","__extends","options","_this","call","_botsCompleteCallback","prototype","getProviderName","configure","config","propertiesToTest","Object","keys","forEach","botKey","botConfig","every","x","Error","reportBotStatus","data","botname","debug","dialogState","setTimeout","_config","onComplete","sendMessage","message","Promise","reject","get","credentials","_c","sent","lexRuntimeServiceClient","region","customUserAgent","params","botAlias","alias","botName","inputText","userId","identityId","postTextCommand","send","err_1","content","messageType","Uint8Array","_a","inputStream","contentType","accept","postContentCommand","audioStream","_b","undefined","audioArray","response","__assign","err_2","callback"],"sources":["../../src/Providers/AWSLexProvider.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}