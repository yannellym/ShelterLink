{"ast":null,"code":"var _jsxFileName = \"/Users/yannellym/Desktop/iwantapet/frontend/src/components/AllPetsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport '../styles/AllPetsPage.css';\nimport PetCard from './PetCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AllPetsPage() {\n  _s();\n  const {\n    category\n  } = useParams();\n  const [loading, setLoading] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n  const petsPerPage = 40;\n  const [cache, setCache] = useState([]);\n  const otherAnimalTypes = [\"horse\", \"rabbit\", \"hamster\", \"pigeon\"];\n  const fetchAnimalsByType = async (type, page) => {\n    const offset = (page - 1) * petsPerPage;\n    const endpoint = `http://localhost:3002/api/petfinder?type=${type}&offset=${offset}&limit=${petsPerPage}`;\n    try {\n      // Continue with your existing code to fetch data from the modified endpoint\n      const response = await fetch(endpoint);\n      const data = await response.json();\n      console.log('API Response:', data);\n      if (data && data.animals) {\n        let pets = data.animals;\n        setLoading(false);\n        setCache(pets);\n        return pets;\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error.message);\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    async function fetchData() {\n      const allPets = [];\n\n      // Fetch animals for each \"other\" animal type individually\n      for (const animalType of otherAnimalTypes) {\n        const otherAnimals = await fetchAnimalsByType(animalType, currentPage);\n        allPets.push(...otherAnimals);\n      }\n      setCache(allPets);\n    }\n    fetchData();\n  }, [currentPage]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"all-pets-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: `All ${category.charAt(0).toUpperCase() + category.slice(1)}s`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pet-list\",\n      children: cache.map(pet => /*#__PURE__*/_jsxDEV(PetCard, {\n        pet: pet\n      }, pet.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n_s(AllPetsPage, \"ZI7uaPeuqINtAeXCvtnrefX/dFg=\", false, function () {\n  return [useParams];\n});\n_c = AllPetsPage;\nexport default AllPetsPage;\nvar _c;\n$RefreshReg$(_c, \"AllPetsPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","PetCard","jsxDEV","_jsxDEV","AllPetsPage","_s","category","loading","setLoading","currentPage","setCurrentPage","petsPerPage","cache","setCache","otherAnimalTypes","fetchAnimalsByType","type","page","offset","endpoint","response","fetch","data","json","console","log","animals","pets","error","message","fetchData","allPets","animalType","otherAnimals","push","className","children","charAt","toUpperCase","slice","fileName","_jsxFileName","lineNumber","columnNumber","map","pet","id","_c","$RefreshReg$"],"sources":["/Users/yannellym/Desktop/iwantapet/frontend/src/components/AllPetsPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport '../styles/AllPetsPage.css';\nimport PetCard from './PetCard';\n\nfunction AllPetsPage() {\n  const { category } = useParams();\n  const [loading, setLoading] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n  const petsPerPage = 40;\n  const [cache, setCache] = useState([]);\n\n  const otherAnimalTypes = [\"horse\", \"rabbit\", \"hamster\", \"pigeon\"];\n\n  const fetchAnimalsByType = async (type, page) => {\n    const offset = (page - 1) * petsPerPage;\n    const endpoint = `http://localhost:3002/api/petfinder?type=${type}&offset=${offset}&limit=${petsPerPage}`;\n\n    try {\n      // Continue with your existing code to fetch data from the modified endpoint\n      const response = await fetch(endpoint);\n      const data = await response.json();\n\n      console.log('API Response:', data);\n\n      if (data && data.animals) {\n        let pets = data.animals;\n\n        setLoading(false);\n\n        setCache(pets);\n        return pets;\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error.message);\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    async function fetchData() {\n      const allPets = [];\n\n      // Fetch animals for each \"other\" animal type individually\n      for (const animalType of otherAnimalTypes) {\n        const otherAnimals = await fetchAnimalsByType(animalType, currentPage);\n        allPets.push(...otherAnimals);\n      }\n\n      setCache(allPets);\n    }\n\n    fetchData();\n  }, [currentPage]);\n\n  return (\n    <div className=\"all-pets-page\">\n      <h2>{`All ${category.charAt(0).toUpperCase() + category.slice(1)}s`}</h2>\n      {loading ? (\n        <p>Loading...</p>\n      ) : (\n        <div className=\"pet-list\">\n          {cache.map((pet) => (\n            <PetCard key={pet.id} pet={pet} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default AllPetsPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}