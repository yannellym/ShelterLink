{"ast":null,"code":"import { __assign, __awaiter, __extends, __generator, __read } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport Observable from 'zen-observable-ts';\nimport { GraphQLError } from 'graphql';\nimport * as url from 'url';\nimport { v4 as uuid } from 'uuid';\nimport { Buffer } from 'buffer';\nimport { Logger, Credentials, Signer, Hub, USER_AGENT_HEADER, jitteredExponentialRetry, NonRetryableError, isNonRetryableError, getAmplifyUserAgent } from '@aws-amplify/core';\nimport { Cache } from '@aws-amplify/cache';\nimport { Auth } from '@aws-amplify/auth';\nimport { AbstractPubSubProvider } from '../PubSubProvider';\nimport { CONTROL_MSG, ConnectionState } from '../../types/PubSub';\nimport { AMPLIFY_SYMBOL, AWS_APPSYNC_REALTIME_HEADERS, CONNECTION_INIT_TIMEOUT, DEFAULT_KEEP_ALIVE_TIMEOUT, DEFAULT_KEEP_ALIVE_ALERT_TIMEOUT, MAX_DELAY_MS, MESSAGE_TYPES, NON_RETRYABLE_CODES, SOCKET_STATUS, START_ACK_TIMEOUT, SUBSCRIPTION_STATUS, CONNECTION_STATE_CHANGE } from '../constants';\nimport { ConnectionStateMonitor, CONNECTION_CHANGE } from '../../utils/ConnectionStateMonitor';\nimport { ReconnectEvent, ReconnectionMonitor } from '../../utils/ReconnectionMonitor';\nvar logger = new Logger('AWSAppSyncRealTimeProvider');\nvar dispatchApiEvent = function (event, data, message) {\n  Hub.dispatch('api', {\n    event: event,\n    data: data,\n    message: message\n  }, 'PubSub', AMPLIFY_SYMBOL);\n};\nvar standardDomainPattern = /^https:\\/\\/\\w{26}\\.appsync\\-api\\.\\w{2}(?:(?:\\-\\w{2,})+)\\-\\d\\.amazonaws.com(?:\\.cn)?\\/graphql$/i;\nvar customDomainPath = '/realtime';\nvar AWSAppSyncRealTimeProvider = /** @class */function (_super) {\n  __extends(AWSAppSyncRealTimeProvider, _super);\n  function AWSAppSyncRealTimeProvider(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var _this = _super.call(this, options) || this;\n    _this.socketStatus = SOCKET_STATUS.CLOSED;\n    _this.keepAliveTimeout = DEFAULT_KEEP_ALIVE_TIMEOUT;\n    _this.subscriptionObserverMap = new Map();\n    _this.promiseArray = [];\n    _this.connectionStateMonitor = new ConnectionStateMonitor();\n    _this.reconnectionMonitor = new ReconnectionMonitor();\n    // Monitor the connection state and pass changes along to Hub\n    _this.connectionStateMonitorSubscription = _this.connectionStateMonitor.connectionStateObservable.subscribe(function (connectionState) {\n      dispatchApiEvent(CONNECTION_STATE_CHANGE, {\n        provider: _this,\n        connectionState: connectionState\n      }, \"Connection state is \" + connectionState);\n      _this.connectionState = connectionState;\n      // Trigger START_RECONNECT when the connection is disrupted\n      if (connectionState === ConnectionState.ConnectionDisrupted) {\n        _this.reconnectionMonitor.record(ReconnectEvent.START_RECONNECT);\n      }\n      // Trigger HALT_RECONNECT to halt reconnection attempts when the state is anything other than\n      //   ConnectionDisrupted or Connecting\n      if ([ConnectionState.Connected, ConnectionState.ConnectedPendingDisconnect, ConnectionState.ConnectedPendingKeepAlive, ConnectionState.ConnectedPendingNetwork, ConnectionState.ConnectionDisruptedPendingNetwork, ConnectionState.Disconnected].includes(connectionState)) {\n        _this.reconnectionMonitor.record(ReconnectEvent.HALT_RECONNECT);\n      }\n    });\n    return _this;\n  }\n  /**\n   * Mark the socket closed and release all active listeners\n   */\n  AWSAppSyncRealTimeProvider.prototype.close = function () {\n    // Mark the socket closed both in status and the connection monitor\n    this.socketStatus = SOCKET_STATUS.CLOSED;\n    this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_FAILED);\n    // Turn off the subscription monitor Hub publishing\n    this.connectionStateMonitorSubscription.unsubscribe();\n    // Complete all reconnect observers\n    this.reconnectionMonitor.close();\n  };\n  AWSAppSyncRealTimeProvider.prototype.getNewWebSocket = function (url, protocol) {\n    return new WebSocket(url, protocol);\n  };\n  AWSAppSyncRealTimeProvider.prototype.getProviderName = function () {\n    return 'AWSAppSyncRealTimeProvider';\n  };\n  AWSAppSyncRealTimeProvider.prototype.newClient = function () {\n    throw new Error('Not used here');\n  };\n  AWSAppSyncRealTimeProvider.prototype.publish = function (_topics, _msg, _options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        throw new Error('Operation not supported');\n      });\n    });\n  };\n  // Check if url matches standard domain pattern\n  AWSAppSyncRealTimeProvider.prototype.isCustomDomain = function (url) {\n    return url.match(standardDomainPattern) === null;\n  };\n  AWSAppSyncRealTimeProvider.prototype.subscribe = function (_topics, options, customUserAgentDetails) {\n    var _this = this;\n    var appSyncGraphqlEndpoint = options === null || options === void 0 ? void 0 : options.appSyncGraphqlEndpoint;\n    return new Observable(function (observer) {\n      if (!options || !appSyncGraphqlEndpoint) {\n        observer.error({\n          errors: [__assign({}, new GraphQLError(\"Subscribe only available for AWS AppSync endpoint\"))]\n        });\n        observer.complete();\n      } else {\n        var subscriptionStartActive_1 = false;\n        var subscriptionId_1 = uuid();\n        var startSubscription_1 = function () {\n          if (!subscriptionStartActive_1) {\n            subscriptionStartActive_1 = true;\n            var startSubscriptionPromise = _this._startSubscriptionWithAWSAppSyncRealTime({\n              options: options,\n              observer: observer,\n              subscriptionId: subscriptionId_1,\n              customUserAgentDetails: customUserAgentDetails\n            }).catch(function (err) {\n              logger.debug(CONTROL_MSG.REALTIME_SUBSCRIPTION_INIT_ERROR + \": \" + err);\n              _this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n            });\n            startSubscriptionPromise.finally(function () {\n              subscriptionStartActive_1 = false;\n            });\n          }\n        };\n        var reconnectSubscription_1;\n        // Add an observable to the reconnection list to manage reconnection for this subscription\n        reconnectSubscription_1 = new Observable(function (observer) {\n          _this.reconnectionMonitor.addObserver(observer);\n        }).subscribe(function () {\n          startSubscription_1();\n        });\n        startSubscription_1();\n        return function () {\n          return __awaiter(_this, void 0, void 0, function () {\n            var subscriptionState, err_1;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  // Cleanup reconnection subscription\n                  reconnectSubscription_1 === null || reconnectSubscription_1 === void 0 ? void 0 : reconnectSubscription_1.unsubscribe();\n                  _a.label = 1;\n                case 1:\n                  _a.trys.push([1, 3, 4, 5]);\n                  // Waiting that subscription has been connected before trying to unsubscribe\n                  return [4 /*yield*/, this._waitForSubscriptionToBeConnected(subscriptionId_1)];\n                case 2:\n                  // Waiting that subscription has been connected before trying to unsubscribe\n                  _a.sent();\n                  subscriptionState = (this.subscriptionObserverMap.get(subscriptionId_1) || {}).subscriptionState;\n                  if (!subscriptionState) {\n                    // subscription already unsubscribed\n                    return [2 /*return*/];\n                  }\n\n                  if (subscriptionState === SUBSCRIPTION_STATUS.CONNECTED) {\n                    this._sendUnsubscriptionMessage(subscriptionId_1);\n                  } else {\n                    throw new Error('Subscription never connected');\n                  }\n                  return [3 /*break*/, 5];\n                case 3:\n                  err_1 = _a.sent();\n                  logger.debug(\"Error while unsubscribing \" + err_1);\n                  return [3 /*break*/, 5];\n                case 4:\n                  this._removeSubscriptionObserver(subscriptionId_1);\n                  return [7 /*endfinally*/];\n                case 5:\n                  return [2 /*return*/];\n              }\n            });\n          });\n        };\n      }\n    });\n  };\n\n  Object.defineProperty(AWSAppSyncRealTimeProvider.prototype, \"isSSLEnabled\", {\n    get: function () {\n      return !this.options['aws_appsync_dangerously_connect_to_http_endpoint_for_testing'];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  AWSAppSyncRealTimeProvider.prototype._startSubscriptionWithAWSAppSyncRealTime = function (_a) {\n    var options = _a.options,\n      observer = _a.observer,\n      subscriptionId = _a.subscriptionId,\n      customUserAgentDetails = _a.customUserAgentDetails;\n    var _b;\n    return __awaiter(this, void 0, void 0, function () {\n      var appSyncGraphqlEndpoint, authenticationType, query, variables, apiKey, region, _c, graphql_headers, _d, additionalHeaders, subscriptionState, data, dataString, headerObj, _e, _f, subscriptionMessage, stringToAWSRealTime, err_2, _g, subscriptionFailedCallback, subscriptionReadyCallback;\n      var _h;\n      var _this = this;\n      return __generator(this, function (_j) {\n        switch (_j.label) {\n          case 0:\n            appSyncGraphqlEndpoint = options.appSyncGraphqlEndpoint, authenticationType = options.authenticationType, query = options.query, variables = options.variables, apiKey = options.apiKey, region = options.region, _c = options.graphql_headers, graphql_headers = _c === void 0 ? function () {\n              return {};\n            } : _c, _d = options.additionalHeaders, additionalHeaders = _d === void 0 ? {} : _d;\n            subscriptionState = SUBSCRIPTION_STATUS.PENDING;\n            data = {\n              query: query,\n              variables: variables\n            };\n            // Having a subscription id map will make it simple to forward messages received\n            this.subscriptionObserverMap.set(subscriptionId, {\n              observer: observer,\n              query: query !== null && query !== void 0 ? query : '',\n              variables: variables !== null && variables !== void 0 ? variables : {},\n              subscriptionState: subscriptionState,\n              startAckTimeoutId: undefined\n            });\n            dataString = JSON.stringify(data);\n            _e = [{}];\n            return [4 /*yield*/, this._awsRealTimeHeaderBasedAuth({\n              apiKey: apiKey,\n              appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n              authenticationType: authenticationType,\n              payload: dataString,\n              canonicalUri: '',\n              region: region,\n              additionalHeaders: additionalHeaders\n            })];\n          case 1:\n            _f = [__assign.apply(void 0, _e.concat([_j.sent()]))];\n            return [4 /*yield*/, graphql_headers()];\n          case 2:\n            headerObj = __assign.apply(void 0, [__assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), additionalHeaders]), (_h = {}, _h[USER_AGENT_HEADER] = getAmplifyUserAgent(customUserAgentDetails), _h)]);\n            subscriptionMessage = {\n              id: subscriptionId,\n              payload: {\n                data: dataString,\n                extensions: {\n                  authorization: __assign({}, headerObj)\n                }\n              },\n              type: MESSAGE_TYPES.GQL_START\n            };\n            stringToAWSRealTime = JSON.stringify(subscriptionMessage);\n            _j.label = 3;\n          case 3:\n            _j.trys.push([3, 5,, 6]);\n            this.connectionStateMonitor.record(CONNECTION_CHANGE.OPENING_CONNECTION);\n            return [4 /*yield*/, this._initializeWebSocketConnection({\n              apiKey: apiKey,\n              appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n              authenticationType: authenticationType,\n              region: region,\n              additionalHeaders: additionalHeaders\n            })];\n          case 4:\n            _j.sent();\n            return [3 /*break*/, 6];\n          case 5:\n            err_2 = _j.sent();\n            this._logStartSubscriptionError(subscriptionId, observer, err_2);\n            return [2 /*return*/];\n          case 6:\n            _g = (_b = this.subscriptionObserverMap.get(subscriptionId)) !== null && _b !== void 0 ? _b : {}, subscriptionFailedCallback = _g.subscriptionFailedCallback, subscriptionReadyCallback = _g.subscriptionReadyCallback;\n            // This must be done before sending the message in order to be listening immediately\n            this.subscriptionObserverMap.set(subscriptionId, {\n              observer: observer,\n              subscriptionState: subscriptionState,\n              query: query !== null && query !== void 0 ? query : '',\n              variables: variables !== null && variables !== void 0 ? variables : {},\n              subscriptionReadyCallback: subscriptionReadyCallback,\n              subscriptionFailedCallback: subscriptionFailedCallback,\n              startAckTimeoutId: setTimeout(function () {\n                _this._timeoutStartSubscriptionAck.call(_this, subscriptionId);\n              }, START_ACK_TIMEOUT)\n            });\n            if (this.awsRealTimeSocket) {\n              this.awsRealTimeSocket.send(stringToAWSRealTime);\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  // Log logic for start subscription failures\n  AWSAppSyncRealTimeProvider.prototype._logStartSubscriptionError = function (subscriptionId, observer, err) {\n    var _a;\n    logger.debug({\n      err: err\n    });\n    var message = String((_a = err.message) !== null && _a !== void 0 ? _a : '');\n    // Resolving to give the state observer time to propogate the update\n    Promise.resolve(this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED));\n    // Capture the error only when the network didn't cause disruption\n    if (this.connectionState !== ConnectionState.ConnectionDisruptedPendingNetwork) {\n      // When the error is non-retriable, error out the observable\n      if (isNonRetryableError(err)) {\n        observer.error({\n          errors: [__assign({}, new GraphQLError(CONTROL_MSG.CONNECTION_FAILED + \": \" + message))]\n        });\n      } else {\n        logger.debug(CONTROL_MSG.CONNECTION_FAILED + \": \" + message);\n      }\n      var subscriptionFailedCallback = (this.subscriptionObserverMap.get(subscriptionId) || {}).subscriptionFailedCallback;\n      // Notify concurrent unsubscription\n      if (typeof subscriptionFailedCallback === 'function') {\n        subscriptionFailedCallback();\n      }\n    }\n  };\n  // Waiting that subscription has been connected before trying to unsubscribe\n  AWSAppSyncRealTimeProvider.prototype._waitForSubscriptionToBeConnected = function (subscriptionId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var subscriptionObserver, subscriptionState;\n      var _this = this;\n      return __generator(this, function (_a) {\n        subscriptionObserver = this.subscriptionObserverMap.get(subscriptionId);\n        if (subscriptionObserver) {\n          subscriptionState = subscriptionObserver.subscriptionState;\n          // This in case unsubscribe is invoked before sending start subscription message\n          if (subscriptionState === SUBSCRIPTION_STATUS.PENDING) {\n            return [2 /*return*/, new Promise(function (res, rej) {\n              var observer = subscriptionObserver.observer,\n                subscriptionState = subscriptionObserver.subscriptionState,\n                variables = subscriptionObserver.variables,\n                query = subscriptionObserver.query;\n              _this.subscriptionObserverMap.set(subscriptionId, {\n                observer: observer,\n                subscriptionState: subscriptionState,\n                variables: variables,\n                query: query,\n                subscriptionReadyCallback: res,\n                subscriptionFailedCallback: rej\n              });\n            })];\n          }\n        }\n        return [2 /*return*/];\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._sendUnsubscriptionMessage = function (subscriptionId) {\n    try {\n      if (this.awsRealTimeSocket && this.awsRealTimeSocket.readyState === WebSocket.OPEN && this.socketStatus === SOCKET_STATUS.READY) {\n        // Preparing unsubscribe message to stop receiving messages for that subscription\n        var unsubscribeMessage = {\n          id: subscriptionId,\n          type: MESSAGE_TYPES.GQL_STOP\n        };\n        var stringToAWSRealTime = JSON.stringify(unsubscribeMessage);\n        this.awsRealTimeSocket.send(stringToAWSRealTime);\n      }\n    } catch (err) {\n      // If GQL_STOP is not sent because of disconnection issue, then there is nothing the client can do\n      logger.debug({\n        err: err\n      });\n    }\n  };\n  AWSAppSyncRealTimeProvider.prototype._removeSubscriptionObserver = function (subscriptionId) {\n    this.subscriptionObserverMap.delete(subscriptionId);\n    // Verifying 1000ms after removing subscription in case there are new subscription unmount/mount\n    setTimeout(this._closeSocketIfRequired.bind(this), 1000);\n  };\n  AWSAppSyncRealTimeProvider.prototype._closeSocketIfRequired = function () {\n    if (this.subscriptionObserverMap.size > 0) {\n      // Active subscriptions on the WebSocket\n      return;\n    }\n    if (!this.awsRealTimeSocket) {\n      this.socketStatus = SOCKET_STATUS.CLOSED;\n      return;\n    }\n    this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSING_CONNECTION);\n    if (this.awsRealTimeSocket.bufferedAmount > 0) {\n      // Still data on the WebSocket\n      setTimeout(this._closeSocketIfRequired.bind(this), 1000);\n    } else {\n      logger.debug('closing WebSocket...');\n      if (this.keepAliveTimeoutId) {\n        clearTimeout(this.keepAliveTimeoutId);\n      }\n      if (this.keepAliveAlertTimeoutId) {\n        clearTimeout(this.keepAliveAlertTimeoutId);\n      }\n      var tempSocket = this.awsRealTimeSocket;\n      // Cleaning callbacks to avoid race condition, socket still exists\n      tempSocket.onclose = null;\n      tempSocket.onerror = null;\n      tempSocket.close(1000);\n      this.awsRealTimeSocket = undefined;\n      this.socketStatus = SOCKET_STATUS.CLOSED;\n      this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n    }\n  };\n  AWSAppSyncRealTimeProvider.prototype._handleIncomingSubscriptionMessage = function (message) {\n    var _this = this;\n    if (typeof message.data !== 'string') {\n      return;\n    }\n    logger.debug(\"subscription message from AWS AppSync RealTime: \" + message.data);\n    var _a = JSON.parse(String(message.data)),\n      _b = _a.id,\n      id = _b === void 0 ? '' : _b,\n      payload = _a.payload,\n      type = _a.type;\n    var _c = this.subscriptionObserverMap.get(id) || {},\n      _d = _c.observer,\n      observer = _d === void 0 ? null : _d,\n      _e = _c.query,\n      query = _e === void 0 ? '' : _e,\n      _f = _c.variables,\n      variables = _f === void 0 ? {} : _f,\n      startAckTimeoutId = _c.startAckTimeoutId,\n      subscriptionReadyCallback = _c.subscriptionReadyCallback,\n      subscriptionFailedCallback = _c.subscriptionFailedCallback;\n    logger.debug({\n      id: id,\n      observer: observer,\n      query: query,\n      variables: variables\n    });\n    if (type === MESSAGE_TYPES.GQL_DATA && payload && payload.data) {\n      if (observer) {\n        observer.next(payload);\n      } else {\n        logger.debug(\"observer not found for id: \" + id);\n      }\n      return;\n    }\n    if (type === MESSAGE_TYPES.GQL_START_ACK) {\n      logger.debug(\"subscription ready for \" + JSON.stringify({\n        query: query,\n        variables: variables\n      }));\n      if (typeof subscriptionReadyCallback === 'function') {\n        subscriptionReadyCallback();\n      }\n      if (startAckTimeoutId) clearTimeout(startAckTimeoutId);\n      dispatchApiEvent(CONTROL_MSG.SUBSCRIPTION_ACK, {\n        query: query,\n        variables: variables\n      }, 'Connection established for subscription');\n      var subscriptionState = SUBSCRIPTION_STATUS.CONNECTED;\n      if (observer) {\n        this.subscriptionObserverMap.set(id, {\n          observer: observer,\n          query: query,\n          variables: variables,\n          startAckTimeoutId: undefined,\n          subscriptionState: subscriptionState,\n          subscriptionReadyCallback: subscriptionReadyCallback,\n          subscriptionFailedCallback: subscriptionFailedCallback\n        });\n      }\n      this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_ESTABLISHED);\n      return;\n    }\n    if (type === MESSAGE_TYPES.GQL_CONNECTION_KEEP_ALIVE) {\n      if (this.keepAliveTimeoutId) clearTimeout(this.keepAliveTimeoutId);\n      if (this.keepAliveAlertTimeoutId) clearTimeout(this.keepAliveAlertTimeoutId);\n      this.keepAliveTimeoutId = setTimeout(function () {\n        return _this._errorDisconnect(CONTROL_MSG.TIMEOUT_DISCONNECT);\n      }, this.keepAliveTimeout);\n      this.keepAliveAlertTimeoutId = setTimeout(function () {\n        _this.connectionStateMonitor.record(CONNECTION_CHANGE.KEEP_ALIVE_MISSED);\n      }, DEFAULT_KEEP_ALIVE_ALERT_TIMEOUT);\n      this.connectionStateMonitor.record(CONNECTION_CHANGE.KEEP_ALIVE);\n      return;\n    }\n    if (type === MESSAGE_TYPES.GQL_ERROR) {\n      var subscriptionState = SUBSCRIPTION_STATUS.FAILED;\n      if (observer) {\n        this.subscriptionObserverMap.set(id, {\n          observer: observer,\n          query: query,\n          variables: variables,\n          startAckTimeoutId: startAckTimeoutId,\n          subscriptionReadyCallback: subscriptionReadyCallback,\n          subscriptionFailedCallback: subscriptionFailedCallback,\n          subscriptionState: subscriptionState\n        });\n        logger.debug(CONTROL_MSG.CONNECTION_FAILED + \": \" + JSON.stringify(payload));\n        observer.error({\n          errors: [__assign({}, new GraphQLError(CONTROL_MSG.CONNECTION_FAILED + \": \" + JSON.stringify(payload)))]\n        });\n        if (startAckTimeoutId) clearTimeout(startAckTimeoutId);\n        if (typeof subscriptionFailedCallback === 'function') {\n          subscriptionFailedCallback();\n        }\n      }\n    }\n  };\n  AWSAppSyncRealTimeProvider.prototype._errorDisconnect = function (msg) {\n    logger.debug(\"Disconnect error: \" + msg);\n    if (this.awsRealTimeSocket) {\n      this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n      this.awsRealTimeSocket.close();\n    }\n    this.socketStatus = SOCKET_STATUS.CLOSED;\n  };\n  AWSAppSyncRealTimeProvider.prototype._timeoutStartSubscriptionAck = function (subscriptionId) {\n    var subscriptionObserver = this.subscriptionObserverMap.get(subscriptionId);\n    if (subscriptionObserver) {\n      var observer = subscriptionObserver.observer,\n        query = subscriptionObserver.query,\n        variables = subscriptionObserver.variables;\n      if (!observer) {\n        return;\n      }\n      this.subscriptionObserverMap.set(subscriptionId, {\n        observer: observer,\n        query: query,\n        variables: variables,\n        subscriptionState: SUBSCRIPTION_STATUS.FAILED\n      });\n      this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n      logger.debug('timeoutStartSubscription', JSON.stringify({\n        query: query,\n        variables: variables\n      }));\n    }\n  };\n  AWSAppSyncRealTimeProvider.prototype._initializeWebSocketConnection = function (_a) {\n    var _this = this;\n    var appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint,\n      authenticationType = _a.authenticationType,\n      apiKey = _a.apiKey,\n      region = _a.region,\n      additionalHeaders = _a.additionalHeaders;\n    if (this.socketStatus === SOCKET_STATUS.READY) {\n      return;\n    }\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var payloadString, authHeader, headerString, headerQs, payloadQs, discoverableEndpoint, protocol, awsRealTimeUrl, err_3;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              this.promiseArray.push({\n                res: res,\n                rej: rej\n              });\n              if (!(this.socketStatus === SOCKET_STATUS.CLOSED)) return [3 /*break*/, 5];\n              _a.label = 1;\n            case 1:\n              _a.trys.push([1, 4,, 5]);\n              this.socketStatus = SOCKET_STATUS.CONNECTING;\n              payloadString = '{}';\n              return [4 /*yield*/, this._awsRealTimeHeaderBasedAuth({\n                authenticationType: authenticationType,\n                payload: payloadString,\n                canonicalUri: '/connect',\n                apiKey: apiKey,\n                appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n                region: region,\n                additionalHeaders: additionalHeaders\n              })];\n            case 2:\n              authHeader = _a.sent();\n              headerString = authHeader ? JSON.stringify(authHeader) : '';\n              headerQs = Buffer.from(headerString).toString('base64');\n              payloadQs = Buffer.from(payloadString).toString('base64');\n              discoverableEndpoint = appSyncGraphqlEndpoint !== null && appSyncGraphqlEndpoint !== void 0 ? appSyncGraphqlEndpoint : '';\n              if (this.isCustomDomain(discoverableEndpoint)) {\n                discoverableEndpoint = discoverableEndpoint.concat(customDomainPath);\n              } else {\n                discoverableEndpoint = discoverableEndpoint.replace('appsync-api', 'appsync-realtime-api').replace('gogi-beta', 'grt-beta');\n              }\n              protocol = this.isSSLEnabled ? 'wss://' : 'ws://';\n              discoverableEndpoint = discoverableEndpoint.replace('https://', protocol).replace('http://', protocol);\n              awsRealTimeUrl = discoverableEndpoint + \"?header=\" + headerQs + \"&payload=\" + payloadQs;\n              return [4 /*yield*/, this._initializeRetryableHandshake(awsRealTimeUrl)];\n            case 3:\n              _a.sent();\n              this.promiseArray.forEach(function (_a) {\n                var res = _a.res;\n                logger.debug('Notifying connection successful');\n                res();\n              });\n              this.socketStatus = SOCKET_STATUS.READY;\n              this.promiseArray = [];\n              return [3 /*break*/, 5];\n            case 4:\n              err_3 = _a.sent();\n              logger.debug('Connection exited with', err_3);\n              this.promiseArray.forEach(function (_a) {\n                var rej = _a.rej;\n                return rej(err_3);\n              });\n              this.promiseArray = [];\n              if (this.awsRealTimeSocket && this.awsRealTimeSocket.readyState === WebSocket.OPEN) {\n                this.awsRealTimeSocket.close(3001);\n              }\n              this.awsRealTimeSocket = undefined;\n              this.socketStatus = SOCKET_STATUS.CLOSED;\n              return [3 /*break*/, 5];\n            case 5:\n              return [2 /*return*/];\n          }\n        });\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._initializeRetryableHandshake = function (awsRealTimeUrl) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug(\"Initializaling retryable Handshake\");\n            return [4 /*yield*/, jitteredExponentialRetry(this._initializeHandshake.bind(this), [awsRealTimeUrl], MAX_DELAY_MS)];\n          case 1:\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._initializeHandshake = function (awsRealTimeUrl) {\n    return __awaiter(this, void 0, void 0, function () {\n      var err_4, _a, errorType, errorCode;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            logger.debug(\"Initializing handshake \" + awsRealTimeUrl);\n            _b.label = 1;\n          case 1:\n            _b.trys.push([1, 4,, 5]);\n            return [4 /*yield*/, function () {\n              return new Promise(function (res, rej) {\n                var newSocket = _this.getNewWebSocket(awsRealTimeUrl, 'graphql-ws');\n                newSocket.onerror = function () {\n                  logger.debug(\"WebSocket connection error\");\n                };\n                newSocket.onclose = function () {\n                  rej(new Error('Connection handshake error'));\n                };\n                newSocket.onopen = function () {\n                  _this.awsRealTimeSocket = newSocket;\n                  return res();\n                };\n              });\n            }()];\n          case 2:\n            _b.sent();\n            // Step 2: wait for ack from AWS AppSyncReaTime after sending init\n            return [4 /*yield*/, function () {\n              return new Promise(function (res, rej) {\n                if (_this.awsRealTimeSocket) {\n                  var ackOk_1 = false;\n                  _this.awsRealTimeSocket.onerror = function (error) {\n                    logger.debug(\"WebSocket error \" + JSON.stringify(error));\n                  };\n                  _this.awsRealTimeSocket.onclose = function (event) {\n                    logger.debug(\"WebSocket closed \" + event.reason);\n                    rej(new Error(JSON.stringify(event)));\n                  };\n                  _this.awsRealTimeSocket.onmessage = function (message) {\n                    if (typeof message.data !== 'string') {\n                      return;\n                    }\n                    logger.debug(\"subscription message from AWS AppSyncRealTime: \" + message.data + \" \");\n                    var data = JSON.parse(message.data);\n                    var type = data.type,\n                      _a = data.payload,\n                      _b = (_a === void 0 ? {} : _a).connectionTimeoutMs,\n                      connectionTimeoutMs = _b === void 0 ? DEFAULT_KEEP_ALIVE_TIMEOUT : _b;\n                    if (type === MESSAGE_TYPES.GQL_CONNECTION_ACK) {\n                      ackOk_1 = true;\n                      if (_this.awsRealTimeSocket) {\n                        _this.keepAliveTimeout = connectionTimeoutMs;\n                        _this.awsRealTimeSocket.onmessage = _this._handleIncomingSubscriptionMessage.bind(_this);\n                        _this.awsRealTimeSocket.onerror = function (err) {\n                          logger.debug(err);\n                          _this._errorDisconnect(CONTROL_MSG.CONNECTION_CLOSED);\n                        };\n                        _this.awsRealTimeSocket.onclose = function (event) {\n                          logger.debug(\"WebSocket closed \" + event.reason);\n                          _this._errorDisconnect(CONTROL_MSG.CONNECTION_CLOSED);\n                        };\n                      }\n                      res('Cool, connected to AWS AppSyncRealTime');\n                      return;\n                    }\n                    if (type === MESSAGE_TYPES.GQL_CONNECTION_ERROR) {\n                      var _c = data.payload,\n                        _d = (_c === void 0 ? {} : _c).errors,\n                        _e = __read(_d === void 0 ? [] : _d, 1),\n                        _f = _e[0],\n                        _g = _f === void 0 ? {} : _f,\n                        _h = _g.errorType,\n                        errorType = _h === void 0 ? '' : _h,\n                        _j = _g.errorCode,\n                        errorCode = _j === void 0 ? 0 : _j;\n                      rej({\n                        errorType: errorType,\n                        errorCode: errorCode\n                      });\n                    }\n                  };\n                  var gqlInit = {\n                    type: MESSAGE_TYPES.GQL_CONNECTION_INIT\n                  };\n                  _this.awsRealTimeSocket.send(JSON.stringify(gqlInit));\n                  var checkAckOk_1 = function (ackOk) {\n                    if (!ackOk) {\n                      _this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_FAILED);\n                      rej(new Error(\"Connection timeout: ack from AWSAppSyncRealTime was not received after \" + CONNECTION_INIT_TIMEOUT + \" ms\"));\n                    }\n                  };\n                  setTimeout(function () {\n                    return checkAckOk_1(ackOk_1);\n                  }, CONNECTION_INIT_TIMEOUT);\n                }\n              });\n            }()];\n          case 3:\n            // Step 2: wait for ack from AWS AppSyncReaTime after sending init\n            _b.sent();\n            return [3 /*break*/, 5];\n          case 4:\n            err_4 = _b.sent();\n            _a = err_4, errorType = _a.errorType, errorCode = _a.errorCode;\n            if (NON_RETRYABLE_CODES.includes(errorCode)) {\n              throw new NonRetryableError(errorType);\n            } else if (errorType) {\n              throw new Error(errorType);\n            } else {\n              throw err_4;\n            }\n            return [3 /*break*/, 5];\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeHeaderBasedAuth = function (_a) {\n    var authenticationType = _a.authenticationType,\n      payload = _a.payload,\n      canonicalUri = _a.canonicalUri,\n      appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint,\n      apiKey = _a.apiKey,\n      region = _a.region,\n      additionalHeaders = _a.additionalHeaders;\n    return __awaiter(this, void 0, void 0, function () {\n      var headerHandler, handler, host, result;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            headerHandler = {\n              API_KEY: this._awsRealTimeApiKeyHeader.bind(this),\n              AWS_IAM: this._awsRealTimeIAMHeader.bind(this),\n              OPENID_CONNECT: this._awsRealTimeOPENIDHeader.bind(this),\n              AMAZON_COGNITO_USER_POOLS: this._awsRealTimeCUPHeader.bind(this),\n              AWS_LAMBDA: this._customAuthHeader\n            };\n            if (!(!authenticationType || !headerHandler[authenticationType])) return [3 /*break*/, 1];\n            logger.debug(\"Authentication type \" + authenticationType + \" not supported\");\n            return [2 /*return*/, undefined];\n          case 1:\n            handler = headerHandler[authenticationType];\n            host = url.parse(appSyncGraphqlEndpoint !== null && appSyncGraphqlEndpoint !== void 0 ? appSyncGraphqlEndpoint : '').host;\n            logger.debug(\"Authenticating with \" + authenticationType);\n            return [4 /*yield*/, handler({\n              payload: payload,\n              canonicalUri: canonicalUri,\n              appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n              apiKey: apiKey,\n              region: region,\n              host: host,\n              additionalHeaders: additionalHeaders\n            })];\n          case 2:\n            result = _b.sent();\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeCUPHeader = function (_a) {\n    var host = _a.host;\n    return __awaiter(this, void 0, void 0, function () {\n      var session;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, Auth.currentSession()];\n          case 1:\n            session = _b.sent();\n            return [2 /*return*/, {\n              Authorization: session.getAccessToken().getJwtToken(),\n              host: host\n            }];\n        }\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeOPENIDHeader = function (_a) {\n    var host = _a.host;\n    return __awaiter(this, void 0, void 0, function () {\n      var token, federatedInfo, currentUser;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, Cache.getItem('federatedInfo')];\n          case 1:\n            federatedInfo = _b.sent();\n            if (!federatedInfo) return [3 /*break*/, 2];\n            token = federatedInfo.token;\n            return [3 /*break*/, 4];\n          case 2:\n            return [4 /*yield*/, Auth.currentAuthenticatedUser()];\n          case 3:\n            currentUser = _b.sent();\n            if (currentUser) {\n              token = currentUser.token;\n            }\n            _b.label = 4;\n          case 4:\n            if (!token) {\n              throw new Error('No federated jwt');\n            }\n            return [2 /*return*/, {\n              Authorization: token,\n              host: host\n            }];\n        }\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeApiKeyHeader = function (_a) {\n    var apiKey = _a.apiKey,\n      host = _a.host;\n    return __awaiter(this, void 0, void 0, function () {\n      var dt, dtStr;\n      return __generator(this, function (_b) {\n        dt = new Date();\n        dtStr = dt.toISOString().replace(/[:\\-]|\\.\\d{3}/g, '');\n        return [2 /*return*/, {\n          host: host,\n          'x-amz-date': dtStr,\n          'x-api-key': apiKey\n        }];\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeIAMHeader = function (_a) {\n    var payload = _a.payload,\n      canonicalUri = _a.canonicalUri,\n      appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint,\n      region = _a.region;\n    return __awaiter(this, void 0, void 0, function () {\n      var endpointInfo, credentialsOK, creds, request, signed_params;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            endpointInfo = {\n              region: region,\n              service: 'appsync'\n            };\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _b.sent();\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n            return [4 /*yield*/, Credentials.get().then(function (credentials) {\n              var _a = credentials,\n                secretAccessKey = _a.secretAccessKey,\n                accessKeyId = _a.accessKeyId,\n                sessionToken = _a.sessionToken;\n              return {\n                secret_key: secretAccessKey,\n                access_key: accessKeyId,\n                session_token: sessionToken\n              };\n            })];\n          case 2:\n            creds = _b.sent();\n            request = {\n              url: \"\" + appSyncGraphqlEndpoint + canonicalUri,\n              data: payload,\n              method: 'POST',\n              headers: __assign({}, AWS_APPSYNC_REALTIME_HEADERS)\n            };\n            signed_params = Signer.sign(request, creds, endpointInfo);\n            return [2 /*return*/, signed_params.headers];\n        }\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._customAuthHeader = function (_a) {\n    var host = _a.host,\n      additionalHeaders = _a.additionalHeaders;\n    if (!additionalHeaders || !additionalHeaders['Authorization']) {\n      throw new Error('No auth token specified');\n    }\n    return {\n      Authorization: additionalHeaders.Authorization,\n      host: host\n    };\n  };\n  /**\n   * @private\n   */\n  AWSAppSyncRealTimeProvider.prototype._ensureCredentials = function () {\n    return Credentials.get().then(function (credentials) {\n      if (!credentials) return false;\n      var cred = Credentials.shear(credentials);\n      logger.debug('set credentials for AWSAppSyncRealTimeProvider', cred);\n      return true;\n    }).catch(function (err) {\n      logger.warn('ensure credentials error', err);\n      return false;\n    });\n  };\n  return AWSAppSyncRealTimeProvider;\n}(AbstractPubSubProvider);\nexport { AWSAppSyncRealTimeProvider };","map":{"version":3,"names":["Observable","GraphQLError","url","v4","uuid","Buffer","Logger","Credentials","Signer","Hub","USER_AGENT_HEADER","jitteredExponentialRetry","NonRetryableError","isNonRetryableError","getAmplifyUserAgent","Cache","Auth","AbstractPubSubProvider","CONTROL_MSG","ConnectionState","AMPLIFY_SYMBOL","AWS_APPSYNC_REALTIME_HEADERS","CONNECTION_INIT_TIMEOUT","DEFAULT_KEEP_ALIVE_TIMEOUT","DEFAULT_KEEP_ALIVE_ALERT_TIMEOUT","MAX_DELAY_MS","MESSAGE_TYPES","NON_RETRYABLE_CODES","SOCKET_STATUS","START_ACK_TIMEOUT","SUBSCRIPTION_STATUS","CONNECTION_STATE_CHANGE","ConnectionStateMonitor","CONNECTION_CHANGE","ReconnectEvent","ReconnectionMonitor","logger","dispatchApiEvent","event","data","message","dispatch","standardDomainPattern","customDomainPath","AWSAppSyncRealTimeProvider","_super","__extends","options","_this","call","socketStatus","CLOSED","keepAliveTimeout","subscriptionObserverMap","Map","promiseArray","connectionStateMonitor","reconnectionMonitor","connectionStateMonitorSubscription","connectionStateObservable","subscribe","connectionState","provider","ConnectionDisrupted","record","START_RECONNECT","Connected","ConnectedPendingDisconnect","ConnectedPendingKeepAlive","ConnectedPendingNetwork","ConnectionDisruptedPendingNetwork","Disconnected","includes","HALT_RECONNECT","prototype","close","CONNECTION_FAILED","unsubscribe","getNewWebSocket","protocol","WebSocket","getProviderName","newClient","Error","publish","_topics","_msg","_options","isCustomDomain","match","customUserAgentDetails","appSyncGraphqlEndpoint","observer","error","errors","complete","subscriptionStartActive_1","subscriptionId_1","startSubscription_1","startSubscriptionPromise","_startSubscriptionWithAWSAppSyncRealTime","subscriptionId","catch","err","debug","REALTIME_SUBSCRIPTION_INIT_ERROR","finally","reconnectSubscription_1","addObserver","__awaiter","_waitForSubscriptionToBeConnected","_a","sent","subscriptionState","get","CONNECTED","_sendUnsubscriptionMessage","err_1","_removeSubscriptionObserver","Object","defineProperty","authenticationType","query","variables","apiKey","region","_c","graphql_headers","_d","additionalHeaders","PENDING","set","startAckTimeoutId","undefined","dataString","JSON","stringify","_awsRealTimeHeaderBasedAuth","payload","canonicalUri","_j","headerObj","__assign","apply","_f","concat","_h","subscriptionMessage","id","extensions","authorization","type","GQL_START","stringToAWSRealTime","OPENING_CONNECTION","_initializeWebSocketConnection","_logStartSubscriptionError","err_2","_g","_b","subscriptionFailedCallback","subscriptionReadyCallback","setTimeout","_timeoutStartSubscriptionAck","awsRealTimeSocket","send","String","Promise","resolve","subscriptionObserver","res","rej","readyState","OPEN","READY","unsubscribeMessage","GQL_STOP","delete","_closeSocketIfRequired","bind","size","CLOSING_CONNECTION","bufferedAmount","keepAliveTimeoutId","clearTimeout","keepAliveAlertTimeoutId","tempSocket","onclose","onerror","_handleIncomingSubscriptionMessage","parse","_e","GQL_DATA","next","GQL_START_ACK","SUBSCRIPTION_ACK","CONNECTION_ESTABLISHED","GQL_CONNECTION_KEEP_ALIVE","_errorDisconnect","TIMEOUT_DISCONNECT","KEEP_ALIVE_MISSED","KEEP_ALIVE","GQL_ERROR","FAILED","msg","push","CONNECTING","payloadString","authHeader","headerString","headerQs","from","toString","payloadQs","discoverableEndpoint","replace","isSSLEnabled","awsRealTimeUrl","_initializeRetryableHandshake","forEach","err_3","_initializeHandshake","newSocket","onopen","ackOk_1","reason","onmessage","connectionTimeoutMs","GQL_CONNECTION_ACK","CONNECTION_CLOSED","GQL_CONNECTION_ERROR","__read","errorType","errorCode","gqlInit","GQL_CONNECTION_INIT","checkAckOk_1","ackOk","err_4","headerHandler","API_KEY","_awsRealTimeApiKeyHeader","AWS_IAM","_awsRealTimeIAMHeader","OPENID_CONNECT","_awsRealTimeOPENIDHeader","AMAZON_COGNITO_USER_POOLS","_awsRealTimeCUPHeader","AWS_LAMBDA","_customAuthHeader","handler","host","result","currentSession","session","Authorization","getAccessToken","getJwtToken","getItem","federatedInfo","token","currentAuthenticatedUser","currentUser","dt","Date","dtStr","toISOString","endpointInfo","service","_ensureCredentials","credentialsOK","then","credentials","secretAccessKey","accessKeyId","sessionToken","secret_key","access_key","session_token","creds","request","method","headers","signed_params","sign","cred","shear","warn"],"sources":["../../../src/Providers/AWSAppSyncRealTimeProvider/index.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}