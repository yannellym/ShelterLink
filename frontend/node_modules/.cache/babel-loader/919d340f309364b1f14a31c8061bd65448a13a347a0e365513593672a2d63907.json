{"ast":null,"code":"import { __assign, __read, __spread } from \"tslib\";\nimport { extractPrimaryKeyFieldNames, extractPrimaryKeyValues } from '../util';\nexport { ModelSortPredicateCreator } from './sort';\nvar predicatesAllSet = new WeakSet();\nexport function isPredicatesAll(predicate) {\n  return predicatesAllSet.has(predicate);\n}\n/**\n * The valid logical grouping keys for a predicate group.\n */\nvar groupKeys = new Set(['and', 'or', 'not']);\n/**\n * Determines whether an object is a GraphQL style predicate \"group\", which must be an\n * object containing a single \"group key\", which then contains the child condition(s).\n *\n * E.g.,\n *\n * ```\n * { and: [ ... ] }\n * { not: { ... } }\n * ```\n *\n * @param o The object to test.\n */\nvar isGroup = function (o) {\n  var keys = __spread(Object.keys(o));\n  return keys.length === 1 && groupKeys.has(keys[0]);\n};\n/**\n * Determines whether an object specifies no conditions and should match everything,\n * as would be the case with `Predicates.ALL`.\n *\n * @param o The object to test.\n */\nvar isEmpty = function (o) {\n  return !Array.isArray(o) && Object.keys(o).length === 0;\n};\n/**\n * The valid comparison operators that can be used as keys in a predicate comparison object.\n */\nexport var comparisonKeys = new Set(['eq', 'ne', 'gt', 'lt', 'ge', 'le', 'contains', 'notContains', 'beginsWith', 'between']);\n/**\n * Determines whether an object is a GraphQL style predicate comparison node, which must\n * be an object containing a single \"comparison operator\" key, which then contains the\n * operand or operands to compare against.\n *\n * @param o The object to test.\n */\nvar isComparison = function (o) {\n  var keys = __spread(Object.keys(o));\n  return !Array.isArray(o) && keys.length === 1 && comparisonKeys.has(keys[0]);\n};\n/**\n * A light check to determine whether an object is a valid GraphQL Condition AST.\n *\n * @param o The object to test.\n */\nvar isValid = function (o) {\n  if (Array.isArray(o)) {\n    return o.every(function (v) {\n      return isValid(v);\n    });\n  } else {\n    return Object.keys(o).length <= 1;\n  }\n};\n// This symbol is not used at runtime, only its type (unique symbol)\nexport var PredicateAll = Symbol('A predicate that matches all records');\nvar Predicates = /** @class */function () {\n  function Predicates() {}\n  Object.defineProperty(Predicates, \"ALL\", {\n    get: function () {\n      var predicate = function (c) {\n        return c;\n      };\n      predicatesAllSet.add(predicate);\n      return predicate;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Predicates;\n}();\nexport { Predicates };\nvar ModelPredicateCreator = /** @class */function () {\n  function ModelPredicateCreator() {}\n  /**\n   * Determines whether the given storage predicate (lookup key) is a predicate\n   * key that DataStore recognizes.\n   *\n   * @param predicate The storage predicate (lookup key) to test.\n   */\n  ModelPredicateCreator.isValidPredicate = function (predicate) {\n    return ModelPredicateCreator.predicateGroupsMap.has(predicate);\n  };\n  /**\n   * Looks for the storage predicate AST that corresponds to a given storage\n   * predicate key.\n   *\n   * The key must have been created internally by a DataStore utility\n   * method, such as `ModelPredicate.createFromAST()`.\n   *\n   * @param predicate The predicate reference to look up.\n   * @param throwOnInvalid Whether to throw an exception if the predicate\n   * isn't a valid DataStore predicate.\n   */\n  ModelPredicateCreator.getPredicates = function (predicate, throwOnInvalid) {\n    if (throwOnInvalid === void 0) {\n      throwOnInvalid = true;\n    }\n    if (throwOnInvalid && !ModelPredicateCreator.isValidPredicate(predicate)) {\n      throw new Error('The predicate is not valid');\n    }\n    return ModelPredicateCreator.predicateGroupsMap.get(predicate);\n  };\n  /**\n   * using the PK values from the given `model` (which can be a partial of T\n   * Creates a predicate that matches an instance described by `modelDefinition`\n   * that contains only PK field values.)\n   *\n   * @param modelDefinition The model definition to create a predicate for.\n   * @param model The model instance to extract value equalities from.\n   */\n  ModelPredicateCreator.createForPk = function (modelDefinition, model) {\n    var keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n    var keyValues = extractPrimaryKeyValues(model, keyFields);\n    var predicate = this.createFromAST(modelDefinition, {\n      and: keyFields.map(function (field, idx) {\n        var _a;\n        var operand = keyValues[idx];\n        return _a = {}, _a[field] = {\n          eq: operand\n        }, _a;\n      })\n    });\n    return predicate;\n  };\n  /**\n   * Searches a `Model` table for records matching the given equalities object.\n   *\n   * This only matches against fields given in the equalities object. No other\n   * fields are tested by the predicate.\n   *\n   * @param modelDefinition The model we need a predicate for.\n   * @param flatEqualities An object holding field equalities to search for.\n   */\n  ModelPredicateCreator.createFromFlatEqualities = function (modelDefinition, flatEqualities) {\n    var ast = {\n      and: Object.entries(flatEqualities).map(function (_a) {\n        var _b;\n        var _c = __read(_a, 2),\n          k = _c[0],\n          v = _c[1];\n        return _b = {}, _b[k] = {\n          eq: v\n        }, _b;\n      })\n    };\n    return this.createFromAST(modelDefinition, ast);\n  };\n  /**\n   * Accepts a GraphQL style filter predicate tree and transforms it into an\n   * AST that can be used for a storage adapter predicate. Example input:\n   *\n   * ```js\n   * {\n   * \tand: [\n   * \t\t{ name: { eq: \"Bob Jones\" } },\n   * \t\t{ age: { between: [32, 64] } },\n   * \t\t{ not: {\n   * \t\t\tor: [\n   * \t\t\t\t{ favoriteFood: { eq: 'pizza' } },\n   * \t\t\t\t{ favoriteFood: { eq: 'tacos' } },\n   * \t\t\t]\n   * \t\t}}\n   * \t]\n   * }\n   * ```\n   *\n   * @param gql GraphQL style filter node.\n   */\n  ModelPredicateCreator.transformGraphQLFilterNodeToPredicateAST = function (gql) {\n    var _this = this;\n    if (!isValid(gql)) {\n      throw new Error('Invalid GraphQL Condition or subtree: ' + JSON.stringify(gql));\n    }\n    if (isEmpty(gql)) {\n      return {\n        type: 'and',\n        predicates: []\n      };\n    } else if (isGroup(gql)) {\n      var groupkey = Object.keys(gql)[0];\n      var children = this.transformGraphQLFilterNodeToPredicateAST(gql[groupkey]);\n      return {\n        type: groupkey,\n        predicates: Array.isArray(children) ? children : [children]\n      };\n    } else if (isComparison(gql)) {\n      var operatorKey = Object.keys(gql)[0];\n      return {\n        operator: operatorKey,\n        operand: gql[operatorKey]\n      };\n    } else {\n      if (Array.isArray(gql)) {\n        return gql.map(function (o) {\n          return _this.transformGraphQLFilterNodeToPredicateAST(o);\n        });\n      } else {\n        var fieldKey = Object.keys(gql)[0];\n        return __assign({\n          field: fieldKey\n        }, this.transformGraphQLFilterNodeToPredicateAST(gql[fieldKey]));\n      }\n    }\n  };\n  /**\n   * Accepts a GraphQL style filter predicate tree and transforms it into a predicate\n   * that storage adapters understand. Example input:\n   *\n   * ```js\n   * {\n   * \tand: [\n   * \t\t{ name: { eq: \"Bob Jones\" } },\n   * \t\t{ age: { between: [32, 64] } },\n   * \t\t{ not: {\n   * \t\t\tor: [\n   * \t\t\t\t{ favoriteFood: { eq: 'pizza' } },\n   * \t\t\t\t{ favoriteFood: { eq: 'tacos' } },\n   * \t\t\t]\n   * \t\t}}\n   * \t]\n   * }\n   * ```\n   *\n   * @param modelDefinition The model that the AST/predicate must be compatible with.\n   * @param ast The graphQL style AST that should specify conditions for `modelDefinition`.\n   */\n  ModelPredicateCreator.createFromAST = function (modelDefinition, ast) {\n    var key = {};\n    ModelPredicateCreator.predicateGroupsMap.set(key, this.transformGraphQLFilterNodeToPredicateAST(ast));\n    return key;\n  };\n  /**\n   * Map of storage predicates (key objects) to storage predicate AST's.\n   */\n  ModelPredicateCreator.predicateGroupsMap = new WeakMap();\n  return ModelPredicateCreator;\n}();\nexport { ModelPredicateCreator };","map":{"version":3,"names":["extractPrimaryKeyFieldNames","extractPrimaryKeyValues","ModelSortPredicateCreator","predicatesAllSet","WeakSet","isPredicatesAll","predicate","has","groupKeys","Set","isGroup","o","keys","__spread","Object","length","isEmpty","Array","isArray","comparisonKeys","isComparison","isValid","every","v","PredicateAll","Symbol","Predicates","defineProperty","get","c","add","ModelPredicateCreator","isValidPredicate","predicateGroupsMap","getPredicates","throwOnInvalid","Error","createForPk","modelDefinition","model","keyFields","keyValues","createFromAST","and","map","field","idx","operand","_a","eq","createFromFlatEqualities","flatEqualities","ast","entries","_c","__read","k","_b","transformGraphQLFilterNodeToPredicateAST","gql","_this","JSON","stringify","type","predicates","groupkey","children","operatorKey","operator","fieldKey","__assign","key","set","WeakMap"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-amplify/datastore/src/predicates/index.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport {\n\tModelPredicate,\n\tPersistentModel,\n\tPredicatesGroup,\n\tProducerModelPredicate,\n\tSchemaModel,\n} from '../types';\nimport { extractPrimaryKeyFieldNames, extractPrimaryKeyValues } from '../util';\n\nexport { ModelSortPredicateCreator } from './sort';\n\nconst predicatesAllSet = new WeakSet<ProducerModelPredicate<any>>();\n\nexport function isPredicatesAll(\n\tpredicate: any\n): predicate is typeof PredicateAll {\n\treturn predicatesAllSet.has(predicate);\n}\n\n/**\n * The valid logical grouping keys for a predicate group.\n */\nconst groupKeys = new Set(['and', 'or', 'not']);\n\n/**\n * Determines whether an object is a GraphQL style predicate \"group\", which must be an\n * object containing a single \"group key\", which then contains the child condition(s).\n *\n * E.g.,\n *\n * ```\n * { and: [ ... ] }\n * { not: { ... } }\n * ```\n *\n * @param o The object to test.\n */\nconst isGroup = o => {\n\tconst keys = [...Object.keys(o)];\n\treturn keys.length === 1 && groupKeys.has(keys[0]);\n};\n\n/**\n * Determines whether an object specifies no conditions and should match everything,\n * as would be the case with `Predicates.ALL`.\n *\n * @param o The object to test.\n */\nconst isEmpty = o => {\n\treturn !Array.isArray(o) && Object.keys(o).length === 0;\n};\n\n/**\n * The valid comparison operators that can be used as keys in a predicate comparison object.\n */\nexport const comparisonKeys = new Set([\n\t'eq',\n\t'ne',\n\t'gt',\n\t'lt',\n\t'ge',\n\t'le',\n\t'contains',\n\t'notContains',\n\t'beginsWith',\n\t'between',\n]);\n\n/**\n * Determines whether an object is a GraphQL style predicate comparison node, which must\n * be an object containing a single \"comparison operator\" key, which then contains the\n * operand or operands to compare against.\n *\n * @param o The object to test.\n */\nconst isComparison = o => {\n\tconst keys = [...Object.keys(o)];\n\treturn !Array.isArray(o) && keys.length === 1 && comparisonKeys.has(keys[0]);\n};\n\n/**\n * A light check to determine whether an object is a valid GraphQL Condition AST.\n *\n * @param o The object to test.\n */\nconst isValid = o => {\n\tif (Array.isArray(o)) {\n\t\treturn o.every(v => isValid(v));\n\t} else {\n\t\treturn Object.keys(o).length <= 1;\n\t}\n};\n\n// This symbol is not used at runtime, only its type (unique symbol)\nexport const PredicateAll = Symbol('A predicate that matches all records');\n\nexport class Predicates {\n\tpublic static get ALL(): typeof PredicateAll {\n\t\tconst predicate = <ProducerModelPredicate<any>>(c => c);\n\n\t\tpredicatesAllSet.add(predicate);\n\n\t\treturn <typeof PredicateAll>(<unknown>predicate);\n\t}\n}\n\nexport class ModelPredicateCreator {\n\t/**\n\t * Map of storage predicates (key objects) to storage predicate AST's.\n\t */\n\tprivate static predicateGroupsMap = new WeakMap<\n\t\tModelPredicate<any>,\n\t\tPredicatesGroup<any>\n\t>();\n\n\t/**\n\t * Determines whether the given storage predicate (lookup key) is a predicate\n\t * key that DataStore recognizes.\n\t *\n\t * @param predicate The storage predicate (lookup key) to test.\n\t */\n\tstatic isValidPredicate<T extends PersistentModel>(\n\t\tpredicate: any\n\t): predicate is ModelPredicate<T> {\n\t\treturn ModelPredicateCreator.predicateGroupsMap.has(predicate);\n\t}\n\n\t/**\n\t * Looks for the storage predicate AST that corresponds to a given storage\n\t * predicate key.\n\t *\n\t * The key must have been created internally by a DataStore utility\n\t * method, such as `ModelPredicate.createFromAST()`.\n\t *\n\t * @param predicate The predicate reference to look up.\n\t * @param throwOnInvalid Whether to throw an exception if the predicate\n\t * isn't a valid DataStore predicate.\n\t */\n\tstatic getPredicates<T extends PersistentModel>(\n\t\tpredicate: ModelPredicate<T>,\n\t\tthrowOnInvalid: boolean = true\n\t) {\n\t\tif (throwOnInvalid && !ModelPredicateCreator.isValidPredicate(predicate)) {\n\t\t\tthrow new Error('The predicate is not valid');\n\t\t}\n\n\t\treturn ModelPredicateCreator.predicateGroupsMap.get(predicate);\n\t}\n\n\t/**\n\t * using the PK values from the given `model` (which can be a partial of T\n\t * Creates a predicate that matches an instance described by `modelDefinition`\n\t * that contains only PK field values.)\n\t *\n\t * @param modelDefinition The model definition to create a predicate for.\n\t * @param model The model instance to extract value equalities from.\n\t */\n\tstatic createForPk<T extends PersistentModel>(\n\t\tmodelDefinition: SchemaModel,\n\t\tmodel: T\n\t) {\n\t\tconst keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n\t\tconst keyValues = extractPrimaryKeyValues(model, keyFields);\n\n\t\tconst predicate = this.createFromAST<T>(modelDefinition, {\n\t\t\tand: keyFields.map((field, idx) => {\n\t\t\t\tconst operand = keyValues[idx];\n\t\t\t\treturn { [field]: { eq: operand } };\n\t\t\t}),\n\t\t});\n\n\t\treturn predicate;\n\t}\n\n\t/**\n\t * Searches a `Model` table for records matching the given equalities object.\n\t *\n\t * This only matches against fields given in the equalities object. No other\n\t * fields are tested by the predicate.\n\t *\n\t * @param modelDefinition The model we need a predicate for.\n\t * @param flatEqualities An object holding field equalities to search for.\n\t */\n\tstatic createFromFlatEqualities<T extends PersistentModel>(\n\t\tmodelDefinition: SchemaModel,\n\t\tflatEqualities: Record<string, any>\n\t) {\n\t\tconst ast = {\n\t\t\tand: Object.entries(flatEqualities).map(([k, v]) => ({ [k]: { eq: v } })),\n\t\t};\n\t\treturn this.createFromAST<T>(modelDefinition, ast);\n\t}\n\n\t/**\n\t * Accepts a GraphQL style filter predicate tree and transforms it into an\n\t * AST that can be used for a storage adapter predicate. Example input:\n\t *\n\t * ```js\n\t * {\n\t * \tand: [\n\t * \t\t{ name: { eq: \"Bob Jones\" } },\n\t * \t\t{ age: { between: [32, 64] } },\n\t * \t\t{ not: {\n\t * \t\t\tor: [\n\t * \t\t\t\t{ favoriteFood: { eq: 'pizza' } },\n\t * \t\t\t\t{ favoriteFood: { eq: 'tacos' } },\n\t * \t\t\t]\n\t * \t\t}}\n\t * \t]\n\t * }\n\t * ```\n\t *\n\t * @param gql GraphQL style filter node.\n\t */\n\tstatic transformGraphQLFilterNodeToPredicateAST(gql: any) {\n\t\tif (!isValid(gql)) {\n\t\t\tthrow new Error(\n\t\t\t\t'Invalid GraphQL Condition or subtree: ' + JSON.stringify(gql)\n\t\t\t);\n\t\t}\n\n\t\tif (isEmpty(gql)) {\n\t\t\treturn {\n\t\t\t\ttype: 'and',\n\t\t\t\tpredicates: [],\n\t\t\t};\n\t\t} else if (isGroup(gql)) {\n\t\t\tconst groupkey = Object.keys(gql)[0];\n\t\t\tconst children = this.transformGraphQLFilterNodeToPredicateAST(\n\t\t\t\tgql[groupkey]\n\t\t\t);\n\t\t\treturn {\n\t\t\t\ttype: groupkey,\n\t\t\t\tpredicates: Array.isArray(children) ? children : [children],\n\t\t\t};\n\t\t} else if (isComparison(gql)) {\n\t\t\tconst operatorKey = Object.keys(gql)[0];\n\t\t\treturn {\n\t\t\t\toperator: operatorKey,\n\t\t\t\toperand: gql[operatorKey],\n\t\t\t};\n\t\t} else {\n\t\t\tif (Array.isArray(gql)) {\n\t\t\t\treturn gql.map(o => this.transformGraphQLFilterNodeToPredicateAST(o));\n\t\t\t} else {\n\t\t\t\tconst fieldKey = Object.keys(gql)[0];\n\t\t\t\treturn {\n\t\t\t\t\tfield: fieldKey,\n\t\t\t\t\t...this.transformGraphQLFilterNodeToPredicateAST(gql[fieldKey]),\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Accepts a GraphQL style filter predicate tree and transforms it into a predicate\n\t * that storage adapters understand. Example input:\n\t *\n\t * ```js\n\t * {\n\t * \tand: [\n\t * \t\t{ name: { eq: \"Bob Jones\" } },\n\t * \t\t{ age: { between: [32, 64] } },\n\t * \t\t{ not: {\n\t * \t\t\tor: [\n\t * \t\t\t\t{ favoriteFood: { eq: 'pizza' } },\n\t * \t\t\t\t{ favoriteFood: { eq: 'tacos' } },\n\t * \t\t\t]\n\t * \t\t}}\n\t * \t]\n\t * }\n\t * ```\n\t *\n\t * @param modelDefinition The model that the AST/predicate must be compatible with.\n\t * @param ast The graphQL style AST that should specify conditions for `modelDefinition`.\n\t */\n\tstatic createFromAST<T extends PersistentModel>(\n\t\tmodelDefinition: SchemaModel,\n\t\tast: any\n\t): ModelPredicate<T> {\n\t\tconst key = {} as ModelPredicate<T>;\n\n\t\tModelPredicateCreator.predicateGroupsMap.set(\n\t\t\tkey,\n\t\t\tthis.transformGraphQLFilterNodeToPredicateAST(ast)\n\t\t);\n\n\t\treturn key;\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}