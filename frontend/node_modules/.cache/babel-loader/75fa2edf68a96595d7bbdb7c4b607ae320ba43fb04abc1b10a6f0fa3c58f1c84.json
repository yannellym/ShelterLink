{"ast":null,"code":"import { __assign, __awaiter, __extends, __generator } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AbstractInteractionsProvider } from './InteractionsProvider';\nimport { LexRuntimeV2Client, RecognizeTextCommand, RecognizeUtteranceCommand } from '@aws-sdk/client-lex-runtime-v2';\nimport { ConsoleLogger as Logger, Credentials, getAmplifyUserAgentObject } from '@aws-amplify/core';\nimport { convert } from './AWSLexProviderHelper/utils';\nimport { unGzipBase64AsJson } from './AWSLexProviderHelper/commonUtils';\nvar logger = new Logger('AWSLexV2Provider');\nvar AWSLexV2Provider = /** @class */function (_super) {\n  __extends(AWSLexV2Provider, _super);\n  /**\n   * Initialize Interactions with AWS configurations\n   * @param {InteractionsOptions} options - Configuration object for Interactions\n   */\n  function AWSLexV2Provider(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var _this = _super.call(this, options) || this;\n    _this._botsCompleteCallback = {};\n    return _this;\n  }\n  /**\n   * get provider name of the plugin\n   * @returns {string} name of the provider\n   */\n  AWSLexV2Provider.prototype.getProviderName = function () {\n    return 'AWSLexV2Provider';\n  };\n  /**\n   * Configure Interactions part with aws configuration\n   * @param {AWSLexV2ProviderOptions} config - Configuration of the Interactions\n   * @return {AWSLexV2ProviderOptions} - Current configuration\n   */\n  AWSLexV2Provider.prototype.configure = function (config) {\n    if (config === void 0) {\n      config = {};\n    }\n    var propertiesToTest = ['name', 'botId', 'aliasId', 'localeId', 'providerName', 'region'];\n    Object.keys(config).forEach(function (botKey) {\n      var botConfig = config[botKey];\n      // is bot config correct\n      if (!propertiesToTest.every(function (x) {\n        return x in botConfig;\n      })) {\n        throw new Error('invalid bot configuration');\n      }\n    });\n    return _super.prototype.configure.call(this, config);\n  };\n  /**\n   * Send a message to a bot\n   * @async\n   * @param {string} botname - Bot name to send the message\n   * @param {string | InteractionsMessage} message - message to send to the bot\n   * @return {Promise<InteractionsResponse>} A promise resolves to the response from the bot\n   */\n  AWSLexV2Provider.prototype.sendMessage = function (botname, message) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, error_1, response, reqBaseParams;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // check if bot exists\n            if (!this._config[botname]) {\n              return [2 /*return*/, Promise.reject('Bot ' + botname + ' does not exist')];\n            }\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, Credentials.get()];\n          case 2:\n            credentials = _a.sent();\n            return [3 /*break*/, 4];\n          case 3:\n            error_1 = _a.sent();\n            return [2 /*return*/, Promise.reject('No credentials')];\n          case 4:\n            this._lexRuntimeServiceV2Client = new LexRuntimeV2Client({\n              region: this._config[botname].region,\n              credentials: credentials,\n              customUserAgent: getAmplifyUserAgentObject()\n            });\n            reqBaseParams = {\n              botAliasId: this._config[botname].aliasId,\n              botId: this._config[botname].botId,\n              localeId: this._config[botname].localeId,\n              sessionId: credentials.identityId\n            };\n            if (!(typeof message === 'string')) return [3 /*break*/, 6];\n            return [4 /*yield*/, this._handleRecognizeTextCommand(botname, message, reqBaseParams)];\n          case 5:\n            response = _a.sent();\n            return [3 /*break*/, 8];\n          case 6:\n            return [4 /*yield*/, this._handleRecognizeUtteranceCommand(botname, message, reqBaseParams)];\n          case 7:\n            response = _a.sent();\n            _a.label = 8;\n          case 8:\n            return [2 /*return*/, response];\n        }\n      });\n    });\n  };\n  /**\n   * Attach a onComplete callback function to a bot.\n   * The callback is called once the bot's intent is fulfilled\n   * @param {string} botname - Bot name to attach the onComplete callback\n   * @param {(err: Error | null, confirmation: InteractionsResponse) => void} callback - called when Intent Fulfilled\n   */\n  AWSLexV2Provider.prototype.onComplete = function (botname, callback) {\n    // does bot exist\n    if (!this._config[botname]) {\n      throw new Error('Bot ' + botname + ' does not exist');\n    }\n    this._botsCompleteCallback[botname] = callback;\n  };\n  /**\n   * @private\n   * call onComplete callback for a bot if configured\n   */\n  AWSLexV2Provider.prototype._reportBotStatus = function (data, botname) {\n    var _this = this;\n    var _a, _b, _c, _d, _e, _f;\n    var sessionState = data === null || data === void 0 ? void 0 : data.sessionState;\n    // Check if state is fulfilled to resolve onFullfilment promise\n    logger.debug('postContent state', (_a = sessionState === null || sessionState === void 0 ? void 0 : sessionState.intent) === null || _a === void 0 ? void 0 : _a.state);\n    var isConfigOnCompleteAttached = typeof ((_b = this._config) === null || _b === void 0 ? void 0 : _b[botname].onComplete) === 'function';\n    var isApiOnCompleteAttached = typeof ((_c = this._botsCompleteCallback) === null || _c === void 0 ? void 0 : _c[botname]) === 'function';\n    // no onComplete callbacks added\n    if (!isConfigOnCompleteAttached && !isApiOnCompleteAttached) return;\n    if (((_d = sessionState === null || sessionState === void 0 ? void 0 : sessionState.intent) === null || _d === void 0 ? void 0 : _d.state) === 'ReadyForFulfillment' || ((_e = sessionState === null || sessionState === void 0 ? void 0 : sessionState.intent) === null || _e === void 0 ? void 0 : _e.state) === 'Fulfilled') {\n      if (isApiOnCompleteAttached) {\n        setTimeout(function () {\n          var _a;\n          return (_a = _this._botsCompleteCallback) === null || _a === void 0 ? void 0 : _a[botname](null, data);\n        }, 0);\n      }\n      if (isConfigOnCompleteAttached) {\n        setTimeout(function () {\n          return _this._config[botname].onComplete(null, data);\n        }, 0);\n      }\n    }\n    if (((_f = sessionState === null || sessionState === void 0 ? void 0 : sessionState.intent) === null || _f === void 0 ? void 0 : _f.state) === 'Failed') {\n      var error_2 = new Error('Bot conversation failed');\n      if (isApiOnCompleteAttached) {\n        setTimeout(function () {\n          return _this._botsCompleteCallback[botname](error_2);\n        }, 0);\n      }\n      if (isConfigOnCompleteAttached) {\n        setTimeout(function () {\n          return _this._config[botname].onComplete(error_2);\n        }, 0);\n      }\n    }\n  };\n  /**\n   * Format UtteranceCommandOutput's response\n   * decompress attributes\n   * update audioStream format\n   */\n  AWSLexV2Provider.prototype._formatUtteranceCommandOutput = function (data) {\n    return __awaiter(this, void 0, void 0, function () {\n      var response, _a, _b, _c;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _a = [__assign({}, data)];\n            _b = {};\n            return [4 /*yield*/, unGzipBase64AsJson(data.messages)];\n          case 1:\n            _b.messages = _d.sent();\n            return [4 /*yield*/, unGzipBase64AsJson(data.sessionState)];\n          case 2:\n            _b.sessionState = _d.sent();\n            return [4 /*yield*/, unGzipBase64AsJson(data.interpretations)];\n          case 3:\n            _b.interpretations = _d.sent();\n            return [4 /*yield*/, unGzipBase64AsJson(data.requestAttributes)];\n          case 4:\n            _b.requestAttributes = _d.sent();\n            return [4 /*yield*/, unGzipBase64AsJson(data.inputTranscript)];\n          case 5:\n            _b.inputTranscript = _d.sent();\n            if (!data.audioStream) return [3 /*break*/, 7];\n            return [4 /*yield*/, convert(data.audioStream)];\n          case 6:\n            _c = _d.sent();\n            return [3 /*break*/, 8];\n          case 7:\n            _c = undefined;\n            _d.label = 8;\n          case 8:\n            response = __assign.apply(void 0, _a.concat([(_b.audioStream = _c, _b)]));\n            return [2 /*return*/, response];\n        }\n      });\n    });\n  };\n  /**\n   * handle client's `RecognizeTextCommand`\n   * used for sending simple text message\n   */\n  AWSLexV2Provider.prototype._handleRecognizeTextCommand = function (botname, data, baseParams) {\n    return __awaiter(this, void 0, void 0, function () {\n      var params, recognizeTextCommand, data_1, err_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('postText to lex2', data);\n            params = __assign(__assign({}, baseParams), {\n              text: data\n            });\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            recognizeTextCommand = new RecognizeTextCommand(params);\n            return [4 /*yield*/, this._lexRuntimeServiceV2Client.send(recognizeTextCommand)];\n          case 2:\n            data_1 = _a.sent();\n            this._reportBotStatus(data_1, botname);\n            return [2 /*return*/, data_1];\n          case 3:\n            err_1 = _a.sent();\n            return [2 /*return*/, Promise.reject(err_1)];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * handle client's `RecognizeUtteranceCommand`\n   * used for obj text or obj voice message\n   */\n  AWSLexV2Provider.prototype._handleRecognizeUtteranceCommand = function (botname, data, baseParams) {\n    return __awaiter(this, void 0, void 0, function () {\n      var content, messageType, params, inputStream, _a, recognizeUtteranceCommand, data_2, response, err_2;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            content = data.content, messageType = data.options.messageType;\n            logger.debug('postContent to lex2', data);\n            if (!(messageType === 'voice')) return [3 /*break*/, 4];\n            if (typeof content !== 'object') {\n              return [2 /*return*/, Promise.reject('invalid content type')];\n            }\n            if (!(content instanceof Uint8Array)) return [3 /*break*/, 1];\n            _a = content;\n            return [3 /*break*/, 3];\n          case 1:\n            return [4 /*yield*/, convert(content)];\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n          case 3:\n            inputStream = _a;\n            params = __assign(__assign({}, baseParams), {\n              requestContentType: 'audio/x-l16; sample-rate=16000; channel-count=1',\n              inputStream: inputStream\n            });\n            return [3 /*break*/, 5];\n          case 4:\n            // text input\n            if (typeof content !== 'string') return [2 /*return*/, Promise.reject('invalid content type')];\n            params = __assign(__assign({}, baseParams), {\n              requestContentType: 'text/plain; charset=utf-8',\n              inputStream: content\n            });\n            _b.label = 5;\n          case 5:\n            _b.trys.push([5, 8,, 9]);\n            recognizeUtteranceCommand = new RecognizeUtteranceCommand(params);\n            return [4 /*yield*/, this._lexRuntimeServiceV2Client.send(recognizeUtteranceCommand)];\n          case 6:\n            data_2 = _b.sent();\n            return [4 /*yield*/, this._formatUtteranceCommandOutput(data_2)];\n          case 7:\n            response = _b.sent();\n            this._reportBotStatus(response, botname);\n            return [2 /*return*/, response];\n          case 8:\n            err_2 = _b.sent();\n            return [2 /*return*/, Promise.reject(err_2)];\n          case 9:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  return AWSLexV2Provider;\n}(AbstractInteractionsProvider);\nexport { AWSLexV2Provider };","map":{"version":3,"names":["AbstractInteractionsProvider","LexRuntimeV2Client","RecognizeTextCommand","RecognizeUtteranceCommand","ConsoleLogger","Logger","Credentials","getAmplifyUserAgentObject","convert","unGzipBase64AsJson","logger","AWSLexV2Provider","_super","__extends","options","_this","call","_botsCompleteCallback","prototype","getProviderName","configure","config","propertiesToTest","Object","keys","forEach","botKey","botConfig","every","x","Error","sendMessage","botname","message","_config","Promise","reject","get","credentials","_a","sent","_lexRuntimeServiceV2Client","region","customUserAgent","reqBaseParams","botAliasId","aliasId","botId","localeId","sessionId","identityId","_handleRecognizeTextCommand","response","_handleRecognizeUtteranceCommand","onComplete","callback","_reportBotStatus","data","sessionState","debug","intent","state","isConfigOnCompleteAttached","_b","isApiOnCompleteAttached","_c","_d","_e","setTimeout","_f","error_2","_formatUtteranceCommandOutput","messages","interpretations","requestAttributes","inputTranscript","audioStream","undefined","__assign","apply","concat","baseParams","params","text","recognizeTextCommand","send","data_1","err_1","content","messageType","Uint8Array","inputStream","requestContentType","recognizeUtteranceCommand","data_2","err_2"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-amplify/interactions/src/Providers/AWSLexV2Provider.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AbstractInteractionsProvider } from './InteractionsProvider';\nimport {\n\tInteractionsOptions,\n\tAWSLexV2ProviderOptions,\n\tInteractionsResponse,\n\tInteractionsMessage,\n} from '../types';\nimport {\n\tLexRuntimeV2Client,\n\tRecognizeTextCommand,\n\tRecognizeTextCommandInput,\n\tRecognizeTextCommandOutput,\n\tRecognizeUtteranceCommand,\n\tRecognizeUtteranceCommandInput,\n\tRecognizeUtteranceCommandOutput,\n} from '@aws-sdk/client-lex-runtime-v2';\nimport {\n\tConsoleLogger as Logger,\n\tCredentials,\n\tgetAmplifyUserAgentObject,\n} from '@aws-amplify/core';\nimport { convert } from './AWSLexProviderHelper/utils';\nimport { unGzipBase64AsJson } from './AWSLexProviderHelper/commonUtils';\n\nconst logger = new Logger('AWSLexV2Provider');\n\ninterface RecognizeUtteranceCommandOutputFormatted\n\textends Omit<\n\t\tRecognizeUtteranceCommandOutput,\n\t\t| 'messages'\n\t\t| 'interpretations'\n\t\t| 'sessionState'\n\t\t| 'requestAttributes'\n\t\t| 'audioStream'\n\t> {\n\tmessages?: RecognizeTextCommandOutput['messages'];\n\tsessionState?: RecognizeTextCommandOutput['sessionState'];\n\tinterpretations?: RecognizeTextCommandOutput['interpretations'];\n\trequestAttributes?: RecognizeTextCommandOutput['requestAttributes'];\n\taudioStream?: Uint8Array;\n}\n\ntype AWSLexV2ProviderSendResponse =\n\t| RecognizeTextCommandOutput\n\t| RecognizeUtteranceCommandOutputFormatted;\n\ntype lexV2BaseReqParams = {\n\tbotId: string;\n\tbotAliasId: string;\n\tlocaleId: string;\n\tsessionId: string;\n};\n\nexport class AWSLexV2Provider extends AbstractInteractionsProvider {\n\tprivate _lexRuntimeServiceV2Client: LexRuntimeV2Client;\n\tprivate _botsCompleteCallback: object;\n\n\t/**\n\t * Initialize Interactions with AWS configurations\n\t * @param {InteractionsOptions} options - Configuration object for Interactions\n\t */\n\tconstructor(options: InteractionsOptions = {}) {\n\t\tsuper(options);\n\t\tthis._botsCompleteCallback = {};\n\t}\n\n\t/**\n\t * get provider name of the plugin\n\t * @returns {string} name of the provider\n\t */\n\tpublic getProviderName() {\n\t\treturn 'AWSLexV2Provider';\n\t}\n\n\t/**\n\t * Configure Interactions part with aws configuration\n\t * @param {AWSLexV2ProviderOptions} config - Configuration of the Interactions\n\t * @return {AWSLexV2ProviderOptions} - Current configuration\n\t */\n\tpublic configure(\n\t\tconfig: AWSLexV2ProviderOptions = {}\n\t): AWSLexV2ProviderOptions {\n\t\tconst propertiesToTest = [\n\t\t\t'name',\n\t\t\t'botId',\n\t\t\t'aliasId',\n\t\t\t'localeId',\n\t\t\t'providerName',\n\t\t\t'region',\n\t\t];\n\n\t\tObject.keys(config).forEach(botKey => {\n\t\t\tconst botConfig = config[botKey];\n\n\t\t\t// is bot config correct\n\t\t\tif (!propertiesToTest.every(x => x in botConfig)) {\n\t\t\t\tthrow new Error('invalid bot configuration');\n\t\t\t}\n\t\t});\n\t\treturn super.configure(config);\n\t}\n\n\t/**\n\t * Send a message to a bot\n\t * @async\n\t * @param {string} botname - Bot name to send the message\n\t * @param {string | InteractionsMessage} message - message to send to the bot\n\t * @return {Promise<InteractionsResponse>} A promise resolves to the response from the bot\n\t */\n\tpublic async sendMessage(\n\t\tbotname: string,\n\t\tmessage: string | InteractionsMessage\n\t): Promise<InteractionsResponse> {\n\t\t// check if bot exists\n\t\tif (!this._config[botname]) {\n\t\t\treturn Promise.reject('Bot ' + botname + ' does not exist');\n\t\t}\n\n\t\t// check if credentials are present\n\t\tlet credentials;\n\t\ttry {\n\t\t\tcredentials = await Credentials.get();\n\t\t} catch (error) {\n\t\t\treturn Promise.reject('No credentials');\n\t\t}\n\n\t\tthis._lexRuntimeServiceV2Client = new LexRuntimeV2Client({\n\t\t\tregion: this._config[botname].region,\n\t\t\tcredentials,\n\t\t\tcustomUserAgent: getAmplifyUserAgentObject(),\n\t\t});\n\n\t\tlet response: AWSLexV2ProviderSendResponse;\n\n\t\t// common base params for all requests\n\t\tconst reqBaseParams: lexV2BaseReqParams = {\n\t\t\tbotAliasId: this._config[botname].aliasId,\n\t\t\tbotId: this._config[botname].botId,\n\t\t\tlocaleId: this._config[botname].localeId,\n\t\t\tsessionId: credentials.identityId,\n\t\t};\n\n\t\tif (typeof message === 'string') {\n\t\t\tresponse = await this._handleRecognizeTextCommand(\n\t\t\t\tbotname,\n\t\t\t\tmessage,\n\t\t\t\treqBaseParams\n\t\t\t);\n\t\t} else {\n\t\t\tresponse = await this._handleRecognizeUtteranceCommand(\n\t\t\t\tbotname,\n\t\t\t\tmessage,\n\t\t\t\treqBaseParams\n\t\t\t);\n\t\t}\n\t\treturn response;\n\t}\n\n\t/**\n\t * Attach a onComplete callback function to a bot.\n\t * The callback is called once the bot's intent is fulfilled\n\t * @param {string} botname - Bot name to attach the onComplete callback\n\t * @param {(err: Error | null, confirmation: InteractionsResponse) => void} callback - called when Intent Fulfilled\n\t */\n\tpublic onComplete(\n\t\tbotname: string,\n\t\tcallback: (err: Error | null, confirmation: InteractionsResponse) => void\n\t) {\n\t\t// does bot exist\n\t\tif (!this._config[botname]) {\n\t\t\tthrow new Error('Bot ' + botname + ' does not exist');\n\t\t}\n\t\tthis._botsCompleteCallback[botname] = callback;\n\t}\n\n\t/**\n\t * @private\n\t * call onComplete callback for a bot if configured\n\t */\n\tprivate _reportBotStatus(\n\t\tdata: AWSLexV2ProviderSendResponse,\n\t\tbotname: string\n\t) {\n\t\tconst sessionState = data?.sessionState;\n\n\t\t// Check if state is fulfilled to resolve onFullfilment promise\n\t\tlogger.debug('postContent state', sessionState?.intent?.state);\n\n\t\tconst isConfigOnCompleteAttached =\n\t\t\ttypeof this._config?.[botname].onComplete === 'function';\n\n\t\tconst isApiOnCompleteAttached =\n\t\t\ttypeof this._botsCompleteCallback?.[botname] === 'function';\n\n\t\t// no onComplete callbacks added\n\t\tif (!isConfigOnCompleteAttached && !isApiOnCompleteAttached) return;\n\n\t\tif (\n\t\t\tsessionState?.intent?.state === 'ReadyForFulfillment' ||\n\t\t\tsessionState?.intent?.state === 'Fulfilled'\n\t\t) {\n\t\t\tif (isApiOnCompleteAttached) {\n\t\t\t\tsetTimeout(() => this._botsCompleteCallback?.[botname](null, data), 0);\n\t\t\t}\n\n\t\t\tif (isConfigOnCompleteAttached) {\n\t\t\t\tsetTimeout(() => this._config[botname].onComplete(null, data), 0);\n\t\t\t}\n\t\t}\n\n\t\tif (sessionState?.intent?.state === 'Failed') {\n\t\t\tconst error = new Error('Bot conversation failed');\n\t\t\tif (isApiOnCompleteAttached) {\n\t\t\t\tsetTimeout(() => this._botsCompleteCallback[botname](error), 0);\n\t\t\t}\n\n\t\t\tif (isConfigOnCompleteAttached) {\n\t\t\t\tsetTimeout(() => this._config[botname].onComplete(error), 0);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Format UtteranceCommandOutput's response\n\t * decompress attributes\n\t * update audioStream format\n\t */\n\tprivate async _formatUtteranceCommandOutput(\n\t\tdata: RecognizeUtteranceCommandOutput\n\t): Promise<RecognizeUtteranceCommandOutputFormatted> {\n\t\tconst response: RecognizeUtteranceCommandOutputFormatted = {\n\t\t\t...data,\n\t\t\tmessages: await unGzipBase64AsJson(data.messages),\n\t\t\tsessionState: await unGzipBase64AsJson(data.sessionState),\n\t\t\tinterpretations: await unGzipBase64AsJson(data.interpretations),\n\t\t\trequestAttributes: await unGzipBase64AsJson(data.requestAttributes),\n\t\t\tinputTranscript: await unGzipBase64AsJson(data.inputTranscript),\n\t\t\taudioStream: data.audioStream\n\t\t\t\t? await convert(data.audioStream)\n\t\t\t\t: undefined,\n\t\t};\n\t\treturn response;\n\t}\n\n\t/**\n\t * handle client's `RecognizeTextCommand`\n\t * used for sending simple text message\n\t */\n\tprivate async _handleRecognizeTextCommand(\n\t\tbotname: string,\n\t\tdata: string,\n\t\tbaseParams: lexV2BaseReqParams\n\t) {\n\t\tlogger.debug('postText to lex2', data);\n\n\t\tconst params: RecognizeTextCommandInput = {\n\t\t\t...baseParams,\n\t\t\ttext: data,\n\t\t};\n\n\t\ttry {\n\t\t\tconst recognizeTextCommand = new RecognizeTextCommand(params);\n\t\t\tconst data = await this._lexRuntimeServiceV2Client.send(\n\t\t\t\trecognizeTextCommand\n\t\t\t);\n\n\t\t\tthis._reportBotStatus(data, botname);\n\t\t\treturn data;\n\t\t} catch (err) {\n\t\t\treturn Promise.reject(err);\n\t\t}\n\t}\n\n\t/**\n\t * handle client's `RecognizeUtteranceCommand`\n\t * used for obj text or obj voice message\n\t */\n\tprivate async _handleRecognizeUtteranceCommand(\n\t\tbotname: string,\n\t\tdata: InteractionsMessage,\n\t\tbaseParams: lexV2BaseReqParams\n\t) {\n\t\tconst {\n\t\t\tcontent,\n\t\t\toptions: { messageType },\n\t\t} = data;\n\n\t\tlogger.debug('postContent to lex2', data);\n\t\tlet params: RecognizeUtteranceCommandInput;\n\n\t\t// prepare params\n\t\tif (messageType === 'voice') {\n\t\t\tif (typeof content !== 'object') {\n\t\t\t\treturn Promise.reject('invalid content type');\n\t\t\t}\n\n\t\t\tconst inputStream =\n\t\t\t\tcontent instanceof Uint8Array ? content : await convert(content);\n\n\t\t\tparams = {\n\t\t\t\t...baseParams,\n\t\t\t\trequestContentType: 'audio/x-l16; sample-rate=16000; channel-count=1',\n\t\t\t\tinputStream,\n\t\t\t};\n\t\t} else {\n\t\t\t// text input\n\t\t\tif (typeof content !== 'string')\n\t\t\t\treturn Promise.reject('invalid content type');\n\n\t\t\tparams = {\n\t\t\t\t...baseParams,\n\t\t\t\trequestContentType: 'text/plain; charset=utf-8',\n\t\t\t\tinputStream: content,\n\t\t\t};\n\t\t}\n\n\t\t// make API call to lex\n\t\ttry {\n\t\t\tconst recognizeUtteranceCommand = new RecognizeUtteranceCommand(params);\n\t\t\tconst data = await this._lexRuntimeServiceV2Client.send(\n\t\t\t\trecognizeUtteranceCommand\n\t\t\t);\n\n\t\t\tconst response = await this._formatUtteranceCommandOutput(data);\n\t\t\tthis._reportBotStatus(response, botname);\n\t\t\treturn response;\n\t\t} catch (err) {\n\t\t\treturn Promise.reject(err);\n\t\t}\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}