{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __extends, __values } from \"tslib\";\nimport { CacheList, defaultConfig, getCurrTime, CacheObject } from './Utils';\nimport { StorageCache } from './StorageCache';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nvar logger = new Logger('InMemoryCache');\n/**\n * Customized in-memory cache with LRU implemented\n * @member cacheObj - object which store items\n * @member cacheList - list of keys in the cache with LRU\n * @member curSizeInBytes - current size of the cache\n * @member maxPriority - max of the priority\n * @member cacheSizeLimit - the limit of cache size\n */\nvar InMemoryCacheClass = /** @class */function (_super) {\n  __extends(InMemoryCacheClass, _super);\n  /**\n   * initialize the cache\n   *\n   * @param config - the configuration of the cache\n   */\n  function InMemoryCacheClass(config) {\n    var _this = this;\n    var cacheConfig = config ? Object.assign({}, defaultConfig, config) : defaultConfig;\n    _this = _super.call(this, cacheConfig) || this;\n    logger.debug('now we start!');\n    _this.cacheList = [];\n    _this.curSizeInBytes = 0;\n    _this.maxPriority = 5;\n    _this.getItem = _this.getItem.bind(_this);\n    _this.setItem = _this.setItem.bind(_this);\n    _this.removeItem = _this.removeItem.bind(_this);\n    // initialize list for every priority\n    for (var i = 0; i < _this.maxPriority; i += 1) {\n      _this.cacheList[i] = new CacheList();\n    }\n    return _this;\n  }\n  /**\n   * decrease current size of the cache\n   *\n   * @param amount - the amount of the cache size which needs to be decreased\n   */\n  InMemoryCacheClass.prototype._decreaseCurSizeInBytes = function (amount) {\n    this.curSizeInBytes -= amount;\n  };\n  /**\n   * increase current size of the cache\n   *\n   * @param amount - the amount of the cache szie which need to be increased\n   */\n  InMemoryCacheClass.prototype._increaseCurSizeInBytes = function (amount) {\n    this.curSizeInBytes += amount;\n  };\n  /**\n   * check whether item is expired\n   *\n   * @param key - the key of the item\n   *\n   * @return true if the item is expired.\n   */\n  InMemoryCacheClass.prototype._isExpired = function (key) {\n    var text = CacheObject.getItem(key);\n    var item = JSON.parse(text);\n    if (getCurrTime() >= item.expires) {\n      return true;\n    }\n    return false;\n  };\n  /**\n   * delete item from cache\n   *\n   * @param prefixedKey - the key of the item\n   * @param listIdx - indicates which cache list the key belongs to\n   */\n  InMemoryCacheClass.prototype._removeItem = function (prefixedKey, listIdx) {\n    // delete the key from the list\n    this.cacheList[listIdx].removeItem(prefixedKey);\n    // decrease the current size of the cache\n    this._decreaseCurSizeInBytes(JSON.parse(CacheObject.getItem(prefixedKey)).byteSize);\n    // finally remove the item from memory\n    CacheObject.removeItem(prefixedKey);\n  };\n  /**\n   * put item into cache\n   *\n   * @param prefixedKey - the key of the item\n   * @param itemData - the value of the item\n   * @param itemSizeInBytes - the byte size of the item\n   * @param listIdx - indicates which cache list the key belongs to\n   */\n  InMemoryCacheClass.prototype._setItem = function (prefixedKey, item, listIdx) {\n    // insert the key into the list\n    this.cacheList[listIdx].insertItem(prefixedKey);\n    // increase the current size of the cache\n    this._increaseCurSizeInBytes(item.byteSize);\n    // finally add the item into memory\n    CacheObject.setItem(prefixedKey, JSON.stringify(item));\n  };\n  /**\n   * see whether cache is full\n   *\n   * @param itemSize\n   *\n   * @return true if cache is full\n   */\n  InMemoryCacheClass.prototype._isCacheFull = function (itemSize) {\n    return this.curSizeInBytes + itemSize > this.config.capacityInBytes;\n  };\n  /**\n   * check whether the cache contains the key\n   *\n   * @param key\n   */\n  InMemoryCacheClass.prototype.containsKey = function (key) {\n    var prefixedKey = this.config.keyPrefix + key;\n    for (var i = 0; i < this.maxPriority; i += 1) {\n      if (this.cacheList[i].containsKey(prefixedKey)) {\n        return i + 1;\n      }\n    }\n    return -1;\n  };\n  /**\n   * * Set item into cache. You can put number, string, boolean or object.\n   * The cache will first check whether has the same key.\n   * If it has, it will delete the old item and then put the new item in\n   * The cache will pop out items if it is full\n   * You can specify the cache item options. The cache will abort and output a warning:\n   * If the key is invalid\n   * If the size of the item exceeds itemMaxSize.\n   * If the value is undefined\n   * If incorrect cache item configuration\n   * If error happened with browser storage\n   *\n   * @param key - the key of the item\n   * @param value - the value of the item\n   * @param options - optional, the specified meta-data\n   *\n   * @throws if the item is too big which exceeds the limit of single item size\n   * @throws if the key is invalid\n   */\n  InMemoryCacheClass.prototype.setItem = function (key, value, options) {\n    var prefixedKey = this.config.keyPrefix + key;\n    // invalid keys\n    if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {\n      logger.warn(\"Invalid key: should not be empty or 'CurSize'\");\n      return;\n    }\n    if (typeof value === 'undefined') {\n      logger.warn(\"The value of item should not be undefined!\");\n      return;\n    }\n    var cacheItemOptions = {\n      priority: options && options.priority !== undefined ? options.priority : this.config.defaultPriority,\n      expires: options && options.expires !== undefined ? options.expires : this.config.defaultTTL + getCurrTime()\n    };\n    if (cacheItemOptions.priority < 1 || cacheItemOptions.priority > 5) {\n      logger.warn(\"Invalid parameter: priority due to out or range. It should be within 1 and 5.\");\n      return;\n    }\n    var item = this.fillCacheItem(prefixedKey, value, cacheItemOptions);\n    // check wether this item is too big;\n    if (item.byteSize > this.config.itemMaxSize) {\n      logger.warn(\"Item with key: \" + key + \" you are trying to put into is too big!\");\n      return;\n    }\n    // if key already in the cache, then delete it.\n    var presentKeyPrio = this.containsKey(key);\n    if (presentKeyPrio !== -1) {\n      this._removeItem(prefixedKey, presentKeyPrio - 1);\n    }\n    // pop out items in the cache when cache is full based on LRU\n    // first start from lowest priority cache list\n    var cacheListIdx = this.maxPriority - 1;\n    while (this._isCacheFull(item.byteSize) && cacheListIdx >= 0) {\n      if (!this.cacheList[cacheListIdx].isEmpty()) {\n        var popedItemKey = this.cacheList[cacheListIdx].getLastItem();\n        this._removeItem(popedItemKey, cacheListIdx);\n      } else {\n        cacheListIdx -= 1;\n      }\n    }\n    this._setItem(prefixedKey, item, Number(item.priority) - 1);\n  };\n  /**\n   * Get item from cache. It will return null if item doesnâ€™t exist or it has been expired.\n   * If you specified callback function in the options,\n   * then the function will be executed if no such item in the cache\n   * and finally put the return value into cache.\n   * Please make sure the callback function will return the value you want to put into the cache.\n   * The cache will abort output a warning:\n   * If the key is invalid\n   *\n   * @param key - the key of the item\n   * @param options - the options of callback function\n   */\n  InMemoryCacheClass.prototype.getItem = function (key, options) {\n    var ret = null;\n    var prefixedKey = this.config.keyPrefix + key;\n    if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {\n      logger.warn(\"Invalid key: should not be empty or 'CurSize'\");\n      return null;\n    }\n    // check whether it's in the cachelist\n    var presentKeyPrio = this.containsKey(key);\n    if (presentKeyPrio !== -1) {\n      if (this._isExpired(prefixedKey)) {\n        // if expired, remove that item and return null\n        this._removeItem(prefixedKey, presentKeyPrio - 1);\n      } else {\n        // if not expired, great, return the value and refresh it\n        ret = CacheObject.getItem(prefixedKey);\n        var item = JSON.parse(ret);\n        this.cacheList[item.priority - 1].refresh(prefixedKey);\n        return item.data;\n      }\n    }\n    if (options && options.callback !== undefined) {\n      var val = options.callback();\n      if (val !== null) {\n        this.setItem(key, val, options);\n      }\n      return val;\n    }\n    return null;\n  };\n  /**\n   * remove item from the cache\n   *\n   * @param key - the key of the item\n   */\n  InMemoryCacheClass.prototype.removeItem = function (key) {\n    var prefixedKey = this.config.keyPrefix + key;\n    // check if the key is in the cache\n    var presentKeyPrio = this.containsKey(key);\n    if (presentKeyPrio !== -1) {\n      this._removeItem(prefixedKey, presentKeyPrio - 1);\n    }\n  };\n  /**\n   * clear the entire cache\n   */\n  InMemoryCacheClass.prototype.clear = function () {\n    var e_1, _a;\n    for (var i = 0; i < this.maxPriority; i += 1) {\n      try {\n        for (var _b = (e_1 = void 0, __values(this.cacheList[i].getKeys())), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var key = _c.value;\n          this._removeItem(key, i);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n  };\n  /**\n   * Return all the keys in the cache.\n   */\n  InMemoryCacheClass.prototype.getAllKeys = function () {\n    var e_2, _a;\n    var keys = [];\n    for (var i = 0; i < this.maxPriority; i += 1) {\n      try {\n        for (var _b = (e_2 = void 0, __values(this.cacheList[i].getKeys())), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var key = _c.value;\n          keys.push(key.substring(this.config.keyPrefix.length));\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n    }\n    return keys;\n  };\n  /**\n   * return the current size of the cache\n   *\n   * @return the current size of the cache\n   */\n  InMemoryCacheClass.prototype.getCacheCurSize = function () {\n    return this.curSizeInBytes;\n  };\n  /**\n   * Return a new instance of cache with customized configuration.\n   * @param config - the customized configuration\n   */\n  InMemoryCacheClass.prototype.createInstance = function (config) {\n    return new InMemoryCacheClass(config);\n  };\n  return InMemoryCacheClass;\n}(StorageCache);\nexport { InMemoryCacheClass };\nexport var InMemoryCache = new InMemoryCacheClass();","map":{"version":3,"names":["__extends","__values","CacheList","defaultConfig","getCurrTime","CacheObject","StorageCache","ConsoleLogger","Logger","logger","InMemoryCacheClass","_super","config","_this","cacheConfig","Object","assign","call","debug","cacheList","curSizeInBytes","maxPriority","getItem","bind","setItem","removeItem","i","prototype","_decreaseCurSizeInBytes","amount","_increaseCurSizeInBytes","_isExpired","key","text","item","JSON","parse","expires","_removeItem","prefixedKey","listIdx","byteSize","_setItem","insertItem","stringify","_isCacheFull","itemSize","capacityInBytes","containsKey","keyPrefix","value","options","cacheCurSizeKey","warn","cacheItemOptions","priority","undefined","defaultPriority","defaultTTL","fillCacheItem","itemMaxSize","presentKeyPrio","cacheListIdx","isEmpty","popedItemKey","getLastItem","Number","ret","refresh","data","callback","val","clear","e_1","_a","_b","getKeys","_c","next","done","e_1_1","error","return","getAllKeys","e_2","keys","push","substring","length","e_2_1","getCacheCurSize","createInstance","InMemoryCache"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-amplify/cache/lib-esm/InMemoryCache.js"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __extends, __values } from \"tslib\";\nimport { CacheList, defaultConfig, getCurrTime, CacheObject } from './Utils';\nimport { StorageCache } from './StorageCache';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nvar logger = new Logger('InMemoryCache');\n/**\n * Customized in-memory cache with LRU implemented\n * @member cacheObj - object which store items\n * @member cacheList - list of keys in the cache with LRU\n * @member curSizeInBytes - current size of the cache\n * @member maxPriority - max of the priority\n * @member cacheSizeLimit - the limit of cache size\n */\nvar InMemoryCacheClass = /** @class */ (function (_super) {\n    __extends(InMemoryCacheClass, _super);\n    /**\n     * initialize the cache\n     *\n     * @param config - the configuration of the cache\n     */\n    function InMemoryCacheClass(config) {\n        var _this = this;\n        var cacheConfig = config\n            ? Object.assign({}, defaultConfig, config)\n            : defaultConfig;\n        _this = _super.call(this, cacheConfig) || this;\n        logger.debug('now we start!');\n        _this.cacheList = [];\n        _this.curSizeInBytes = 0;\n        _this.maxPriority = 5;\n        _this.getItem = _this.getItem.bind(_this);\n        _this.setItem = _this.setItem.bind(_this);\n        _this.removeItem = _this.removeItem.bind(_this);\n        // initialize list for every priority\n        for (var i = 0; i < _this.maxPriority; i += 1) {\n            _this.cacheList[i] = new CacheList();\n        }\n        return _this;\n    }\n    /**\n     * decrease current size of the cache\n     *\n     * @param amount - the amount of the cache size which needs to be decreased\n     */\n    InMemoryCacheClass.prototype._decreaseCurSizeInBytes = function (amount) {\n        this.curSizeInBytes -= amount;\n    };\n    /**\n     * increase current size of the cache\n     *\n     * @param amount - the amount of the cache szie which need to be increased\n     */\n    InMemoryCacheClass.prototype._increaseCurSizeInBytes = function (amount) {\n        this.curSizeInBytes += amount;\n    };\n    /**\n     * check whether item is expired\n     *\n     * @param key - the key of the item\n     *\n     * @return true if the item is expired.\n     */\n    InMemoryCacheClass.prototype._isExpired = function (key) {\n        var text = CacheObject.getItem(key);\n        var item = JSON.parse(text);\n        if (getCurrTime() >= item.expires) {\n            return true;\n        }\n        return false;\n    };\n    /**\n     * delete item from cache\n     *\n     * @param prefixedKey - the key of the item\n     * @param listIdx - indicates which cache list the key belongs to\n     */\n    InMemoryCacheClass.prototype._removeItem = function (prefixedKey, listIdx) {\n        // delete the key from the list\n        this.cacheList[listIdx].removeItem(prefixedKey);\n        // decrease the current size of the cache\n        this._decreaseCurSizeInBytes(JSON.parse(CacheObject.getItem(prefixedKey)).byteSize);\n        // finally remove the item from memory\n        CacheObject.removeItem(prefixedKey);\n    };\n    /**\n     * put item into cache\n     *\n     * @param prefixedKey - the key of the item\n     * @param itemData - the value of the item\n     * @param itemSizeInBytes - the byte size of the item\n     * @param listIdx - indicates which cache list the key belongs to\n     */\n    InMemoryCacheClass.prototype._setItem = function (prefixedKey, item, listIdx) {\n        // insert the key into the list\n        this.cacheList[listIdx].insertItem(prefixedKey);\n        // increase the current size of the cache\n        this._increaseCurSizeInBytes(item.byteSize);\n        // finally add the item into memory\n        CacheObject.setItem(prefixedKey, JSON.stringify(item));\n    };\n    /**\n     * see whether cache is full\n     *\n     * @param itemSize\n     *\n     * @return true if cache is full\n     */\n    InMemoryCacheClass.prototype._isCacheFull = function (itemSize) {\n        return this.curSizeInBytes + itemSize > this.config.capacityInBytes;\n    };\n    /**\n     * check whether the cache contains the key\n     *\n     * @param key\n     */\n    InMemoryCacheClass.prototype.containsKey = function (key) {\n        var prefixedKey = this.config.keyPrefix + key;\n        for (var i = 0; i < this.maxPriority; i += 1) {\n            if (this.cacheList[i].containsKey(prefixedKey)) {\n                return i + 1;\n            }\n        }\n        return -1;\n    };\n    /**\n     * * Set item into cache. You can put number, string, boolean or object.\n     * The cache will first check whether has the same key.\n     * If it has, it will delete the old item and then put the new item in\n     * The cache will pop out items if it is full\n     * You can specify the cache item options. The cache will abort and output a warning:\n     * If the key is invalid\n     * If the size of the item exceeds itemMaxSize.\n     * If the value is undefined\n     * If incorrect cache item configuration\n     * If error happened with browser storage\n     *\n     * @param key - the key of the item\n     * @param value - the value of the item\n     * @param options - optional, the specified meta-data\n     *\n     * @throws if the item is too big which exceeds the limit of single item size\n     * @throws if the key is invalid\n     */\n    InMemoryCacheClass.prototype.setItem = function (key, value, options) {\n        var prefixedKey = this.config.keyPrefix + key;\n        // invalid keys\n        if (prefixedKey === this.config.keyPrefix ||\n            prefixedKey === this.cacheCurSizeKey) {\n            logger.warn(\"Invalid key: should not be empty or 'CurSize'\");\n            return;\n        }\n        if (typeof value === 'undefined') {\n            logger.warn(\"The value of item should not be undefined!\");\n            return;\n        }\n        var cacheItemOptions = {\n            priority: options && options.priority !== undefined\n                ? options.priority\n                : this.config.defaultPriority,\n            expires: options && options.expires !== undefined\n                ? options.expires\n                : this.config.defaultTTL + getCurrTime(),\n        };\n        if (cacheItemOptions.priority < 1 || cacheItemOptions.priority > 5) {\n            logger.warn(\"Invalid parameter: priority due to out or range. It should be within 1 and 5.\");\n            return;\n        }\n        var item = this.fillCacheItem(prefixedKey, value, cacheItemOptions);\n        // check wether this item is too big;\n        if (item.byteSize > this.config.itemMaxSize) {\n            logger.warn(\"Item with key: \" + key + \" you are trying to put into is too big!\");\n            return;\n        }\n        // if key already in the cache, then delete it.\n        var presentKeyPrio = this.containsKey(key);\n        if (presentKeyPrio !== -1) {\n            this._removeItem(prefixedKey, presentKeyPrio - 1);\n        }\n        // pop out items in the cache when cache is full based on LRU\n        // first start from lowest priority cache list\n        var cacheListIdx = this.maxPriority - 1;\n        while (this._isCacheFull(item.byteSize) && cacheListIdx >= 0) {\n            if (!this.cacheList[cacheListIdx].isEmpty()) {\n                var popedItemKey = this.cacheList[cacheListIdx].getLastItem();\n                this._removeItem(popedItemKey, cacheListIdx);\n            }\n            else {\n                cacheListIdx -= 1;\n            }\n        }\n        this._setItem(prefixedKey, item, Number(item.priority) - 1);\n    };\n    /**\n     * Get item from cache. It will return null if item doesnâ€™t exist or it has been expired.\n     * If you specified callback function in the options,\n     * then the function will be executed if no such item in the cache\n     * and finally put the return value into cache.\n     * Please make sure the callback function will return the value you want to put into the cache.\n     * The cache will abort output a warning:\n     * If the key is invalid\n     *\n     * @param key - the key of the item\n     * @param options - the options of callback function\n     */\n    InMemoryCacheClass.prototype.getItem = function (key, options) {\n        var ret = null;\n        var prefixedKey = this.config.keyPrefix + key;\n        if (prefixedKey === this.config.keyPrefix ||\n            prefixedKey === this.cacheCurSizeKey) {\n            logger.warn(\"Invalid key: should not be empty or 'CurSize'\");\n            return null;\n        }\n        // check whether it's in the cachelist\n        var presentKeyPrio = this.containsKey(key);\n        if (presentKeyPrio !== -1) {\n            if (this._isExpired(prefixedKey)) {\n                // if expired, remove that item and return null\n                this._removeItem(prefixedKey, presentKeyPrio - 1);\n            }\n            else {\n                // if not expired, great, return the value and refresh it\n                ret = CacheObject.getItem(prefixedKey);\n                var item = JSON.parse(ret);\n                this.cacheList[item.priority - 1].refresh(prefixedKey);\n                return item.data;\n            }\n        }\n        if (options && options.callback !== undefined) {\n            var val = options.callback();\n            if (val !== null) {\n                this.setItem(key, val, options);\n            }\n            return val;\n        }\n        return null;\n    };\n    /**\n     * remove item from the cache\n     *\n     * @param key - the key of the item\n     */\n    InMemoryCacheClass.prototype.removeItem = function (key) {\n        var prefixedKey = this.config.keyPrefix + key;\n        // check if the key is in the cache\n        var presentKeyPrio = this.containsKey(key);\n        if (presentKeyPrio !== -1) {\n            this._removeItem(prefixedKey, presentKeyPrio - 1);\n        }\n    };\n    /**\n     * clear the entire cache\n     */\n    InMemoryCacheClass.prototype.clear = function () {\n        var e_1, _a;\n        for (var i = 0; i < this.maxPriority; i += 1) {\n            try {\n                for (var _b = (e_1 = void 0, __values(this.cacheList[i].getKeys())), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var key = _c.value;\n                    this._removeItem(key, i);\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        }\n    };\n    /**\n     * Return all the keys in the cache.\n     */\n    InMemoryCacheClass.prototype.getAllKeys = function () {\n        var e_2, _a;\n        var keys = [];\n        for (var i = 0; i < this.maxPriority; i += 1) {\n            try {\n                for (var _b = (e_2 = void 0, __values(this.cacheList[i].getKeys())), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var key = _c.value;\n                    keys.push(key.substring(this.config.keyPrefix.length));\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n        }\n        return keys;\n    };\n    /**\n     * return the current size of the cache\n     *\n     * @return the current size of the cache\n     */\n    InMemoryCacheClass.prototype.getCacheCurSize = function () {\n        return this.curSizeInBytes;\n    };\n    /**\n     * Return a new instance of cache with customized configuration.\n     * @param config - the customized configuration\n     */\n    InMemoryCacheClass.prototype.createInstance = function (config) {\n        return new InMemoryCacheClass(config);\n    };\n    return InMemoryCacheClass;\n}(StorageCache));\nexport { InMemoryCacheClass };\nexport var InMemoryCache = new InMemoryCacheClass();\n//# sourceMappingURL=InMemoryCache.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}