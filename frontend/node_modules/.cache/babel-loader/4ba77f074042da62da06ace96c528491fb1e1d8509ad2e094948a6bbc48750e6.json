{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport { getSignedHeaders } from './utils/getSignedHeaders';\nimport { getSigningValues } from './utils/getSigningValues';\nimport { AMZ_DATE_HEADER, AUTH_HEADER, HOST_HEADER, SHA256_ALGORITHM_IDENTIFIER, TOKEN_HEADER } from './constants';\nimport { getSignature } from './utils/getSignature';\n/**\n * Given a `HttpRequest`, returns a Signature Version 4 signed `HttpRequest`.\n *\n * @param request `HttpRequest` to be signed.\n * @param signRequestOptions `SignRequestOptions` object containing values used to construct the signature.\n * @returns A `HttpRequest` with authentication headers which can grant temporary access to AWS resources.\n */\nexport var signRequest = function (request, options) {\n  var signingValues = getSigningValues(options);\n  var accessKeyId = signingValues.accessKeyId,\n    credentialScope = signingValues.credentialScope,\n    longDate = signingValues.longDate,\n    sessionToken = signingValues.sessionToken;\n  // create the request to sign\n  var headers = __assign({}, request.headers);\n  headers[HOST_HEADER] = request.url.host;\n  headers[AMZ_DATE_HEADER] = longDate;\n  if (sessionToken) {\n    headers[TOKEN_HEADER] = sessionToken;\n  }\n  var requestToSign = __assign(__assign({}, request), {\n    headers: headers\n  });\n  // calculate and add the signature to the request\n  var signature = getSignature(requestToSign, signingValues);\n  var credentialEntry = \"Credential=\".concat(accessKeyId, \"/\").concat(credentialScope);\n  var signedHeadersEntry = \"SignedHeaders=\".concat(getSignedHeaders(headers));\n  var signatureEntry = \"Signature=\".concat(signature);\n  headers[AUTH_HEADER] = \"\".concat(SHA256_ALGORITHM_IDENTIFIER, \" \").concat(credentialEntry, \", \").concat(signedHeadersEntry, \", \").concat(signatureEntry);\n  return requestToSign;\n};","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","getSignedHeaders","getSigningValues","AMZ_DATE_HEADER","AUTH_HEADER","HOST_HEADER","SHA256_ALGORITHM_IDENTIFIER","TOKEN_HEADER","getSignature","signRequest","request","options","signingValues","accessKeyId","credentialScope","longDate","sessionToken","headers","url","host","requestToSign","signature","credentialEntry","concat","signedHeadersEntry","signatureEntry"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/signer/signatureV4/signRequest.js"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { getSignedHeaders } from './utils/getSignedHeaders';\nimport { getSigningValues } from './utils/getSigningValues';\nimport { AMZ_DATE_HEADER, AUTH_HEADER, HOST_HEADER, SHA256_ALGORITHM_IDENTIFIER, TOKEN_HEADER, } from './constants';\nimport { getSignature } from './utils/getSignature';\n/**\n * Given a `HttpRequest`, returns a Signature Version 4 signed `HttpRequest`.\n *\n * @param request `HttpRequest` to be signed.\n * @param signRequestOptions `SignRequestOptions` object containing values used to construct the signature.\n * @returns A `HttpRequest` with authentication headers which can grant temporary access to AWS resources.\n */\nexport var signRequest = function (request, options) {\n    var signingValues = getSigningValues(options);\n    var accessKeyId = signingValues.accessKeyId, credentialScope = signingValues.credentialScope, longDate = signingValues.longDate, sessionToken = signingValues.sessionToken;\n    // create the request to sign\n    var headers = __assign({}, request.headers);\n    headers[HOST_HEADER] = request.url.host;\n    headers[AMZ_DATE_HEADER] = longDate;\n    if (sessionToken) {\n        headers[TOKEN_HEADER] = sessionToken;\n    }\n    var requestToSign = __assign(__assign({}, request), { headers: headers });\n    // calculate and add the signature to the request\n    var signature = getSignature(requestToSign, signingValues);\n    var credentialEntry = \"Credential=\".concat(accessKeyId, \"/\").concat(credentialScope);\n    var signedHeadersEntry = \"SignedHeaders=\".concat(getSignedHeaders(headers));\n    var signatureEntry = \"Signature=\".concat(signature);\n    headers[AUTH_HEADER] = \"\".concat(SHA256_ALGORITHM_IDENTIFIER, \" \").concat(credentialEntry, \", \").concat(signedHeadersEntry, \", \").concat(signatureEntry);\n    return requestToSign;\n};\n"],"mappings":"AAAA;AACA;AACA,IAAIA,QAAQ,GAAI,IAAI,IAAI,IAAI,CAACA,QAAQ,IAAK,YAAY;EAClDA,QAAQ,GAAGC,MAAM,CAACC,MAAM,IAAI,UAASC,CAAC,EAAE;IACpC,KAAK,IAAIC,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGC,SAAS,CAACC,MAAM,EAAEH,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;MACjDD,CAAC,GAAGG,SAAS,CAACF,CAAC,CAAC;MAChB,KAAK,IAAII,CAAC,IAAIL,CAAC,EAAE,IAAIH,MAAM,CAACS,SAAS,CAACC,cAAc,CAACC,IAAI,CAACR,CAAC,EAAEK,CAAC,CAAC,EAC3DN,CAAC,CAACM,CAAC,CAAC,GAAGL,CAAC,CAACK,CAAC,CAAC;IACnB;IACA,OAAON,CAAC;EACZ,CAAC;EACD,OAAOH,QAAQ,CAACa,KAAK,CAAC,IAAI,EAAEN,SAAS,CAAC;AAC1C,CAAC;AACD,SAASO,gBAAgB,QAAQ,0BAA0B;AAC3D,SAASC,gBAAgB,QAAQ,0BAA0B;AAC3D,SAASC,eAAe,EAAEC,WAAW,EAAEC,WAAW,EAAEC,2BAA2B,EAAEC,YAAY,QAAS,aAAa;AACnH,SAASC,YAAY,QAAQ,sBAAsB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,WAAW,GAAG,SAAAA,CAAUC,OAAO,EAAEC,OAAO,EAAE;EACjD,IAAIC,aAAa,GAAGV,gBAAgB,CAACS,OAAO,CAAC;EAC7C,IAAIE,WAAW,GAAGD,aAAa,CAACC,WAAW;IAAEC,eAAe,GAAGF,aAAa,CAACE,eAAe;IAAEC,QAAQ,GAAGH,aAAa,CAACG,QAAQ;IAAEC,YAAY,GAAGJ,aAAa,CAACI,YAAY;EAC1K;EACA,IAAIC,OAAO,GAAG9B,QAAQ,CAAC,CAAC,CAAC,EAAEuB,OAAO,CAACO,OAAO,CAAC;EAC3CA,OAAO,CAACZ,WAAW,CAAC,GAAGK,OAAO,CAACQ,GAAG,CAACC,IAAI;EACvCF,OAAO,CAACd,eAAe,CAAC,GAAGY,QAAQ;EACnC,IAAIC,YAAY,EAAE;IACdC,OAAO,CAACV,YAAY,CAAC,GAAGS,YAAY;EACxC;EACA,IAAII,aAAa,GAAGjC,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAEuB,OAAO,CAAC,EAAE;IAAEO,OAAO,EAAEA;EAAQ,CAAC,CAAC;EACzE;EACA,IAAII,SAAS,GAAGb,YAAY,CAACY,aAAa,EAAER,aAAa,CAAC;EAC1D,IAAIU,eAAe,GAAG,aAAa,CAACC,MAAM,CAACV,WAAW,EAAE,GAAG,CAAC,CAACU,MAAM,CAACT,eAAe,CAAC;EACpF,IAAIU,kBAAkB,GAAG,gBAAgB,CAACD,MAAM,CAACtB,gBAAgB,CAACgB,OAAO,CAAC,CAAC;EAC3E,IAAIQ,cAAc,GAAG,YAAY,CAACF,MAAM,CAACF,SAAS,CAAC;EACnDJ,OAAO,CAACb,WAAW,CAAC,GAAG,EAAE,CAACmB,MAAM,CAACjB,2BAA2B,EAAE,GAAG,CAAC,CAACiB,MAAM,CAACD,eAAe,EAAE,IAAI,CAAC,CAACC,MAAM,CAACC,kBAAkB,EAAE,IAAI,CAAC,CAACD,MAAM,CAACE,cAAc,CAAC;EACxJ,OAAOL,aAAa;AACxB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}