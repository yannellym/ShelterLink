{"ast":null,"code":"var _jsxFileName = \"/Users/yannellym/Desktop/iwantapet/frontend/src/pages/FindApet.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../styles/MainPage.css';\nimport PetCard from '../components/PetCard';\nimport Filter from './Filter';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FindApet({\n  favoritePets,\n  addToFavorites,\n  removeFromFavorites\n}) {\n  _s();\n  // State variables\n  const [searchResults, setSearchResults] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 24; // Default items per page\n\n  // State variable to store the total count\n  const [totalCount, setTotalCount] = useState(0);\n  const [totalPages, setTotalPages] = useState(0);\n\n  // State variable to control whether to show only pets with images\n  const [showOnlyPetsWithImages, setShowOnlyPetsWithImages] = useState(false);\n\n  // Filters state\n  const [selectedFilters, setSelectedFilters] = useState({\n    type: 'any',\n    breed: 'any',\n    age: 'any',\n    gender: 'any',\n    size: 'any',\n    coat: 'any'\n  });\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        let endpoint = `http://localhost:3002/api/petfinder?page=${currentPage}&limit=${showOnlyPetsWithImages ? 60 : itemsPerPage}`;\n        for (const filterKey in selectedFilters) {\n          if (selectedFilters[filterKey] !== 'any') {\n            endpoint += `&${filterKey}=${selectedFilters[filterKey]}`;\n          }\n        }\n        const response = await fetch(endpoint);\n        const data = await response.json();\n        if (data && data.animals) {\n          const filteredData = applyFilters(data.animals, selectedFilters);\n          console.log(filteredData, \"fdatA\");\n          setTotalCount(data.pagination.total_count);\n          setTotalPages(data.pagination.total_pages);\n          setSearchResults(filteredData);\n          setLoading(false);\n          setCurrentPage(currentPage);\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error.message);\n        setLoading(false);\n      }\n    };\n    fetchInitialData();\n  }, [currentPage, selectedFilters, showOnlyPetsWithImages]);\n  const handlePageChange = page => {\n    // Set loading to true before changing the page\n    setLoading(true);\n\n    // Delay fetching data and scrolling to the top\n    setTimeout(() => {\n      fetchPetsForPage(page);\n\n      // After the data is loaded, scroll to the top\n      window.scrollTo(0, 0); // Scroll to the top of the page\n    }, 500); // 500 milliseconds (0.5 second) delay\n  };\n\n  const handleFilterChange = async newFilters => {\n    // Clear the cached data and search results\n    setCachedData([]);\n    setSearchResults([]);\n    // Set loading to true before fetching new data (this will allow our \"looking through\" message to display)\n    setLoading(true);\n    // Update selected filters\n    setSelectedFilters(newFilters);\n\n    // Set the current page to 1 when filters change\n    setCurrentPage(1);\n\n    // Fetch new data based on the updated filters\n    try {\n      // Construct the API endpoint based on selected filter values\n      let endpoint = `http://localhost:3002/api/petfinder?page=1&perPage=${itemsPerPage}`;\n      for (const filterKey in newFilters) {\n        if (newFilters[filterKey] !== 'any') {\n          endpoint += `&${filterKey}=${newFilters[filterKey]}`;\n        }\n      }\n      const response = await fetch(endpoint);\n      const data = await response.json();\n      console.log('API Response:', data);\n      if (data && data.animals) {\n        // Add the fetched data to the cache\n        setCachedData(data.animals);\n\n        // Apply filters to the new data, including the \"showOnlyPetsWithImages\" filter\n        setSearchResults(applyFilters(data.animals, newFilters));\n        setLoading(false);\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error.message);\n      setLoading(false);\n    }\n  };\n\n  // Function to filter pet data based on selected filters\n  const applyFilters = (data, filters) => {\n    return data.filter(pet => {\n      let matchesAllFilters = true;\n\n      // Loop through each filter to check if the pet matches the criteria\n      for (const filterKey in filters) {\n        var _filters$filterKey, _pet$filterKey;\n        // Get the filter value and pet value, converting both to lowercase for case-insensitive comparison\n        const filterValue = (_filters$filterKey = filters[filterKey]) === null || _filters$filterKey === void 0 ? void 0 : _filters$filterKey.toLowerCase();\n        const petValue = (_pet$filterKey = pet[filterKey]) === null || _pet$filterKey === void 0 ? void 0 : _pet$filterKey.toLowerCase();\n\n        // If the filter value is \"any,\" skip this filter\n        if (filterValue === 'any') {\n          continue;\n        }\n\n        // Special handling for the \"type\" filter to handle both \"Cat\" and \"Dog\"\n        if (filterKey === 'type') {\n          if (filterValue === 'cat' && petValue !== 'cat') {\n            matchesAllFilters = false;\n            break; // Exit the loop early if there's no match\n          }\n\n          if (filterValue === 'dog' && petValue !== 'dog') {\n            matchesAllFilters = false;\n            break; // Exit the loop early if there's no match\n          }\n        } else if (filterKey === 'breed') {\n          if (filterValue !== 'any' && petValue && !(petValue.primary.toLowerCase().includes(filterValue) || petValue.secondary && petValue.secondary.toLowerCase().includes(filterValue))) {\n            matchesAllFilters = false;\n            break;\n          }\n        } else {\n          // For other filters, compare values directly\n          if (petValue !== filterValue) {\n            matchesAllFilters = false;\n            break; // Exit the loop early if there's no match\n          }\n        }\n      }\n\n      // Filter pets with images\n      if (showOnlyPetsWithImages && (!pet.photos || pet.photos.length === 0)) {\n        matchesAllFilters = false;\n      }\n\n      // If the pet matches all filters, include it in the results\n      return matchesAllFilters;\n    });\n  };\n\n  // Function to render the list of pet cards based on applied filters\n  const renderPetCards = () => {\n    if (loading) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Looking through all of our amazing pets...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 12\n      }, this);\n    } else {\n      // Apply filters to the cached data\n      const filteredResults = applyFilters(cachedData, selectedFilters);\n\n      // Check if there are matching pets after applying filters\n      if (filteredResults.length > 0) {\n        return filteredResults.map(pet => /*#__PURE__*/_jsxDEV(PetCard, {\n          pet: pet,\n          addToFavorites: addToFavorites,\n          removeFromFavorites: removeFromFavorites,\n          isFavorite: favoritePets.some(favoritePet => favoritePet.id === pet.id)\n        }, pet.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 9\n        }, this));\n      } else {\n        // If no matching pets, display a message\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No pets match your criteria.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 14\n        }, this);\n      }\n    }\n  };\n\n  // Function to generate pagination buttons for navigating between pages\n  const generatePaginationButtons = () => {\n    const buttons = [];\n    // Calculate the starting and ending page numbers to display\n    const startPage = Math.max(1, currentPage - Math.floor(maxPaginationButtons / 2));\n    const endPage = Math.min(totalPages, startPage + maxPaginationButtons - 1);\n\n    // Iterate through the pages and create buttons for each page\n    for (let page = startPage; page <= endPage; page++) {\n      buttons.push( /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handlePageChange(page) // Set an onClick handler to change the page\n        ,\n        className: currentPage === page ? 'active' : '' // Apply the 'active' class to the current page\n        ,\n        children: [page, \" \"]\n      }, page, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 7\n      }, this));\n    }\n    return buttons; // Return the generated pagination buttons\n  };\n\n  // Function to apply filters to the results based on selected filters and showOnlyPetsWithImages flag\n  const applyFiltersToResults = (filters, showOnlyPetsWithImages) => {\n    // Apply filters to the cached data\n    const filteredResults = applyFilters(cachedData, filters, showOnlyPetsWithImages);\n\n    // Set the filtered results as the search results\n    setSearchResults(filteredResults);\n  };\n\n  // Update the handleShowOnlyPetsWithImages function to call applyFiltersToResults\n  const handleShowOnlyPetsWithImages = () => {\n    setShowOnlyPetsWithImages(!showOnlyPetsWithImages);\n\n    // Reapply filters when the checkbox is toggled\n    applyFiltersToResults(selectedFilters, !showOnlyPetsWithImages);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filters\",\n        children: /*#__PURE__*/_jsxDEV(Filter, {\n          onFilterChange: handleFilterChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter-pets\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: showOnlyPetsWithImages,\n            onChange: handleShowOnlyPetsWithImages\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 13\n          }, this), \"Show only pets with images\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pet-card-list\",\n        children: renderPetCards()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pagination-horizontal\",\n        children: generatePaginationButtons()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 243,\n    columnNumber: 5\n  }, this);\n}\n_s(FindApet, \"fqoVF4TgnHjQSuJEL/6rGwctmlo=\");\n_c = FindApet;\nexport default FindApet;\nvar _c;\n$RefreshReg$(_c, \"FindApet\");","map":{"version":3,"names":["React","useState","useEffect","PetCard","Filter","jsxDEV","_jsxDEV","FindApet","favoritePets","addToFavorites","removeFromFavorites","_s","searchResults","setSearchResults","loading","setLoading","currentPage","setCurrentPage","itemsPerPage","totalCount","setTotalCount","totalPages","setTotalPages","showOnlyPetsWithImages","setShowOnlyPetsWithImages","selectedFilters","setSelectedFilters","type","breed","age","gender","size","coat","fetchInitialData","endpoint","filterKey","response","fetch","data","json","animals","filteredData","applyFilters","console","log","pagination","total_count","total_pages","error","message","handlePageChange","page","setTimeout","fetchPetsForPage","window","scrollTo","handleFilterChange","newFilters","setCachedData","filters","filter","pet","matchesAllFilters","_filters$filterKey","_pet$filterKey","filterValue","toLowerCase","petValue","primary","includes","secondary","photos","length","renderPetCards","children","fileName","_jsxFileName","lineNumber","columnNumber","filteredResults","cachedData","map","isFavorite","some","favoritePet","id","generatePaginationButtons","buttons","startPage","Math","max","floor","maxPaginationButtons","endPage","min","push","onClick","className","applyFiltersToResults","handleShowOnlyPetsWithImages","onFilterChange","checked","onChange","_c","$RefreshReg$"],"sources":["/Users/yannellym/Desktop/iwantapet/frontend/src/pages/FindApet.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../styles/MainPage.css';\nimport PetCard from '../components/PetCard';\nimport Filter from './Filter';\n\nfunction FindApet({ favoritePets, addToFavorites, removeFromFavorites }) {\n  // State variables\n  const [searchResults, setSearchResults] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 24; // Default items per page\n\n  // State variable to store the total count\n  const [totalCount, setTotalCount] = useState(0);\n  const [totalPages, setTotalPages] = useState(0);\n\n  // State variable to control whether to show only pets with images\n  const [showOnlyPetsWithImages, setShowOnlyPetsWithImages] = useState(false);\n\n  // Filters state\n  const [selectedFilters, setSelectedFilters] = useState({\n    type: 'any',\n    breed: 'any',\n    age: 'any',\n    gender: 'any',\n    size: 'any',\n    coat: 'any',\n  });\n\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        let endpoint = `http://localhost:3002/api/petfinder?page=${currentPage}&limit=${showOnlyPetsWithImages ? 60 : itemsPerPage}`;\n\n        for (const filterKey in selectedFilters) {\n          if (selectedFilters[filterKey] !== 'any') {\n            endpoint += `&${filterKey}=${selectedFilters[filterKey]}`;\n          }\n        }\n\n        const response = await fetch(endpoint);\n        const data = await response.json();\n\n        if (data && data.animals) {\n          const filteredData = applyFilters(data.animals, selectedFilters);\n          console.log(filteredData, \"fdatA\");\n\n          setTotalCount(data.pagination.total_count);\n          setTotalPages(data.pagination.total_pages);\n          setSearchResults(filteredData);\n          setLoading(false);\n          setCurrentPage(currentPage);\n        }\n      } catch (error) { \n        console.error('Error fetching data:', error.message);\n        setLoading(false);\n      }\n    };\n\n    fetchInitialData();\n  }, [currentPage, selectedFilters, showOnlyPetsWithImages]);\n\n\n  const handlePageChange = (page) => {\n    // Set loading to true before changing the page\n    setLoading(true);\n\n    // Delay fetching data and scrolling to the top\n    setTimeout(() => {\n      fetchPetsForPage(page);\n\n      // After the data is loaded, scroll to the top\n      window.scrollTo(0, 0); // Scroll to the top of the page\n    }, 500); // 500 milliseconds (0.5 second) delay\n  };\n\n  const handleFilterChange = async (newFilters) => {\n    // Clear the cached data and search results\n    setCachedData([]);\n    setSearchResults([]);\n    // Set loading to true before fetching new data (this will allow our \"looking through\" message to display)\n    setLoading(true);\n    // Update selected filters\n    setSelectedFilters(newFilters);\n    \n    // Set the current page to 1 when filters change\n    setCurrentPage(1);\n  \n    // Fetch new data based on the updated filters\n    try {\n      // Construct the API endpoint based on selected filter values\n      let endpoint = `http://localhost:3002/api/petfinder?page=1&perPage=${itemsPerPage}`;\n      for (const filterKey in newFilters) {\n        if (newFilters[filterKey] !== 'any') {\n          endpoint += `&${filterKey}=${newFilters[filterKey]}`;\n        }\n      }\n\n      const response = await fetch(endpoint);\n      const data = await response.json();\n\n      console.log('API Response:', data);\n\n      if (data && data.animals) {\n        // Add the fetched data to the cache\n        setCachedData(data.animals);\n\n        // Apply filters to the new data, including the \"showOnlyPetsWithImages\" filter\n        setSearchResults(applyFilters(data.animals, newFilters));\n\n        setLoading(false);\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error.message);\n      setLoading(false);\n    }\n  };\n  \n// Function to filter pet data based on selected filters\nconst applyFilters = (data, filters) => {\n  return data.filter((pet) => {\n    let matchesAllFilters = true;\n\n    // Loop through each filter to check if the pet matches the criteria\n    for (const filterKey in filters) {\n      // Get the filter value and pet value, converting both to lowercase for case-insensitive comparison\n      const filterValue = filters[filterKey]?.toLowerCase();\n      const petValue = pet[filterKey]?.toLowerCase();\n\n      // If the filter value is \"any,\" skip this filter\n      if (filterValue === 'any') {\n        continue;\n      }\n\n      // Special handling for the \"type\" filter to handle both \"Cat\" and \"Dog\"\n      if (filterKey === 'type') {\n        if (filterValue === 'cat' && petValue !== 'cat') {\n          matchesAllFilters = false;\n          break; // Exit the loop early if there's no match\n        }\n        if (filterValue === 'dog' && petValue !== 'dog') {\n          matchesAllFilters = false;\n          break; // Exit the loop early if there's no match\n        }\n      } else if (filterKey === 'breed') {\n        if (\n          filterValue !== 'any' &&\n          petValue &&\n          !(\n            petValue.primary.toLowerCase().includes(filterValue) ||\n            (petValue.secondary && petValue.secondary.toLowerCase().includes(filterValue))\n          )\n        ) {\n          matchesAllFilters = false;\n          break;\n        }\n      } else {\n        // For other filters, compare values directly\n        if (petValue !== filterValue) {\n          matchesAllFilters = false;\n          break; // Exit the loop early if there's no match\n        }\n      }\n    }\n\n    // Filter pets with images\n    if (showOnlyPetsWithImages && (!pet.photos || pet.photos.length === 0)) {\n      matchesAllFilters = false;\n    }\n\n    // If the pet matches all filters, include it in the results\n    return matchesAllFilters;\n  });\n};\n\n// Function to render the list of pet cards based on applied filters\nconst renderPetCards = () => {\n  if (loading) {\n    return <p>Looking through all of our amazing pets...</p>;\n  } else {\n    // Apply filters to the cached data\n    const filteredResults = applyFilters(cachedData, selectedFilters);\n\n    // Check if there are matching pets after applying filters\n    if (filteredResults.length > 0) {\n      return filteredResults.map((pet) => (\n        <PetCard\n          key={pet.id}\n          pet={pet}\n          addToFavorites={addToFavorites}\n          removeFromFavorites={removeFromFavorites}\n          isFavorite={favoritePets.some((favoritePet) => favoritePet.id === pet.id)}\n        />\n      ));\n    } else {\n      // If no matching pets, display a message\n      return <p>No pets match your criteria.</p>;\n    }\n  }\n};\n\n// Function to generate pagination buttons for navigating between pages\nconst generatePaginationButtons = () => {\n  const buttons = [];\n  // Calculate the starting and ending page numbers to display\n  const startPage = Math.max(1, currentPage - Math.floor(maxPaginationButtons / 2));\n  const endPage = Math.min(totalPages, startPage + maxPaginationButtons - 1);\n\n  // Iterate through the pages and create buttons for each page\n  for (let page = startPage; page <= endPage; page++) {\n    buttons.push(\n      <button\n        key={page}\n        onClick={() => handlePageChange(page)} // Set an onClick handler to change the page\n        className={currentPage === page ? 'active' : ''} // Apply the 'active' class to the current page\n      >\n        {page} {/* Display the page number as button text */}\n      </button>\n    );\n  }\n\n  return buttons; // Return the generated pagination buttons\n};\n\n  // Function to apply filters to the results based on selected filters and showOnlyPetsWithImages flag\n  const applyFiltersToResults = (filters, showOnlyPetsWithImages) => {\n    // Apply filters to the cached data\n    const filteredResults = applyFilters(cachedData, filters, showOnlyPetsWithImages);\n\n    // Set the filtered results as the search results\n    setSearchResults(filteredResults);\n  };\n\n  // Update the handleShowOnlyPetsWithImages function to call applyFiltersToResults\n  const handleShowOnlyPetsWithImages = () => {\n    setShowOnlyPetsWithImages(!showOnlyPetsWithImages);\n\n    // Reapply filters when the checkbox is toggled\n    applyFiltersToResults(selectedFilters, !showOnlyPetsWithImages);\n  };\n\n  return (\n    <div className=\"main-page\">\n      <div className=\"sidebar\">\n        <div className=\"filters\">\n          <Filter onFilterChange={handleFilterChange} />\n        </div>\n      </div>\n      <div className=\"content\">\n        <div className=\"filter-pets\">\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={showOnlyPetsWithImages}\n              onChange={handleShowOnlyPetsWithImages}\n            />\n            Show only pets with images\n          </label>\n        </div>\n        <div className=\"pet-card-list\">\n          {renderPetCards()}\n        </div>\n        <div className=\"pagination-horizontal\">\n          {generatePaginationButtons()}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default FindApet;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}