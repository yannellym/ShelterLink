{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { Amplify, ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { AWSLexProvider } from './Providers';\nvar logger = new Logger('Interactions');\nvar InteractionsClass = /** @class */function () {\n  /**\n   * Initialize PubSub with AWS configurations\n   *\n   * @param {InteractionsOptions} options - Configuration object for Interactions\n   */\n  function InteractionsClass(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    this._options = options;\n    logger.debug('Interactions Options', this._options);\n    this._pluggables = {};\n  }\n  InteractionsClass.prototype.getModuleName = function () {\n    return 'Interactions';\n  };\n  /**\n   *\n   * @param {InteractionsOptions} options - Configuration object for Interactions\n   * @return {InteractionsOptions} - The current configuration\n   */\n  InteractionsClass.prototype.configure = function (options) {\n    var _this = this;\n    var opt = options ? options.Interactions || options : {};\n    logger.debug('configure Interactions', {\n      opt: opt\n    });\n    this._options = __assign(__assign({\n      bots: {}\n    }, opt), opt.Interactions);\n    var aws_bots_config = this._options.aws_bots_config;\n    var bots_config = this._options.bots;\n    if (!Object.keys(bots_config).length && aws_bots_config) {\n      // Convert aws_bots_config to bots object\n      if (Array.isArray(aws_bots_config)) {\n        aws_bots_config.forEach(function (bot) {\n          _this._options.bots[bot.name] = bot;\n        });\n      }\n    }\n    // configure bots to their specific providers\n    Object.keys(bots_config).forEach(function (botKey) {\n      var _a;\n      var bot = bots_config[botKey];\n      var providerName = bot.providerName || 'AWSLexProvider';\n      // add default provider if required\n      if (!_this._pluggables.AWSLexProvider && providerName === 'AWSLexProvider') {\n        _this._pluggables.AWSLexProvider = new AWSLexProvider();\n      }\n      // configure bot with it's respective provider\n      if (_this._pluggables[providerName]) {\n        _this._pluggables[providerName].configure((_a = {}, _a[bot.name] = bot, _a));\n      } else {\n        logger.debug(\"bot \" + bot.name + \" was not configured as \" + providerName + \" provider was not found\");\n      }\n    });\n    return this._options;\n  };\n  InteractionsClass.prototype.addPluggable = function (pluggable) {\n    var _this = this;\n    if (pluggable && pluggable.getCategory() === 'Interactions') {\n      if (!this._pluggables[pluggable.getProviderName()]) {\n        // configure bots for the new plugin\n        Object.keys(this._options.bots).filter(function (botKey) {\n          return _this._options.bots[botKey].providerName === pluggable.getProviderName();\n        }).forEach(function (botKey) {\n          var _a;\n          var bot = _this._options.bots[botKey];\n          pluggable.configure((_a = {}, _a[bot.name] = bot, _a));\n        });\n        this._pluggables[pluggable.getProviderName()] = pluggable;\n        return;\n      } else {\n        throw new Error('Pluggable ' + pluggable.getProviderName() + ' already plugged');\n      }\n    }\n  };\n  InteractionsClass.prototype.send = function (botname, message) {\n    return __awaiter(this, void 0, void 0, function () {\n      var botProvider;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this._options.bots || !this._options.bots[botname]) {\n              return [2 /*return*/, Promise.reject('Bot ' + botname + ' does not exist')];\n            }\n            botProvider = this._options.bots[botname].providerName || 'AWSLexProvider';\n            if (!this._pluggables[botProvider]) {\n              return [2 /*return*/, Promise.reject('Bot ' + botProvider + ' does not have valid pluggin did you try addPluggable first?')];\n            }\n            return [4 /*yield*/, this._pluggables[botProvider].sendMessage(botname, message)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  InteractionsClass.prototype.onComplete = function (botname, callback) {\n    if (!this._options.bots || !this._options.bots[botname]) {\n      throw new Error('Bot ' + botname + ' does not exist');\n    }\n    var botProvider = this._options.bots[botname].providerName || 'AWSLexProvider';\n    if (!this._pluggables[botProvider]) {\n      throw new Error('Bot ' + botProvider + ' does not have valid pluggin did you try addPluggable first?');\n    }\n    this._pluggables[botProvider].onComplete(botname, callback);\n  };\n  return InteractionsClass;\n}();\nexport { InteractionsClass };\nexport var Interactions = new InteractionsClass();\nAmplify.register(Interactions);","map":{"version":3,"names":["Amplify","ConsoleLogger","Logger","AWSLexProvider","logger","InteractionsClass","options","_options","debug","_pluggables","prototype","getModuleName","configure","_this","opt","Interactions","__assign","bots","aws_bots_config","bots_config","Object","keys","length","Array","isArray","forEach","bot","name","botKey","providerName","_a","addPluggable","pluggable","getCategory","getProviderName","filter","Error","send","botname","message","Promise","reject","botProvider","sendMessage","sent","onComplete","callback","register"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-amplify/interactions/src/Interactions.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport {\n\tInteractionsOptions,\n\tInteractionsProviders,\n\tInteractionsProvider,\n\tInteractionsMessage,\n\tInteractionsResponse,\n} from './types';\nimport { Amplify, ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { AWSLexProvider } from './Providers';\nconst logger = new Logger('Interactions');\n\nexport class InteractionsClass {\n\tprivate _options: InteractionsOptions;\n\n\tprivate _pluggables: InteractionsProviders;\n\n\t/**\n\t * Initialize PubSub with AWS configurations\n\t *\n\t * @param {InteractionsOptions} options - Configuration object for Interactions\n\t */\n\tconstructor(options: InteractionsOptions = {}) {\n\t\tthis._options = options;\n\t\tlogger.debug('Interactions Options', this._options);\n\t\tthis._pluggables = {};\n\t}\n\n\tpublic getModuleName() {\n\t\treturn 'Interactions';\n\t}\n\n\t/**\n\t *\n\t * @param {InteractionsOptions} options - Configuration object for Interactions\n\t * @return {InteractionsOptions} - The current configuration\n\t */\n\tpublic configure(options: InteractionsOptions): InteractionsOptions {\n\t\tconst opt = options ? options.Interactions || options : {};\n\t\tlogger.debug('configure Interactions', { opt });\n\t\tthis._options = { bots: {}, ...opt, ...opt.Interactions };\n\n\t\tconst aws_bots_config = this._options.aws_bots_config;\n\t\tconst bots_config = this._options.bots;\n\n\t\tif (!Object.keys(bots_config).length && aws_bots_config) {\n\t\t\t// Convert aws_bots_config to bots object\n\t\t\tif (Array.isArray(aws_bots_config)) {\n\t\t\t\taws_bots_config.forEach(bot => {\n\t\t\t\t\tthis._options.bots[bot.name] = bot;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// configure bots to their specific providers\n\t\tObject.keys(bots_config).forEach(botKey => {\n\t\t\tconst bot = bots_config[botKey];\n\t\t\tconst providerName = bot.providerName || 'AWSLexProvider';\n\n\t\t\t// add default provider if required\n\t\t\tif (\n\t\t\t\t!this._pluggables.AWSLexProvider &&\n\t\t\t\tproviderName === 'AWSLexProvider'\n\t\t\t) {\n\t\t\t\tthis._pluggables.AWSLexProvider = new AWSLexProvider();\n\t\t\t}\n\n\t\t\t// configure bot with it's respective provider\n\t\t\tif (this._pluggables[providerName]) {\n\t\t\t\tthis._pluggables[providerName].configure({ [bot.name]: bot });\n\t\t\t} else {\n\t\t\t\tlogger.debug(\n\t\t\t\t\t`bot ${bot.name} was not configured as ${providerName} provider was not found`\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\n\t\treturn this._options;\n\t}\n\n\tpublic addPluggable(pluggable: InteractionsProvider) {\n\t\tif (pluggable && pluggable.getCategory() === 'Interactions') {\n\t\t\tif (!this._pluggables[pluggable.getProviderName()]) {\n\t\t\t\t// configure bots for the new plugin\n\t\t\t\tObject.keys(this._options.bots)\n\t\t\t\t\t.filter(\n\t\t\t\t\t\tbotKey =>\n\t\t\t\t\t\t\tthis._options.bots[botKey].providerName ===\n\t\t\t\t\t\t\tpluggable.getProviderName()\n\t\t\t\t\t)\n\t\t\t\t\t.forEach(botKey => {\n\t\t\t\t\t\tconst bot = this._options.bots[botKey];\n\t\t\t\t\t\tpluggable.configure({ [bot.name]: bot });\n\t\t\t\t\t});\n\n\t\t\t\tthis._pluggables[pluggable.getProviderName()] = pluggable;\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Pluggable ' + pluggable.getProviderName() + ' already plugged'\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic async send(\n\t\tbotname: string,\n\t\tmessage: string\n\t): Promise<InteractionsResponse>;\n\tpublic async send(\n\t\tbotname: string,\n\t\tmessage: InteractionsMessage\n\t): Promise<InteractionsResponse>;\n\tpublic async send(\n\t\tbotname: string,\n\t\tmessage: object\n\t): Promise<InteractionsResponse>;\n\tpublic async send(\n\t\tbotname: string,\n\t\tmessage: string | object\n\t): Promise<InteractionsResponse> {\n\t\tif (!this._options.bots || !this._options.bots[botname]) {\n\t\t\treturn Promise.reject('Bot ' + botname + ' does not exist');\n\t\t}\n\n\t\tconst botProvider =\n\t\t\tthis._options.bots[botname].providerName || 'AWSLexProvider';\n\n\t\tif (!this._pluggables[botProvider]) {\n\t\t\treturn Promise.reject(\n\t\t\t\t'Bot ' +\n\t\t\t\t\tbotProvider +\n\t\t\t\t\t' does not have valid pluggin did you try addPluggable first?'\n\t\t\t);\n\t\t}\n\t\treturn await this._pluggables[botProvider].sendMessage(botname, message);\n\t}\n\n\tpublic onComplete(\n\t\tbotname: string,\n\t\tcallback: (err, confirmation) => void\n\t): void {\n\t\tif (!this._options.bots || !this._options.bots[botname]) {\n\t\t\tthrow new Error('Bot ' + botname + ' does not exist');\n\t\t}\n\t\tconst botProvider =\n\t\t\tthis._options.bots[botname].providerName || 'AWSLexProvider';\n\n\t\tif (!this._pluggables[botProvider]) {\n\t\t\tthrow new Error(\n\t\t\t\t'Bot ' +\n\t\t\t\t\tbotProvider +\n\t\t\t\t\t' does not have valid pluggin did you try addPluggable first?'\n\t\t\t);\n\t\t}\n\t\tthis._pluggables[botProvider].onComplete(botname, callback);\n\t}\n}\n\nexport const Interactions = new InteractionsClass();\nAmplify.register(Interactions);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}