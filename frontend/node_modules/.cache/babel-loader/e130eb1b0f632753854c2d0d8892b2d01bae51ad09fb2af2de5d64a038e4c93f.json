{"ast":null,"code":"import { __values } from \"tslib\";\nimport { fromHex, toHex } from \"@aws-sdk/util-hex-encoding\";\nimport { Int64 } from \"./Int64\";\n/**\n * @internal\n */\nvar HeaderMarshaller = /** @class */function () {\n  function HeaderMarshaller(toUtf8, fromUtf8) {\n    this.toUtf8 = toUtf8;\n    this.fromUtf8 = fromUtf8;\n  }\n  HeaderMarshaller.prototype.format = function (headers) {\n    var e_1, _a, e_2, _b;\n    var chunks = [];\n    try {\n      for (var _c = __values(Object.keys(headers)), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var headerName = _d.value;\n        var bytes = this.fromUtf8(headerName);\n        chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    var out = new Uint8Array(chunks.reduce(function (carry, bytes) {\n      return carry + bytes.byteLength;\n    }, 0));\n    var position = 0;\n    try {\n      for (var chunks_1 = __values(chunks), chunks_1_1 = chunks_1.next(); !chunks_1_1.done; chunks_1_1 = chunks_1.next()) {\n        var chunk = chunks_1_1.value;\n        out.set(chunk, position);\n        position += chunk.byteLength;\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (chunks_1_1 && !chunks_1_1.done && (_b = chunks_1.return)) _b.call(chunks_1);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n    return out;\n  };\n  HeaderMarshaller.prototype.formatHeaderValue = function (header) {\n    switch (header.type) {\n      case \"boolean\":\n        return Uint8Array.from([header.value ? 0 /* boolTrue */ : 1 /* boolFalse */]);\n      case \"byte\":\n        return Uint8Array.from([2 /* byte */, header.value]);\n      case \"short\":\n        var shortView = new DataView(new ArrayBuffer(3));\n        shortView.setUint8(0, 3 /* short */);\n        shortView.setInt16(1, header.value, false);\n        return new Uint8Array(shortView.buffer);\n      case \"integer\":\n        var intView = new DataView(new ArrayBuffer(5));\n        intView.setUint8(0, 4 /* integer */);\n        intView.setInt32(1, header.value, false);\n        return new Uint8Array(intView.buffer);\n      case \"long\":\n        var longBytes = new Uint8Array(9);\n        longBytes[0] = 5 /* long */;\n        longBytes.set(header.value.bytes, 1);\n        return longBytes;\n      case \"binary\":\n        var binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));\n        binView.setUint8(0, 6 /* byteArray */);\n        binView.setUint16(1, header.value.byteLength, false);\n        var binBytes = new Uint8Array(binView.buffer);\n        binBytes.set(header.value, 3);\n        return binBytes;\n      case \"string\":\n        var utf8Bytes = this.fromUtf8(header.value);\n        var strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));\n        strView.setUint8(0, 7 /* string */);\n        strView.setUint16(1, utf8Bytes.byteLength, false);\n        var strBytes = new Uint8Array(strView.buffer);\n        strBytes.set(utf8Bytes, 3);\n        return strBytes;\n      case \"timestamp\":\n        var tsBytes = new Uint8Array(9);\n        tsBytes[0] = 8 /* timestamp */;\n        tsBytes.set(Int64.fromNumber(header.value.valueOf()).bytes, 1);\n        return tsBytes;\n      case \"uuid\":\n        if (!UUID_PATTERN.test(header.value)) {\n          throw new Error(\"Invalid UUID received: \" + header.value);\n        }\n        var uuidBytes = new Uint8Array(17);\n        uuidBytes[0] = 9 /* uuid */;\n        uuidBytes.set(fromHex(header.value.replace(/\\-/g, \"\")), 1);\n        return uuidBytes;\n    }\n  };\n  HeaderMarshaller.prototype.parse = function (headers) {\n    var out = {};\n    var position = 0;\n    while (position < headers.byteLength) {\n      var nameLength = headers.getUint8(position++);\n      var name = this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, nameLength));\n      position += nameLength;\n      switch (headers.getUint8(position++)) {\n        case 0 /* boolTrue */:\n          out[name] = {\n            type: BOOLEAN_TAG,\n            value: true\n          };\n          break;\n        case 1 /* boolFalse */:\n          out[name] = {\n            type: BOOLEAN_TAG,\n            value: false\n          };\n          break;\n        case 2 /* byte */:\n          out[name] = {\n            type: BYTE_TAG,\n            value: headers.getInt8(position++)\n          };\n          break;\n        case 3 /* short */:\n          out[name] = {\n            type: SHORT_TAG,\n            value: headers.getInt16(position, false)\n          };\n          position += 2;\n          break;\n        case 4 /* integer */:\n          out[name] = {\n            type: INT_TAG,\n            value: headers.getInt32(position, false)\n          };\n          position += 4;\n          break;\n        case 5 /* long */:\n          out[name] = {\n            type: LONG_TAG,\n            value: new Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8))\n          };\n          position += 8;\n          break;\n        case 6 /* byteArray */:\n          var binaryLength = headers.getUint16(position, false);\n          position += 2;\n          out[name] = {\n            type: BINARY_TAG,\n            value: new Uint8Array(headers.buffer, headers.byteOffset + position, binaryLength)\n          };\n          position += binaryLength;\n          break;\n        case 7 /* string */:\n          var stringLength = headers.getUint16(position, false);\n          position += 2;\n          out[name] = {\n            type: STRING_TAG,\n            value: this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, stringLength))\n          };\n          position += stringLength;\n          break;\n        case 8 /* timestamp */:\n          out[name] = {\n            type: TIMESTAMP_TAG,\n            value: new Date(new Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)).valueOf())\n          };\n          position += 8;\n          break;\n        case 9 /* uuid */:\n          var uuidBytes = new Uint8Array(headers.buffer, headers.byteOffset + position, 16);\n          position += 16;\n          out[name] = {\n            type: UUID_TAG,\n            value: toHex(uuidBytes.subarray(0, 4)) + \"-\" + toHex(uuidBytes.subarray(4, 6)) + \"-\" + toHex(uuidBytes.subarray(6, 8)) + \"-\" + toHex(uuidBytes.subarray(8, 10)) + \"-\" + toHex(uuidBytes.subarray(10))\n          };\n          break;\n        default:\n          throw new Error(\"Unrecognized header type tag\");\n      }\n    }\n    return out;\n  };\n  return HeaderMarshaller;\n}();\nexport { HeaderMarshaller };\nvar HEADER_VALUE_TYPE;\n(function (HEADER_VALUE_TYPE) {\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"boolTrue\"] = 0] = \"boolTrue\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"boolFalse\"] = 1] = \"boolFalse\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"byte\"] = 2] = \"byte\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"short\"] = 3] = \"short\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"integer\"] = 4] = \"integer\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"long\"] = 5] = \"long\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"byteArray\"] = 6] = \"byteArray\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"string\"] = 7] = \"string\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"timestamp\"] = 8] = \"timestamp\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"uuid\"] = 9] = \"uuid\";\n})(HEADER_VALUE_TYPE || (HEADER_VALUE_TYPE = {}));\nvar BOOLEAN_TAG = \"boolean\";\nvar BYTE_TAG = \"byte\";\nvar SHORT_TAG = \"short\";\nvar INT_TAG = \"integer\";\nvar LONG_TAG = \"long\";\nvar BINARY_TAG = \"binary\";\nvar STRING_TAG = \"string\";\nvar TIMESTAMP_TAG = \"timestamp\";\nvar UUID_TAG = \"uuid\";\nvar UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;","map":{"version":3,"names":["fromHex","toHex","Int64","HeaderMarshaller","toUtf8","fromUtf8","prototype","format","headers","chunks","_c","__values","Object","keys","_d","next","done","headerName","value","bytes","push","Uint8Array","from","byteLength","formatHeaderValue","out","reduce","carry","position","chunks_1","chunks_1_1","chunk","set","header","type","shortView","DataView","ArrayBuffer","setUint8","setInt16","buffer","intView","setInt32","longBytes","binView","setUint16","binBytes","utf8Bytes","strView","strBytes","tsBytes","fromNumber","valueOf","UUID_PATTERN","test","Error","uuidBytes","replace","parse","nameLength","getUint8","name","byteOffset","BOOLEAN_TAG","BYTE_TAG","getInt8","SHORT_TAG","getInt16","INT_TAG","getInt32","LONG_TAG","binaryLength","getUint16","BINARY_TAG","stringLength","STRING_TAG","TIMESTAMP_TAG","Date","UUID_TAG","subarray","HEADER_VALUE_TYPE"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-sdk/eventstream-marshaller/src/HeaderMarshaller.ts"],"sourcesContent":["import { Decoder, Encoder, MessageHeaders, MessageHeaderValue } from \"@aws-sdk/types\";\nimport { fromHex, toHex } from \"@aws-sdk/util-hex-encoding\";\n\nimport { Int64 } from \"./Int64\";\n\n/**\n * @internal\n */\nexport class HeaderMarshaller {\n  constructor(private readonly toUtf8: Encoder, private readonly fromUtf8: Decoder) {}\n\n  format(headers: MessageHeaders): Uint8Array {\n    const chunks: Array<Uint8Array> = [];\n\n    for (const headerName of Object.keys(headers)) {\n      const bytes = this.fromUtf8(headerName);\n      chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));\n    }\n\n    const out = new Uint8Array(chunks.reduce((carry, bytes) => carry + bytes.byteLength, 0));\n    let position = 0;\n    for (const chunk of chunks) {\n      out.set(chunk, position);\n      position += chunk.byteLength;\n    }\n\n    return out;\n  }\n\n  private formatHeaderValue(header: MessageHeaderValue): Uint8Array {\n    switch (header.type) {\n      case \"boolean\":\n        return Uint8Array.from([header.value ? HEADER_VALUE_TYPE.boolTrue : HEADER_VALUE_TYPE.boolFalse]);\n      case \"byte\":\n        return Uint8Array.from([HEADER_VALUE_TYPE.byte, header.value]);\n      case \"short\":\n        const shortView = new DataView(new ArrayBuffer(3));\n        shortView.setUint8(0, HEADER_VALUE_TYPE.short);\n        shortView.setInt16(1, header.value, false);\n        return new Uint8Array(shortView.buffer);\n      case \"integer\":\n        const intView = new DataView(new ArrayBuffer(5));\n        intView.setUint8(0, HEADER_VALUE_TYPE.integer);\n        intView.setInt32(1, header.value, false);\n        return new Uint8Array(intView.buffer);\n      case \"long\":\n        const longBytes = new Uint8Array(9);\n        longBytes[0] = HEADER_VALUE_TYPE.long;\n        longBytes.set(header.value.bytes, 1);\n        return longBytes;\n      case \"binary\":\n        const binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));\n        binView.setUint8(0, HEADER_VALUE_TYPE.byteArray);\n        binView.setUint16(1, header.value.byteLength, false);\n        const binBytes = new Uint8Array(binView.buffer);\n        binBytes.set(header.value, 3);\n        return binBytes;\n      case \"string\":\n        const utf8Bytes = this.fromUtf8(header.value);\n        const strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));\n        strView.setUint8(0, HEADER_VALUE_TYPE.string);\n        strView.setUint16(1, utf8Bytes.byteLength, false);\n        const strBytes = new Uint8Array(strView.buffer);\n        strBytes.set(utf8Bytes, 3);\n        return strBytes;\n      case \"timestamp\":\n        const tsBytes = new Uint8Array(9);\n        tsBytes[0] = HEADER_VALUE_TYPE.timestamp;\n        tsBytes.set(Int64.fromNumber(header.value.valueOf()).bytes, 1);\n        return tsBytes;\n      case \"uuid\":\n        if (!UUID_PATTERN.test(header.value)) {\n          throw new Error(`Invalid UUID received: ${header.value}`);\n        }\n\n        const uuidBytes = new Uint8Array(17);\n        uuidBytes[0] = HEADER_VALUE_TYPE.uuid;\n        uuidBytes.set(fromHex(header.value.replace(/\\-/g, \"\")), 1);\n        return uuidBytes;\n    }\n  }\n\n  parse(headers: DataView): MessageHeaders {\n    const out: MessageHeaders = {};\n    let position = 0;\n\n    while (position < headers.byteLength) {\n      const nameLength = headers.getUint8(position++);\n      const name = this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, nameLength));\n      position += nameLength;\n\n      switch (headers.getUint8(position++)) {\n        case HEADER_VALUE_TYPE.boolTrue:\n          out[name] = {\n            type: BOOLEAN_TAG,\n            value: true,\n          };\n          break;\n        case HEADER_VALUE_TYPE.boolFalse:\n          out[name] = {\n            type: BOOLEAN_TAG,\n            value: false,\n          };\n          break;\n        case HEADER_VALUE_TYPE.byte:\n          out[name] = {\n            type: BYTE_TAG,\n            value: headers.getInt8(position++),\n          };\n          break;\n        case HEADER_VALUE_TYPE.short:\n          out[name] = {\n            type: SHORT_TAG,\n            value: headers.getInt16(position, false),\n          };\n          position += 2;\n          break;\n        case HEADER_VALUE_TYPE.integer:\n          out[name] = {\n            type: INT_TAG,\n            value: headers.getInt32(position, false),\n          };\n          position += 4;\n          break;\n        case HEADER_VALUE_TYPE.long:\n          out[name] = {\n            type: LONG_TAG,\n            value: new Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)),\n          };\n          position += 8;\n          break;\n        case HEADER_VALUE_TYPE.byteArray:\n          const binaryLength = headers.getUint16(position, false);\n          position += 2;\n          out[name] = {\n            type: BINARY_TAG,\n            value: new Uint8Array(headers.buffer, headers.byteOffset + position, binaryLength),\n          };\n          position += binaryLength;\n          break;\n        case HEADER_VALUE_TYPE.string:\n          const stringLength = headers.getUint16(position, false);\n          position += 2;\n          out[name] = {\n            type: STRING_TAG,\n            value: this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, stringLength)),\n          };\n          position += stringLength;\n          break;\n        case HEADER_VALUE_TYPE.timestamp:\n          out[name] = {\n            type: TIMESTAMP_TAG,\n            value: new Date(new Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)).valueOf()),\n          };\n          position += 8;\n          break;\n        case HEADER_VALUE_TYPE.uuid:\n          const uuidBytes = new Uint8Array(headers.buffer, headers.byteOffset + position, 16);\n          position += 16;\n          out[name] = {\n            type: UUID_TAG,\n            value: `${toHex(uuidBytes.subarray(0, 4))}-${toHex(uuidBytes.subarray(4, 6))}-${toHex(\n              uuidBytes.subarray(6, 8)\n            )}-${toHex(uuidBytes.subarray(8, 10))}-${toHex(uuidBytes.subarray(10))}`,\n          };\n          break;\n        default:\n          throw new Error(`Unrecognized header type tag`);\n      }\n    }\n\n    return out;\n  }\n}\n\nconst enum HEADER_VALUE_TYPE {\n  boolTrue = 0,\n  boolFalse,\n  byte,\n  short,\n  integer,\n  long,\n  byteArray,\n  string,\n  timestamp,\n  uuid,\n}\n\nconst BOOLEAN_TAG = \"boolean\";\nconst BYTE_TAG = \"byte\";\nconst SHORT_TAG = \"short\";\nconst INT_TAG = \"integer\";\nconst LONG_TAG = \"long\";\nconst BINARY_TAG = \"binary\";\nconst STRING_TAG = \"string\";\nconst TIMESTAMP_TAG = \"timestamp\";\nconst UUID_TAG = \"uuid\";\n\nconst UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}