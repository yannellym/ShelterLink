{"ast":null,"code":"var _jsxFileName = \"/Users/yannellym/Desktop/iwantapet/frontend/src/components/SearchBar.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nimport '../styles/SearchBar.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchBar = ({\n  onSearch\n}) => {\n  _s();\n  const [searchText, setSearchText] = useState('');\n  const [petType, setPetType] = useState('');\n  const [address, setAddress] = useState('');\n  const [suggestions, setSuggestions] = useState([]);\n  const [service, setService] = useState(null); // Google Places service\n  const [map, setMap] = useState(null); // Google Maps map\n  const [infowindow, setInfowindow] = useState(null);\n  useEffect(() => {\n    // Load the Google Maps service and initialize it\n    const initMap = () => {\n      const sydney = new google.maps.LatLng(-33.867, 151.195);\n      const map = new google.maps.Map(document.getElementById('map'), {\n        center: sydney,\n        zoom: 15\n      });\n      const infowindow = new google.maps.InfoWindow();\n      const service = new google.maps.places.PlacesService(map);\n      setService(service);\n      setMap(map);\n      setInfowindow(infowindow);\n    };\n\n    // Initialize Google Maps service after the component mounts\n    initMap();\n  }, []);\n  const fetchSuggestions = input => {\n    if (service) {\n      const request = {\n        query: input,\n        fields: ['name', 'geometry']\n      };\n      service.findPlaceFromQuery(request, (results, status) => {\n        if (status === google.maps.places.PlacesServiceStatus.OK) {\n          setSuggestions(results);\n        }\n      });\n    }\n  };\n  const handleInput = input => {\n    setSearchText(input);\n    fetchSuggestions(input);\n  };\n  const handleSelect = async selectedAddress => {\n    setAddress(selectedAddress);\n    setSearchText(selectedAddress); // Update the input with the selected address\n    setSuggestions([]);\n    const results = await geocodeByAddress(selectedAddress);\n    const latLng = await getLatLng(results[0]);\n\n    // Now you have the latitude and longitude, which you can use for searching\n    onSearch({\n      address: selectedAddress,\n      latLng\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-bar\",\n    children: /*#__PURE__*/_jsxDEV(PlacesAutocomplete, {\n      value: searchText,\n      onChange: handleInput,\n      onSelect: handleSelect,\n      children: ({\n        getInputProps\n      }) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"search-input-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            ...getInputProps(),\n            type: \"text\",\n            placeholder: \"Enter zipcode, city, or state\",\n            className: \"search-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"autocomplete-dropdown-container\",\n            children: suggestions.map(suggestion => {\n              const className = suggestion.active ? 'suggestion-item--active' : 'suggestion-item';\n              // Render the suggestions as dropdown items\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: className,\n                onClick: () => handleSelect(suggestion.description),\n                children: suggestion.description\n              }, suggestion.place_id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: petType,\n          onChange: e => setPetType(e.target.value),\n          className: \"search-select\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select pet type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"dog\",\n            children: \"Dog\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"cat\",\n            children: \"Cat\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"horse\",\n            children: \"Horse\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"bird\",\n            children: \"Bird\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"furry\",\n            children: \"Furry\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"barnyard\",\n            children: \"Barnyard\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSearch,\n          className: \"search-button\",\n          children: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchBar, \"6HPBdWVJVB69+tmIF8BPiPymyUY=\");\n_c = SearchBar;\nexport default SearchBar;\nvar _c;\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"names":["React","useState","useEffect","PlacesAutocomplete","geocodeByAddress","getLatLng","jsxDEV","_jsxDEV","SearchBar","onSearch","_s","searchText","setSearchText","petType","setPetType","address","setAddress","suggestions","setSuggestions","service","setService","map","setMap","infowindow","setInfowindow","initMap","sydney","google","maps","LatLng","Map","document","getElementById","center","zoom","InfoWindow","places","PlacesService","fetchSuggestions","input","request","query","fields","findPlaceFromQuery","results","status","PlacesServiceStatus","OK","handleInput","handleSelect","selectedAddress","latLng","className","children","value","onChange","onSelect","getInputProps","type","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","suggestion","active","onClick","description","place_id","e","target","handleSearch","_c","$RefreshReg$"],"sources":["/Users/yannellym/Desktop/iwantapet/frontend/src/components/SearchBar.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nimport '../styles/SearchBar.css';\n\nconst SearchBar = ({ onSearch }) => {\n  const [searchText, setSearchText] = useState('');\n  const [petType, setPetType] = useState('');\n  const [address, setAddress] = useState('');\n  const [suggestions, setSuggestions] = useState([]);\n  const [service, setService] = useState(null); // Google Places service\n  const [map, setMap] = useState(null); // Google Maps map\n  const [infowindow, setInfowindow] = useState(null);\n\n  useEffect(() => {\n    // Load the Google Maps service and initialize it\n    const initMap = () => {\n      const sydney = new google.maps.LatLng(-33.867, 151.195);\n      const map = new google.maps.Map(document.getElementById('map'), {\n        center: sydney,\n        zoom: 15\n      });\n\n      const infowindow = new google.maps.InfoWindow();\n      const service = new google.maps.places.PlacesService(map);\n\n      setService(service);\n      setMap(map);\n      setInfowindow(infowindow);\n    };\n\n    // Initialize Google Maps service after the component mounts\n    initMap();\n  }, []);\n\n  const fetchSuggestions = (input) => {\n    if (service) {\n      const request = {\n        query: input,\n        fields: ['name', 'geometry'],\n      };\n\n      service.findPlaceFromQuery(request, (results, status) => {\n        if (status === google.maps.places.PlacesServiceStatus.OK) {\n          setSuggestions(results);\n        }\n      });\n    }\n  };\n\n  const handleInput = (input) => {\n    setSearchText(input);\n    fetchSuggestions(input);\n  };\n\n  const handleSelect = async (selectedAddress) => {\n    setAddress(selectedAddress);\n    setSearchText(selectedAddress); // Update the input with the selected address\n    setSuggestions([]);\n\n    const results = await geocodeByAddress(selectedAddress);\n    const latLng = await getLatLng(results[0]);\n\n    // Now you have the latitude and longitude, which you can use for searching\n    onSearch({ address: selectedAddress, latLng });\n  };\n\n  return (\n    <div className=\"search-bar\">\n      <PlacesAutocomplete\n        value={searchText}\n        onChange={handleInput}\n        onSelect={handleSelect}\n      >\n        {({ getInputProps }) => (\n          <div className=\"search-container\">\n            <div className=\"search-input-container\">\n              <input\n                {...getInputProps()}\n                type=\"text\"\n                placeholder=\"Enter zipcode, city, or state\"\n                className=\"search-input\"\n              />\n              <div className=\"autocomplete-dropdown-container\">\n                {suggestions.map((suggestion) => {\n                  const className = suggestion.active\n                    ? 'suggestion-item--active'\n                    : 'suggestion-item';\n                  // Render the suggestions as dropdown items\n                  return (\n                    <div\n                      key={suggestion.place_id}\n                      className={className}\n                      onClick={() => handleSelect(suggestion.description)}\n                    >\n                      {suggestion.description}\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n            <select\n              value={petType}\n              onChange={(e) => setPetType(e.target.value)}\n              className=\"search-select\"\n            >\n              <option value=\"\">Select pet type</option>\n              <option value=\"dog\">Dog</option>\n              <option value=\"cat\">Cat</option>\n              <option value=\"horse\">Horse</option>\n              <option value=\"bird\">Bird</option>\n              <option value=\"furry\">Furry</option>\n              <option value=\"barnyard\">Barnyard</option>\n            </select>\n            <button onClick={handleSearch} className=\"search-button\">\n              Search\n            </button>\n          </div>\n        )}\n      </PlacesAutocomplete>\n    </div>\n  );\n};\n\nexport default SearchBar;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}