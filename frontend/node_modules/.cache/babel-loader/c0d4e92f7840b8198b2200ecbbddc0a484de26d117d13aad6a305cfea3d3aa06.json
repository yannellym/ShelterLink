{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { RegisterStreamConsumerInput, RegisterStreamConsumerOutput } from \"../models/models_0\";\nimport { deserializeAws_json1_1RegisterStreamConsumerCommand, serializeAws_json1_1RegisterStreamConsumerCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Registers a consumer with a Kinesis data stream. When you use this operation, the\n *             consumer you register can then call <a>SubscribeToShard</a> to receive data\n *             from the stream using enhanced fan-out, at a rate of up to 2 MiB per second for every\n *             shard you subscribe to. This rate is unaffected by the total number of consumers that\n *             read from the same stream.</p>\n *         <p>You can register up to 20 consumers per stream. A given consumer can only be\n *             registered with one stream at a time.</p>\n *         <p>For an example of how to use this operations, see <a href=\"/streams/latest/dev/building-enhanced-consumers-api.html\">Enhanced Fan-Out\n *                 Using the Kinesis Data Streams API</a>.</p>\n *         <p>The use of this operation has a limit of five transactions per second per account.\n *             Also, only 5 consumers can be created simultaneously. In other words, you cannot have\n *             more than 5 consumers in a <code>CREATING</code> status at the same time. Registering a\n *             6th consumer while there are 5 in a <code>CREATING</code> status results in a\n *                 <code>LimitExceededException</code>.</p>\n */\nvar RegisterStreamConsumerCommand = /** @class */function (_super) {\n  __extends(RegisterStreamConsumerCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function RegisterStreamConsumerCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  RegisterStreamConsumerCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"KinesisClient\";\n    var commandName = \"RegisterStreamConsumerCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: RegisterStreamConsumerInput.filterSensitiveLog,\n      outputFilterSensitiveLog: RegisterStreamConsumerOutput.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  RegisterStreamConsumerCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1RegisterStreamConsumerCommand(input, context);\n  };\n  RegisterStreamConsumerCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1RegisterStreamConsumerCommand(output, context);\n  };\n  return RegisterStreamConsumerCommand;\n}($Command);\nexport { RegisterStreamConsumerCommand };","map":{"version":3,"names":["RegisterStreamConsumerInput","RegisterStreamConsumerOutput","deserializeAws_json1_1RegisterStreamConsumerCommand","serializeAws_json1_1RegisterStreamConsumerCommand","getSerdePlugin","Command","$Command","RegisterStreamConsumerCommand","_super","__extends","input","_this","call","prototype","resolveMiddleware","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","logger","clientName","commandName","handlerExecutionContext","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","requestHandler","resolve","request","handle","context","output"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-sdk/client-kinesis/commands/RegisterStreamConsumerCommand.ts"],"sourcesContent":["import { KinesisClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../KinesisClient\";\nimport { RegisterStreamConsumerInput, RegisterStreamConsumerOutput } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1RegisterStreamConsumerCommand,\n  serializeAws_json1_1RegisterStreamConsumerCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type RegisterStreamConsumerCommandInput = RegisterStreamConsumerInput;\nexport type RegisterStreamConsumerCommandOutput = RegisterStreamConsumerOutput & __MetadataBearer;\n\n/**\n * <p>Registers a consumer with a Kinesis data stream. When you use this operation, the\n *             consumer you register can then call <a>SubscribeToShard</a> to receive data\n *             from the stream using enhanced fan-out, at a rate of up to 2 MiB per second for every\n *             shard you subscribe to. This rate is unaffected by the total number of consumers that\n *             read from the same stream.</p>\n *         <p>You can register up to 20 consumers per stream. A given consumer can only be\n *             registered with one stream at a time.</p>\n *         <p>For an example of how to use this operations, see <a href=\"/streams/latest/dev/building-enhanced-consumers-api.html\">Enhanced Fan-Out\n *                 Using the Kinesis Data Streams API</a>.</p>\n *         <p>The use of this operation has a limit of five transactions per second per account.\n *             Also, only 5 consumers can be created simultaneously. In other words, you cannot have\n *             more than 5 consumers in a <code>CREATING</code> status at the same time. Registering a\n *             6th consumer while there are 5 in a <code>CREATING</code> status results in a\n *                 <code>LimitExceededException</code>.</p>\n */\nexport class RegisterStreamConsumerCommand extends $Command<\n  RegisterStreamConsumerCommandInput,\n  RegisterStreamConsumerCommandOutput,\n  KinesisClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: RegisterStreamConsumerCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: KinesisClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<RegisterStreamConsumerCommandInput, RegisterStreamConsumerCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"KinesisClient\";\n    const commandName = \"RegisterStreamConsumerCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: RegisterStreamConsumerInput.filterSensitiveLog,\n      outputFilterSensitiveLog: RegisterStreamConsumerOutput.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: RegisterStreamConsumerCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1RegisterStreamConsumerCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<RegisterStreamConsumerCommandOutput> {\n    return deserializeAws_json1_1RegisterStreamConsumerCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"],"mappings":";AACA,SAASA,2BAA2B,EAAEC,4BAA4B,QAAQ,oBAAoB;AAC9F,SACEC,mDAAmD,EACnDC,iDAAiD,QAC5C,0BAA0B;AACjC,SAASC,cAAc,QAAQ,2BAA2B;AAE1D,SAASC,OAAO,IAAIC,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;;;;;;;;;;;AAgBA,IAAAC,6BAAA,0BAAAC,MAAA;EAAmDC,SAAA,CAAAF,6BAAA,EAAAC,MAAA;EAKjD;EACA;EAEA,SAAAD,8BAAqBG,KAAyC;IAA9D,IAAAC,KAAA;IACE;IACAH,MAAA,CAAAI,IAAA,MAAO;IAFYD,KAAA,CAAAD,KAAK,GAALA,KAAK;;IAGxB;EACF;EAEA;;;EAGAH,6BAAA,CAAAM,SAAA,CAAAC,iBAAiB,GAAjB,UACEC,WAAmE,EACnEC,aAA0C,EAC1CC,OAA8B;IAE9B,IAAI,CAACC,eAAe,CAACC,GAAG,CAACf,cAAc,CAACY,aAAa,EAAE,IAAI,CAACI,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CAAC;IAEzF,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAM,CAAC,IAAI,CAACL,eAAe,CAAC;IAE9C,IAAAM,MAAM,GAAKR,aAAa,CAAAQ,MAAlB;IACd,IAAMC,UAAU,GAAG,eAAe;IAClC,IAAMC,WAAW,GAAG,+BAA+B;IACnD,IAAMC,uBAAuB,GAA4B;MACvDH,MAAM,EAAAA,MAAA;MACNC,UAAU,EAAAA,UAAA;MACVC,WAAW,EAAAA,WAAA;MACXE,uBAAuB,EAAE5B,2BAA2B,CAAC6B,kBAAkB;MACvEC,wBAAwB,EAAE7B,4BAA4B,CAAC4B;KACxD;IACO,IAAAE,cAAc,GAAKf,aAAa,CAAAe,cAAlB;IACtB,OAAOT,KAAK,CAACU,OAAO,CAClB,UAACC,OAAsC;MACrC,OAAAF,cAAc,CAACG,MAAM,CAACD,OAAO,CAACA,OAAwB,EAAEhB,OAAO,IAAI,EAAE,CAAC;IAAtE,CAAsE,EACxEU,uBAAuB,CACxB;EACH,CAAC;EAEOpB,6BAAA,CAAAM,SAAA,CAAAO,SAAS,GAAjB,UAAkBV,KAAyC,EAAEyB,OAAuB;IAClF,OAAOhC,iDAAiD,CAACO,KAAK,EAAEyB,OAAO,CAAC;EAC1E,CAAC;EAEO5B,6BAAA,CAAAM,SAAA,CAAAQ,WAAW,GAAnB,UAAoBe,MAAsB,EAAED,OAAuB;IACjE,OAAOjC,mDAAmD,CAACkC,MAAM,EAAED,OAAO,CAAC;EAC7E,CAAC;EAIH,OAAA5B,6BAAC;AAAD,CAAC,CAtDkDD,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}