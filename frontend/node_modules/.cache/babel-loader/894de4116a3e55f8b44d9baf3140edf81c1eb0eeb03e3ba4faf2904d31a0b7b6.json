{"ast":null,"code":"var _jsxFileName = \"/Users/yannellym/Desktop/iwantapet/frontend/src/pages/FindApet.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../styles/MainPage.css';\nimport PetCard from '../components/PetCard';\nimport Filter from './Filter';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FindApet({\n  favoritePets,\n  addToFavorites,\n  removeFromFavorites\n}) {\n  _s();\n  // State variables\n  const [searchResults, setSearchResults] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 24;\n\n  // State variable to store the total count\n  const [totalCount, setTotalCount] = useState(0);\n  const [totalPages, setTotalPages] = useState(0);\n  const maxPaginationButtons = totalPages;\n  const [showOnlyPetsWithImages, setShowOnlyPetsWithImages] = useState(false);\n\n  // Filters state\n  const [selectedFilters, setSelectedFilters] = useState({\n    type: 'any',\n    breed: 'any',\n    age: 'any',\n    gender: 'any',\n    size: 'any',\n    coat: 'any'\n  });\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        let endpoint = `http://localhost:3002/api/petfinder?page=${currentPage}&limit=${itemsPerPage}`;\n        for (const filterKey in selectedFilters) {\n          if (selectedFilters[filterKey] !== 'any') {\n            endpoint += `&${filterKey}=${selectedFilters[filterKey]}`;\n          }\n        }\n        const response = await fetch(endpoint);\n        const data = await response.json();\n        if (data && data.animals) {\n          const filteredData = applyFilters(data.animals, selectedFilters);\n          setTotalCount(data.pagination.total_count);\n          setTotalPages(data.pagination.total_pages);\n          setSearchResults(filteredData);\n          setLoading(false);\n          setCurrentPage(currentPage);\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error.message);\n        setLoading(false);\n      }\n    };\n    fetchInitialData();\n  }, [currentPage, selectedFilters]);\n  const handlePageChange = page => {\n    setLoading(true);\n    setCurrentPage(page);\n    window.scrollTo(0, 0); // Scroll to the top of the page\n  };\n\n  const handleFilterChange = async newFilters => {\n    // Clear the search results\n    setSearchResults([]);\n    // Set loading to true before fetching new data (this will allow our \"looking through\" message to display)\n    setLoading(true);\n    // Update selected filters\n    setSelectedFilters(newFilters);\n    setCurrentPage(1);\n\n    // Fetch new data based on the updated filters\n    try {\n      // Construct the API endpoint based on selected filter values\n      let endpoint = `http://localhost:3002/api/petfinder?&limit=${itemsPerPage}`;\n      for (const filterKey in newFilters) {\n        if (newFilters[filterKey] !== 'any') {\n          endpoint += `&${filterKey}=${newFilters[filterKey]}`;\n        }\n      }\n      const response = await fetch(endpoint);\n      const data = await response.json();\n      console.log('API Response filtered:', data);\n      console.log('Total pages:', data.pagination.total_count, \"total count:\", data.pagination.total_pages);\n      setTotalCount(data.pagination.total_count); // Set the total count based on filtered data\n\n      setTotalPages(data.pagination.total_pages); // Set the total pages based on filtered data\n\n      setSearchResults(data.animals);\n      setLoading(false);\n    } catch (error) {\n      console.error('Error fetching data:', error.message);\n      setLoading(false);\n    }\n  };\n\n  // Function to filter pet data based on selected filters\n  const applyFilters = (data, filters) => {\n    return data.filter(pet => {\n      let matchesAllFilters = true;\n\n      // Handle the showOnlyPetsWithImages filter separately\n      if (showOnlyPetsWithImages && (!pet.photos || pet.photos.length === 0)) {\n        matchesAllFilters = false;\n      } else {\n        // Loop through each filter to check if the pet matches the criteria\n        for (const filterKey in filters) {\n          var _filters$filterKey, _pet$filterKey;\n          // Get the filter value and pet value, converting both to lowercase for case-insensitive comparison\n          const filterValue = (_filters$filterKey = filters[filterKey]) === null || _filters$filterKey === void 0 ? void 0 : _filters$filterKey.toLowerCase();\n          const petValue = (_pet$filterKey = pet[filterKey]) === null || _pet$filterKey === void 0 ? void 0 : _pet$filterKey.toLowerCase();\n\n          // If the filter value is \"any,\" skip this filter\n          if (filterValue === 'any') {\n            continue;\n          }\n\n          // Special handling for the \"type\" filter to handle both \"Cat\" and \"Dog\"\n          if (filterKey === 'type') {\n            if (filterValue === 'cat' && petValue !== 'cat') {\n              matchesAllFilters = false;\n              break;\n            }\n            if (filterValue === 'dog' && petValue !== 'dog') {\n              matchesAllFilters = false;\n              break;\n            }\n          } else if (filterKey === 'breed') {\n            if (filterValue !== 'any' && petValue && !(petValue.primary.toLowerCase().includes(filterValue) || petValue.secondary && petValue.secondary.toLowerCase().includes(filterValue))) {\n              matchesAllFilters = false;\n              break;\n            }\n          } else {\n            // For other filters, compare values directly\n            if (petValue !== filterValue) {\n              matchesAllFilters = false;\n              break;\n            }\n          }\n        }\n      }\n\n      // If the pet matches all filters, include it in the results\n      return matchesAllFilters;\n    });\n  };\n\n  // Function to render the list of pet cards based on applied filters\n  const renderPetCards = () => {\n    if (loading) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Looking through all of our amazing pets...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 14\n      }, this);\n    } else {\n      // Apply filters to the new data\n      if (searchResults.length > 0) {\n        return searchResults.map(pet => /*#__PURE__*/_jsxDEV(PetCard, {\n          pet: pet,\n          addToFavorites: addToFavorites,\n          removeFromFavorites: removeFromFavorites,\n          isFavorite: favoritePets.some(favoritePet => favoritePet.id === pet.id)\n        }, pet.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this));\n      } else {\n        // If no matching pets, display a message\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No pets match your criteria.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 16\n        }, this);\n      }\n    }\n  };\n\n  // Function to generate pagination buttons\n  const generatePaginationButtons = () => {\n    const buttons = [];\n    const maxButtons = 10; // Maximum number of pagination buttons to display\n\n    if (totalCount === 0) {\n      return buttons;\n    }\n    const totalPagesToShow = Math.min(totalPages, maxButtons);\n    const halfMaxButtons = Math.floor(maxButtons / 2);\n    let startPage = Math.max(1, currentPage - halfMaxButtons);\n    let endPage = Math.min(totalPages, startPage + maxButtons - 1);\n    if (endPage - startPage < maxButtons - 1) {\n      startPage = Math.max(1, endPage - maxButtons + 1);\n    }\n    for (let i = startPage; i <= endPage; i++) {\n      buttons.push( /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handlePageChange(i),\n        className: currentPage === i ? 'active' : '',\n        children: i\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 11\n      }, this));\n    }\n    return buttons;\n  };\n\n  // Function to apply filters to the results based on selected filters and showOnlyPetsWithImages flag\n  const handleShowOnlyPetsWithImages = () => {\n    setShowOnlyPetsWithImages(!showOnlyPetsWithImages);\n\n    // Apply filters to the results based on the selected filters and showOnlyPetsWithImages\n    applyFiltersToResults();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filters\",\n        children: /*#__PURE__*/_jsxDEV(Filter, {\n          onFilterChange: handleFilterChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter-pets\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: showOnlyPetsWithImages,\n            onChange: handleShowOnlyPetsWithImages\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 13\n          }, this), \"Show only pets with images\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pet-card-list\",\n        children: renderPetCards()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pagination-horizontal\",\n        children: generatePaginationButtons()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 232,\n    columnNumber: 5\n  }, this);\n}\n_s(FindApet, \"fqoVF4TgnHjQSuJEL/6rGwctmlo=\");\n_c = FindApet;\nexport default FindApet;\nvar _c;\n$RefreshReg$(_c, \"FindApet\");","map":{"version":3,"names":["React","useState","useEffect","PetCard","Filter","jsxDEV","_jsxDEV","FindApet","favoritePets","addToFavorites","removeFromFavorites","_s","searchResults","setSearchResults","loading","setLoading","currentPage","setCurrentPage","itemsPerPage","totalCount","setTotalCount","totalPages","setTotalPages","maxPaginationButtons","showOnlyPetsWithImages","setShowOnlyPetsWithImages","selectedFilters","setSelectedFilters","type","breed","age","gender","size","coat","fetchInitialData","endpoint","filterKey","response","fetch","data","json","animals","filteredData","applyFilters","pagination","total_count","total_pages","error","console","message","handlePageChange","page","window","scrollTo","handleFilterChange","newFilters","log","filters","filter","pet","matchesAllFilters","photos","length","_filters$filterKey","_pet$filterKey","filterValue","toLowerCase","petValue","primary","includes","secondary","renderPetCards","children","fileName","_jsxFileName","lineNumber","columnNumber","map","isFavorite","some","favoritePet","id","generatePaginationButtons","buttons","maxButtons","totalPagesToShow","Math","min","halfMaxButtons","floor","startPage","max","endPage","i","push","onClick","className","handleShowOnlyPetsWithImages","applyFiltersToResults","onFilterChange","checked","onChange","_c","$RefreshReg$"],"sources":["/Users/yannellym/Desktop/iwantapet/frontend/src/pages/FindApet.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../styles/MainPage.css';\nimport PetCard from '../components/PetCard';\nimport Filter from './Filter';\n\nfunction FindApet({ favoritePets, addToFavorites, removeFromFavorites }) {\n  // State variables\n  const [searchResults, setSearchResults] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 24;\n\n  // State variable to store the total count\n  const [totalCount, setTotalCount] = useState(0);\n  const [totalPages, setTotalPages] = useState(0);\n  const maxPaginationButtons = totalPages;\n  const [showOnlyPetsWithImages, setShowOnlyPetsWithImages] = useState(false);\n\n  // Filters state\n  const [selectedFilters, setSelectedFilters] = useState({\n    type: 'any',\n    breed: 'any',\n    age: 'any',\n    gender: 'any',\n    size: 'any',\n    coat: 'any',\n  });\n\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        let endpoint = `http://localhost:3002/api/petfinder?page=${currentPage}&limit=${itemsPerPage}`;\n\n        for (const filterKey in selectedFilters) {\n          if (selectedFilters[filterKey] !== 'any') {\n            endpoint += `&${filterKey}=${selectedFilters[filterKey]}`;\n          }\n        }\n\n        const response = await fetch(endpoint);\n        const data = await response.json();\n\n        if (data && data.animals) {\n          const filteredData = applyFilters(data.animals, selectedFilters);\n\n          setTotalCount(data.pagination.total_count);\n          setTotalPages(data.pagination.total_pages);\n          setSearchResults(filteredData);\n          setLoading(false);\n          setCurrentPage(currentPage);\n        }\n      } catch (error) { \n        console.error('Error fetching data:', error.message);\n        setLoading(false);\n      }\n    };\n\n    fetchInitialData();\n  }, [currentPage, selectedFilters]);\n\n\n  const handlePageChange = (page) => {\n    setLoading(true);\n    setCurrentPage(page);\n    window.scrollTo(0, 0); // Scroll to the top of the page\n\n  };\n  const handleFilterChange = async (newFilters) => {\n    // Clear the search results\n    setSearchResults([]);\n    // Set loading to true before fetching new data (this will allow our \"looking through\" message to display)\n    setLoading(true);\n    // Update selected filters\n    setSelectedFilters(newFilters);\n    setCurrentPage(1);\n\n    // Fetch new data based on the updated filters\n    try {\n      // Construct the API endpoint based on selected filter values\n      let endpoint = `http://localhost:3002/api/petfinder?&limit=${itemsPerPage}`;\n      for (const filterKey in newFilters) {\n        if (newFilters[filterKey] !== 'any') {\n          endpoint += `&${filterKey}=${newFilters[filterKey]}`;\n        }\n      }\n\n      const response = await fetch(endpoint);\n      const data = await response.json();\n\n      console.log('API Response filtered:', data);\n\n      \n      console.log('Total pages:', data.pagination.total_count, \"total count:\", data.pagination.total_pages);\n      setTotalCount(data.pagination.total_count); // Set the total count based on filtered data\n     \n      setTotalPages(data.pagination.total_pages); // Set the total pages based on filtered data\n    \n      setSearchResults(data.animals);\n      setLoading(false);\n      \n    } catch (error) {\n      console.error('Error fetching data:', error.message);\n      setLoading(false);\n    }\n  };\n\n  // Function to filter pet data based on selected filters\n  const applyFilters = (data, filters) => {\n    return data.filter((pet) => {\n      let matchesAllFilters = true;\n\n      // Handle the showOnlyPetsWithImages filter separately\n      if (showOnlyPetsWithImages && (!pet.photos || pet.photos.length === 0)) {\n        matchesAllFilters = false;\n      } else {\n        // Loop through each filter to check if the pet matches the criteria\n        for (const filterKey in filters) {\n          // Get the filter value and pet value, converting both to lowercase for case-insensitive comparison\n          const filterValue = filters[filterKey]?.toLowerCase();\n          const petValue = pet[filterKey]?.toLowerCase();\n\n          // If the filter value is \"any,\" skip this filter\n          if (filterValue === 'any') {\n            continue;\n          }\n\n          // Special handling for the \"type\" filter to handle both \"Cat\" and \"Dog\"\n          if (filterKey === 'type') {\n            if (filterValue === 'cat' && petValue !== 'cat') {\n              matchesAllFilters = false;\n              break;\n            }\n            if (filterValue === 'dog' && petValue !== 'dog') {\n              matchesAllFilters = false;\n              break;\n            }\n          } else if (filterKey === 'breed') {\n            if (\n              filterValue !== 'any' &&\n              petValue &&\n              !(\n                petValue.primary.toLowerCase().includes(filterValue) ||\n                (petValue.secondary && petValue.secondary.toLowerCase().includes(filterValue))\n              )\n            ) {\n              matchesAllFilters = false;\n              break;\n            }\n          } else {\n            // For other filters, compare values directly\n            if (petValue !== filterValue) {\n              matchesAllFilters = false;\n              break;\n            }\n          }\n        }\n      }\n\n      // If the pet matches all filters, include it in the results\n      return matchesAllFilters;\n    });\n  };\n\n  // Function to render the list of pet cards based on applied filters\n  const renderPetCards = () => {\n    if (loading) {\n      return <p>Looking through all of our amazing pets...</p>;\n    } else {\n      // Apply filters to the new data\n      if (searchResults.length > 0) {\n        return searchResults.map((pet) => (\n          <PetCard\n            key={pet.id}\n            pet={pet}\n            addToFavorites={addToFavorites}\n            removeFromFavorites={removeFromFavorites}\n            isFavorite={favoritePets.some((favoritePet) => favoritePet.id === pet.id)}\n          />\n        ));\n      } else {\n        // If no matching pets, display a message\n        return <p>No pets match your criteria.</p>;\n      }\n    }\n  };\n\n    // Function to generate pagination buttons\n    const generatePaginationButtons = () => {\n      const buttons = [];\n      const maxButtons = 10; // Maximum number of pagination buttons to display\n  \n      if (totalCount === 0) {\n        return buttons;\n      }\n  \n      const totalPagesToShow = Math.min(totalPages, maxButtons);\n      const halfMaxButtons = Math.floor(maxButtons / 2);\n  \n      let startPage = Math.max(1, currentPage - halfMaxButtons);\n      let endPage = Math.min(totalPages, startPage + maxButtons - 1);\n  \n      if (endPage - startPage < maxButtons - 1) {\n        startPage = Math.max(1, endPage - maxButtons + 1);\n      }\n  \n      for (let i = startPage; i <= endPage; i++) {\n        buttons.push(\n          <button\n            key={i}\n            onClick={() => handlePageChange(i)}\n            className={currentPage === i ? 'active' : ''}\n          >\n            {i}\n          </button>\n        );\n      }\n  \n      return buttons;\n    };\n    \n\n\n  // Function to apply filters to the results based on selected filters and showOnlyPetsWithImages flag\n  const handleShowOnlyPetsWithImages = () => {\n    setShowOnlyPetsWithImages(!showOnlyPetsWithImages);\n\n    // Apply filters to the results based on the selected filters and showOnlyPetsWithImages\n    applyFiltersToResults();\n  };\n\n  return (\n    <div className=\"main-page\">\n      <div className=\"sidebar\">\n        <div className=\"filters\">\n          <Filter onFilterChange={handleFilterChange} />\n        </div>\n      </div>\n      <div className=\"content\">\n        <div className=\"filter-pets\">\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={showOnlyPetsWithImages}\n              onChange={handleShowOnlyPetsWithImages}\n            />\n            Show only pets with images\n          </label>\n        </div>\n        <div className=\"pet-card-list\">\n          {renderPetCards()}\n        </div>\n        <div className=\"pagination-horizontal\">\n          {generatePaginationButtons()}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default FindApet;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}