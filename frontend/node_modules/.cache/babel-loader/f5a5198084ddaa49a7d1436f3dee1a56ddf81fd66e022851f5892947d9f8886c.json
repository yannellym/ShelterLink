{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport { ConsoleLogger as Logger } from '../Logger';\nimport { browserOrNode } from '../JS';\nimport { Amplify } from '../Amplify';\n/**\n * Provides a means to registering a service worker in the browser\n * and communicating with it via postMessage events.\n * https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/\n *\n * postMessage events are currently not supported in all browsers. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API\n *\n * At the minmum this class will register the service worker and listen\n * and attempt to dispatch messages on state change and record analytics\n * events based on the service worker lifecycle.\n */\nvar ServiceWorkerClass = /** @class */function () {\n  function ServiceWorkerClass() {\n    // The AWS Amplify logger\n    this._logger = new Logger('ServiceWorker');\n  }\n  Object.defineProperty(ServiceWorkerClass.prototype, \"serviceWorker\", {\n    /**\n     * Get the currently active service worker\n     */\n    get: function () {\n      return this._serviceWorker;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Register the service-worker.js file in the browser\n   * Make sure the service-worker.js is part of the build\n   * for example with Angular, modify the angular-cli.json file\n   * and add to \"assets\" array \"service-worker.js\"\n   * @param {string} - (optional) Service worker file. Defaults to \"/service-worker.js\"\n   * @param {string} - (optional) The service worker scope. Defaults to \"/\"\n   *  - API Doc: https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register\n   * @returns {Promise}\n   *\t- resolve(ServiceWorkerRegistration)\n   *\t- reject(Error)\n   **/\n  ServiceWorkerClass.prototype.register = function (filePath, scope) {\n    var _this = this;\n    if (filePath === void 0) {\n      filePath = '/service-worker.js';\n    }\n    if (scope === void 0) {\n      scope = '/';\n    }\n    this._logger.debug(\"registering \".concat(filePath));\n    this._logger.debug(\"registering service worker with scope \".concat(scope));\n    return new Promise(function (resolve, reject) {\n      if (navigator && 'serviceWorker' in navigator) {\n        navigator.serviceWorker.register(filePath, {\n          scope: scope\n        }).then(function (registration) {\n          if (registration.installing) {\n            _this._serviceWorker = registration.installing;\n          } else if (registration.waiting) {\n            _this._serviceWorker = registration.waiting;\n          } else if (registration.active) {\n            _this._serviceWorker = registration.active;\n          }\n          _this._registration = registration;\n          _this._setupListeners();\n          _this._logger.debug(\"Service Worker Registration Success: \".concat(registration));\n          return resolve(registration);\n        }).catch(function (error) {\n          _this._logger.debug(\"Service Worker Registration Failed \".concat(error));\n          return reject(error);\n        });\n      } else {\n        return reject(new Error('Service Worker not available'));\n      }\n    });\n  };\n  /**\n   * Enable web push notifications. If not subscribed, a new subscription will\n   * be created and registered.\n   * \tTest Push Server: https://web-push-codelab.glitch.me/\n   * \tPush Server Libraries: https://github.com/web-push-libs/\n   * \tAPI Doc: https://developers.google.com/web/fundamentals/codelabs/push-notifications/\n   * @param publicKey\n   * @returns {Promise}\n   * \t- resolve(PushSubscription)\n   *  - reject(Error)\n   */\n  ServiceWorkerClass.prototype.enablePush = function (publicKey) {\n    var _this = this;\n    if (!this._registration) throw new Error('Service Worker not registered');\n    this._publicKey = publicKey;\n    return new Promise(function (resolve, reject) {\n      if (browserOrNode().isBrowser) {\n        _this._registration.pushManager.getSubscription().then(function (subscription) {\n          if (subscription) {\n            _this._subscription = subscription;\n            _this._logger.debug(\"User is subscribed to push: \".concat(JSON.stringify(subscription)));\n            resolve(subscription);\n          } else {\n            _this._logger.debug(\"User is NOT subscribed to push\");\n            return _this._registration.pushManager.subscribe({\n              userVisibleOnly: true,\n              applicationServerKey: _this._urlB64ToUint8Array(publicKey)\n            }).then(function (subscription) {\n              _this._subscription = subscription;\n              _this._logger.debug(\"User subscribed: \".concat(JSON.stringify(subscription)));\n              resolve(subscription);\n            }).catch(function (error) {\n              _this._logger.error(error);\n            });\n          }\n        });\n      } else {\n        return reject(new Error('Service Worker not available'));\n      }\n    });\n  };\n  /**\n   * Convert a base64 encoded string to a Uint8 array for the push server key\n   * @param base64String\n   */\n  ServiceWorkerClass.prototype._urlB64ToUint8Array = function (base64String) {\n    var padding = '='.repeat((4 - base64String.length % 4) % 4);\n    var base64 = (base64String + padding).replace(/\\-/g, '+').replace(/_/g, '/');\n    var rawData = window.atob(base64);\n    var outputArray = new Uint8Array(rawData.length);\n    for (var i = 0; i < rawData.length; ++i) {\n      outputArray[i] = rawData.charCodeAt(i);\n    }\n    return outputArray;\n  };\n  /**\n   * Send a message to the service worker. The service worker needs\n   * to implement `self.addEventListener('message') to handle the\n   * message. This ***currently*** does not work in Safari or IE.\n   * @param {object | string} - An arbitrary JSON object or string message to send to the service worker\n   *\t- see: https://developer.mozilla.org/en-US/docs/Web/API/Transferable\n   * @returns {Promise}\n   **/\n  ServiceWorkerClass.prototype.send = function (message) {\n    if (this._serviceWorker) {\n      this._serviceWorker.postMessage(typeof message === 'object' ? JSON.stringify(message) : message);\n    }\n  };\n  /**\n   * Listen for service worker state change and message events\n   * https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/state\n   **/\n  ServiceWorkerClass.prototype._setupListeners = function () {\n    var _this = this;\n    this._serviceWorker.addEventListener('statechange', function (event) {\n      var currentState = _this._serviceWorker.state;\n      _this._logger.debug(\"ServiceWorker statechange: \".concat(currentState));\n      if (Amplify.Analytics && typeof Amplify.Analytics.record === 'function') {\n        Amplify.Analytics.record({\n          name: 'ServiceWorker',\n          attributes: {\n            state: currentState\n          }\n        });\n      }\n    });\n    this._serviceWorker.addEventListener('message', function (event) {\n      _this._logger.debug(\"ServiceWorker message event: \".concat(event));\n    });\n  };\n  return ServiceWorkerClass;\n}();\nexport { ServiceWorkerClass };","map":{"version":3,"names":["ConsoleLogger","Logger","browserOrNode","Amplify","ServiceWorkerClass","_logger","Object","defineProperty","prototype","get","_serviceWorker","enumerable","configurable","register","filePath","scope","_this","debug","concat","Promise","resolve","reject","navigator","serviceWorker","then","registration","installing","waiting","active","_registration","_setupListeners","catch","error","Error","enablePush","publicKey","_publicKey","isBrowser","pushManager","getSubscription","subscription","_subscription","JSON","stringify","subscribe","userVisibleOnly","applicationServerKey","_urlB64ToUint8Array","base64String","padding","repeat","length","base64","replace","rawData","window","atob","outputArray","Uint8Array","i","charCodeAt","send","message","postMessage","addEventListener","event","currentState","state","Analytics","record","name","attributes"],"sources":["/Users/yannellym/Desktop/iwantapet/node_modules/@aws-amplify/core/lib-esm/ServiceWorker/ServiceWorker.js"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport { ConsoleLogger as Logger } from '../Logger';\nimport { browserOrNode } from '../JS';\nimport { Amplify } from '../Amplify';\n/**\n * Provides a means to registering a service worker in the browser\n * and communicating with it via postMessage events.\n * https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/\n *\n * postMessage events are currently not supported in all browsers. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API\n *\n * At the minmum this class will register the service worker and listen\n * and attempt to dispatch messages on state change and record analytics\n * events based on the service worker lifecycle.\n */\nvar ServiceWorkerClass = /** @class */ (function () {\n    function ServiceWorkerClass() {\n        // The AWS Amplify logger\n        this._logger = new Logger('ServiceWorker');\n    }\n    Object.defineProperty(ServiceWorkerClass.prototype, \"serviceWorker\", {\n        /**\n         * Get the currently active service worker\n         */\n        get: function () {\n            return this._serviceWorker;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Register the service-worker.js file in the browser\n     * Make sure the service-worker.js is part of the build\n     * for example with Angular, modify the angular-cli.json file\n     * and add to \"assets\" array \"service-worker.js\"\n     * @param {string} - (optional) Service worker file. Defaults to \"/service-worker.js\"\n     * @param {string} - (optional) The service worker scope. Defaults to \"/\"\n     *  - API Doc: https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register\n     * @returns {Promise}\n     *\t- resolve(ServiceWorkerRegistration)\n     *\t- reject(Error)\n     **/\n    ServiceWorkerClass.prototype.register = function (filePath, scope) {\n        var _this = this;\n        if (filePath === void 0) { filePath = '/service-worker.js'; }\n        if (scope === void 0) { scope = '/'; }\n        this._logger.debug(\"registering \".concat(filePath));\n        this._logger.debug(\"registering service worker with scope \".concat(scope));\n        return new Promise(function (resolve, reject) {\n            if (navigator && 'serviceWorker' in navigator) {\n                navigator.serviceWorker\n                    .register(filePath, {\n                    scope: scope,\n                })\n                    .then(function (registration) {\n                    if (registration.installing) {\n                        _this._serviceWorker = registration.installing;\n                    }\n                    else if (registration.waiting) {\n                        _this._serviceWorker = registration.waiting;\n                    }\n                    else if (registration.active) {\n                        _this._serviceWorker = registration.active;\n                    }\n                    _this._registration = registration;\n                    _this._setupListeners();\n                    _this._logger.debug(\"Service Worker Registration Success: \".concat(registration));\n                    return resolve(registration);\n                })\n                    .catch(function (error) {\n                    _this._logger.debug(\"Service Worker Registration Failed \".concat(error));\n                    return reject(error);\n                });\n            }\n            else {\n                return reject(new Error('Service Worker not available'));\n            }\n        });\n    };\n    /**\n     * Enable web push notifications. If not subscribed, a new subscription will\n     * be created and registered.\n     * \tTest Push Server: https://web-push-codelab.glitch.me/\n     * \tPush Server Libraries: https://github.com/web-push-libs/\n     * \tAPI Doc: https://developers.google.com/web/fundamentals/codelabs/push-notifications/\n     * @param publicKey\n     * @returns {Promise}\n     * \t- resolve(PushSubscription)\n     *  - reject(Error)\n     */\n    ServiceWorkerClass.prototype.enablePush = function (publicKey) {\n        var _this = this;\n        if (!this._registration)\n            throw new Error('Service Worker not registered');\n        this._publicKey = publicKey;\n        return new Promise(function (resolve, reject) {\n            if (browserOrNode().isBrowser) {\n                _this._registration.pushManager.getSubscription().then(function (subscription) {\n                    if (subscription) {\n                        _this._subscription = subscription;\n                        _this._logger.debug(\"User is subscribed to push: \".concat(JSON.stringify(subscription)));\n                        resolve(subscription);\n                    }\n                    else {\n                        _this._logger.debug(\"User is NOT subscribed to push\");\n                        return _this._registration.pushManager\n                            .subscribe({\n                            userVisibleOnly: true,\n                            applicationServerKey: _this._urlB64ToUint8Array(publicKey),\n                        })\n                            .then(function (subscription) {\n                            _this._subscription = subscription;\n                            _this._logger.debug(\"User subscribed: \".concat(JSON.stringify(subscription)));\n                            resolve(subscription);\n                        })\n                            .catch(function (error) {\n                            _this._logger.error(error);\n                        });\n                    }\n                });\n            }\n            else {\n                return reject(new Error('Service Worker not available'));\n            }\n        });\n    };\n    /**\n     * Convert a base64 encoded string to a Uint8 array for the push server key\n     * @param base64String\n     */\n    ServiceWorkerClass.prototype._urlB64ToUint8Array = function (base64String) {\n        var padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n        var base64 = (base64String + padding)\n            .replace(/\\-/g, '+')\n            .replace(/_/g, '/');\n        var rawData = window.atob(base64);\n        var outputArray = new Uint8Array(rawData.length);\n        for (var i = 0; i < rawData.length; ++i) {\n            outputArray[i] = rawData.charCodeAt(i);\n        }\n        return outputArray;\n    };\n    /**\n     * Send a message to the service worker. The service worker needs\n     * to implement `self.addEventListener('message') to handle the\n     * message. This ***currently*** does not work in Safari or IE.\n     * @param {object | string} - An arbitrary JSON object or string message to send to the service worker\n     *\t- see: https://developer.mozilla.org/en-US/docs/Web/API/Transferable\n     * @returns {Promise}\n     **/\n    ServiceWorkerClass.prototype.send = function (message) {\n        if (this._serviceWorker) {\n            this._serviceWorker.postMessage(typeof message === 'object' ? JSON.stringify(message) : message);\n        }\n    };\n    /**\n     * Listen for service worker state change and message events\n     * https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/state\n     **/\n    ServiceWorkerClass.prototype._setupListeners = function () {\n        var _this = this;\n        this._serviceWorker.addEventListener('statechange', function (event) {\n            var currentState = _this._serviceWorker.state;\n            _this._logger.debug(\"ServiceWorker statechange: \".concat(currentState));\n            if (Amplify.Analytics && typeof Amplify.Analytics.record === 'function') {\n                Amplify.Analytics.record({\n                    name: 'ServiceWorker',\n                    attributes: {\n                        state: currentState,\n                    },\n                });\n            }\n        });\n        this._serviceWorker.addEventListener('message', function (event) {\n            _this._logger.debug(\"ServiceWorker message event: \".concat(event));\n        });\n    };\n    return ServiceWorkerClass;\n}());\nexport { ServiceWorkerClass };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}